
407vet6sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b720  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b198  0800b8b0  0800b8b0  0000c8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036a48  08036a48  00038068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08036a48  08036a48  00037a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08036a50  08036a50  00038068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036a50  08036a50  00037a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08036a54  08036a54  00037a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08036a58  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00038068  2**0
                  CONTENTS
 10 .bss          0000084c  20000068  20000068  00038068  2**2
                  ALLOC
 11 ._user_heap_stack 0000a004  200008b4  200008b4  00038068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00038068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f36  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a03  00000000  00000000  0004cfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  000509d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d46  00000000  00000000  00051b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002520d  00000000  00000000  000528a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a50d  00000000  00000000  00077ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce3a3  00000000  00000000  00091fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00160363  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d30  00000000  00000000  001603a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001650d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b898 	.word	0x0800b898

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800b898 	.word	0x0800b898

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <MX_DMA_Init+0x78>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_DMA_Init+0x78>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_DMA_Init+0x78>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	200f      	movs	r0, #15
 80005e0:	f001 f84d 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e4:	200f      	movs	r0, #15
 80005e6:	f001 f866 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	203b      	movs	r0, #59	@ 0x3b
 80005f0:	f001 f845 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f4:	203b      	movs	r0, #59	@ 0x3b
 80005f6:	f001 f85e 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2045      	movs	r0, #69	@ 0x45
 8000600:	f001 f83d 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000604:	2045      	movs	r0, #69	@ 0x45
 8000606:	f001 f856 	bl	80016b6 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	@ 0x28
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b2a      	ldr	r3, [pc, #168]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a29      	ldr	r2, [pc, #164]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <MX_GPIO_Init+0xc4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_GPIO_Init+0xc4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <MX_GPIO_Init+0xc4>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_GPIO_Init+0xc4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_GPIO_Init+0xc4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_GPIO_Init+0xc4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD15 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 80006ba:	f248 0308 	movw	r3, #32776	@ 0x8008
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_GPIO_Init+0xc8>)
 80006d0:	f001 fbaa 	bl	8001e28 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_I2S2_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <MX_I2S2_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_I2S2_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_I2S2_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_I2S2_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_I2S2_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_I2S2_Init+0x54>)
 800070a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800070e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_I2S2_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_I2S2_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_I2S2_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_I2S2_Init+0x54>)
 8000724:	f001 fd34 	bl	8002190 <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 fb3f 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000084 	.word	0x20000084
 800073c:	40003800 	.word	0x40003800

08000740 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08e      	sub	sp, #56	@ 0x38
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a4c      	ldr	r2, [pc, #304]	@ (800089c <HAL_I2S_MspInit+0x15c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	f040 8090 	bne.w	8000892 <HAL_I2S_MspInit+0x152>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000776:	23c0      	movs	r3, #192	@ 0xc0
 8000778:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4618      	mov	r0, r3
 8000784:	f002 ff18 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800078e:	f000 fb0f 	bl	8000db0 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b42      	ldr	r3, [pc, #264]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a41      	ldr	r2, [pc, #260]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a3a      	ldr	r2, [pc, #232]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a33      	ldr	r2, [pc, #204]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <HAL_I2S_MspInit+0x160>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007e6:	2308      	movs	r3, #8
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f6:	2305      	movs	r3, #5
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	4828      	ldr	r0, [pc, #160]	@ (80008a4 <HAL_I2S_MspInit+0x164>)
 8000802:	f001 fb11 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000806:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000818:	2305      	movs	r3, #5
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4821      	ldr	r0, [pc, #132]	@ (80008a8 <HAL_I2S_MspInit+0x168>)
 8000824:	f001 fb00 	bl	8001e28 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000828:	4b20      	ldr	r3, [pc, #128]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 800082a:	4a21      	ldr	r2, [pc, #132]	@ (80008b0 <HAL_I2S_MspInit+0x170>)
 800082c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800082e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 8000836:	2240      	movs	r2, #64	@ 0x40
 8000838:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 8000842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000866:	4811      	ldr	r0, [pc, #68]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 8000868:	f000 ff40 	bl	80016ec <HAL_DMA_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_I2S_MspInit+0x136>
    {
      Error_Handler();
 8000872:	f000 fa9d 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 800087a:	639a      	str	r2, [r3, #56]	@ 0x38
 800087c:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <HAL_I2S_MspInit+0x16c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2024      	movs	r0, #36	@ 0x24
 8000888:	f000 fef9 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800088c:	2024      	movs	r0, #36	@ 0x24
 800088e:	f000 ff12 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3738      	adds	r7, #56	@ 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40003800 	.word	0x40003800
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	200000cc 	.word	0x200000cc
 80008b0:	40026070 	.word	0x40026070

080008b4 <SDCard_ShowInfo>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void SDCard_ShowInfo(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
	// SD卡信息结构体变量
	HAL_SD_CardInfoTypeDef cardInfo;
	HAL_StatusTypeDef res = HAL_SD_GetCardInfo(&hsd, &cardInfo);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4821      	ldr	r0, [pc, #132]	@ (8000944 <SDCard_ShowInfo+0x90>)
 80008c0:	f003 fd60 	bl	8004384 <HAL_SD_GetCardInfo>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res != HAL_OK) {
 80008ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <SDCard_ShowInfo+0x26>
		printf("HAL_SD_GetCardInfo() error\r\n");
 80008d2:	481d      	ldr	r0, [pc, #116]	@ (8000948 <SDCard_ShowInfo+0x94>)
 80008d4:	f00a f97e 	bl	800abd4 <puts>
 80008d8:	e030      	b.n	800093c <SDCard_ShowInfo+0x88>
		return;
	}
	printf("\r\n*** HAL_SD_GetCardInfo() info ***\r\n");
 80008da:	481c      	ldr	r0, [pc, #112]	@ (800094c <SDCard_ShowInfo+0x98>)
 80008dc:	f00a f97a 	bl	800abd4 <puts>
	printf("Card Type= %ld\r\n", cardInfo.CardType);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4619      	mov	r1, r3
 80008e4:	481a      	ldr	r0, [pc, #104]	@ (8000950 <SDCard_ShowInfo+0x9c>)
 80008e6:	f00a f90d 	bl	800ab04 <iprintf>
	printf("Card Version= %ld\r\n", cardInfo.CardVersion);
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	4619      	mov	r1, r3
 80008ee:	4819      	ldr	r0, [pc, #100]	@ (8000954 <SDCard_ShowInfo+0xa0>)
 80008f0:	f00a f908 	bl	800ab04 <iprintf>
	printf("Card Class= %ld\r\n", cardInfo.Class);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4817      	ldr	r0, [pc, #92]	@ (8000958 <SDCard_ShowInfo+0xa4>)
 80008fa:	f00a f903 	bl	800ab04 <iprintf>
	printf("Relative Card Address= %ld\r\n", cardInfo.RelCardAdd);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	4619      	mov	r1, r3
 8000902:	4816      	ldr	r0, [pc, #88]	@ (800095c <SDCard_ShowInfo+0xa8>)
 8000904:	f00a f8fe 	bl	800ab04 <iprintf>
	printf("Block Count= %ld\r\n", cardInfo.BlockNbr);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	4619      	mov	r1, r3
 800090c:	4814      	ldr	r0, [pc, #80]	@ (8000960 <SDCard_ShowInfo+0xac>)
 800090e:	f00a f8f9 	bl	800ab04 <iprintf>
	printf("Block Size(Bytes)= %ld\r\n", cardInfo.BlockSize);
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	4619      	mov	r1, r3
 8000916:	4813      	ldr	r0, [pc, #76]	@ (8000964 <SDCard_ShowInfo+0xb0>)
 8000918:	f00a f8f4 	bl	800ab04 <iprintf>
	printf("LogiBlockCount= %ld\r\n", cardInfo.LogBlockNbr);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	4619      	mov	r1, r3
 8000920:	4811      	ldr	r0, [pc, #68]	@ (8000968 <SDCard_ShowInfo+0xb4>)
 8000922:	f00a f8ef 	bl	800ab04 <iprintf>
	printf("LogiBlockSize(Bytes)= %ld\r\n", cardInfo.LogBlockSize);
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	4619      	mov	r1, r3
 800092a:	4810      	ldr	r0, [pc, #64]	@ (800096c <SDCard_ShowInfo+0xb8>)
 800092c:	f00a f8ea 	bl	800ab04 <iprintf>
	printf("SD Card Capacity(MB)= %ld\r\n", cardInfo.BlockNbr >> 1 >> 10);
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	0adb      	lsrs	r3, r3, #11
 8000934:	4619      	mov	r1, r3
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <SDCard_ShowInfo+0xbc>)
 8000938:	f00a f8e4 	bl	800ab04 <iprintf>
}
 800093c:	3728      	adds	r7, #40	@ 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000012c 	.word	0x2000012c
 8000948:	0800b8b0 	.word	0x0800b8b0
 800094c:	0800b8cc 	.word	0x0800b8cc
 8000950:	0800b8f4 	.word	0x0800b8f4
 8000954:	0800b908 	.word	0x0800b908
 8000958:	0800b91c 	.word	0x0800b91c
 800095c:	0800b930 	.word	0x0800b930
 8000960:	0800b950 	.word	0x0800b950
 8000964:	0800b964 	.word	0x0800b964
 8000968:	0800b980 	.word	0x0800b980
 800096c:	0800b998 	.word	0x0800b998
 8000970:	0800b9b4 	.word	0x0800b9b4

08000974 <__io_putchar>:
}
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	/* Implementation of __io_putchar */
	/* e.g. write a character to the UART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFFFFFF);
 800097c:	1d39      	adds	r1, r7, #4
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	2201      	movs	r2, #1
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <__io_putchar+0x20>)
 8000986:	f004 fadb 	bl	8004f40 <HAL_UART_Transmit>

	return ch;
 800098a:	687b      	ldr	r3, [r7, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000274 	.word	0x20000274

08000998 <__io_getchar>:
int __io_getchar(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	/* Implementation of __io_getchar */
	char rxChar;

	// This loops in case of HAL timeout, but if an ok or error occurs, we continue
	while (HAL_UART_Receive(&huart1, (uint8_t*) &rxChar, 1, 0xFFFFFFFF)
 800099e:	bf00      	nop
 80009a0:	1df9      	adds	r1, r7, #7
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	2201      	movs	r2, #1
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <__io_getchar+0x28>)
 80009aa:	f004 fb54 	bl	8005056 <HAL_UART_Receive>
 80009ae:	4603      	mov	r3, r0
			== HAL_TIMEOUT)
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d0f5      	beq.n	80009a0 <__io_getchar+0x8>
		;

	return rxChar;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000274 	.word	0x20000274

080009c4 <ListFiles>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ListFiles(const TCHAR *path) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0d6      	sub	sp, #344	@ 0x158
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80009ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80009d2:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;               // 目录对象
	FILINFO fno;           // 文件信息结构体

	// 打开目录
	res = f_opendir(&dir, path);
 80009d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80009d8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80009dc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009e0:	6819      	ldr	r1, [r3, #0]
 80009e2:	4610      	mov	r0, r2
 80009e4:	f009 fa9c 	bl	8009f20 <f_opendir>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	if (res != FR_OK) {
 80009ee:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d006      	beq.n	8000a04 <ListFiles+0x40>
		printf("打开目录失败！错误码: %d\r\n", res);
 80009f6:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80009fa:	4619      	mov	r1, r3
 80009fc:	4826      	ldr	r0, [pc, #152]	@ (8000a98 <ListFiles+0xd4>)
 80009fe:	f00a f881 	bl	800ab04 <iprintf>
 8000a02:	e045      	b.n	8000a90 <ListFiles+0xcc>
		return;
	}

	printf("\r\n目录 %s 下的文件列表：\r\n", path);
 8000a04:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000a08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000a0c:	6819      	ldr	r1, [r3, #0]
 8000a0e:	4823      	ldr	r0, [pc, #140]	@ (8000a9c <ListFiles+0xd8>)
 8000a10:	f00a f878 	bl	800ab04 <iprintf>
	printf("----------------------------------------\r\n");
 8000a14:	4822      	ldr	r0, [pc, #136]	@ (8000aa0 <ListFiles+0xdc>)
 8000a16:	f00a f8dd 	bl	800abd4 <puts>

	// 循环读取目录项（f_readdir返回FR_OK且fno.fname不为空时继续）
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 8000a1a:	e01c      	b.n	8000a56 <ListFiles+0x92>
		// 判断是否为子目录（文件名以'/'结尾，或fno.fattrib包含AM_DIR属性）
		if (fno.fattrib & AM_DIR) {
 8000a1c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000a20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000a24:	7a1b      	ldrb	r3, [r3, #8]
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <ListFiles+0x7a>
			printf(" [目录]  %s\r\n", fno.fname);  // 子目录
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	3316      	adds	r3, #22
 8000a34:	4619      	mov	r1, r3
 8000a36:	481b      	ldr	r0, [pc, #108]	@ (8000aa4 <ListFiles+0xe0>)
 8000a38:	f00a f864 	bl	800ab04 <iprintf>
 8000a3c:	e00b      	b.n	8000a56 <ListFiles+0x92>
		} else {
			// 普通文件：输出文件名和大小（单位：字节）
			printf(" [文件]  %s  (大小: %ld 字节)\r\n", fno.fname, fno.fsize);
 8000a3e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000a42:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	3316      	adds	r3, #22
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4815      	ldr	r0, [pc, #84]	@ (8000aa8 <ListFiles+0xe4>)
 8000a52:	f00a f857 	bl	800ab04 <iprintf>
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 8000a56:	f107 0208 	add.w	r2, r7, #8
 8000a5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f009 fb40 	bl	800a0e6 <f_readdir>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d106      	bne.n	8000a7a <ListFiles+0xb6>
 8000a6c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000a70:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000a74:	7d9b      	ldrb	r3, [r3, #22]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1d0      	bne.n	8000a1c <ListFiles+0x58>
		}
	}

	printf("----------------------------------------\r\n");
 8000a7a:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <ListFiles+0xdc>)
 8000a7c:	f00a f8aa 	bl	800abd4 <puts>
	printf("目录遍历完成\r\n");
 8000a80:	480a      	ldr	r0, [pc, #40]	@ (8000aac <ListFiles+0xe8>)
 8000a82:	f00a f8a7 	bl	800abd4 <puts>

	// 关闭目录
	f_closedir(&dir);
 8000a86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f009 fb05 	bl	800a09a <f_closedir>
}
 8000a90:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	0800ba90 	.word	0x0800ba90
 8000a9c:	0800bab8 	.word	0x0800bab8
 8000aa0:	0800badc 	.word	0x0800badc
 8000aa4:	0800bb08 	.word	0x0800bb08
 8000aa8:	0800bb18 	.word	0x0800bb18
 8000aac:	0800bb40 	.word	0x0800bb40

08000ab0 <ReadPCMFile>:
			printf("\r\n");
		}
	}
	printf("\r\n"); // 最后补一个换行
}
void ReadPCMFile(const char *filename) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	f6ad 2d48 	subw	sp, sp, #2632	@ 0xa48
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8000abc:	f6a3 2344 	subw	r3, r3, #2628	@ 0xa44
 8000ac0:	6018      	str	r0, [r3, #0]
	FRESULT res;
	FIL file;
	UINT bytesRead;
	uint8_t buffer[2048];  // 读取缓冲区，大小可根据需要调整
	uint32_t totalRead = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3a44 	str.w	r3, [r7, #2628]	@ 0xa44

	// 打开文件（只读模式）
	res = f_open(&file, filename, FA_READ);
 8000ac8:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8000acc:	f6a3 2344 	subw	r3, r3, #2628	@ 0xa44
 8000ad0:	f507 6001 	add.w	r0, r7, #2064	@ 0x810
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	6819      	ldr	r1, [r3, #0]
 8000ad8:	f008 fa0a 	bl	8008ef0 <f_open>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f887 3a43 	strb.w	r3, [r7, #2627]	@ 0xa43
	if (res != FR_OK) {
 8000ae2:	f897 3a43 	ldrb.w	r3, [r7, #2627]	@ 0xa43
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00a      	beq.n	8000b00 <ReadPCMFile+0x50>
		printf("打开文件 %s 失败！错误码: %d\r\n", filename, res);
 8000aea:	f897 2a43 	ldrb.w	r2, [r7, #2627]	@ 0xa43
 8000aee:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8000af2:	f6a3 2344 	subw	r3, r3, #2628	@ 0xa44
 8000af6:	6819      	ldr	r1, [r3, #0]
 8000af8:	482d      	ldr	r0, [pc, #180]	@ (8000bb0 <ReadPCMFile+0x100>)
 8000afa:	f00a f803 	bl	800ab04 <iprintf>
 8000afe:	e052      	b.n	8000ba6 <ReadPCMFile+0xf6>
		return;
	}

	printf("成功打开文件 %s，开始读取...\r\n", filename);
 8000b00:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8000b04:	f6a3 2344 	subw	r3, r3, #2628	@ 0xa44
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	482a      	ldr	r0, [pc, #168]	@ (8000bb4 <ReadPCMFile+0x104>)
 8000b0c:	f009 fffa 	bl	800ab04 <iprintf>
	printf("文件大小: %ld 字节\r\n", f_size(&file));
 8000b10:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8000b14:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4826      	ldr	r0, [pc, #152]	@ (8000bb8 <ReadPCMFile+0x108>)
 8000b1e:	f009 fff1 	bl	800ab04 <iprintf>

	// 循环读取文件内容
	do {
		// 读取数据到缓冲区
		res = f_read(&file, buffer, sizeof(buffer), &bytesRead);
 8000b22:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 8000b26:	f107 010c 	add.w	r1, r7, #12
 8000b2a:	f507 6001 	add.w	r0, r7, #2064	@ 0x810
 8000b2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b32:	f008 fc90 	bl	8009456 <f_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3a43 	strb.w	r3, [r7, #2627]	@ 0xa43
		if (res != FR_OK) {
 8000b3c:	f897 3a43 	ldrb.w	r3, [r7, #2627]	@ 0xa43
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <ReadPCMFile+0xa2>
			printf("读取文件失败！错误码: %d\r\n", res);
 8000b44:	f897 3a43 	ldrb.w	r3, [r7, #2627]	@ 0xa43
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481c      	ldr	r0, [pc, #112]	@ (8000bbc <ReadPCMFile+0x10c>)
 8000b4c:	f009 ffda 	bl	800ab04 <iprintf>
			break;
 8000b50:	e01f      	b.n	8000b92 <ReadPCMFile+0xe2>
		}
		if (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_READY) {
 8000b52:	481b      	ldr	r0, [pc, #108]	@ (8000bc0 <ReadPCMFile+0x110>)
 8000b54:	f001 fd34 	bl	80025c0 <HAL_I2S_GetState>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d107      	bne.n	8000b6e <ReadPCMFile+0xbe>
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) buffer, sizeof(buffer));
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b66:	4619      	mov	r1, r3
 8000b68:	4815      	ldr	r0, [pc, #84]	@ (8000bc0 <ReadPCMFile+0x110>)
 8000b6a:	f001 fc51 	bl	8002410 <HAL_I2S_Transmit_DMA>

		}
		//PrintHexData(buffer, bytesRead);
		// 累计读取字节数
		totalRead += bytesRead;
 8000b6e:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8000b72:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	@ 0xa44
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f8c7 3a44 	str.w	r3, [r7, #2628]	@ 0xa44
		// 示例：打印读取进度
		if (totalRead % (1024 * 10) == 0) {  // 每读取10KB打印一次进度
			//printf("已读取: %ld KB\r\n", totalRead / 1024);
		}

	} while (bytesRead == sizeof(buffer));  // 直到读取的字节数小于缓冲区大小
 8000b82:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8000b86:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b90:	d0c7      	beq.n	8000b22 <ReadPCMFile+0x72>

	// 关闭文件
	f_close(&file);
 8000b92:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000b96:	4618      	mov	r0, r3
 8000b98:	f008 ff8f 	bl	8009aba <f_close>

	printf("文件读取完成，总读取字节数: %ld 字节\r\n", totalRead);
 8000b9c:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	@ 0xa44
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <ReadPCMFile+0x114>)
 8000ba2:	f009 ffaf 	bl	800ab04 <iprintf>
}
 8000ba6:	f607 2748 	addw	r7, r7, #2632	@ 0xa48
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	0800bb60 	.word	0x0800bb60
 8000bb4:	0800bb8c 	.word	0x0800bb8c
 8000bb8:	0800bbb8 	.word	0x0800bbb8
 8000bbc:	0800bbd4 	.word	0x0800bbd4
 8000bc0:	20000084 	.word	0x20000084
 8000bc4:	0800bbfc 	.word	0x0800bbfc

08000bc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bce:	f000 fbe5 	bl	800139c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bd2:	f000 f883 	bl	8000cdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bd6:	f7ff fd1f 	bl	8000618 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bda:	f7ff fcdf 	bl	800059c <MX_DMA_Init>
	MX_SDIO_SD_Init();
 8000bde:	f000 f8ed 	bl	8000dbc <MX_SDIO_SD_Init>
	MX_USART1_UART_Init();
 8000be2:	f000 fb3f 	bl	8001264 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8000be6:	f005 fb71 	bl	80062cc <MX_FATFS_Init>
	MX_I2S2_Init();
 8000bea:	f7ff fd7b 	bl	80006e4 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */
	FRESULT retSD = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4929      	ldr	r1, [pc, #164]	@ (8000c98 <main+0xd0>)
 8000bf2:	482a      	ldr	r0, [pc, #168]	@ (8000c9c <main+0xd4>)
 8000bf4:	f008 f936 	bl	8008e64 <f_mount>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
	printf("%u\r\n", retSD);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4827      	ldr	r0, [pc, #156]	@ (8000ca0 <main+0xd8>)
 8000c02:	f009 ff7f 	bl	800ab04 <iprintf>
	printf("Compilation Date: %s %s\n", __DATE__, __TIME__);
 8000c06:	4a27      	ldr	r2, [pc, #156]	@ (8000ca4 <main+0xdc>)
 8000c08:	4927      	ldr	r1, [pc, #156]	@ (8000ca8 <main+0xe0>)
 8000c0a:	4828      	ldr	r0, [pc, #160]	@ (8000cac <main+0xe4>)
 8000c0c:	f009 ff7a 	bl	800ab04 <iprintf>
	// mount SD card
	//   int retSD = f_mount(&SDFatFS, (TCHAR const *)SDPath, 1);
	if (retSD == FR_OK) {
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d137      	bne.n	8000c86 <main+0xbe>

		ListFiles("/");
 8000c16:	4826      	ldr	r0, [pc, #152]	@ (8000cb0 <main+0xe8>)
 8000c18:	f7ff fed4 	bl	80009c4 <ListFiles>

		ReadPCMFile("1.wav");
 8000c1c:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <main+0xec>)
 8000c1e:	f7ff ff47 	bl	8000ab0 <ReadPCMFile>

		printf("》Filesystem mount ok, now you can read/write files.\r\n");
 8000c22:	4825      	ldr	r0, [pc, #148]	@ (8000cb8 <main+0xf0>)
 8000c24:	f009 ffd6 	bl	800abd4 <puts>
		// 创建或者打开文件 SD_Card_test.txt
		retSD = f_open(&SDFile, "SD_Card_test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000c28:	2212      	movs	r2, #18
 8000c2a:	4924      	ldr	r1, [pc, #144]	@ (8000cbc <main+0xf4>)
 8000c2c:	4824      	ldr	r0, [pc, #144]	@ (8000cc0 <main+0xf8>)
 8000c2e:	f008 f95f 	bl	8008ef0 <f_open>
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
		if (retSD == FR_OK) {
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d11e      	bne.n	8000c7a <main+0xb2>
			printf("》open/create SD_Card_test.txt OK, write data to it.\r\n");
 8000c3c:	4821      	ldr	r0, [pc, #132]	@ (8000cc4 <main+0xfc>)
 8000c3e:	f009 ffc9 	bl	800abd4 <puts>

			// Move to end of the file to append data
			retSD = f_lseek(&SDFile, f_size(&SDFile));
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <main+0xf8>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	4619      	mov	r1, r3
 8000c48:	481d      	ldr	r0, [pc, #116]	@ (8000cc0 <main+0xf8>)
 8000c4a:	f008 ff60 	bl	8009b0e <f_lseek>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
			if (retSD == FR_OK) {
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d107      	bne.n	8000c68 <main+0xa0>
				f_printf(&SDFile, "SD card FATFS test.\r\n");
 8000c58:	491b      	ldr	r1, [pc, #108]	@ (8000cc8 <main+0x100>)
 8000c5a:	4819      	ldr	r0, [pc, #100]	@ (8000cc0 <main+0xf8>)
 8000c5c:	f009 fb2e 	bl	800a2bc <f_printf>
				printf(
 8000c60:	481a      	ldr	r0, [pc, #104]	@ (8000ccc <main+0x104>)
 8000c62:	f009 ffb7 	bl	800abd4 <puts>
 8000c66:	e004      	b.n	8000c72 <main+0xaa>
						"》write data to file OK, write bytes: SD card FATFS test.\r\n");
			} else {
				printf("!! File Write error: (%d)\n", retSD);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4818      	ldr	r0, [pc, #96]	@ (8000cd0 <main+0x108>)
 8000c6e:	f009 ff49 	bl	800ab04 <iprintf>
			}
			/* close file */
			f_close(&SDFile);
 8000c72:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <main+0xf8>)
 8000c74:	f008 ff21 	bl	8009aba <f_close>
 8000c78:	e00a      	b.n	8000c90 <main+0xc8>
		} else {
			printf("!! open/Create file SD_Card_test.txt Fail (%d).\r\n",
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4815      	ldr	r0, [pc, #84]	@ (8000cd4 <main+0x10c>)
 8000c80:	f009 ff40 	bl	800ab04 <iprintf>
 8000c84:	e004      	b.n	8000c90 <main+0xc8>
					retSD);
		}
	} else {
		printf("!! SDcard mount filesystem error。(%d)\r\n", retSD);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4813      	ldr	r0, [pc, #76]	@ (8000cd8 <main+0x110>)
 8000c8c:	f009 ff3a 	bl	800ab04 <iprintf>
	}
	// 不带fatfs调试函数
	SDCard_ShowInfo();
 8000c90:	f7ff fe10 	bl	80008b4 <SDCard_ShowInfo>
//	if (HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) audioBuffer, BUFFER_SIZE)
//			!= HAL_OK) {
//		Error_Handler();
//	}

	while (1) {
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <main+0xcc>
 8000c98:	200002c4 	.word	0x200002c4
 8000c9c:	200002c8 	.word	0x200002c8
 8000ca0:	0800bc34 	.word	0x0800bc34
 8000ca4:	0800bc3c 	.word	0x0800bc3c
 8000ca8:	0800bc48 	.word	0x0800bc48
 8000cac:	0800bc54 	.word	0x0800bc54
 8000cb0:	0800bc70 	.word	0x0800bc70
 8000cb4:	0800bc74 	.word	0x0800bc74
 8000cb8:	0800bc7c 	.word	0x0800bc7c
 8000cbc:	0800bcb4 	.word	0x0800bcb4
 8000cc0:	200004fc 	.word	0x200004fc
 8000cc4:	0800bcc8 	.word	0x0800bcc8
 8000cc8:	0800bd00 	.word	0x0800bd00
 8000ccc:	0800bd18 	.word	0x0800bd18
 8000cd0:	0800bd54 	.word	0x0800bd54
 8000cd4:	0800bd70 	.word	0x0800bd70
 8000cd8:	0800bda4 	.word	0x0800bda4

08000cdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	@ 0x50
 8000ce0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	@ 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00a f852 	bl	800ad94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a27      	ldr	r2, [pc, #156]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <SystemClock_Config+0xd0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a21      	ldr	r2, [pc, #132]	@ (8000dac <SystemClock_Config+0xd0>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <SystemClock_Config+0xd0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d40:	2310      	movs	r3, #16
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000d50:	23a8      	movs	r3, #168	@ 0xa8
 8000d52:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 ffd1 	bl	8002d08 <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x94>
		Error_Handler();
 8000d6c:	f000 f820 	bl	8000db0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2302      	movs	r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d80:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d86:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fa32 	bl	80031f8 <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xc2>
		Error_Handler();
 8000d9a:	f000 f809 	bl	8000db0 <Error_Handler>
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3750      	adds	r7, #80	@ 0x50
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40007000 	.word	0x40007000

08000db0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <MX_SDIO_SD_Init+0x44>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dde:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000de8:	2205      	movs	r2, #5
 8000dea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <MX_SDIO_SD_Init+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	2000012c 	.word	0x2000012c
 8000e00:	40012c00 	.word	0x40012c00

08000e04 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a68      	ldr	r2, [pc, #416]	@ (8000fc4 <HAL_SD_MspInit+0x1c0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f040 80c9 	bne.w	8000fba <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	4b66      	ldr	r3, [pc, #408]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e30:	4a65      	ldr	r2, [pc, #404]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e32:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e36:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e38:	4b63      	ldr	r3, [pc, #396]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e54:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e68:	4a57      	ldr	r2, [pc, #348]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e70:	4b55      	ldr	r3, [pc, #340]	@ (8000fc8 <HAL_SD_MspInit+0x1c4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e7c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000e80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	484c      	ldr	r0, [pc, #304]	@ (8000fcc <HAL_SD_MspInit+0x1c8>)
 8000e9a:	f000 ffc5 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <HAL_SD_MspInit+0x1cc>)
 8000eba:	f000 ffb5 	bl	8001e28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ebe:	4b45      	ldr	r3, [pc, #276]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000ec0:	4a45      	ldr	r2, [pc, #276]	@ (8000fd8 <HAL_SD_MspInit+0x1d4>)
 8000ec2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000ec4:	4b43      	ldr	r3, [pc, #268]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000ec6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eca:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ecc:	4b41      	ldr	r3, [pc, #260]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed2:	4b40      	ldr	r3, [pc, #256]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ede:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000ee2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ee6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000eea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eee:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000efc:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f02:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000f04:	2203      	movs	r2, #3
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000f08:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000f0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000f12:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f16:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000f18:	482e      	ldr	r0, [pc, #184]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000f1a:	f000 fbe7 	bl	80016ec <HAL_DMA_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000f24:	f7ff ff44 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f2e:	4a29      	ldr	r2, [pc, #164]	@ (8000fd4 <HAL_SD_MspInit+0x1d0>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f36:	4a2a      	ldr	r2, [pc, #168]	@ (8000fe0 <HAL_SD_MspInit+0x1dc>)
 8000f38:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f3c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f40:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f44:	2240      	movs	r2, #64	@ 0x40
 8000f46:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f54:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f56:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f64:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f68:	2220      	movs	r2, #32
 8000f6a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f8e:	4813      	ldr	r0, [pc, #76]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000f90:	f000 fbac 	bl	80016ec <HAL_DMA_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000f9a:	f7ff ff09 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_SD_MspInit+0x1d8>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2031      	movs	r0, #49	@ 0x31
 8000fb0:	f000 fb65 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000fb4:	2031      	movs	r0, #49	@ 0x31
 8000fb6:	f000 fb7e 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	200001b0 	.word	0x200001b0
 8000fd8:	40026458 	.word	0x40026458
 8000fdc:	20000210 	.word	0x20000210
 8000fe0:	400264a0 	.word	0x400264a0

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f9d9 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <DMA1_Stream4_IRQHandler+0x10>)
 800109a:	f000 fc4f 	bl	800193c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000cc 	.word	0x200000cc

080010a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <SPI2_IRQHandler+0x10>)
 80010ae:	f001 fa53 	bl	8002558 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000084 	.word	0x20000084

080010bc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <SDIO_IRQHandler+0x10>)
 80010c2:	f002 fe2b 	bl	8003d1c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000012c 	.word	0x2000012c

080010d0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010d4:	4802      	ldr	r0, [pc, #8]	@ (80010e0 <DMA2_Stream3_IRQHandler+0x10>)
 80010d6:	f000 fc31 	bl	800193c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001b0 	.word	0x200001b0

080010e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010e8:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <DMA2_Stream6_IRQHandler+0x10>)
 80010ea:	f000 fc27 	bl	800193c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000210 	.word	0x20000210

080010f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e00a      	b.n	8001120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110a:	f7ff fc45 	bl	8000998 <__io_getchar>
 800110e:	4601      	mov	r1, r0
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf0      	blt.n	800110a <_read+0x12>
  }

  return len;
 8001128:	687b      	ldr	r3, [r7, #4]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e009      	b.n	8001158 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fc11 	bl	8000974 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf1      	blt.n	8001144 <_write+0x12>
  }
  return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_close>:

int _close(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001192:	605a      	str	r2, [r3, #4]
  return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_isatty>:

int _isatty(int file)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f009 fe14 	bl	800ae30 <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20020000 	.word	0x20020000
 8001234:	00006000 	.word	0x00006000
 8001238:	20000270 	.word	0x20000270
 800123c:	200008b8 	.word	0x200008b8

08001240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <SystemInit+0x20>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <SystemInit+0x20>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART1_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800129c:	f003 fe00 	bl	8004ea0 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f7ff fd83 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000274 	.word	0x20000274
 80012b4:	40011000 	.word	0x40011000

080012b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	@ (800133c <HAL_UART_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12c      	bne.n	8001334 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_UART_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <HAL_UART_MspInit+0x88>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <HAL_UART_MspInit+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001312:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001324:	2307      	movs	r3, #7
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <HAL_UART_MspInit+0x8c>)
 8001330:	f000 fd7a 	bl	8001e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40011000 	.word	0x40011000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001380 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800134c:	f7ff ff78 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f009 fd61 	bl	800ae3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff fc25 	bl	8000bc8 <main>
  bx  lr    
 800137e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800138c:	08036a58 	.word	0x08036a58
  ldr r2, =_sbss
 8001390:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001394:	200008b4 	.word	0x200008b4

08001398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f94f 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fe08 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f967 	bl	80016d2 <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f92f 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	@ (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000000 	.word	0x20000000
 8001438:	20000008 	.word	0x20000008
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	200002bc 	.word	0x200002bc

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200002bc 	.word	0x200002bc

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4907      	ldr	r1, [pc, #28]	@ (8001564 <__NVIC_EnableIRQ+0x38>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	@ (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	@ (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	@ 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff8e 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff29 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff3e 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff8e 	bl	80015bc <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5d 	bl	8001568 <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff31 	bl	800152c <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff feb6 	bl	8001468 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e099      	b.n	800183c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001728:	e00f      	b.n	800174a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172a:	f7ff fe9d 	bl	8001468 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b05      	cmp	r3, #5
 8001736:	d908      	bls.n	800174a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e078      	b.n	800183c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e8      	bne.n	800172a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <HAL_DMA_Init+0x158>)
 8001764:	4013      	ands	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	4313      	orrs	r3, r2
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f023 0307 	bic.w	r3, r3, #7
 80017ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d117      	bne.n	800180e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fa9d 	bl	8001d30 <DMA_CheckFifoParam>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800180a:	2301      	movs	r3, #1
 800180c:	e016      	b.n	800183c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fa54 	bl	8001cc4 <DMA_CalcBaseAndBitshift>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001824:	223f      	movs	r2, #63	@ 0x3f
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f010803f 	.word	0xf010803f

08001848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_DMA_Start_IT+0x26>
 800186a:	2302      	movs	r3, #2
 800186c:	e040      	b.n	80018f0 <HAL_DMA_Start_IT+0xa8>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d12f      	bne.n	80018e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f9e6 	bl	8001c68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	223f      	movs	r2, #63	@ 0x3f
 80018a2:	409a      	lsls	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0216 	orr.w	r2, r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0208 	orr.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e005      	b.n	80018ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
 80018ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d004      	beq.n	8001916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00c      	b.n	8001930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2205      	movs	r2, #5
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001948:	4b8e      	ldr	r3, [pc, #568]	@ (8001b84 <HAL_DMA_IRQHandler+0x248>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a8e      	ldr	r2, [pc, #568]	@ (8001b88 <HAL_DMA_IRQHandler+0x24c>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	0a9b      	lsrs	r3, r3, #10
 8001954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001966:	2208      	movs	r2, #8
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0204 	bic.w	r2, r2, #4
 800198e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001994:	2208      	movs	r2, #8
 8001996:	409a      	lsls	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ac:	2201      	movs	r2, #1
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d012      	beq.n	80019de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ca:	2201      	movs	r2, #1
 80019cc:	409a      	lsls	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e2:	2204      	movs	r2, #4
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d012      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a00:	2204      	movs	r2, #4
 8001a02:	409a      	lsls	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0c:	f043 0204 	orr.w	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a18:	2210      	movs	r2, #16
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d043      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d03c      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a36:	2210      	movs	r2, #16
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d018      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d024      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
 8001a6a:	e01f      	b.n	8001aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d01b      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
 8001a7c:	e016      	b.n	8001aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d107      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0208 	bic.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 808f 	beq.w	8001bdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8087 	beq.w	8001bdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d136      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0216 	bic.w	r2, r2, #22
 8001af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <HAL_DMA_IRQHandler+0x1da>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0208 	bic.w	r2, r2, #8
 8001b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	223f      	movs	r2, #63	@ 0x3f
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d07e      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
        }
        return;
 8001b52:	e079      	b.n	8001c48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01d      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10d      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
 8001b80:	e02c      	b.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000
 8001b88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d023      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
 8001b9c:	e01e      	b.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10f      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0210 	bic.w	r2, r2, #16
 8001bba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d032      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d307      	bcc.n	8001c24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f2      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x2cc>
 8001c22:	e000      	b.n	8001c26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
 8001c46:	e000      	b.n	8001c4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c48:	bf00      	nop
    }
  }
}
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b40      	cmp	r3, #64	@ 0x40
 8001c94:	d108      	bne.n	8001ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ca6:	e007      	b.n	8001cb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	3b10      	subs	r3, #16
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <DMA_CalcBaseAndBitshift+0x64>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cde:	4a13      	ldr	r2, [pc, #76]	@ (8001d2c <DMA_CalcBaseAndBitshift+0x68>)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d909      	bls.n	8001d06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cfa:	f023 0303 	bic.w	r3, r3, #3
 8001cfe:	1d1a      	adds	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d04:	e007      	b.n	8001d16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	aaaaaaab 	.word	0xaaaaaaab
 8001d2c:	0800be30 	.word	0x0800be30

08001d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11f      	bne.n	8001d8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d856      	bhi.n	8001dfe <DMA_CheckFifoParam+0xce>
 8001d50:	a201      	add	r2, pc, #4	@ (adr r2, 8001d58 <DMA_CheckFifoParam+0x28>)
 8001d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d56:	bf00      	nop
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001d7b 	.word	0x08001d7b
 8001d60:	08001d69 	.word	0x08001d69
 8001d64:	08001dff 	.word	0x08001dff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d046      	beq.n	8001e02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d78:	e043      	b.n	8001e02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d82:	d140      	bne.n	8001e06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d88:	e03d      	b.n	8001e06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d92:	d121      	bne.n	8001dd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d837      	bhi.n	8001e0a <DMA_CheckFifoParam+0xda>
 8001d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001da0 <DMA_CheckFifoParam+0x70>)
 8001d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da0:	08001db1 	.word	0x08001db1
 8001da4:	08001db7 	.word	0x08001db7
 8001da8:	08001db1 	.word	0x08001db1
 8001dac:	08001dc9 	.word	0x08001dc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
      break;
 8001db4:	e030      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d025      	beq.n	8001e0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc6:	e022      	b.n	8001e0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dd0:	d11f      	bne.n	8001e12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dd6:	e01c      	b.n	8001e12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d903      	bls.n	8001de6 <DMA_CheckFifoParam+0xb6>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d003      	beq.n	8001dec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001de4:	e018      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dea:	e015      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00e      	beq.n	8001e16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001dfc:	e00b      	b.n	8001e16 <DMA_CheckFifoParam+0xe6>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e00a      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      break;
 8001e02:	bf00      	nop
 8001e04:	e008      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
 8001e08:	e006      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e004      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e002      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e12:	bf00      	nop
 8001e14:	e000      	b.n	8001e18 <DMA_CheckFifoParam+0xe8>
      break;
 8001e16:	bf00      	nop
    }
  } 
  
  return status; 
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e16b      	b.n	800211c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 815a 	bne.w	8002116 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d130      	bne.n	8001edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80b4 	beq.w	8002116 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b60      	ldr	r3, [pc, #384]	@ (8002134 <HAL_GPIO_Init+0x30c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002134 <HAL_GPIO_Init+0x30c>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002134 <HAL_GPIO_Init+0x30c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fca:	4a5b      	ldr	r2, [pc, #364]	@ (8002138 <HAL_GPIO_Init+0x310>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a52      	ldr	r2, [pc, #328]	@ (800213c <HAL_GPIO_Init+0x314>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <HAL_GPIO_Init+0x226>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a51      	ldr	r2, [pc, #324]	@ (8002140 <HAL_GPIO_Init+0x318>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d025      	beq.n	800204a <HAL_GPIO_Init+0x222>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a50      	ldr	r2, [pc, #320]	@ (8002144 <HAL_GPIO_Init+0x31c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <HAL_GPIO_Init+0x21e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_GPIO_Init+0x320>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x21a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4e      	ldr	r2, [pc, #312]	@ (800214c <HAL_GPIO_Init+0x324>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x216>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4d      	ldr	r2, [pc, #308]	@ (8002150 <HAL_GPIO_Init+0x328>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x212>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4c      	ldr	r2, [pc, #304]	@ (8002154 <HAL_GPIO_Init+0x32c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x20e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4b      	ldr	r2, [pc, #300]	@ (8002158 <HAL_GPIO_Init+0x330>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x20a>
 800202e:	2307      	movs	r3, #7
 8002030:	e00e      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002032:	2308      	movs	r3, #8
 8002034:	e00c      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002036:	2306      	movs	r3, #6
 8002038:	e00a      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800203a:	2305      	movs	r3, #5
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800203e:	2304      	movs	r3, #4
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	@ (8002138 <HAL_GPIO_Init+0x310>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <HAL_GPIO_Init+0x334>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a32      	ldr	r2, [pc, #200]	@ (800215c <HAL_GPIO_Init+0x334>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b30      	ldr	r3, [pc, #192]	@ (800215c <HAL_GPIO_Init+0x334>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a27      	ldr	r2, [pc, #156]	@ (800215c <HAL_GPIO_Init+0x334>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <HAL_GPIO_Init+0x334>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1d      	ldr	r2, [pc, #116]	@ (800215c <HAL_GPIO_Init+0x334>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_GPIO_Init+0x334>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <HAL_GPIO_Init+0x334>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f ae90 	bls.w	8001e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e128      	b.n	80023f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a90      	ldr	r2, [pc, #576]	@ (80023fc <HAL_I2S_Init+0x26c>)
 80021ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7fe fabf 	bl	8000740 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80021d8:	f023 030f 	bic.w	r3, r3, #15
 80021dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2202      	movs	r2, #2
 80021e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d060      	beq.n	80022b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80021f6:	2310      	movs	r3, #16
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e001      	b.n	8002200 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b20      	cmp	r3, #32
 8002206:	d802      	bhi.n	800220e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800220e:	2001      	movs	r0, #1
 8002210:	f001 fab4 	bl	800377c <HAL_RCCEx_GetPeriphCLKFreq>
 8002214:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800221e:	d125      	bne.n	800226c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	461a      	mov	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	3305      	adds	r3, #5
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e01f      	b.n	800228a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	fbb2 f2f3 	udiv	r2, r2, r3
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	3305      	adds	r3, #5
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e00e      	b.n	800228a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fbb2 f2f3 	udiv	r2, r2, r3
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	3305      	adds	r3, #5
 8002288:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4a5c      	ldr	r2, [pc, #368]	@ (8002400 <HAL_I2S_Init+0x270>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	08db      	lsrs	r3, r3, #3
 8002294:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e003      	b.n	80022b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d902      	bls.n	80022c4 <HAL_I2S_Init+0x134>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2bff      	cmp	r3, #255	@ 0xff
 80022c2:	d907      	bls.n	80022d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	f043 0210 	orr.w	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e08f      	b.n	80023f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	ea42 0103 	orr.w	r1, r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80022f2:	f023 030f 	bic.w	r3, r3, #15
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6851      	ldr	r1, [r2, #4]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6892      	ldr	r2, [r2, #8]
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68d2      	ldr	r2, [r2, #12]
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6992      	ldr	r2, [r2, #24]
 800230a:	430a      	orrs	r2, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002316:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d161      	bne.n	80023e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a38      	ldr	r2, [pc, #224]	@ (8002404 <HAL_I2S_Init+0x274>)
 8002324:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a37      	ldr	r2, [pc, #220]	@ (8002408 <HAL_I2S_Init+0x278>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_I2S_Init+0x1a4>
 8002330:	4b36      	ldr	r3, [pc, #216]	@ (800240c <HAL_I2S_Init+0x27c>)
 8002332:	e001      	b.n	8002338 <HAL_I2S_Init+0x1a8>
 8002334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4932      	ldr	r1, [pc, #200]	@ (8002408 <HAL_I2S_Init+0x278>)
 8002340:	428a      	cmp	r2, r1
 8002342:	d101      	bne.n	8002348 <HAL_I2S_Init+0x1b8>
 8002344:	4a31      	ldr	r2, [pc, #196]	@ (800240c <HAL_I2S_Init+0x27c>)
 8002346:	e001      	b.n	800234c <HAL_I2S_Init+0x1bc>
 8002348:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800234c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002350:	f023 030f 	bic.w	r3, r3, #15
 8002354:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2b      	ldr	r2, [pc, #172]	@ (8002408 <HAL_I2S_Init+0x278>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_I2S_Init+0x1d4>
 8002360:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <HAL_I2S_Init+0x27c>)
 8002362:	e001      	b.n	8002368 <HAL_I2S_Init+0x1d8>
 8002364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002368:	2202      	movs	r2, #2
 800236a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a25      	ldr	r2, [pc, #148]	@ (8002408 <HAL_I2S_Init+0x278>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_I2S_Init+0x1ea>
 8002376:	4b25      	ldr	r3, [pc, #148]	@ (800240c <HAL_I2S_Init+0x27c>)
 8002378:	e001      	b.n	800237e <HAL_I2S_Init+0x1ee>
 800237a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800238a:	d003      	beq.n	8002394 <HAL_I2S_Init+0x204>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e001      	b.n	80023a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023be:	4313      	orrs	r3, r2
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002408 <HAL_I2S_Init+0x278>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_I2S_Init+0x24c>
 80023d8:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <HAL_I2S_Init+0x27c>)
 80023da:	e001      	b.n	80023e0 <HAL_I2S_Init+0x250>
 80023dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023e0:	897a      	ldrh	r2, [r7, #10]
 80023e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08002741 	.word	0x08002741
 8002400:	cccccccd 	.word	0xcccccccd
 8002404:	08002855 	.word	0x08002855
 8002408:	40003800 	.word	0x40003800
 800240c:	40003400 	.word	0x40003400

08002410 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_I2S_Transmit_DMA+0x1a>
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e08a      	b.n	8002544 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
 800243c:	e082      	b.n	8002544 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_I2S_Transmit_DMA+0x3e>
 800244a:	2302      	movs	r3, #2
 800244c:	e07a      	b.n	8002544 <HAL_I2S_Transmit_DMA+0x134>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2203      	movs	r2, #3
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d002      	beq.n	8002482 <HAL_I2S_Transmit_DMA+0x72>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10a      	bne.n	8002498 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002496:	e005      	b.n	80024a4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	88fa      	ldrh	r2, [r7, #6]
 80024a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a8:	4a28      	ldr	r2, [pc, #160]	@ (800254c <HAL_I2S_Transmit_DMA+0x13c>)
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b0:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <HAL_I2S_Transmit_DMA+0x140>)
 80024b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	4a26      	ldr	r2, [pc, #152]	@ (8002554 <HAL_I2S_Transmit_DMA+0x144>)
 80024ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024c4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024cc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024d4:	f7ff f9b8 	bl	8001848 <HAL_DMA_Start_IT>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00f      	beq.n	80024fe <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f043 0208 	orr.w	r2, r3, #8
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e022      	b.n	8002544 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0202 	orr.w	r2, r2, #2
 8002522:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002540:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	0800261f 	.word	0x0800261f
 8002550:	080025dd 	.word	0x080025dd
 8002554:	0800263b 	.word	0x0800263b

08002558 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(const I2S_HandleTypeDef *hi2s)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ce:	b2db      	uxtb	r3, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10e      	bne.n	8002610 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0202 	bic.w	r2, r2, #2
 8002600:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ffb7 	bl	8002584 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff ff9f 	bl	8002570 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002646:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0203 	bic.w	r2, r2, #3
 8002656:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002670:	f043 0208 	orr.w	r2, r3, #8
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff ff97 	bl	80025ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10e      	bne.n	80026da <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff55 	bl	8002584 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	b292      	uxth	r2, r2
 80026f6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	1c9a      	adds	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10e      	bne.n	8002738 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002728:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff30 	bl	8002598 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b04      	cmp	r3, #4
 800275a:	d13a      	bne.n	80027d2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d109      	bne.n	800277a <I2S_IRQHandler+0x3a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b40      	cmp	r3, #64	@ 0x40
 8002772:	d102      	bne.n	800277a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffb4 	bl	80026e2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	2b40      	cmp	r3, #64	@ 0x40
 8002782:	d126      	bne.n	80027d2 <I2S_IRQHandler+0x92>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b20      	cmp	r3, #32
 8002790:	d11f      	bne.n	80027d2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027a0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f043 0202 	orr.w	r2, r3, #2
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff feed 	bl	80025ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d136      	bne.n	800284c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d109      	bne.n	80027fc <I2S_IRQHandler+0xbc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f2:	2b80      	cmp	r3, #128	@ 0x80
 80027f4:	d102      	bne.n	80027fc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff45 	bl	8002686 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b08      	cmp	r3, #8
 8002804:	d122      	bne.n	800284c <I2S_IRQHandler+0x10c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d11b      	bne.n	800284c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002822:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f043 0204 	orr.w	r2, r3, #4
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff feb0 	bl	80025ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a92      	ldr	r2, [pc, #584]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800286e:	4b92      	ldr	r3, [pc, #584]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002870:	e001      	b.n	8002876 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002872:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a8b      	ldr	r2, [pc, #556]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800288c:	4b8a      	ldr	r3, [pc, #552]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800288e:	e001      	b.n	8002894 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002890:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a0:	d004      	beq.n	80028ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8099 	bne.w	80029de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f925 	bl	8002b10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f9c8 	bl	8002c70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e6:	2b40      	cmp	r3, #64	@ 0x40
 80028e8:	d13a      	bne.n	8002960 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d035      	beq.n	8002960 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80028fe:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002900:	e001      	b.n	8002906 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002902:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4969      	ldr	r1, [pc, #420]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800290e:	428b      	cmp	r3, r1
 8002910:	d101      	bne.n	8002916 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002912:	4b69      	ldr	r3, [pc, #420]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002914:	e001      	b.n	800291a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002916:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800291a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800291e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800292e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f043 0202 	orr.w	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fe26 	bl	80025ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	f040 80c3 	bne.w	8002af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80bd 	beq.w	8002af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002986:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a49      	ldr	r2, [pc, #292]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002992:	4b49      	ldr	r3, [pc, #292]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002994:	e001      	b.n	800299a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002996:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4944      	ldr	r1, [pc, #272]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029a2:	428b      	cmp	r3, r1
 80029a4:	d101      	bne.n	80029aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80029a6:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029a8:	e001      	b.n	80029ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80029aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fde8 	bl	80025ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029dc:	e089      	b.n	8002af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d107      	bne.n	80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8be 	bl	8002b74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8fd 	bl	8002c0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a18:	2b40      	cmp	r3, #64	@ 0x40
 8002a1a:	d12f      	bne.n	8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d02a      	beq.n	8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002a40:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a42:	e001      	b.n	8002a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002a44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4919      	ldr	r1, [pc, #100]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a50:	428b      	cmp	r3, r1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002a54:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a56:	e001      	b.n	8002a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002a58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f043 0202 	orr.w	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fd98 	bl	80025ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d136      	bne.n	8002af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d031      	beq.n	8002af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a9c:	e001      	b.n	8002aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002a9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4902      	ldr	r1, [pc, #8]	@ (8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002aaa:	428b      	cmp	r3, r1
 8002aac:	d106      	bne.n	8002abc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002aae:	4b02      	ldr	r3, [pc, #8]	@ (8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ab0:	e006      	b.n	8002ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002ab2:	bf00      	nop
 8002ab4:	40003800 	.word	0x40003800
 8002ab8:	40003400 	.word	0x40003400
 8002abc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ac0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ac4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ad4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fd5e 	bl	80025ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002af0:	e000      	b.n	8002af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002af2:	bf00      	nop
}
 8002af4:	bf00      	nop
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	1c99      	adds	r1, r3, #2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6251      	str	r1, [r2, #36]	@ 0x24
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d113      	bne.n	8002b6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ffc9 	bl	8002afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	1c99      	adds	r1, r3, #2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6251      	str	r1, [r2, #36]	@ 0x24
 8002b86:	8819      	ldrh	r1, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <I2SEx_TxISR_I2SExt+0x90>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <I2SEx_TxISR_I2SExt+0x22>
 8002b92:	4b1d      	ldr	r3, [pc, #116]	@ (8002c08 <I2SEx_TxISR_I2SExt+0x94>)
 8002b94:	e001      	b.n	8002b9a <I2SEx_TxISR_I2SExt+0x26>
 8002b96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d121      	bne.n	8002bfa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a12      	ldr	r2, [pc, #72]	@ (8002c04 <I2SEx_TxISR_I2SExt+0x90>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <I2SEx_TxISR_I2SExt+0x50>
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <I2SEx_TxISR_I2SExt+0x94>)
 8002bc2:	e001      	b.n	8002bc8 <I2SEx_TxISR_I2SExt+0x54>
 8002bc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	490d      	ldr	r1, [pc, #52]	@ (8002c04 <I2SEx_TxISR_I2SExt+0x90>)
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	d101      	bne.n	8002bd8 <I2SEx_TxISR_I2SExt+0x64>
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <I2SEx_TxISR_I2SExt+0x94>)
 8002bd6:	e001      	b.n	8002bdc <I2SEx_TxISR_I2SExt+0x68>
 8002bd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bdc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002be0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff81 	bl	8002afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40003800 	.word	0x40003800
 8002c08:	40003400 	.word	0x40003400

08002c0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68d8      	ldr	r0, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	1c99      	adds	r1, r3, #2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002c24:	b282      	uxth	r2, r0
 8002c26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d113      	bne.n	8002c68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff4a 	bl	8002afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	@ (8002d00 <I2SEx_RxISR_I2SExt+0x90>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <I2SEx_RxISR_I2SExt+0x16>
 8002c82:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <I2SEx_RxISR_I2SExt+0x94>)
 8002c84:	e001      	b.n	8002c8a <I2SEx_RxISR_I2SExt+0x1a>
 8002c86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c8a:	68d8      	ldr	r0, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	1c99      	adds	r1, r3, #2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002c96:	b282      	uxth	r2, r0
 8002c98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d121      	bne.n	8002cf6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <I2SEx_RxISR_I2SExt+0x90>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <I2SEx_RxISR_I2SExt+0x50>
 8002cbc:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <I2SEx_RxISR_I2SExt+0x94>)
 8002cbe:	e001      	b.n	8002cc4 <I2SEx_RxISR_I2SExt+0x54>
 8002cc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	490d      	ldr	r1, [pc, #52]	@ (8002d00 <I2SEx_RxISR_I2SExt+0x90>)
 8002ccc:	428b      	cmp	r3, r1
 8002cce:	d101      	bne.n	8002cd4 <I2SEx_RxISR_I2SExt+0x64>
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <I2SEx_RxISR_I2SExt+0x94>)
 8002cd2:	e001      	b.n	8002cd8 <I2SEx_RxISR_I2SExt+0x68>
 8002cd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cdc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff03 	bl	8002afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40003800 	.word	0x40003800
 8002d04:	40003400 	.word	0x40003400

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e267      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d26:	4b88      	ldr	r3, [pc, #544]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d112      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e242      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b76      	ldr	r3, [pc, #472]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b70      	ldr	r3, [pc, #448]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b69      	ldr	r3, [pc, #420]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b66      	ldr	r3, [pc, #408]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fb52 	bl	8001468 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fb4e 	bl	8001468 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	@ 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e207      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5b      	ldr	r3, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fb3e 	bl	8001468 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fb3a 	bl	8001468 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1f3      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b51      	ldr	r3, [pc, #324]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b47      	ldr	r3, [pc, #284]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b44      	ldr	r3, [pc, #272]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4937      	ldr	r1, [pc, #220]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b34      	ldr	r3, [pc, #208]	@ (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe faf3 	bl	8001468 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe faef 	bl	8001468 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1a8      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2b      	ldr	r3, [pc, #172]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4925      	ldr	r1, [pc, #148]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fad2 	bl	8001468 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe face 	bl	8001468 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e187      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1b      	ldr	r3, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d036      	beq.n	8002f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fab2 	bl	8001468 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe faae 	bl	8001468 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e167      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fa9b 	bl	8001468 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe fa97 	bl	8001468 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e150      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470000 	.word	0x42470000
 8002f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b88      	ldr	r3, [pc, #544]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ea      	bne.n	8002f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b81      	ldr	r3, [pc, #516]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	4a7c      	ldr	r2, [pc, #496]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b77      	ldr	r3, [pc, #476]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b74      	ldr	r3, [pc, #464]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fa57 	bl	8001468 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe fa53 	bl	8001468 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e10c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800317c <HAL_RCC_OscConfig+0x474>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ea>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a63      	ldr	r2, [pc, #396]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x30c>
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	@ 0x70
 8003006:	4b5c      	ldr	r3, [pc, #368]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	4a5b      	ldr	r2, [pc, #364]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	@ 0x70
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8003014:	4b58      	ldr	r3, [pc, #352]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	4a57      	ldr	r2, [pc, #348]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003020:	4b55      	ldr	r3, [pc, #340]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003024:	4a54      	ldr	r2, [pc, #336]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe fa18 	bl	8001468 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe fa14 	bl	8001468 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0cb      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	4b49      	ldr	r3, [pc, #292]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RCC_OscConfig+0x334>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe fa02 	bl	8001468 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe f9fe 	bl	8001468 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0b5      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	4a38      	ldr	r2, [pc, #224]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a6:	4b34      	ldr	r3, [pc, #208]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d05c      	beq.n	800316c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d141      	bne.n	800313e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe f9d2 	bl	8001468 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe f9ce 	bl	8001468 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e087      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b27      	ldr	r3, [pc, #156]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	491b      	ldr	r1, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_RCC_OscConfig+0x478>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe f9a7 	bl	8001468 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe f9a3 	bl	8001468 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x416>
 800313c:	e054      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe f990 	bl	8001468 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe f98c 	bl	8001468 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x444>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e038      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe f8be 	bl	8001468 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe f8ba 	bl	8001468 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	@ (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe f81e 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	0800be18 	.word	0x0800be18
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b090      	sub	sp, #64	@ 0x40
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033dc:	4b59      	ldr	r3, [pc, #356]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d00d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 80a1 	bhi.w	8003530 <HAL_RCC_GetSysClockFreq+0x16c>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x3a>
 80033f6:	e09b      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b53      	ldr	r3, [pc, #332]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x184>)
 80033fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033fc:	e09b      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b53      	ldr	r3, [pc, #332]	@ (800354c <HAL_RCC_GetSysClockFreq+0x188>)
 8003400:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003402:	e098      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b4f      	ldr	r3, [pc, #316]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b4d      	ldr	r3, [pc, #308]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d028      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b4a      	ldr	r3, [pc, #296]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	2200      	movs	r2, #0
 8003422:	623b      	str	r3, [r7, #32]
 8003424:	627a      	str	r2, [r7, #36]	@ 0x24
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800342c:	2100      	movs	r1, #0
 800342e:	4b47      	ldr	r3, [pc, #284]	@ (800354c <HAL_RCC_GetSysClockFreq+0x188>)
 8003430:	fb03 f201 	mul.w	r2, r3, r1
 8003434:	2300      	movs	r3, #0
 8003436:	fb00 f303 	mul.w	r3, r0, r3
 800343a:	4413      	add	r3, r2
 800343c:	4a43      	ldr	r2, [pc, #268]	@ (800354c <HAL_RCC_GetSysClockFreq+0x188>)
 800343e:	fba0 1202 	umull	r1, r2, r0, r2
 8003442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003444:	460a      	mov	r2, r1
 8003446:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800344a:	4413      	add	r3, r2
 800344c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003450:	2200      	movs	r2, #0
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	61fa      	str	r2, [r7, #28]
 8003456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800345a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800345e:	f7fc ff07 	bl	8000270 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4613      	mov	r3, r2
 8003468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800346a:	e053      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346c:	4b35      	ldr	r3, [pc, #212]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	099b      	lsrs	r3, r3, #6
 8003472:	2200      	movs	r2, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	617a      	str	r2, [r7, #20]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800347e:	f04f 0b00 	mov.w	fp, #0
 8003482:	4652      	mov	r2, sl
 8003484:	465b      	mov	r3, fp
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	ebb2 080a 	subs.w	r8, r2, sl
 800349e:	eb63 090b 	sbc.w	r9, r3, fp
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034b6:	ebb2 0408 	subs.w	r4, r2, r8
 80034ba:	eb63 0509 	sbc.w	r5, r3, r9
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	00eb      	lsls	r3, r5, #3
 80034c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034cc:	00e2      	lsls	r2, r4, #3
 80034ce:	4614      	mov	r4, r2
 80034d0:	461d      	mov	r5, r3
 80034d2:	eb14 030a 	adds.w	r3, r4, sl
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	eb45 030b 	adc.w	r3, r5, fp
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ea:	4629      	mov	r1, r5
 80034ec:	028b      	lsls	r3, r1, #10
 80034ee:	4621      	mov	r1, r4
 80034f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f4:	4621      	mov	r1, r4
 80034f6:	028a      	lsls	r2, r1, #10
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	2200      	movs	r2, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	60fa      	str	r2, [r7, #12]
 8003504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003508:	f7fc feb2 	bl	8000270 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4613      	mov	r3, r2
 8003512:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003514:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	0c1b      	lsrs	r3, r3, #16
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	3301      	adds	r3, #1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003524:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800352e:	e002      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x184>)
 8003532:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003538:	4618      	mov	r0, r3
 800353a:	3740      	adds	r7, #64	@ 0x40
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	00f42400 	.word	0x00f42400
 800354c:	017d7840 	.word	0x017d7840

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <HAL_RCC_GetHCLKFreq+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000000 	.word	0x20000000

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800356c:	f7ff fff0 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	@ (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	0800be28 	.word	0x0800be28

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003594:	f7ff ffdc 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	@ (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40023800 	.word	0x40023800
 80035b4:	0800be28 	.word	0x0800be28

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d035      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e0:	4b62      	ldr	r3, [pc, #392]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035e6:	f7fd ff3f 	bl	8001468 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ee:	f7fd ff3b 	bl	8001468 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0b0      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003600:	4b5b      	ldr	r3, [pc, #364]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f0      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	019a      	lsls	r2, r3, #6
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	071b      	lsls	r3, r3, #28
 8003618:	4955      	ldr	r1, [pc, #340]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003620:	4b52      	ldr	r3, [pc, #328]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003626:	f7fd ff1f 	bl	8001468 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800362e:	f7fd ff1b 	bl	8001468 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e090      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003640:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8083 	beq.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b44      	ldr	r3, [pc, #272]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	4a43      	ldr	r2, [pc, #268]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	@ 0x40
 800366a:	4b41      	ldr	r3, [pc, #260]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003676:	4b3f      	ldr	r3, [pc, #252]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3e      	ldr	r2, [pc, #248]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003680:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003682:	f7fd fef1 	bl	8001468 <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fd feed 	bl	8001468 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e062      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800369c:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a8:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02f      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d028      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d0:	4b29      	ldr	r3, [pc, #164]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d6:	4b28      	ldr	r3, [pc, #160]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036dc:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d114      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fd febb 	bl	8001468 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd feb7 	bl	8001468 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e02a      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003724:	d10d      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373a:	490d      	ldr	r1, [pc, #52]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003742:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003748:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800374c:	6093      	str	r3, [r2, #8]
 800374e:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003750:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	4905      	ldr	r1, [pc, #20]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	42470068 	.word	0x42470068
 8003770:	40023800 	.word	0x40023800
 8003774:	40007000 	.word	0x40007000
 8003778:	42470e40 	.word	0x42470e40

0800377c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d13f      	bne.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800379a:	4b24      	ldr	r3, [pc, #144]	@ (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037b0:	d12f      	bne.n	8003812 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80037b4:	617b      	str	r3, [r7, #20]
          break;
 80037b6:	e02f      	b.n	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037b8:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037c4:	d108      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80037c6:	4b19      	ldr	r3, [pc, #100]	@ (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037ce:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	e007      	b.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80037d8:	4b14      	ldr	r3, [pc, #80]	@ (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037e0:	4a15      	ldr	r2, [pc, #84]	@ (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80037e8:	4b10      	ldr	r3, [pc, #64]	@ (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003802:	0f1b      	lsrs	r3, r3, #28
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
          break;
 8003810:	e002      	b.n	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
          break;
 8003816:	bf00      	nop
        }
      }
      break;
 8003818:	e000      	b.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800381a:	bf00      	nop
    }
  }
  return frequency;
 800381c:	697b      	ldr	r3, [r7, #20]
}
 800381e:	4618      	mov	r0, r3
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	00bb8000 	.word	0x00bb8000
 8003834:	017d7840 	.word	0x017d7840
 8003838:	00f42400 	.word	0x00f42400

0800383c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e022      	b.n	8003894 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fd facf 	bl	8000e04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2203      	movs	r2, #3
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f814 	bl	800389c <HAL_SD_InitCard>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e00a      	b.n	8003894 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b08e      	sub	sp, #56	@ 0x38
 80038a0:	af04      	add	r7, sp, #16
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80038b8:	2376      	movs	r3, #118	@ 0x76
 80038ba:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681d      	ldr	r5, [r3, #0]
 80038c0:	466c      	mov	r4, sp
 80038c2:	f107 0318 	add.w	r3, r7, #24
 80038c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d4:	4628      	mov	r0, r5
 80038d6:	f001 ff85 	bl	80057e4 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80038da:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <HAL_SD_InitCard+0xe8>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 ffc6 	bl	8005876 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80038ea:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <HAL_SD_InitCard+0xe8>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80038f0:	2002      	movs	r0, #2
 80038f2:	f7fd fdc5 	bl	8001480 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f001 f806 	bl	8004908 <SD_PowerON>
 80038fc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e02e      	b.n	800397a <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 ff25 	bl	800476c <SD_InitCard>
 8003922:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e01b      	b.n	800397a <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800394a:	4618      	mov	r0, r3
 800394c:	f002 f825 	bl	800599a <SDMMC_CmdBlockLength>
 8003950:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00f      	beq.n	8003978 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <HAL_SD_InitCard+0xec>)
 800395e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3728      	adds	r7, #40	@ 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bdb0      	pop	{r4, r5, r7, pc}
 8003982:	bf00      	nop
 8003984:	422580a0 	.word	0x422580a0
 8003988:	004005ff 	.word	0x004005ff

0800398c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	@ 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0c0      	b.n	8003b36 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 80b9 	bne.w	8003b34 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80039c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	441a      	add	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d907      	bls.n	80039e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0a7      	b.n	8003b36 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2203      	movs	r2, #3
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b40 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003a10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	4a4b      	ldr	r2, [pc, #300]	@ (8003b44 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003a18:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	2200      	movs	r2, #0
 8003a20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3380      	adds	r3, #128	@ 0x80
 8003a50:	4619      	mov	r1, r3
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	025b      	lsls	r3, r3, #9
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	f7fd fef5 	bl	8001848 <HAL_DMA_Start_IT>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d017      	beq.n	8003a94 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003a72:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a33      	ldr	r2, [pc, #204]	@ (8003b48 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003a7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e050      	b.n	8003b36 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003a94:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	025b      	lsls	r3, r3, #9
 8003aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	025b      	lsls	r3, r3, #9
 8003ab2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ab4:	2390      	movs	r3, #144	@ 0x90
 8003ab6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f107 0210 	add.w	r2, r7, #16
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 ff37 	bl	8005942 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d90a      	bls.n	8003af0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2282      	movs	r2, #130	@ 0x82
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 ff9b 	bl	8005a22 <SDMMC_CmdReadMultiBlock>
 8003aec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003aee:	e009      	b.n	8003b04 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2281      	movs	r2, #129	@ 0x81
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 ff6e 	bl	80059de <SDMMC_CmdReadSingleBlock>
 8003b02:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d012      	beq.n	8003b30 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b48 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003b10:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e002      	b.n	8003b36 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3730      	adds	r7, #48	@ 0x30
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	0800457b 	.word	0x0800457b
 8003b44:	080045ed 	.word	0x080045ed
 8003b48:	004005ff 	.word	0x004005ff
 8003b4c:	4225858c 	.word	0x4225858c

08003b50 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08c      	sub	sp, #48	@ 0x30
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0c5      	b.n	8003d04 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 80be 	bne.w	8003d02 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	441a      	add	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d907      	bls.n	8003baa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0ac      	b.n	8003d04 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2203      	movs	r2, #3
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8003d0c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	4a4d      	ldr	r2, [pc, #308]	@ (8003d10 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003bdc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	2200      	movs	r2, #0
 8003be4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d002      	beq.n	8003bf4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf0:	025b      	lsls	r3, r3, #9
 8003bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d90a      	bls.n	8003c10 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	22a0      	movs	r2, #160	@ 0xa0
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 ff4f 	bl	8005aaa <SDMMC_CmdWriteMultiBlock>
 8003c0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003c0e:	e009      	b.n	8003c24 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2290      	movs	r2, #144	@ 0x90
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 ff22 	bl	8005a66 <SDMMC_CmdWriteSingleBlock>
 8003c22:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d012      	beq.n	8003c50 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a39      	ldr	r2, [pc, #228]	@ (8003d14 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003c30:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e059      	b.n	8003d04 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003c50:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	2240      	movs	r2, #64	@ 0x40
 8003c5c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3380      	adds	r3, #128	@ 0x80
 8003c86:	461a      	mov	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	f7fd fddb 	bl	8001848 <HAL_DMA_Start_IT>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8003ca6:	f023 0302 	bic.w	r3, r3, #2
 8003caa:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e018      	b.n	8003d04 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	025b      	lsls	r3, r3, #9
 8003cdc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003cde:	2390      	movs	r3, #144	@ 0x90
 8003ce0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f107 0210 	add.w	r2, r7, #16
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fe22 	bl	8005942 <SDIO_ConfigData>

      return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3730      	adds	r7, #48	@ 0x30
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08004551 	.word	0x08004551
 8003d10:	080045ed 	.word	0x080045ed
 8003d14:	004005ff 	.word	0x004005ff
 8003d18:	4225858c 	.word	0x4225858c

08003d1c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_SD_IRQHandler+0x2e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f001 f806 	bl	8004d54 <SD_Read_IT>
 8003d48:	e165      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 808f 	beq.w	8003e78 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d62:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003d72:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003d76:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d039      	beq.n	8003e06 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_SD_IRQHandler+0x8a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d011      	beq.n	8003dca <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 fea0 	bl	8005af0 <SDMMC_CmdStopTransfer>
 8003db0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f92f 	bl	8004028 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003dd2:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_SD_IRQHandler+0xda>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f002 fb0e 	bl	8006418 <HAL_SD_RxCpltCallback>
 8003dfc:	e10b      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f002 fb00 	bl	8006404 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e04:	e107      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8102 	beq.w	8004016 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d011      	beq.n	8003e40 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 fe65 	bl	8005af0 <SDMMC_CmdStopTransfer>
 8003e26:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8f4 	bl	8004028 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 80e5 	bne.w	8004016 <HAL_SD_IRQHandler+0x2fa>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 80df 	bne.w	8004016 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0208 	bic.w	r2, r2, #8
 8003e66:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f002 fac7 	bl	8006404 <HAL_SD_TxCpltCallback>
}
 8003e76:	e0ce      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_SD_IRQHandler+0x17c>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 ffb0 	bl	8004df6 <SD_Write_IT>
 8003e96:	e0be      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9e:	f240 233a 	movw	r3, #570	@ 0x23a
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80b6 	beq.w	8004016 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebc:	f043 0202 	orr.w	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	f043 0208 	orr.w	r2, r3, #8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	f043 0210 	orr.w	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	f043 0208 	orr.w	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003f44:	f023 0302 	bic.w	r3, r3, #2
 8003f48:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 fdce 	bl	8005af0 <SDMMC_CmdStopTransfer>
 8003f54:	4602      	mov	r2, r0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f855 	bl	8004028 <HAL_SD_ErrorCallback>
}
 8003f7e:	e04a      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d045      	beq.n	8004016 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <HAL_SD_IRQHandler+0x282>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d011      	beq.n	8003fc2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8004020 <HAL_SD_IRQHandler+0x304>)
 8003fa4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fca4 	bl	80018f8 <HAL_DMA_Abort_IT>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02f      	beq.n	8004016 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb68 	bl	8004690 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003fc0:	e029      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <HAL_SD_IRQHandler+0x2ba>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <HAL_SD_IRQHandler+0x308>)
 8003fdc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fc88 	bl	80018f8 <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d013      	beq.n	8004016 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fb83 	bl	80046fe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ff8:	e00d      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f002 f9ee 	bl	80063f0 <HAL_SD_AbortCallback>
}
 8004014:	e7ff      	b.n	8004016 <HAL_SD_IRQHandler+0x2fa>
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	08004691 	.word	0x08004691
 8004024:	080046ff 	.word	0x080046ff

08004028 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404a:	0f9b      	lsrs	r3, r3, #30
 800404c:	b2da      	uxtb	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004056:	0e9b      	lsrs	r3, r3, #26
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	b2da      	uxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	b2da      	uxtb	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	b2da      	uxtb	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	b2da      	uxtb	r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004092:	b2da      	uxtb	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800409c:	0d1b      	lsrs	r3, r3, #20
 800409e:	b29a      	uxth	r2, r3
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ba:	0bdb      	lsrs	r3, r3, #15
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040cc:	0b9b      	lsrs	r3, r3, #14
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040de:	0b5b      	lsrs	r3, r3, #13
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f0:	0b1b      	lsrs	r3, r3, #12
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	2b00      	cmp	r3, #0
 800410a:	d163      	bne.n	80041d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004110:	009a      	lsls	r2, r3, #2
 8004112:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800411c:	0f92      	lsrs	r2, r2, #30
 800411e:	431a      	orrs	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004128:	0edb      	lsrs	r3, r3, #27
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	b2da      	uxtb	r2, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413a:	0e1b      	lsrs	r3, r3, #24
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	b2da      	uxtb	r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800414c:	0d5b      	lsrs	r3, r3, #21
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	b2da      	uxtb	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800415e:	0c9b      	lsrs	r3, r3, #18
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	b2da      	uxtb	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004170:	0bdb      	lsrs	r3, r3, #15
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	b2da      	uxtb	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	7e1b      	ldrb	r3, [r3, #24]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	3302      	adds	r3, #2
 8004194:	2201      	movs	r2, #1
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800419e:	fb03 f202 	mul.w	r2, r3, r2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	7a1b      	ldrb	r3, [r3, #8]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	2201      	movs	r2, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80041c0:	0a52      	lsrs	r2, r2, #9
 80041c2:	fb03 f202 	mul.w	r2, r3, r2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80041d2:	e031      	b.n	8004238 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d11d      	bne.n	8004218 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	3301      	adds	r3, #1
 80041f8:	029a      	lsls	r2, r3, #10
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	661a      	str	r2, [r3, #96]	@ 0x60
 8004216:	e00f      	b.n	8004238 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a58      	ldr	r2, [pc, #352]	@ (8004380 <HAL_SD_GetCardCSD+0x344>)
 800421e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e09d      	b.n	8004374 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800423c:	0b9b      	lsrs	r3, r3, #14
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424e:	09db      	lsrs	r3, r3, #7
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004256:	b2da      	uxtb	r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004266:	b2da      	uxtb	r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004270:	0fdb      	lsrs	r3, r3, #31
 8004272:	b2da      	uxtb	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427c:	0f5b      	lsrs	r3, r3, #29
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	b2da      	uxtb	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428e:	0e9b      	lsrs	r3, r3, #26
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	b2da      	uxtb	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	0d9b      	lsrs	r3, r3, #22
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	0d5b      	lsrs	r3, r3, #21
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	0bdb      	lsrs	r3, r3, #15
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	0b9b      	lsrs	r3, r3, #14
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	0b5b      	lsrs	r3, r3, #13
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	b2da      	uxtb	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431e:	0b1b      	lsrs	r3, r3, #12
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	0a9b      	lsrs	r3, r3, #10
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	b2da      	uxtb	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	b2da      	uxtb	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004362:	b2da      	uxtb	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	004005ff 	.word	0x004005ff

08004384 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80043dc:	b5b0      	push	{r4, r5, r7, lr}
 80043de:	b08e      	sub	sp, #56	@ 0x38
 80043e0:	af04      	add	r7, sp, #16
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2203      	movs	r2, #3
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d02e      	beq.n	800445a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004402:	d106      	bne.n	8004412 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004410:	e029      	b.n	8004466 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004418:	d10a      	bne.n	8004430 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fb2a 	bl	8004a74 <SD_WideBus_Enable>
 8004420:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38
 800442e:	e01a      	b.n	8004466 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fb67 	bl	8004b0a <SD_WideBus_Disable>
 800443c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	639a      	str	r2, [r3, #56]	@ 0x38
 800444a:	e00c      	b.n	8004466 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	639a      	str	r2, [r3, #56]	@ 0x38
 8004458:	e005      	b.n	8004466 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a26      	ldr	r2, [pc, #152]	@ (800450c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004474:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004484:	e01f      	b.n	80044c6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681d      	ldr	r5, [r3, #0]
 80044ac:	466c      	mov	r4, sp
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c0:	4628      	mov	r0, r5
 80044c2:	f001 f98f 	bl	80057e4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 fa63 	bl	800599a <SDMMC_CmdBlockLength>
 80044d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <HAL_SD_ConfigWideBusOperation+0x130>)
 80044e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80044fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004502:	4618      	mov	r0, r3
 8004504:	3728      	adds	r7, #40	@ 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bdb0      	pop	{r4, r5, r7, pc}
 800450a:	bf00      	nop
 800450c:	004005ff 	.word	0x004005ff

08004510 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800451c:	f107 030c 	add.w	r3, r7, #12
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa7e 	bl	8004a24 <SD_SendStatus>
 8004528:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	0a5b      	lsrs	r3, r3, #9
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004546:	693b      	ldr	r3, [r7, #16]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800456c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	2b82      	cmp	r3, #130	@ 0x82
 800458e:	d111      	bne.n	80045b4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f001 faab 	bl	8005af0 <SDMMC_CmdStopTransfer>
 800459a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fd3a 	bl	8004028 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0208 	bic.w	r2, r2, #8
 80045c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f001 ff1b 	bl	8006418 <HAL_SD_RxCpltCallback>
#endif
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd fb28 	bl	8001c50 <HAL_DMA_GetError>
 8004600:	4603      	mov	r3, r0
 8004602:	2b02      	cmp	r3, #2
 8004604:	d03e      	beq.n	8004684 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004614:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d002      	beq.n	8004622 <SD_DMAError+0x36>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d12d      	bne.n	800467e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a19      	ldr	r2, [pc, #100]	@ (800468c <SD_DMAError+0xa0>)
 8004628:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004638:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f7ff ff62 	bl	8004510 <HAL_SD_GetCardState>
 800464c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b06      	cmp	r3, #6
 8004652:	d002      	beq.n	800465a <SD_DMAError+0x6e>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b05      	cmp	r3, #5
 8004658:	d10a      	bne.n	8004670 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f001 fa46 	bl	8005af0 <SDMMC_CmdStopTransfer>
 8004664:	4602      	mov	r2, r0
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466a:	431a      	orrs	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800467e:	6978      	ldr	r0, [r7, #20]
 8004680:	f7ff fcd2 	bl	8004028 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004684:	bf00      	nop
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	004005ff 	.word	0x004005ff

08004690 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80046a6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff ff31 	bl	8004510 <HAL_SD_GetCardState>
 80046ae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b06      	cmp	r3, #6
 80046c2:	d002      	beq.n	80046ca <SD_DMATxAbort+0x3a>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d10a      	bne.n	80046e0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fa0e 	bl	8005af0 <SDMMC_CmdStopTransfer>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	431a      	orrs	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f001 fe81 	bl	80063f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80046ee:	e002      	b.n	80046f6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fc99 	bl	8004028 <HAL_SD_ErrorCallback>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004714:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff fefa 	bl	8004510 <HAL_SD_GetCardState>
 800471c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b06      	cmp	r3, #6
 8004730:	d002      	beq.n	8004738 <SD_DMARxAbort+0x3a>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b05      	cmp	r3, #5
 8004736:	d10a      	bne.n	800474e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f001 f9d7 	bl	8005af0 <SDMMC_CmdStopTransfer>
 8004742:	4602      	mov	r2, r0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	431a      	orrs	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f001 fe4a 	bl	80063f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800475c:	e002      	b.n	8004764 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fc62 	bl	8004028 <HAL_SD_ErrorCallback>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b094      	sub	sp, #80	@ 0x50
 8004770:	af04      	add	r7, sp, #16
 8004772:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004774:	2301      	movs	r3, #1
 8004776:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f001 f888 	bl	8005892 <SDIO_GetPowerState>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004788:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800478c:	e0b8      	b.n	8004900 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	2b03      	cmp	r3, #3
 8004794:	d02f      	beq.n	80047f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f001 fab2 	bl	8005d04 <SDMMC_CmdSendCID>
 80047a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <SD_InitCard+0x40>
    {
      return errorstate;
 80047a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047aa:	e0a9      	b.n	8004900 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 f8b2 	bl	800591c <SDIO_GetResponse>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2104      	movs	r1, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 f8a9 	bl	800591c <SDIO_GetResponse>
 80047ca:	4602      	mov	r2, r0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2108      	movs	r1, #8
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 f8a0 	bl	800591c <SDIO_GetResponse>
 80047dc:	4602      	mov	r2, r0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	210c      	movs	r1, #12
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f897 	bl	800591c <SDIO_GetResponse>
 80047ee:	4602      	mov	r2, r0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d00d      	beq.n	800481a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f107 020e 	add.w	r2, r7, #14
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fab8 	bl	8005d7e <SDMMC_CmdSetRelAdd>
 800480e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <SD_InitCard+0xae>
    {
      return errorstate;
 8004816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004818:	e072      	b.n	8004900 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	2b03      	cmp	r3, #3
 8004820:	d036      	beq.n	8004890 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004822:	89fb      	ldrh	r3, [r7, #14]
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f001 fa82 	bl	8005d40 <SDMMC_CmdSendCSD>
 800483c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800483e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004846:	e05b      	b.n	8004900 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f864 	bl	800591c <SDIO_GetResponse>
 8004854:	4602      	mov	r2, r0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2104      	movs	r1, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f001 f85b 	bl	800591c <SDIO_GetResponse>
 8004866:	4602      	mov	r2, r0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2108      	movs	r1, #8
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f852 	bl	800591c <SDIO_GetResponse>
 8004878:	4602      	mov	r2, r0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	210c      	movs	r1, #12
 8004884:	4618      	mov	r0, r3
 8004886:	f001 f849 	bl	800591c <SDIO_GetResponse>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2104      	movs	r1, #4
 8004896:	4618      	mov	r0, r3
 8004898:	f001 f840 	bl	800591c <SDIO_GetResponse>
 800489c:	4603      	mov	r3, r0
 800489e:	0d1a      	lsrs	r2, r3, #20
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048a4:	f107 0310 	add.w	r3, r7, #16
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fbc6 	bl	800403c <HAL_SD_GetCardCSD>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80048ba:	e021      	b.n	8004900 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	2200      	movs	r2, #0
 80048c8:	461c      	mov	r4, r3
 80048ca:	4615      	mov	r5, r2
 80048cc:	4622      	mov	r2, r4
 80048ce:	462b      	mov	r3, r5
 80048d0:	4608      	mov	r0, r1
 80048d2:	f001 f92f 	bl	8005b34 <SDMMC_CmdSelDesel>
 80048d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <SD_InitCard+0x176>
  {
    return errorstate;
 80048de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e0:	e00e      	b.n	8004900 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681d      	ldr	r5, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	466c      	mov	r4, sp
 80048ea:	f103 0210 	add.w	r2, r3, #16
 80048ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80048f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048f4:	3304      	adds	r3, #4
 80048f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048f8:	4628      	mov	r0, r5
 80048fa:	f000 ff73 	bl	80057e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3740      	adds	r7, #64	@ 0x40
 8004904:	46bd      	mov	sp, r7
 8004906:	bdb0      	pop	{r4, r5, r7, pc}

08004908 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 f92a 	bl	8005b7a <SDMMC_CmdGoIdleState>
 8004926:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <SD_PowerON+0x2a>
  {
    return errorstate;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	e072      	b.n	8004a18 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f001 f93d 	bl	8005bb6 <SDMMC_CmdOperCond>
 800493c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f001 f913 	bl	8005b7a <SDMMC_CmdGoIdleState>
 8004954:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <SD_PowerON+0x5e>
    {
      return errorstate;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	e05b      	b.n	8004a18 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496a:	2b01      	cmp	r3, #1
 800496c:	d137      	bne.n	80049de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f001 f93d 	bl	8005bf4 <SDMMC_CmdAppCommand>
 800497a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d02d      	beq.n	80049de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004982:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004986:	e047      	b.n	8004a18 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f930 	bl	8005bf4 <SDMMC_CmdAppCommand>
 8004994:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	e03b      	b.n	8004a18 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	491e      	ldr	r1, [pc, #120]	@ (8004a20 <SD_PowerON+0x118>)
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 f946 	bl	8005c38 <SDMMC_CmdAppOperCommand>
 80049ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049b4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80049b8:	e02e      	b.n	8004a18 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 ffab 	bl	800591c <SDIO_GetResponse>
 80049c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	0fdb      	lsrs	r3, r3, #31
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <SD_PowerON+0xcc>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <SD_PowerON+0xce>
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]

    count++;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3301      	adds	r3, #1
 80049dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d802      	bhi.n	80049ee <SD_PowerON+0xe6>
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0cc      	beq.n	8004988 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d902      	bls.n	80049fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80049f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049fc:	e00c      	b.n	8004a18 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a0e:	e002      	b.n	8004a16 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	c1100000 	.word	0xc1100000

08004a24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d102      	bne.n	8004a3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004a34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a38:	e018      	b.n	8004a6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f001 f9ba 	bl	8005dc0 <SDMMC_CmdSendStatus>
 8004a4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	e009      	b.n	8004a6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 ff5c 	bl	800591c <SDIO_GetResponse>
 8004a64:	4602      	mov	r2, r0
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 ff46 	bl	800591c <SDIO_GetResponse>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a9a:	d102      	bne.n	8004aa2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004aa0:	e02f      	b.n	8004b02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004aa2:	f107 030c 	add.w	r3, r7, #12
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f879 	bl	8004ba0 <SD_FindSCR>
 8004aae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	e023      	b.n	8004b02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01c      	beq.n	8004afe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f001 f88f 	bl	8005bf4 <SDMMC_CmdAppCommand>
 8004ad6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	e00f      	b.n	8004b02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f8c8 	bl	8005c7e <SDMMC_CmdBusWidth>
 8004aee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	e003      	b.n	8004b02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e001      	b.n	8004b02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004afe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fefb 	bl	800591c <SDIO_GetResponse>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b30:	d102      	bne.n	8004b38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b36:	e02f      	b.n	8004b98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f82e 	bl	8004ba0 <SD_FindSCR>
 8004b44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	e023      	b.n	8004b98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01c      	beq.n	8004b94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f001 f844 	bl	8005bf4 <SDMMC_CmdAppCommand>
 8004b6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	e00f      	b.n	8004b98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 f87d 	bl	8005c7e <SDMMC_CmdBusWidth>
 8004b84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	e003      	b.n	8004b98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e001      	b.n	8004b98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b94:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b08f      	sub	sp, #60	@ 0x3c
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004baa:	f7fc fc5d 	bl	8001468 <HAL_GetTick>
 8004bae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2108      	movs	r1, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fee7 	bl	800599a <SDMMC_CmdBlockLength>
 8004bcc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	e0b9      	b.n	8004d4c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f001 f805 	bl	8005bf4 <SDMMC_CmdAppCommand>
 8004bea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	e0aa      	b.n	8004d4c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c00:	2330      	movs	r3, #48	@ 0x30
 8004c02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c04:	2302      	movs	r3, #2
 8004c06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f107 0210 	add.w	r2, r7, #16
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fe91 	bl	8005942 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 f84c 	bl	8005cc2 <SDMMC_CmdSendSCR>
 8004c2a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02a      	beq.n	8004c88 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	e08a      	b.n	8004d4c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00f      	beq.n	8004c64 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6819      	ldr	r1, [r3, #0]
 8004c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	f107 0208 	add.w	r2, r7, #8
 8004c50:	18d4      	adds	r4, r2, r3
 8004c52:	4608      	mov	r0, r1
 8004c54:	f000 fdf1 	bl	800583a <SDIO_ReadFIFO>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	6023      	str	r3, [r4, #0]
      index++;
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5e:	3301      	adds	r3, #1
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c62:	e006      	b.n	8004c72 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d012      	beq.n	8004c98 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004c72:	f7fc fbf9 	bl	8001468 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d102      	bne.n	8004c88 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c86:	e061      	b.n	8004d4c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0cf      	beq.n	8004c36 <SD_FindSCR+0x96>
 8004c96:	e000      	b.n	8004c9a <SD_FindSCR+0xfa>
      break;
 8004c98:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <SD_FindSCR+0x116>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2208      	movs	r2, #8
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	e044      	b.n	8004d4c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e037      	b.n	8004d4c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e02a      	b.n	8004d4c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	061a      	lsls	r2, r3, #24
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d0c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d16:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	0e1b      	lsrs	r3, r3, #24
 8004d1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d20:	601a      	str	r2, [r3, #0]
    scr++;
 8004d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d24:	3304      	adds	r3, #4
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d34:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d3e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	0e1b      	lsrs	r3, r3, #24
 8004d44:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	373c      	adds	r7, #60	@ 0x3c
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03f      	beq.n	8004dee <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e033      	b.n	8004ddc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fd5e 	bl	800583a <SDIO_ReadFIFO>
 8004d7e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	0e1b      	lsrs	r3, r3, #24
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b07      	cmp	r3, #7
 8004de0:	d9c8      	bls.n	8004d74 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b086      	sub	sp, #24
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d043      	beq.n	8004e98 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e037      	b.n	8004e86 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	021a      	lsls	r2, r3, #8
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	041a      	lsls	r2, r3, #16
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	061a      	lsls	r2, r3, #24
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f107 0208 	add.w	r2, r7, #8
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fcea 	bl	8005854 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3301      	adds	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b07      	cmp	r3, #7
 8004e8a:	d9c4      	bls.n	8004e16 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e042      	b.n	8004f38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc f9f6 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	@ 0x24
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa09 	bl	80052fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	@ 0x28
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d175      	bne.n	800504c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Transmit+0x2c>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e06e      	b.n	800504e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2221      	movs	r2, #33	@ 0x21
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f7e:	f7fc fa73 	bl	8001468 <HAL_GetTick>
 8004f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f98:	d108      	bne.n	8004fac <HAL_UART_Transmit+0x6c>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	e003      	b.n	8004fb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fb4:	e02e      	b.n	8005014 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	@ 0x80
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f8df 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e03a      	b.n	800504e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	e007      	b.n	8005006 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3301      	adds	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1cb      	bne.n	8004fb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	2140      	movs	r1, #64	@ 0x40
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f8ab 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e006      	b.n	800504e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b08a      	sub	sp, #40	@ 0x28
 800505a:	af02      	add	r7, sp, #8
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b20      	cmp	r3, #32
 8005074:	f040 8081 	bne.w	800517a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_UART_Receive+0x2e>
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e079      	b.n	800517c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2222      	movs	r2, #34	@ 0x22
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509c:	f7fc f9e4 	bl	8001468 <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b6:	d108      	bne.n	80050ca <HAL_UART_Receive+0x74>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	e003      	b.n	80050d2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80050d2:	e047      	b.n	8005164 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2200      	movs	r2, #0
 80050dc:	2120      	movs	r1, #32
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f850 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e042      	b.n	800517c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10c      	bne.n	8005116 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005108:	b29a      	uxth	r2, r3
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	3302      	adds	r3, #2
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e01f      	b.n	8005156 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511e:	d007      	beq.n	8005130 <HAL_UART_Receive+0xda>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <HAL_UART_Receive+0xe8>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e008      	b.n	8005150 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800514a:	b2da      	uxtb	r2, r3
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	3301      	adds	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1b2      	bne.n	80050d4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005194:	e03b      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d037      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fc f963 	bl	8001468 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e03a      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d023      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b80      	cmp	r3, #128	@ 0x80
 80051ca:	d020      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b40      	cmp	r3, #64	@ 0x40
 80051d0:	d01d      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d116      	bne.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f81d 	bl	8005236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2208      	movs	r2, #8
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e00f      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4013      	ands	r3, r2
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	429a      	cmp	r2, r3
 800522a:	d0b4      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005236:	b480      	push	{r7}
 8005238:	b095      	sub	sp, #84	@ 0x54
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800525e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800526c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	61fb      	str	r3, [r7, #28]
   return(result);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d119      	bne.n	80052e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f023 0310 	bic.w	r3, r3, #16
 80052c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ce:	61ba      	str	r2, [r7, #24]
 80052d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6979      	ldr	r1, [r7, #20]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	613b      	str	r3, [r7, #16]
   return(result);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052f0:	bf00      	nop
 80052f2:	3754      	adds	r7, #84	@ 0x54
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b0c0      	sub	sp, #256	@ 0x100
 8005302:	af00      	add	r7, sp, #0
 8005304:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005318:	68d9      	ldr	r1, [r3, #12]
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	ea40 0301 	orr.w	r3, r0, r1
 8005324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	431a      	orrs	r2, r3
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	431a      	orrs	r2, r3
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005354:	f021 010c 	bic.w	r1, r1, #12
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005362:	430b      	orrs	r3, r1
 8005364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005376:	6999      	ldr	r1, [r3, #24]
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	ea40 0301 	orr.w	r3, r0, r1
 8005382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b8f      	ldr	r3, [pc, #572]	@ (80055c8 <UART_SetConfig+0x2cc>)
 800538c:	429a      	cmp	r2, r3
 800538e:	d005      	beq.n	800539c <UART_SetConfig+0xa0>
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b8d      	ldr	r3, [pc, #564]	@ (80055cc <UART_SetConfig+0x2d0>)
 8005398:	429a      	cmp	r2, r3
 800539a:	d104      	bne.n	80053a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7fe f8f8 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 80053a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053a4:	e003      	b.n	80053ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053a6:	f7fe f8df 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 80053aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b8:	f040 810c 	bne.w	80055d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053ce:	4622      	mov	r2, r4
 80053d0:	462b      	mov	r3, r5
 80053d2:	1891      	adds	r1, r2, r2
 80053d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053d6:	415b      	adcs	r3, r3
 80053d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053de:	4621      	mov	r1, r4
 80053e0:	eb12 0801 	adds.w	r8, r2, r1
 80053e4:	4629      	mov	r1, r5
 80053e6:	eb43 0901 	adc.w	r9, r3, r1
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053fe:	4690      	mov	r8, r2
 8005400:	4699      	mov	r9, r3
 8005402:	4623      	mov	r3, r4
 8005404:	eb18 0303 	adds.w	r3, r8, r3
 8005408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800540c:	462b      	mov	r3, r5
 800540e:	eb49 0303 	adc.w	r3, r9, r3
 8005412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005422:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800542a:	460b      	mov	r3, r1
 800542c:	18db      	adds	r3, r3, r3
 800542e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005430:	4613      	mov	r3, r2
 8005432:	eb42 0303 	adc.w	r3, r2, r3
 8005436:	657b      	str	r3, [r7, #84]	@ 0x54
 8005438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800543c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005440:	f7fa ff16 	bl	8000270 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4b61      	ldr	r3, [pc, #388]	@ (80055d0 <UART_SetConfig+0x2d4>)
 800544a:	fba3 2302 	umull	r2, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	011c      	lsls	r4, r3, #4
 8005452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800545c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	1891      	adds	r1, r2, r2
 800546a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800546c:	415b      	adcs	r3, r3
 800546e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005474:	4641      	mov	r1, r8
 8005476:	eb12 0a01 	adds.w	sl, r2, r1
 800547a:	4649      	mov	r1, r9
 800547c:	eb43 0b01 	adc.w	fp, r3, r1
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800548c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005494:	4692      	mov	sl, r2
 8005496:	469b      	mov	fp, r3
 8005498:	4643      	mov	r3, r8
 800549a:	eb1a 0303 	adds.w	r3, sl, r3
 800549e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054a2:	464b      	mov	r3, r9
 80054a4:	eb4b 0303 	adc.w	r3, fp, r3
 80054a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054c0:	460b      	mov	r3, r1
 80054c2:	18db      	adds	r3, r3, r3
 80054c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80054c6:	4613      	mov	r3, r2
 80054c8:	eb42 0303 	adc.w	r3, r2, r3
 80054cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054d6:	f7fa fecb 	bl	8000270 <__aeabi_uldivmod>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4611      	mov	r1, r2
 80054e0:	4b3b      	ldr	r3, [pc, #236]	@ (80055d0 <UART_SetConfig+0x2d4>)
 80054e2:	fba3 2301 	umull	r2, r3, r3, r1
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	2264      	movs	r2, #100	@ 0x64
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	1acb      	subs	r3, r1, r3
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054f6:	4b36      	ldr	r3, [pc, #216]	@ (80055d0 <UART_SetConfig+0x2d4>)
 80054f8:	fba3 2302 	umull	r2, r3, r3, r2
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005504:	441c      	add	r4, r3
 8005506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005510:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	1891      	adds	r1, r2, r2
 800551e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005520:	415b      	adcs	r3, r3
 8005522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005528:	4641      	mov	r1, r8
 800552a:	1851      	adds	r1, r2, r1
 800552c:	6339      	str	r1, [r7, #48]	@ 0x30
 800552e:	4649      	mov	r1, r9
 8005530:	414b      	adcs	r3, r1
 8005532:	637b      	str	r3, [r7, #52]	@ 0x34
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005540:	4659      	mov	r1, fp
 8005542:	00cb      	lsls	r3, r1, #3
 8005544:	4651      	mov	r1, sl
 8005546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554a:	4651      	mov	r1, sl
 800554c:	00ca      	lsls	r2, r1, #3
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	4603      	mov	r3, r0
 8005554:	4642      	mov	r2, r8
 8005556:	189b      	adds	r3, r3, r2
 8005558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800555c:	464b      	mov	r3, r9
 800555e:	460a      	mov	r2, r1
 8005560:	eb42 0303 	adc.w	r3, r2, r3
 8005564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005574:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800557c:	460b      	mov	r3, r1
 800557e:	18db      	adds	r3, r3, r3
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005582:	4613      	mov	r3, r2
 8005584:	eb42 0303 	adc.w	r3, r2, r3
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800558a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800558e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005592:	f7fa fe6d 	bl	8000270 <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <UART_SetConfig+0x2d4>)
 800559c:	fba3 1302 	umull	r1, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2164      	movs	r1, #100	@ 0x64
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	3332      	adds	r3, #50	@ 0x32
 80055ae:	4a08      	ldr	r2, [pc, #32]	@ (80055d0 <UART_SetConfig+0x2d4>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f003 0207 	and.w	r2, r3, #7
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4422      	add	r2, r4
 80055c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055c4:	e106      	b.n	80057d4 <UART_SetConfig+0x4d8>
 80055c6:	bf00      	nop
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40011400 	.word	0x40011400
 80055d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055e6:	4642      	mov	r2, r8
 80055e8:	464b      	mov	r3, r9
 80055ea:	1891      	adds	r1, r2, r2
 80055ec:	6239      	str	r1, [r7, #32]
 80055ee:	415b      	adcs	r3, r3
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055f6:	4641      	mov	r1, r8
 80055f8:	1854      	adds	r4, r2, r1
 80055fa:	4649      	mov	r1, r9
 80055fc:	eb43 0501 	adc.w	r5, r3, r1
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	00eb      	lsls	r3, r5, #3
 800560a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560e:	00e2      	lsls	r2, r4, #3
 8005610:	4614      	mov	r4, r2
 8005612:	461d      	mov	r5, r3
 8005614:	4643      	mov	r3, r8
 8005616:	18e3      	adds	r3, r4, r3
 8005618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800561c:	464b      	mov	r3, r9
 800561e:	eb45 0303 	adc.w	r3, r5, r3
 8005622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005642:	4629      	mov	r1, r5
 8005644:	008b      	lsls	r3, r1, #2
 8005646:	4621      	mov	r1, r4
 8005648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564c:	4621      	mov	r1, r4
 800564e:	008a      	lsls	r2, r1, #2
 8005650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005654:	f7fa fe0c 	bl	8000270 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4b60      	ldr	r3, [pc, #384]	@ (80057e0 <UART_SetConfig+0x4e4>)
 800565e:	fba3 2302 	umull	r2, r3, r3, r2
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	011c      	lsls	r4, r3, #4
 8005666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566a:	2200      	movs	r2, #0
 800566c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	1891      	adds	r1, r2, r2
 800567e:	61b9      	str	r1, [r7, #24]
 8005680:	415b      	adcs	r3, r3
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005688:	4641      	mov	r1, r8
 800568a:	1851      	adds	r1, r2, r1
 800568c:	6139      	str	r1, [r7, #16]
 800568e:	4649      	mov	r1, r9
 8005690:	414b      	adcs	r3, r1
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a0:	4659      	mov	r1, fp
 80056a2:	00cb      	lsls	r3, r1, #3
 80056a4:	4651      	mov	r1, sl
 80056a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056aa:	4651      	mov	r1, sl
 80056ac:	00ca      	lsls	r2, r1, #3
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	4642      	mov	r2, r8
 80056b6:	189b      	adds	r3, r3, r2
 80056b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056bc:	464b      	mov	r3, r9
 80056be:	460a      	mov	r2, r1
 80056c0:	eb42 0303 	adc.w	r3, r2, r3
 80056c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056e0:	4649      	mov	r1, r9
 80056e2:	008b      	lsls	r3, r1, #2
 80056e4:	4641      	mov	r1, r8
 80056e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ea:	4641      	mov	r1, r8
 80056ec:	008a      	lsls	r2, r1, #2
 80056ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056f2:	f7fa fdbd 	bl	8000270 <__aeabi_uldivmod>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	4b38      	ldr	r3, [pc, #224]	@ (80057e0 <UART_SetConfig+0x4e4>)
 80056fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2264      	movs	r2, #100	@ 0x64
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	1acb      	subs	r3, r1, r3
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	3332      	adds	r3, #50	@ 0x32
 8005710:	4a33      	ldr	r2, [pc, #204]	@ (80057e0 <UART_SetConfig+0x4e4>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800571c:	441c      	add	r4, r3
 800571e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005722:	2200      	movs	r2, #0
 8005724:	673b      	str	r3, [r7, #112]	@ 0x70
 8005726:	677a      	str	r2, [r7, #116]	@ 0x74
 8005728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	415b      	adcs	r3, r3
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800573c:	4641      	mov	r1, r8
 800573e:	1851      	adds	r1, r2, r1
 8005740:	6039      	str	r1, [r7, #0]
 8005742:	4649      	mov	r1, r9
 8005744:	414b      	adcs	r3, r1
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005754:	4659      	mov	r1, fp
 8005756:	00cb      	lsls	r3, r1, #3
 8005758:	4651      	mov	r1, sl
 800575a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575e:	4651      	mov	r1, sl
 8005760:	00ca      	lsls	r2, r1, #3
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	4603      	mov	r3, r0
 8005768:	4642      	mov	r2, r8
 800576a:	189b      	adds	r3, r3, r2
 800576c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800576e:	464b      	mov	r3, r9
 8005770:	460a      	mov	r2, r1
 8005772:	eb42 0303 	adc.w	r3, r2, r3
 8005776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	663b      	str	r3, [r7, #96]	@ 0x60
 8005782:	667a      	str	r2, [r7, #100]	@ 0x64
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005790:	4649      	mov	r1, r9
 8005792:	008b      	lsls	r3, r1, #2
 8005794:	4641      	mov	r1, r8
 8005796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800579a:	4641      	mov	r1, r8
 800579c:	008a      	lsls	r2, r1, #2
 800579e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057a2:	f7fa fd65 	bl	8000270 <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <UART_SetConfig+0x4e4>)
 80057ac:	fba3 1302 	umull	r1, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	2164      	movs	r1, #100	@ 0x64
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	3332      	adds	r3, #50	@ 0x32
 80057be:	4a08      	ldr	r2, [pc, #32]	@ (80057e0 <UART_SetConfig+0x4e4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 020f 	and.w	r2, r3, #15
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4422      	add	r2, r4
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057da:	46bd      	mov	sp, r7
 80057dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e0:	51eb851f 	.word	0x51eb851f

080057e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80057e4:	b084      	sub	sp, #16
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	f107 001c 	add.w	r0, r7, #28
 80057f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80057fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80057fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80057fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005802:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005806:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800580a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800580e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800581e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	b004      	add	sp, #16
 8005838:	4770      	bx	lr

0800583a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2203      	movs	r2, #3
 8005882:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0303 	and.w	r3, r3, #3
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80058cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80058d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80058d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80058e8:	f023 030f 	bic.w	r3, r3, #15
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	b2db      	uxtb	r3, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3314      	adds	r3, #20
 800592a:	461a      	mov	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	4413      	add	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
}  
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005968:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800596e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005974:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0

}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b088      	sub	sp, #32
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80059a8:	2310      	movs	r3, #16
 80059aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059ac:	2340      	movs	r3, #64	@ 0x40
 80059ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059ba:	f107 0308 	add.w	r3, r7, #8
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ff74 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80059c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ca:	2110      	movs	r1, #16
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fa19 	bl	8005e04 <SDMMC_GetCmdResp1>
 80059d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059d4:	69fb      	ldr	r3, [r7, #28]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3720      	adds	r7, #32
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b088      	sub	sp, #32
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80059ec:	2311      	movs	r3, #17
 80059ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059f0:	2340      	movs	r3, #64	@ 0x40
 80059f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059fe:	f107 0308 	add.w	r3, r7, #8
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ff52 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0e:	2111      	movs	r1, #17
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f9f7 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a18:	69fb      	ldr	r3, [r7, #28]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b088      	sub	sp, #32
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005a30:	2312      	movs	r3, #18
 8005a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a34:	2340      	movs	r3, #64	@ 0x40
 8005a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ff30 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a52:	2112      	movs	r1, #18
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9d5 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005a74:	2318      	movs	r3, #24
 8005a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a86:	f107 0308 	add.w	r3, r7, #8
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff ff0e 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a96:	2118      	movs	r1, #24
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f9b3 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b088      	sub	sp, #32
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005ab8:	2319      	movs	r3, #25
 8005aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005abc:	2340      	movs	r3, #64	@ 0x40
 8005abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff feec 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ada:	2119      	movs	r1, #25
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f991 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005ae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005afc:	230c      	movs	r3, #12
 8005afe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b00:	2340      	movs	r3, #64	@ 0x40
 8005b02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b0e:	f107 0308 	add.w	r3, r7, #8
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff feca 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005b1a:	4a05      	ldr	r2, [pc, #20]	@ (8005b30 <SDMMC_CmdStopTransfer+0x40>)
 8005b1c:	210c      	movs	r1, #12
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f970 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b26:	69fb      	ldr	r3, [r7, #28]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	05f5e100 	.word	0x05f5e100

08005b34 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	@ 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b44:	2307      	movs	r3, #7
 8005b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b48:	2340      	movs	r3, #64	@ 0x40
 8005b4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b54:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b56:	f107 0310 	add.w	r3, r7, #16
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff fea6 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b66:	2107      	movs	r1, #7
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f94b 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005b6e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3728      	adds	r7, #40	@ 0x28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b088      	sub	sp, #32
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b98:	f107 0308 	add.w	r3, r7, #8
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fe85 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fb65 	bl	8006274 <SDMMC_GetCmdError>
 8005baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bac:	69fb      	ldr	r3, [r7, #28]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b088      	sub	sp, #32
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005bbe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bc8:	2340      	movs	r3, #64	@ 0x40
 8005bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bd6:	f107 0308 	add.w	r3, r7, #8
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fe66 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 faf8 	bl	80061d8 <SDMMC_GetCmdResp7>
 8005be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bea:	69fb      	ldr	r3, [r7, #28]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c02:	2337      	movs	r3, #55	@ 0x37
 8005c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c06:	2340      	movs	r3, #64	@ 0x40
 8005c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c14:	f107 0308 	add.w	r3, r7, #8
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fe47 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c24:	2137      	movs	r1, #55	@ 0x37
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8ec 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c4e:	2329      	movs	r3, #41	@ 0x29
 8005c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c52:	2340      	movs	r3, #64	@ 0x40
 8005c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c60:	f107 0308 	add.w	r3, r7, #8
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff fe21 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f9ff 	bl	8006070 <SDMMC_GetCmdResp3>
 8005c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c74:	69fb      	ldr	r3, [r7, #28]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b088      	sub	sp, #32
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005c8c:	2306      	movs	r3, #6
 8005c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c90:	2340      	movs	r3, #64	@ 0x40
 8005c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c9e:	f107 0308 	add.w	r3, r7, #8
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fe02 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cae:	2106      	movs	r1, #6
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8a7 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b088      	sub	sp, #32
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005cce:	2333      	movs	r3, #51	@ 0x33
 8005cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cd2:	2340      	movs	r3, #64	@ 0x40
 8005cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ce0:	f107 0308 	add.w	r3, r7, #8
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fde1 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf0:	2133      	movs	r1, #51	@ 0x33
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f886 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005d10:	2302      	movs	r3, #2
 8005d12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005d14:	23c0      	movs	r3, #192	@ 0xc0
 8005d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d22:	f107 0308 	add.w	r3, r7, #8
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff fdc0 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f956 	bl	8005fe0 <SDMMC_GetCmdResp2>
 8005d34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d36:	69fb      	ldr	r3, [r7, #28]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005d4e:	2309      	movs	r3, #9
 8005d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005d52:	23c0      	movs	r3, #192	@ 0xc0
 8005d54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d60:	f107 0308 	add.w	r3, r7, #8
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fda1 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f937 	bl	8005fe0 <SDMMC_GetCmdResp2>
 8005d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d74:	69fb      	ldr	r3, [r7, #28]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b088      	sub	sp, #32
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d90:	2340      	movs	r3, #64	@ 0x40
 8005d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fd82 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	2103      	movs	r1, #3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f99c 	bl	80060ec <SDMMC_GetCmdResp6>
 8005db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005db6:	69fb      	ldr	r3, [r7, #28]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005dce:	230d      	movs	r3, #13
 8005dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dd2:	2340      	movs	r3, #64	@ 0x40
 8005dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005de0:	f107 0308 	add.w	r3, r7, #8
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fd61 	bl	80058ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df0:	210d      	movs	r1, #13
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f806 	bl	8005e04 <SDMMC_GetCmdResp1>
 8005df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005e12:	4b70      	ldr	r3, [pc, #448]	@ (8005fd4 <SDMMC_GetCmdResp1+0x1d0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a70      	ldr	r2, [pc, #448]	@ (8005fd8 <SDMMC_GetCmdResp1+0x1d4>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	0a5a      	lsrs	r2, r3, #9
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	fb02 f303 	mul.w	r3, r2, r3
 8005e24:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	1e5a      	subs	r2, r3, #1
 8005e2a:	61fa      	str	r2, [r7, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e34:	e0c9      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e3a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0ef      	beq.n	8005e26 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ea      	bne.n	8005e26 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e62:	2304      	movs	r3, #4
 8005e64:	e0b1      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0a6      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	22c5      	movs	r2, #197	@ 0xc5
 8005e80:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff fd3d 	bl	8005902 <SDIO_GetCommandResponse>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d001      	beq.n	8005e96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e099      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e96:	2100      	movs	r1, #0
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff fd3f 	bl	800591c <SDIO_GetResponse>
 8005e9e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8005fdc <SDMMC_GetCmdResp1+0x1d8>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e08d      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da02      	bge.n	8005eba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005eb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005eb8:	e087      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005ec4:	2340      	movs	r3, #64	@ 0x40
 8005ec6:	e080      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	e079      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005ee0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ee4:	e071      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ef4:	e069      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f04:	e061      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005f10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f14:	e059      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f24:	e051      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f34:	e049      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005f40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f44:	e041      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005f50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f54:	e039      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005f60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f64:	e031      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005f70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005f74:	e029      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005f80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005f84:	e021      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005f90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005f94:	e019      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005fa0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005fa4:	e011      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005fb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005fb4:	e009      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005fc0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005fc4:	e001      	b.n	8005fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005fc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000000 	.word	0x20000000
 8005fd8:	10624dd3 	.word	0x10624dd3
 8005fdc:	fdffe008 	.word	0xfdffe008

08005fe0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8006068 <SDMMC_GetCmdResp2+0x88>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <SDMMC_GetCmdResp2+0x8c>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	0a5b      	lsrs	r3, r3, #9
 8005ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
 8005ffc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1e5a      	subs	r2, r3, #1
 8006002:	60fa      	str	r2, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006008:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800600c:	e026      	b.n	800605c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006012:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ef      	beq.n	8005ffe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ea      	bne.n	8005ffe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2204      	movs	r2, #4
 8006038:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800603a:	2304      	movs	r3, #4
 800603c:	e00e      	b.n	800605c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006050:	2301      	movs	r3, #1
 8006052:	e003      	b.n	800605c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	22c5      	movs	r2, #197	@ 0xc5
 8006058:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20000000 	.word	0x20000000
 800606c:	10624dd3 	.word	0x10624dd3

08006070 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006078:	4b1a      	ldr	r3, [pc, #104]	@ (80060e4 <SDMMC_GetCmdResp3+0x74>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1a      	ldr	r2, [pc, #104]	@ (80060e8 <SDMMC_GetCmdResp3+0x78>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	0a5b      	lsrs	r3, r3, #9
 8006084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1e5a      	subs	r2, r3, #1
 8006092:	60fa      	str	r2, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d102      	bne.n	800609e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006098:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800609c:	e01b      	b.n	80060d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0ef      	beq.n	800608e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1ea      	bne.n	800608e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2204      	movs	r2, #4
 80060c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060ca:	2304      	movs	r3, #4
 80060cc:	e003      	b.n	80060d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	22c5      	movs	r2, #197	@ 0xc5
 80060d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000000 	.word	0x20000000
 80060e8:	10624dd3 	.word	0x10624dd3

080060ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	460b      	mov	r3, r1
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060fa:	4b35      	ldr	r3, [pc, #212]	@ (80061d0 <SDMMC_GetCmdResp6+0xe4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a35      	ldr	r2, [pc, #212]	@ (80061d4 <SDMMC_GetCmdResp6+0xe8>)
 8006100:	fba2 2303 	umull	r2, r3, r2, r3
 8006104:	0a5b      	lsrs	r3, r3, #9
 8006106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	1e5a      	subs	r2, r3, #1
 8006114:	61fa      	str	r2, [r7, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800611a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800611e:	e052      	b.n	80061c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006124:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ef      	beq.n	8006110 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1ea      	bne.n	8006110 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2204      	movs	r2, #4
 800614a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800614c:	2304      	movs	r3, #4
 800614e:	e03a      	b.n	80061c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006162:	2301      	movs	r3, #1
 8006164:	e02f      	b.n	80061c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fbcb 	bl	8005902 <SDIO_GetCommandResponse>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	7afb      	ldrb	r3, [r7, #11]
 8006172:	4293      	cmp	r3, r2
 8006174:	d001      	beq.n	800617a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006176:	2301      	movs	r3, #1
 8006178:	e025      	b.n	80061c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	22c5      	movs	r2, #197	@ 0xc5
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006180:	2100      	movs	r1, #0
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff fbca 	bl	800591c <SDIO_GetResponse>
 8006188:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800619e:	2300      	movs	r3, #0
 80061a0:	e011      	b.n	80061c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80061ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061b0:	e009      	b.n	80061c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80061bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061c0:	e001      	b.n	80061c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000000 	.word	0x20000000
 80061d4:	10624dd3 	.word	0x10624dd3

080061d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061e0:	4b22      	ldr	r3, [pc, #136]	@ (800626c <SDMMC_GetCmdResp7+0x94>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <SDMMC_GetCmdResp7+0x98>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	0a5b      	lsrs	r3, r3, #9
 80061ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f0:	fb02 f303 	mul.w	r3, r2, r3
 80061f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1e5a      	subs	r2, r3, #1
 80061fa:	60fa      	str	r2, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006200:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006204:	e02c      	b.n	8006260 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0ef      	beq.n	80061f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1ea      	bne.n	80061f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d004      	beq.n	8006236 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2204      	movs	r2, #4
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006232:	2304      	movs	r3, #4
 8006234:	e014      	b.n	8006260 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006248:	2301      	movs	r3, #1
 800624a:	e009      	b.n	8006260 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2240      	movs	r2, #64	@ 0x40
 800625c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800625e:	2300      	movs	r3, #0
  
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000000 	.word	0x20000000
 8006270:	10624dd3 	.word	0x10624dd3

08006274 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800627c:	4b11      	ldr	r3, [pc, #68]	@ (80062c4 <SDMMC_GetCmdError+0x50>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a11      	ldr	r2, [pc, #68]	@ (80062c8 <SDMMC_GetCmdError+0x54>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	0a5b      	lsrs	r3, r3, #9
 8006288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	60fa      	str	r2, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800629c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062a0:	e009      	b.n	80062b6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f1      	beq.n	8006292 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	22c5      	movs	r2, #197	@ 0xc5
 80062b2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000000 	.word	0x20000000
 80062c8:	10624dd3 	.word	0x10624dd3

080062cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80062d0:	4904      	ldr	r1, [pc, #16]	@ (80062e4 <MX_FATFS_Init+0x18>)
 80062d2:	4805      	ldr	r0, [pc, #20]	@ (80062e8 <MX_FATFS_Init+0x1c>)
 80062d4:	f004 fa5c 	bl	800a790 <FATFS_LinkDriver>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	4b03      	ldr	r3, [pc, #12]	@ (80062ec <MX_FATFS_Init+0x20>)
 80062de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80062e0:	bf00      	nop
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	200002c4 	.word	0x200002c4
 80062e8:	0800be38 	.word	0x0800be38
 80062ec:	200002c0 	.word	0x200002c0

080062f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80062f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800630a:	f000 f896 	bl	800643a <BSP_SD_IsDetected>
 800630e:	4603      	mov	r3, r0
 8006310:	2b01      	cmp	r3, #1
 8006312:	d001      	beq.n	8006318 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e012      	b.n	800633e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006318:	480b      	ldr	r0, [pc, #44]	@ (8006348 <BSP_SD_Init+0x48>)
 800631a:	f7fd fa8f 	bl	800383c <HAL_SD_Init>
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006328:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800632c:	4806      	ldr	r0, [pc, #24]	@ (8006348 <BSP_SD_Init+0x48>)
 800632e:	f7fe f855 	bl	80043dc <HAL_SD_ConfigWideBusOperation>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800633c:	79fb      	ldrb	r3, [r7, #7]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	2000012c 	.word	0x2000012c

0800634c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	68f9      	ldr	r1, [r7, #12]
 8006362:	4806      	ldr	r0, [pc, #24]	@ (800637c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006364:	f7fd fb12 	bl	800398c <HAL_SD_ReadBlocks_DMA>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2000012c 	.word	0x2000012c

08006380 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	68f9      	ldr	r1, [r7, #12]
 8006396:	4806      	ldr	r0, [pc, #24]	@ (80063b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006398:	f7fd fbda 	bl	8003b50 <HAL_SD_WriteBlocks_DMA>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	2000012c 	.word	0x2000012c

080063b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80063b8:	4805      	ldr	r0, [pc, #20]	@ (80063d0 <BSP_SD_GetCardState+0x1c>)
 80063ba:	f7fe f8a9 	bl	8004510 <HAL_SD_GetCardState>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000012c 	.word	0x2000012c

080063d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4803      	ldr	r0, [pc, #12]	@ (80063ec <BSP_SD_GetCardInfo+0x18>)
 80063e0:	f7fd ffd0 	bl	8004384 <HAL_SD_GetCardInfo>
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	2000012c 	.word	0x2000012c

080063f0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80063f8:	f000 f818 	bl	800642c <BSP_SD_AbortCallback>
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800640c:	f000 f9a8 	bl	8006760 <BSP_SD_WriteCpltCallback>
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006420:	f000 f9aa 	bl	8006778 <BSP_SD_ReadCpltCallback>
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0

}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006440:	2301      	movs	r3, #1
 8006442:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006444:	f000 f80c 	bl	8006460 <BSP_PlatformIsDetected>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800644e:	2300      	movs	r3, #0
 8006450:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	b2db      	uxtb	r3, r3
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006466:	2301      	movs	r3, #1
 8006468:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800646a:	2108      	movs	r1, #8
 800646c:	4806      	ldr	r0, [pc, #24]	@ (8006488 <BSP_PlatformIsDetected+0x28>)
 800646e:	f7fb fe77 	bl	8002160 <HAL_GPIO_ReadPin>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006478:	2300      	movs	r3, #0
 800647a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800647c:	79fb      	ldrb	r3, [r7, #7]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40020c00 	.word	0x40020c00

0800648c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006494:	f7fa ffe8 	bl	8001468 <HAL_GetTick>
 8006498:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800649a:	e006      	b.n	80064aa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800649c:	f7ff ff8a 	bl	80063b4 <BSP_SD_GetCardState>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e009      	b.n	80064be <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80064aa:	f7fa ffdd 	bl	8001468 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d8f0      	bhi.n	800649c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80064d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <SD_CheckStatus+0x38>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80064d8:	f7ff ff6c 	bl	80063b4 <BSP_SD_GetCardState>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d107      	bne.n	80064f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80064e2:	4b07      	ldr	r3, [pc, #28]	@ (8006500 <SD_CheckStatus+0x38>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f023 0301 	bic.w	r3, r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <SD_CheckStatus+0x38>)
 80064f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80064f2:	4b03      	ldr	r3, [pc, #12]	@ (8006500 <SD_CheckStatus+0x38>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000009 	.word	0x20000009

08006504 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800650e:	f7ff fef7 	bl	8006300 <BSP_SD_Init>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ffd4 	bl	80064c8 <SD_CheckStatus>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	4b04      	ldr	r3, [pc, #16]	@ (8006538 <SD_initialize+0x34>)
 8006526:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006528:	4b03      	ldr	r3, [pc, #12]	@ (8006538 <SD_initialize+0x34>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	b2db      	uxtb	r3, r3
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000009 	.word	0x20000009

0800653c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff ffbd 	bl	80064c8 <SD_CheckStatus>
 800654e:	4603      	mov	r3, r0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800656c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006570:	f7ff ff8c 	bl	800648c <SD_CheckStatusWithTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	da01      	bge.n	800657e <SD_read+0x26>
  {
    return res;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	e03b      	b.n	80065f6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f7ff fee2 	bl	800634c <BSP_SD_ReadBlocks_DMA>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d132      	bne.n	80065f4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800658e:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <SD_read+0xa8>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006594:	f7fa ff68 	bl	8001468 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800659a:	bf00      	nop
 800659c:	4b18      	ldr	r3, [pc, #96]	@ (8006600 <SD_read+0xa8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <SD_read+0x5e>
 80065a4:	f7fa ff60 	bl	8001468 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	f247 522f 	movw	r2, #29999	@ 0x752f
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d9f2      	bls.n	800659c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80065b6:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <SD_read+0xa8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d102      	bne.n	80065c4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
 80065c2:	e017      	b.n	80065f4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80065c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006600 <SD_read+0xa8>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80065ca:	f7fa ff4d 	bl	8001468 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80065d0:	e007      	b.n	80065e2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80065d2:	f7ff feef 	bl	80063b4 <BSP_SD_GetCardState>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <SD_read+0x8a>
          {
            res = RES_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80065e0:	e008      	b.n	80065f4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80065e2:	f7fa ff41 	bl	8001468 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f247 522f 	movw	r2, #29999	@ 0x752f
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d9ee      	bls.n	80065d2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000730 	.word	0x20000730

08006604 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006618:	4b24      	ldr	r3, [pc, #144]	@ (80066ac <SD_write+0xa8>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800661e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006622:	f7ff ff33 	bl	800648c <SD_CheckStatusWithTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	da01      	bge.n	8006630 <SD_write+0x2c>
  {
    return res;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	e038      	b.n	80066a2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	68b8      	ldr	r0, [r7, #8]
 8006636:	f7ff fea3 	bl	8006380 <BSP_SD_WriteBlocks_DMA>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d12f      	bne.n	80066a0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006640:	f7fa ff12 	bl	8001468 <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006646:	bf00      	nop
 8006648:	4b18      	ldr	r3, [pc, #96]	@ (80066ac <SD_write+0xa8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d108      	bne.n	8006662 <SD_write+0x5e>
 8006650:	f7fa ff0a 	bl	8001468 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800665e:	4293      	cmp	r3, r2
 8006660:	d9f2      	bls.n	8006648 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006662:	4b12      	ldr	r3, [pc, #72]	@ (80066ac <SD_write+0xa8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
 800666e:	e017      	b.n	80066a0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006670:	4b0e      	ldr	r3, [pc, #56]	@ (80066ac <SD_write+0xa8>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006676:	f7fa fef7 	bl	8001468 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800667c:	e007      	b.n	800668e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800667e:	f7ff fe99 	bl	80063b4 <BSP_SD_GetCardState>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <SD_write+0x8a>
          {
            res = RES_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	75fb      	strb	r3, [r7, #23]
            break;
 800668c:	e008      	b.n	80066a0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800668e:	f7fa feeb 	bl	8001468 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f247 522f 	movw	r2, #29999	@ 0x752f
 800669c:	4293      	cmp	r3, r2
 800669e:	d9ee      	bls.n	800667e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	2000072c 	.word	0x2000072c

080066b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08c      	sub	sp, #48	@ 0x30
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	603a      	str	r2, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
 80066bc:	460b      	mov	r3, r1
 80066be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80066c6:	4b25      	ldr	r3, [pc, #148]	@ (800675c <SD_ioctl+0xac>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <SD_ioctl+0x28>
 80066d4:	2303      	movs	r3, #3
 80066d6:	e03c      	b.n	8006752 <SD_ioctl+0xa2>

  switch (cmd)
 80066d8:	79bb      	ldrb	r3, [r7, #6]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d834      	bhi.n	8006748 <SD_ioctl+0x98>
 80066de:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <SD_ioctl+0x34>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	080066fd 	.word	0x080066fd
 80066ec:	08006715 	.word	0x08006715
 80066f0:	0800672f 	.word	0x0800672f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80066fa:	e028      	b.n	800674e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80066fc:	f107 030c 	add.w	r3, r7, #12
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fe67 	bl	80063d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006712:	e01c      	b.n	800674e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff fe5b 	bl	80063d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	b29a      	uxth	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800672c:	e00f      	b.n	800674e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800672e:	f107 030c 	add.w	r3, r7, #12
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fe4e 	bl	80063d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	0a5a      	lsrs	r2, r3, #9
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006746:	e002      	b.n	800674e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006748:	2304      	movs	r3, #4
 800674a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800674e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006752:	4618      	mov	r0, r3
 8006754:	3730      	adds	r7, #48	@ 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000009 	.word	0x20000009

08006760 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006764:	4b03      	ldr	r3, [pc, #12]	@ (8006774 <BSP_SD_WriteCpltCallback+0x14>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	2000072c 	.word	0x2000072c

08006778 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800677c:	4b03      	ldr	r3, [pc, #12]	@ (800678c <BSP_SD_ReadCpltCallback+0x14>)
 800677e:	2201      	movs	r2, #1
 8006780:	601a      	str	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	20000730 	.word	0x20000730

08006790 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	4a08      	ldr	r2, [pc, #32]	@ (80067c0 <disk_status+0x30>)
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	79fa      	ldrb	r2, [r7, #7]
 80067a8:	4905      	ldr	r1, [pc, #20]	@ (80067c0 <disk_status+0x30>)
 80067aa:	440a      	add	r2, r1
 80067ac:	7a12      	ldrb	r2, [r2, #8]
 80067ae:	4610      	mov	r0, r2
 80067b0:	4798      	blx	r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	2000075c 	.word	0x2000075c

080067c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006810 <disk_initialize+0x4c>)
 80067d6:	5cd3      	ldrb	r3, [r2, r3]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d114      	bne.n	8006806 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	4a0c      	ldr	r2, [pc, #48]	@ (8006810 <disk_initialize+0x4c>)
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	79fa      	ldrb	r2, [r7, #7]
 80067ea:	4909      	ldr	r1, [pc, #36]	@ (8006810 <disk_initialize+0x4c>)
 80067ec:	440a      	add	r2, r1
 80067ee:	7a12      	ldrb	r2, [r2, #8]
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	4a03      	ldr	r2, [pc, #12]	@ (8006810 <disk_initialize+0x4c>)
 8006802:	2101      	movs	r1, #1
 8006804:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	2000075c 	.word	0x2000075c

08006814 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006814:	b590      	push	{r4, r7, lr}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	4a0a      	ldr	r2, [pc, #40]	@ (8006850 <disk_read+0x3c>)
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	689c      	ldr	r4, [r3, #8]
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	4a07      	ldr	r2, [pc, #28]	@ (8006850 <disk_read+0x3c>)
 8006834:	4413      	add	r3, r2
 8006836:	7a18      	ldrb	r0, [r3, #8]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	47a0      	blx	r4
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]
  return res;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
}
 8006846:	4618      	mov	r0, r3
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	bd90      	pop	{r4, r7, pc}
 800684e:	bf00      	nop
 8006850:	2000075c 	.word	0x2000075c

08006854 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	4a0a      	ldr	r2, [pc, #40]	@ (8006890 <disk_write+0x3c>)
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	68dc      	ldr	r4, [r3, #12]
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	4a07      	ldr	r2, [pc, #28]	@ (8006890 <disk_write+0x3c>)
 8006874:	4413      	add	r3, r2
 8006876:	7a18      	ldrb	r0, [r3, #8]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	47a0      	blx	r4
 8006880:	4603      	mov	r3, r0
 8006882:	75fb      	strb	r3, [r7, #23]
  return res;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
}
 8006886:	4618      	mov	r0, r3
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	bd90      	pop	{r4, r7, pc}
 800688e:	bf00      	nop
 8006890:	2000075c 	.word	0x2000075c

08006894 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	603a      	str	r2, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
 80068a0:	460b      	mov	r3, r1
 80068a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	4a09      	ldr	r2, [pc, #36]	@ (80068cc <disk_ioctl+0x38>)
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	79fa      	ldrb	r2, [r7, #7]
 80068b2:	4906      	ldr	r1, [pc, #24]	@ (80068cc <disk_ioctl+0x38>)
 80068b4:	440a      	add	r2, r1
 80068b6:	7a10      	ldrb	r0, [r2, #8]
 80068b8:	79b9      	ldrb	r1, [r7, #6]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	4798      	blx	r3
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	2000075c 	.word	0x2000075c

080068d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3301      	adds	r3, #1
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80068e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	b21a      	sxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b21b      	sxth	r3, r3
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80068f4:	89fb      	ldrh	r3, [r7, #14]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3303      	adds	r3, #3
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	3202      	adds	r2, #2
 800691a:	7812      	ldrb	r2, [r2, #0]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	3201      	adds	r2, #1
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	7812      	ldrb	r2, [r2, #0]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
	return rv;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	887a      	ldrh	r2, [r7, #2]
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	887b      	ldrh	r3, [r7, #2]
 8006962:	0a1b      	lsrs	r3, r3, #8
 8006964:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	887a      	ldrh	r2, [r7, #2]
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80069d6:	b480      	push	{r7}
 80069d8:	b087      	sub	sp, #28
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	1c53      	adds	r3, r2, #1
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	1c59      	adds	r1, r3, #1
 80069fa:	6179      	str	r1, [r7, #20]
 80069fc:	7812      	ldrb	r2, [r2, #0]
 80069fe:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f1      	bne.n	80069f0 <mem_cpy+0x1a>
	}
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	617a      	str	r2, [r7, #20]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f3      	bne.n	8006a28 <mem_set+0x10>
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006a4e:	b480      	push	{r7}
 8006a50:	b089      	sub	sp, #36	@ 0x24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	61fa      	str	r2, [r7, #28]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	61ba      	str	r2, [r7, #24]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	1acb      	subs	r3, r1, r3
 8006a7a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	607b      	str	r3, [r7, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <mem_cmp+0x40>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0eb      	beq.n	8006a66 <mem_cmp+0x18>

	return r;
 8006a8e:	697b      	ldr	r3, [r7, #20]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3724      	adds	r7, #36	@ 0x24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006aa6:	e002      	b.n	8006aae <chk_chr+0x12>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	607b      	str	r3, [r7, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <chk_chr+0x26>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d1f2      	bne.n	8006aa8 <chk_chr+0xc>
	return *str;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
	...

08006ad4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e029      	b.n	8006b3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006ae8:	4a27      	ldr	r2, [pc, #156]	@ (8006b88 <chk_lock+0xb4>)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	4413      	add	r3, r2
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01d      	beq.n	8006b32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006af6:	4a24      	ldr	r2, [pc, #144]	@ (8006b88 <chk_lock+0xb4>)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	4413      	add	r3, r2
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d116      	bne.n	8006b36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006b08:	4a1f      	ldr	r2, [pc, #124]	@ (8006b88 <chk_lock+0xb4>)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	4413      	add	r3, r2
 8006b10:	3304      	adds	r3, #4
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d10c      	bne.n	8006b36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8006b88 <chk_lock+0xb4>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	4413      	add	r3, r2
 8006b24:	3308      	adds	r3, #8
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d102      	bne.n	8006b36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b30:	e007      	b.n	8006b42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006b32:	2301      	movs	r3, #1
 8006b34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d9d2      	bls.n	8006ae8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d109      	bne.n	8006b5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <chk_lock+0x80>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d101      	bne.n	8006b58 <chk_lock+0x84>
 8006b54:	2300      	movs	r3, #0
 8006b56:	e010      	b.n	8006b7a <chk_lock+0xa6>
 8006b58:	2312      	movs	r3, #18
 8006b5a:	e00e      	b.n	8006b7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d108      	bne.n	8006b74 <chk_lock+0xa0>
 8006b62:	4a09      	ldr	r2, [pc, #36]	@ (8006b88 <chk_lock+0xb4>)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	4413      	add	r3, r2
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b72:	d101      	bne.n	8006b78 <chk_lock+0xa4>
 8006b74:	2310      	movs	r3, #16
 8006b76:	e000      	b.n	8006b7a <chk_lock+0xa6>
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	2000073c 	.word	0x2000073c

08006b8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b92:	2300      	movs	r3, #0
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	e002      	b.n	8006b9e <enq_lock+0x12>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d806      	bhi.n	8006bb2 <enq_lock+0x26>
 8006ba4:	4a09      	ldr	r2, [pc, #36]	@ (8006bcc <enq_lock+0x40>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f2      	bne.n	8006b98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	bf14      	ite	ne
 8006bb8:	2301      	movne	r3, #1
 8006bba:	2300      	moveq	r3, #0
 8006bbc:	b2db      	uxtb	r3, r3
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	2000073c 	.word	0x2000073c

08006bd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e01f      	b.n	8006c20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006be0:	4a41      	ldr	r2, [pc, #260]	@ (8006ce8 <inc_lock+0x118>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	4413      	add	r3, r2
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d113      	bne.n	8006c1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006bf2:	4a3d      	ldr	r2, [pc, #244]	@ (8006ce8 <inc_lock+0x118>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d109      	bne.n	8006c1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006c06:	4a38      	ldr	r2, [pc, #224]	@ (8006ce8 <inc_lock+0x118>)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3308      	adds	r3, #8
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d006      	beq.n	8006c28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d9dc      	bls.n	8006be0 <inc_lock+0x10>
 8006c26:	e000      	b.n	8006c2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006c28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d132      	bne.n	8006c96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e002      	b.n	8006c3c <inc_lock+0x6c>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d806      	bhi.n	8006c50 <inc_lock+0x80>
 8006c42:	4a29      	ldr	r2, [pc, #164]	@ (8006ce8 <inc_lock+0x118>)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	4413      	add	r3, r2
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f2      	bne.n	8006c36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d101      	bne.n	8006c5a <inc_lock+0x8a>
 8006c56:	2300      	movs	r3, #0
 8006c58:	e040      	b.n	8006cdc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4922      	ldr	r1, [pc, #136]	@ (8006ce8 <inc_lock+0x118>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	440b      	add	r3, r1
 8006c66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	491e      	ldr	r1, [pc, #120]	@ (8006ce8 <inc_lock+0x118>)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	440b      	add	r3, r1
 8006c74:	3304      	adds	r3, #4
 8006c76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695a      	ldr	r2, [r3, #20]
 8006c7c:	491a      	ldr	r1, [pc, #104]	@ (8006ce8 <inc_lock+0x118>)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	440b      	add	r3, r1
 8006c84:	3308      	adds	r3, #8
 8006c86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006c88:	4a17      	ldr	r2, [pc, #92]	@ (8006ce8 <inc_lock+0x118>)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	4413      	add	r3, r2
 8006c90:	330c      	adds	r3, #12
 8006c92:	2200      	movs	r2, #0
 8006c94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d009      	beq.n	8006cb0 <inc_lock+0xe0>
 8006c9c:	4a12      	ldr	r2, [pc, #72]	@ (8006ce8 <inc_lock+0x118>)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	4413      	add	r3, r2
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <inc_lock+0xe0>
 8006cac:	2300      	movs	r3, #0
 8006cae:	e015      	b.n	8006cdc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d108      	bne.n	8006cc8 <inc_lock+0xf8>
 8006cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ce8 <inc_lock+0x118>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	4413      	add	r3, r2
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	e001      	b.n	8006ccc <inc_lock+0xfc>
 8006cc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ccc:	4906      	ldr	r1, [pc, #24]	@ (8006ce8 <inc_lock+0x118>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	440b      	add	r3, r1
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	2000073c 	.word	0x2000073c

08006cec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d825      	bhi.n	8006d4c <dec_lock+0x60>
		n = Files[i].ctr;
 8006d00:	4a17      	ldr	r2, [pc, #92]	@ (8006d60 <dec_lock+0x74>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	4413      	add	r3, r2
 8006d08:	330c      	adds	r3, #12
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006d0e:	89fb      	ldrh	r3, [r7, #14]
 8006d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d14:	d101      	bne.n	8006d1a <dec_lock+0x2e>
 8006d16:	2300      	movs	r3, #0
 8006d18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006d1a:	89fb      	ldrh	r3, [r7, #14]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <dec_lock+0x3a>
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006d26:	4a0e      	ldr	r2, [pc, #56]	@ (8006d60 <dec_lock+0x74>)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	4413      	add	r3, r2
 8006d2e:	330c      	adds	r3, #12
 8006d30:	89fa      	ldrh	r2, [r7, #14]
 8006d32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <dec_lock+0x5a>
 8006d3a:	4a09      	ldr	r2, [pc, #36]	@ (8006d60 <dec_lock+0x74>)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	4413      	add	r3, r2
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	737b      	strb	r3, [r7, #13]
 8006d4a:	e001      	b.n	8006d50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006d50:	7b7b      	ldrb	r3, [r7, #13]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	2000073c 	.word	0x2000073c

08006d64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e010      	b.n	8006d94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d72:	4a0d      	ldr	r2, [pc, #52]	@ (8006da8 <clear_lock+0x44>)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	4413      	add	r3, r2
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d105      	bne.n	8006d8e <clear_lock+0x2a>
 8006d82:	4a09      	ldr	r2, [pc, #36]	@ (8006da8 <clear_lock+0x44>)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	4413      	add	r3, r2
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3301      	adds	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d9eb      	bls.n	8006d72 <clear_lock+0xe>
	}
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	2000073c 	.word	0x2000073c

08006dac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	78db      	ldrb	r3, [r3, #3]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d034      	beq.n	8006e2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7858      	ldrb	r0, [r3, #1]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	f7ff fd3e 	bl	8006854 <disk_write>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	73fb      	strb	r3, [r7, #15]
 8006de2:	e022      	b.n	8006e2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	1ad2      	subs	r2, r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d217      	bcs.n	8006e2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	789b      	ldrb	r3, [r3, #2]
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	e010      	b.n	8006e24 <sync_window+0x78>
					wsect += fs->fsize;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4413      	add	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	7858      	ldrb	r0, [r3, #1]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e16:	2301      	movs	r3, #1
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	f7ff fd1b 	bl	8006854 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d8eb      	bhi.n	8006e02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d01b      	beq.n	8006e84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ffad 	bl	8006dac <sync_window>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d113      	bne.n	8006e84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7858      	ldrb	r0, [r3, #1]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e66:	2301      	movs	r3, #1
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	f7ff fcd3 	bl	8006814 <disk_read>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006e74:	f04f 33ff 	mov.w	r3, #4294967295
 8006e78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff ff87 	bl	8006dac <sync_window>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d158      	bne.n	8006f5a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d148      	bne.n	8006f42 <sync_fs+0xb2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	791b      	ldrb	r3, [r3, #4]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d144      	bne.n	8006f42 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3334      	adds	r3, #52	@ 0x34
 8006ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fda8 	bl	8006a18 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3334      	adds	r3, #52	@ 0x34
 8006ecc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ed0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff fd37 	bl	8006948 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3334      	adds	r3, #52	@ 0x34
 8006ede:	4921      	ldr	r1, [pc, #132]	@ (8006f64 <sync_fs+0xd4>)
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fd4c 	bl	800697e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3334      	adds	r3, #52	@ 0x34
 8006eea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006eee:	491e      	ldr	r1, [pc, #120]	@ (8006f68 <sync_fs+0xd8>)
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fd44 	bl	800697e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3334      	adds	r3, #52	@ 0x34
 8006efa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f7ff fd3a 	bl	800697e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3334      	adds	r3, #52	@ 0x34
 8006f0e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7ff fd30 	bl	800697e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	7858      	ldrb	r0, [r3, #1]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f36:	2301      	movs	r3, #1
 8006f38:	f7ff fc8c 	bl	8006854 <disk_write>
			fs->fsi_flag = 0;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2200      	movs	r2, #0
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fca2 	bl	8006894 <disk_ioctl>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <sync_fs+0xca>
 8006f56:	2301      	movs	r3, #1
 8006f58:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	41615252 	.word	0x41615252
 8006f68:	61417272 	.word	0x61417272

08006f6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	3b02      	subs	r3, #2
 8006f7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	3b02      	subs	r3, #2
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d301      	bcc.n	8006f8c <clust2sect+0x20>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e008      	b.n	8006f9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	895b      	ldrh	r3, [r3, #10]
 8006f90:	461a      	mov	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	fb03 f202 	mul.w	r2, r3, r2
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9c:	4413      	add	r3, r2
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b086      	sub	sp, #24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d904      	bls.n	8006fca <get_fat+0x20>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d302      	bcc.n	8006fd0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006fca:	2301      	movs	r3, #1
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e08e      	b.n	80070ee <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d061      	beq.n	80070a2 <get_fat+0xf8>
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	dc7b      	bgt.n	80070da <get_fat+0x130>
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d002      	beq.n	8006fec <get_fat+0x42>
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d041      	beq.n	800706e <get_fat+0xc4>
 8006fea:	e076      	b.n	80070da <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	0a5b      	lsrs	r3, r3, #9
 8007002:	4413      	add	r3, r2
 8007004:	4619      	mov	r1, r3
 8007006:	6938      	ldr	r0, [r7, #16]
 8007008:	f7ff ff14 	bl	8006e34 <move_window>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d166      	bne.n	80070e0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	60fa      	str	r2, [r7, #12]
 8007018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4413      	add	r3, r2
 8007020:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007024:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	0a5b      	lsrs	r3, r3, #9
 800702e:	4413      	add	r3, r2
 8007030:	4619      	mov	r1, r3
 8007032:	6938      	ldr	r0, [r7, #16]
 8007034:	f7ff fefe 	bl	8006e34 <move_window>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d152      	bne.n	80070e4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4413      	add	r3, r2
 8007048:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	4313      	orrs	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <get_fat+0xba>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	e002      	b.n	800706a <get_fat+0xc0>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800706a:	617b      	str	r3, [r7, #20]
			break;
 800706c:	e03f      	b.n	80070ee <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	4413      	add	r3, r2
 8007078:	4619      	mov	r1, r3
 800707a:	6938      	ldr	r0, [r7, #16]
 800707c:	f7ff feda 	bl	8006e34 <move_window>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d130      	bne.n	80070e8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007094:	4413      	add	r3, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fc1a 	bl	80068d0 <ld_word>
 800709c:	4603      	mov	r3, r0
 800709e:	617b      	str	r3, [r7, #20]
			break;
 80070a0:	e025      	b.n	80070ee <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	4413      	add	r3, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	6938      	ldr	r0, [r7, #16]
 80070b0:	f7ff fec0 	bl	8006e34 <move_window>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d118      	bne.n	80070ec <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80070c8:	4413      	add	r3, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fc19 	bl	8006902 <ld_dword>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80070d6:	617b      	str	r3, [r7, #20]
			break;
 80070d8:	e009      	b.n	80070ee <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e006      	b.n	80070ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070e0:	bf00      	nop
 80070e2:	e004      	b.n	80070ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070ec:	bf00      	nop
		}
	}

	return val;
 80070ee:	697b      	ldr	r3, [r7, #20]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b089      	sub	sp, #36	@ 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007104:	2302      	movs	r3, #2
 8007106:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b01      	cmp	r3, #1
 800710c:	f240 80d9 	bls.w	80072c2 <put_fat+0x1ca>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	f080 80d3 	bcs.w	80072c2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b03      	cmp	r3, #3
 8007122:	f000 8096 	beq.w	8007252 <put_fat+0x15a>
 8007126:	2b03      	cmp	r3, #3
 8007128:	f300 80cb 	bgt.w	80072c2 <put_fat+0x1ca>
 800712c:	2b01      	cmp	r3, #1
 800712e:	d002      	beq.n	8007136 <put_fat+0x3e>
 8007130:	2b02      	cmp	r3, #2
 8007132:	d06e      	beq.n	8007212 <put_fat+0x11a>
 8007134:	e0c5      	b.n	80072c2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	4413      	add	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	0a5b      	lsrs	r3, r3, #9
 800714c:	4413      	add	r3, r2
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff fe6f 	bl	8006e34 <move_window>
 8007156:	4603      	mov	r3, r0
 8007158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800715a:	7ffb      	ldrb	r3, [r7, #31]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f040 80a9 	bne.w	80072b4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1c59      	adds	r1, r3, #1
 800716c:	61b9      	str	r1, [r7, #24]
 800716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007172:	4413      	add	r3, r2
 8007174:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00d      	beq.n	800719c <put_fat+0xa4>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b25b      	sxtb	r3, r3
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	b25a      	sxtb	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	b25b      	sxtb	r3, r3
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	b25b      	sxtb	r3, r3
 8007194:	4313      	orrs	r3, r2
 8007196:	b25b      	sxtb	r3, r3
 8007198:	b2db      	uxtb	r3, r3
 800719a:	e001      	b.n	80071a0 <put_fat+0xa8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	0a5b      	lsrs	r3, r3, #9
 80071b2:	4413      	add	r3, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff fe3c 	bl	8006e34 <move_window>
 80071bc:	4603      	mov	r3, r0
 80071be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071c0:	7ffb      	ldrb	r3, [r7, #31]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d178      	bne.n	80072b8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	4413      	add	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <put_fat+0xf0>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	091b      	lsrs	r3, r3, #4
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	e00e      	b.n	8007206 <put_fat+0x10e>
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	b25b      	sxtb	r3, r3
 80071ee:	f023 030f 	bic.w	r3, r3, #15
 80071f2:	b25a      	sxtb	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	0a1b      	lsrs	r3, r3, #8
 80071f8:	b25b      	sxtb	r3, r3
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	b25b      	sxtb	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b25b      	sxtb	r3, r3
 8007204:	b2db      	uxtb	r3, r3
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	70da      	strb	r2, [r3, #3]
			break;
 8007210:	e057      	b.n	80072c2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	0a1b      	lsrs	r3, r3, #8
 800721a:	4413      	add	r3, r2
 800721c:	4619      	mov	r1, r3
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fe08 	bl	8006e34 <move_window>
 8007224:	4603      	mov	r3, r0
 8007226:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007228:	7ffb      	ldrb	r3, [r7, #31]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d146      	bne.n	80072bc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800723c:	4413      	add	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	b292      	uxth	r2, r2
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fb7f 	bl	8006948 <st_word>
			fs->wflag = 1;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	70da      	strb	r2, [r3, #3]
			break;
 8007250:	e037      	b.n	80072c2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	09db      	lsrs	r3, r3, #7
 800725a:	4413      	add	r3, r2
 800725c:	4619      	mov	r1, r3
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7ff fde8 	bl	8006e34 <move_window>
 8007264:	4603      	mov	r3, r0
 8007266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007268:	7ffb      	ldrb	r3, [r7, #31]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d128      	bne.n	80072c0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007282:	4413      	add	r3, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fb3c 	bl	8006902 <ld_dword>
 800728a:	4603      	mov	r3, r0
 800728c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007290:	4323      	orrs	r3, r4
 8007292:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80072a2:	4413      	add	r3, r2
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fb69 	bl	800697e <st_dword>
			fs->wflag = 1;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	70da      	strb	r2, [r3, #3]
			break;
 80072b2:	e006      	b.n	80072c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072b4:	bf00      	nop
 80072b6:	e004      	b.n	80072c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072b8:	bf00      	nop
 80072ba:	e002      	b.n	80072c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072bc:	bf00      	nop
 80072be:	e000      	b.n	80072c2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072c0:	bf00      	nop
		}
	}
	return res;
 80072c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3724      	adds	r7, #36	@ 0x24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd90      	pop	{r4, r7, pc}

080072cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d904      	bls.n	80072f2 <remove_chain+0x26>
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d301      	bcc.n	80072f6 <remove_chain+0x2a>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e04b      	b.n	800738e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00c      	beq.n	8007316 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80072fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	69b8      	ldr	r0, [r7, #24]
 8007304:	f7ff fef8 	bl	80070f8 <put_fat>
 8007308:	4603      	mov	r3, r0
 800730a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800730c:	7ffb      	ldrb	r3, [r7, #31]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <remove_chain+0x4a>
 8007312:	7ffb      	ldrb	r3, [r7, #31]
 8007314:	e03b      	b.n	800738e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff fe46 	bl	8006faa <get_fat>
 800731e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d031      	beq.n	800738a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <remove_chain+0x64>
 800732c:	2302      	movs	r3, #2
 800732e:	e02e      	b.n	800738e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d101      	bne.n	800733c <remove_chain+0x70>
 8007338:	2301      	movs	r3, #1
 800733a:	e028      	b.n	800738e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800733c:	2200      	movs	r2, #0
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	69b8      	ldr	r0, [r7, #24]
 8007342:	f7ff fed9 	bl	80070f8 <put_fat>
 8007346:	4603      	mov	r3, r0
 8007348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800734a:	7ffb      	ldrb	r3, [r7, #31]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <remove_chain+0x88>
 8007350:	7ffb      	ldrb	r3, [r7, #31]
 8007352:	e01c      	b.n	800738e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	695a      	ldr	r2, [r3, #20]
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	3b02      	subs	r3, #2
 800735e:	429a      	cmp	r2, r3
 8007360:	d20b      	bcs.n	800737a <remove_chain+0xae>
			fs->free_clst++;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	791b      	ldrb	r3, [r3, #4]
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	b2da      	uxtb	r2, r3
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	d3c6      	bcc.n	8007316 <remove_chain+0x4a>
 8007388:	e000      	b.n	800738c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800738a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b088      	sub	sp, #32
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10d      	bne.n	80073c8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <create_chain+0x2c>
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d31b      	bcc.n	80073fa <create_chain+0x64>
 80073c2:	2301      	movs	r3, #1
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	e018      	b.n	80073fa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff fded 	bl	8006faa <get_fat>
 80073d0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d801      	bhi.n	80073dc <create_chain+0x46>
 80073d8:	2301      	movs	r3, #1
 80073da:	e070      	b.n	80074be <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e2:	d101      	bne.n	80073e8 <create_chain+0x52>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	e06a      	b.n	80074be <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d201      	bcs.n	80073f6 <create_chain+0x60>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	e063      	b.n	80074be <create_chain+0x128>
		scl = clst;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	3301      	adds	r3, #1
 8007402:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	429a      	cmp	r2, r3
 800740c:	d307      	bcc.n	800741e <create_chain+0x88>
				ncl = 2;
 800740e:	2302      	movs	r3, #2
 8007410:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	429a      	cmp	r2, r3
 8007418:	d901      	bls.n	800741e <create_chain+0x88>
 800741a:	2300      	movs	r3, #0
 800741c:	e04f      	b.n	80074be <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800741e:	69f9      	ldr	r1, [r7, #28]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fdc2 	bl	8006faa <get_fat>
 8007426:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00e      	beq.n	800744c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d003      	beq.n	800743c <create_chain+0xa6>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d101      	bne.n	8007440 <create_chain+0xaa>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e03e      	b.n	80074be <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	429a      	cmp	r2, r3
 8007446:	d1da      	bne.n	80073fe <create_chain+0x68>
 8007448:	2300      	movs	r3, #0
 800744a:	e038      	b.n	80074be <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800744c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800744e:	f04f 32ff 	mov.w	r2, #4294967295
 8007452:	69f9      	ldr	r1, [r7, #28]
 8007454:	6938      	ldr	r0, [r7, #16]
 8007456:	f7ff fe4f 	bl	80070f8 <put_fat>
 800745a:	4603      	mov	r3, r0
 800745c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d109      	bne.n	8007478 <create_chain+0xe2>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6938      	ldr	r0, [r7, #16]
 8007470:	f7ff fe42 	bl	80070f8 <put_fat>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d116      	bne.n	80074ac <create_chain+0x116>
		fs->last_clst = ncl;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	3b02      	subs	r3, #2
 800748e:	429a      	cmp	r2, r3
 8007490:	d804      	bhi.n	800749c <create_chain+0x106>
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	1e5a      	subs	r2, r3, #1
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	791b      	ldrb	r3, [r3, #4]
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	711a      	strb	r2, [r3, #4]
 80074aa:	e007      	b.n	80074bc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d102      	bne.n	80074b8 <create_chain+0x122>
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295
 80074b6:	e000      	b.n	80074ba <create_chain+0x124>
 80074b8:	2301      	movs	r3, #1
 80074ba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80074bc:	69fb      	ldr	r3, [r7, #28]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b087      	sub	sp, #28
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	3304      	adds	r3, #4
 80074dc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	0a5b      	lsrs	r3, r3, #9
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	8952      	ldrh	r2, [r2, #10]
 80074e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	613a      	str	r2, [r7, #16]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <clmt_clust+0x3a>
 80074fc:	2300      	movs	r3, #0
 80074fe:	e010      	b.n	8007522 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	429a      	cmp	r2, r3
 8007506:	d307      	bcc.n	8007518 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	3304      	adds	r3, #4
 8007514:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007516:	e7e9      	b.n	80074ec <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007518:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	4413      	add	r3, r2
}
 8007522:	4618      	mov	r0, r3
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b086      	sub	sp, #24
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007544:	d204      	bcs.n	8007550 <dir_sdi+0x22>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007550:	2302      	movs	r3, #2
 8007552:	e063      	b.n	800761c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <dir_sdi+0x46>
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d902      	bls.n	8007574 <dir_sdi+0x46>
		clst = fs->dirbase;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007572:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10c      	bne.n	8007594 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	8912      	ldrh	r2, [r2, #8]
 8007582:	4293      	cmp	r3, r2
 8007584:	d301      	bcc.n	800758a <dir_sdi+0x5c>
 8007586:	2302      	movs	r3, #2
 8007588:	e048      	b.n	800761c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	61da      	str	r2, [r3, #28]
 8007592:	e029      	b.n	80075e8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	895b      	ldrh	r3, [r3, #10]
 8007598:	025b      	lsls	r3, r3, #9
 800759a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800759c:	e019      	b.n	80075d2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6979      	ldr	r1, [r7, #20]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fd01 	bl	8006faa <get_fat>
 80075a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b0:	d101      	bne.n	80075b6 <dir_sdi+0x88>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e032      	b.n	800761c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d904      	bls.n	80075c6 <dir_sdi+0x98>
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d301      	bcc.n	80075ca <dir_sdi+0x9c>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e028      	b.n	800761c <dir_sdi+0xee>
			ofs -= csz;
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d2e1      	bcs.n	800759e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80075da:	6979      	ldr	r1, [r7, #20]
 80075dc:	6938      	ldr	r0, [r7, #16]
 80075de:	f7ff fcc5 	bl	8006f6c <clust2sect>
 80075e2:	4602      	mov	r2, r0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <dir_sdi+0xcc>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e010      	b.n	800761c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	0a5b      	lsrs	r3, r3, #9
 8007602:	441a      	add	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007614:	441a      	add	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	3320      	adds	r3, #32
 800763a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <dir_next+0x28>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800764a:	d301      	bcc.n	8007650 <dir_next+0x2c>
 800764c:	2304      	movs	r3, #4
 800764e:	e0aa      	b.n	80077a6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 8098 	bne.w	800778c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	8912      	ldrh	r2, [r2, #8]
 8007676:	4293      	cmp	r3, r2
 8007678:	f0c0 8088 	bcc.w	800778c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	61da      	str	r2, [r3, #28]
 8007682:	2304      	movs	r3, #4
 8007684:	e08f      	b.n	80077a6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	0a5b      	lsrs	r3, r3, #9
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	8952      	ldrh	r2, [r2, #10]
 800768e:	3a01      	subs	r2, #1
 8007690:	4013      	ands	r3, r2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d17a      	bne.n	800778c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f7ff fc83 	bl	8006faa <get_fat>
 80076a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d801      	bhi.n	80076b0 <dir_next+0x8c>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e07a      	b.n	80077a6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d101      	bne.n	80076bc <dir_next+0x98>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e074      	b.n	80077a6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d358      	bcc.n	8007778 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	61da      	str	r2, [r3, #28]
 80076d2:	2304      	movs	r3, #4
 80076d4:	e067      	b.n	80077a6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7ff fe59 	bl	8007396 <create_chain>
 80076e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <dir_next+0xcc>
 80076ec:	2307      	movs	r3, #7
 80076ee:	e05a      	b.n	80077a6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <dir_next+0xd6>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e055      	b.n	80077a6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d101      	bne.n	8007706 <dir_next+0xe2>
 8007702:	2301      	movs	r3, #1
 8007704:	e04f      	b.n	80077a6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff fb50 	bl	8006dac <sync_window>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <dir_next+0xf2>
 8007712:	2301      	movs	r3, #1
 8007714:	e047      	b.n	80077a6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3334      	adds	r3, #52	@ 0x34
 800771a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff f979 	bl	8006a18 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007726:	2300      	movs	r3, #0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff fc1d 	bl	8006f6c <clust2sect>
 8007732:	4602      	mov	r2, r0
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	631a      	str	r2, [r3, #48]	@ 0x30
 8007738:	e012      	b.n	8007760 <dir_next+0x13c>
						fs->wflag = 1;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2201      	movs	r2, #1
 800773e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fb33 	bl	8006dac <sync_window>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <dir_next+0x12c>
 800774c:	2301      	movs	r3, #1
 800774e:	e02a      	b.n	80077a6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3301      	adds	r3, #1
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	895b      	ldrh	r3, [r3, #10]
 8007764:	461a      	mov	r2, r3
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4293      	cmp	r3, r2
 800776a:	d3e6      	bcc.n	800773a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800777e:	6979      	ldr	r1, [r7, #20]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fbf3 	bl	8006f6c <clust2sect>
 8007786:	4602      	mov	r2, r0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779e:	441a      	add	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80077be:	2100      	movs	r1, #0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff feb4 	bl	800752e <dir_sdi>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d12b      	bne.n	8007828 <dir_alloc+0x7a>
		n = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	4619      	mov	r1, r3
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7ff fb2a 	bl	8006e34 <move_window>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d11d      	bne.n	8007826 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2be5      	cmp	r3, #229	@ 0xe5
 80077f2:	d004      	beq.n	80077fe <dir_alloc+0x50>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d107      	bne.n	800780e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3301      	adds	r3, #1
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d102      	bne.n	8007812 <dir_alloc+0x64>
 800780c:	e00c      	b.n	8007828 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007812:	2101      	movs	r1, #1
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff ff05 	bl	8007624 <dir_next>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0d7      	beq.n	80077d4 <dir_alloc+0x26>
 8007824:	e000      	b.n	8007828 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007826:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	2b04      	cmp	r3, #4
 800782c:	d101      	bne.n	8007832 <dir_alloc+0x84>
 800782e:	2307      	movs	r3, #7
 8007830:	75fb      	strb	r3, [r7, #23]
	return res;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	331a      	adds	r3, #26
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff f840 	bl	80068d0 <ld_word>
 8007850:	4603      	mov	r3, r0
 8007852:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b03      	cmp	r3, #3
 800785a:	d109      	bne.n	8007870 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	3314      	adds	r3, #20
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff f835 	bl	80068d0 <ld_word>
 8007866:	4603      	mov	r3, r0
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007870:	68fb      	ldr	r3, [r7, #12]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	331a      	adds	r3, #26
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	b292      	uxth	r2, r2
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff f859 	bl	8006948 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b03      	cmp	r3, #3
 800789c:	d109      	bne.n	80078b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f103 0214 	add.w	r2, r3, #20
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	0c1b      	lsrs	r3, r3, #16
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7ff f84b 	bl	8006948 <st_word>
	}
}
 80078b2:	bf00      	nop
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	331a      	adds	r3, #26
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff f800 	bl	80068d0 <ld_word>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <cmp_lfn+0x1e>
 80078d6:	2300      	movs	r3, #0
 80078d8:	e059      	b.n	800798e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078e2:	1e5a      	subs	r2, r3, #1
 80078e4:	4613      	mov	r3, r2
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80078f0:	2301      	movs	r3, #1
 80078f2:	81fb      	strh	r3, [r7, #14]
 80078f4:	2300      	movs	r3, #0
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	e033      	b.n	8007962 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80078fa:	4a27      	ldr	r2, [pc, #156]	@ (8007998 <cmp_lfn+0xdc>)
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4413      	add	r3, r2
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	4413      	add	r3, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe ffe1 	bl	80068d0 <ld_word>
 800790e:	4603      	mov	r3, r0
 8007910:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007912:	89fb      	ldrh	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01a      	beq.n	800794e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2bfe      	cmp	r3, #254	@ 0xfe
 800791c:	d812      	bhi.n	8007944 <cmp_lfn+0x88>
 800791e:	89bb      	ldrh	r3, [r7, #12]
 8007920:	4618      	mov	r0, r3
 8007922:	f002 ffa3 	bl	800a86c <ff_wtoupper>
 8007926:	4603      	mov	r3, r0
 8007928:	461c      	mov	r4, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	617a      	str	r2, [r7, #20]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	4413      	add	r3, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f002 ff97 	bl	800a86c <ff_wtoupper>
 800793e:	4603      	mov	r3, r0
 8007940:	429c      	cmp	r4, r3
 8007942:	d001      	beq.n	8007948 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007944:	2300      	movs	r3, #0
 8007946:	e022      	b.n	800798e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007948:	89bb      	ldrh	r3, [r7, #12]
 800794a:	81fb      	strh	r3, [r7, #14]
 800794c:	e006      	b.n	800795c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800794e:	89bb      	ldrh	r3, [r7, #12]
 8007950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007954:	4293      	cmp	r3, r2
 8007956:	d001      	beq.n	800795c <cmp_lfn+0xa0>
 8007958:	2300      	movs	r3, #0
 800795a:	e018      	b.n	800798e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	3301      	adds	r3, #1
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b0c      	cmp	r3, #12
 8007966:	d9c8      	bls.n	80078fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <cmp_lfn+0xd0>
 8007974:	89fb      	ldrh	r3, [r7, #14]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <cmp_lfn+0xd0>
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <cmp_lfn+0xd0>
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800798c:	2301      	movs	r3, #1
}
 800798e:	4618      	mov	r0, r3
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	bd90      	pop	{r4, r7, pc}
 8007996:	bf00      	nop
 8007998:	0800be4c 	.word	0x0800be4c

0800799c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	331a      	adds	r3, #26
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe ff90 	bl	80068d0 <ld_word>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <pick_lfn+0x1e>
 80079b6:	2300      	movs	r3, #0
 80079b8:	e04d      	b.n	8007a56 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079c2:	1e5a      	subs	r2, r3, #1
 80079c4:	4613      	mov	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80079d0:	2301      	movs	r3, #1
 80079d2:	81fb      	strh	r3, [r7, #14]
 80079d4:	2300      	movs	r3, #0
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	e028      	b.n	8007a2c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80079da:	4a21      	ldr	r2, [pc, #132]	@ (8007a60 <pick_lfn+0xc4>)
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	4413      	add	r3, r2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	4413      	add	r3, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe ff71 	bl	80068d0 <ld_word>
 80079ee:	4603      	mov	r3, r0
 80079f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80079f2:	89fb      	ldrh	r3, [r7, #14]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00f      	beq.n	8007a18 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80079fc:	d901      	bls.n	8007a02 <pick_lfn+0x66>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e029      	b.n	8007a56 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007a02:	89bb      	ldrh	r3, [r7, #12]
 8007a04:	81fb      	strh	r3, [r7, #14]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	617a      	str	r2, [r7, #20]
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	89fa      	ldrh	r2, [r7, #14]
 8007a14:	801a      	strh	r2, [r3, #0]
 8007a16:	e006      	b.n	8007a26 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007a18:	89bb      	ldrh	r3, [r7, #12]
 8007a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d001      	beq.n	8007a26 <pick_lfn+0x8a>
 8007a22:	2300      	movs	r3, #0
 8007a24:	e017      	b.n	8007a56 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2b0c      	cmp	r3, #12
 8007a30:	d9d3      	bls.n	80079da <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a42:	d901      	bls.n	8007a48 <pick_lfn+0xac>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e006      	b.n	8007a56 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	2200      	movs	r2, #0
 8007a52:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007a54:	2301      	movs	r3, #1
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	0800be4c 	.word	0x0800be4c

08007a64 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	461a      	mov	r2, r3
 8007a72:	460b      	mov	r3, r1
 8007a74:	71fb      	strb	r3, [r7, #7]
 8007a76:	4613      	mov	r3, r2
 8007a78:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	330d      	adds	r3, #13
 8007a7e:	79ba      	ldrb	r2, [r7, #6]
 8007a80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	330b      	adds	r3, #11
 8007a86:	220f      	movs	r2, #15
 8007a88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	331a      	adds	r3, #26
 8007a96:	2100      	movs	r1, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe ff55 	bl	8006948 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	82fb      	strh	r3, [r7, #22]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007ab6:	8afb      	ldrh	r3, [r7, #22]
 8007ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d007      	beq.n	8007ad0 <put_lfn+0x6c>
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	61fa      	str	r2, [r7, #28]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007ad0:	4a17      	ldr	r2, [pc, #92]	@ (8007b30 <put_lfn+0xcc>)
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	8afa      	ldrh	r2, [r7, #22]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe ff30 	bl	8006948 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007ae8:	8afb      	ldrh	r3, [r7, #22]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <put_lfn+0x90>
 8007aee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007af2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	3301      	adds	r3, #1
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b0c      	cmp	r3, #12
 8007afe:	d9da      	bls.n	8007ab6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007b00:	8afb      	ldrh	r3, [r7, #22]
 8007b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d006      	beq.n	8007b18 <put_lfn+0xb4>
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <put_lfn+0xbc>
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	79fa      	ldrb	r2, [r7, #7]
 8007b24:	701a      	strb	r2, [r3, #0]
}
 8007b26:	bf00      	nop
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	0800be4c 	.word	0x0800be4c

08007b34 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08c      	sub	sp, #48	@ 0x30
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007b42:	220b      	movs	r2, #11
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7fe ff45 	bl	80069d6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d92b      	bls.n	8007baa <gen_numname+0x76>
		sr = seq;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007b56:	e022      	b.n	8007b9e <gen_numname+0x6a>
			wc = *lfn++;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	1c9a      	adds	r2, r3, #2
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007b62:	2300      	movs	r3, #0
 8007b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b66:	e017      	b.n	8007b98 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	005a      	lsls	r2, r3, #1
 8007b6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007b76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b78:	085b      	lsrs	r3, r3, #1
 8007b7a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <gen_numname+0x5e>
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007b8c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007b90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	3301      	adds	r3, #1
 8007b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	2b0f      	cmp	r3, #15
 8007b9c:	d9e4      	bls.n	8007b68 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1d8      	bne.n	8007b58 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007baa:	2307      	movs	r3, #7
 8007bac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	3330      	adds	r3, #48	@ 0x30
 8007bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bc2:	2b39      	cmp	r3, #57	@ 0x39
 8007bc4:	d904      	bls.n	8007bd0 <gen_numname+0x9c>
 8007bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bca:	3307      	adds	r3, #7
 8007bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd2:	1e5a      	subs	r2, r3, #1
 8007bd4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007bd6:	3330      	adds	r3, #48	@ 0x30
 8007bd8:	443b      	add	r3, r7
 8007bda:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007bde:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	091b      	lsrs	r3, r3, #4
 8007be6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1df      	bne.n	8007bae <gen_numname+0x7a>
	ns[i] = '~';
 8007bee:	f107 0214 	add.w	r2, r7, #20
 8007bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf4:	4413      	add	r3, r2
 8007bf6:	227e      	movs	r2, #126	@ 0x7e
 8007bf8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfe:	e016      	b.n	8007c2e <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	4413      	add	r3, r2
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b80      	cmp	r3, #128	@ 0x80
 8007c0a:	d90d      	bls.n	8007c28 <gen_numname+0xf4>
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	4413      	add	r3, r2
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2bff      	cmp	r3, #255	@ 0xff
 8007c16:	d007      	beq.n	8007c28 <gen_numname+0xf4>
			if (j == i - 1) break;
 8007c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d010      	beq.n	8007c44 <gen_numname+0x110>
			j++;
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	3301      	adds	r3, #1
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d207      	bcs.n	8007c46 <gen_numname+0x112>
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	4413      	add	r3, r2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d1de      	bne.n	8007c00 <gen_numname+0xcc>
 8007c42:	e000      	b.n	8007c46 <gen_numname+0x112>
			if (j == i - 1) break;
 8007c44:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c48:	2b07      	cmp	r3, #7
 8007c4a:	d807      	bhi.n	8007c5c <gen_numname+0x128>
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007c52:	3330      	adds	r3, #48	@ 0x30
 8007c54:	443b      	add	r3, r7
 8007c56:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007c5a:	e000      	b.n	8007c5e <gen_numname+0x12a>
 8007c5c:	2120      	movs	r1, #32
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	460a      	mov	r2, r1
 8007c6a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	2b07      	cmp	r3, #7
 8007c70:	d9e9      	bls.n	8007c46 <gen_numname+0x112>
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	3730      	adds	r7, #48	@ 0x30
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007c88:	230b      	movs	r3, #11
 8007c8a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	0852      	lsrs	r2, r2, #1
 8007c92:	01db      	lsls	r3, r3, #7
 8007c94:	4313      	orrs	r3, r2
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	1c59      	adds	r1, r3, #1
 8007c9c:	6079      	str	r1, [r7, #4]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	60bb      	str	r3, [r7, #8]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1ed      	bne.n	8007c8c <sum_sfn+0x10>
	return sum;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b086      	sub	sp, #24
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007cc8:	2304      	movs	r3, #4
 8007cca:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007cd2:	23ff      	movs	r3, #255	@ 0xff
 8007cd4:	757b      	strb	r3, [r7, #21]
 8007cd6:	23ff      	movs	r3, #255	@ 0xff
 8007cd8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007cda:	e081      	b.n	8007de0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6938      	ldr	r0, [r7, #16]
 8007ce4:	f7ff f8a6 	bl	8006e34 <move_window>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d17c      	bne.n	8007dec <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007cfa:	7dbb      	ldrb	r3, [r7, #22]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007d00:	2304      	movs	r3, #4
 8007d02:	75fb      	strb	r3, [r7, #23]
 8007d04:	e077      	b.n	8007df6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	330b      	adds	r3, #11
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7bfa      	ldrb	r2, [r7, #15]
 8007d18:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007d1a:	7dbb      	ldrb	r3, [r7, #22]
 8007d1c:	2be5      	cmp	r3, #229	@ 0xe5
 8007d1e:	d00e      	beq.n	8007d3e <dir_read+0x80>
 8007d20:	7dbb      	ldrb	r3, [r7, #22]
 8007d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d24:	d00b      	beq.n	8007d3e <dir_read+0x80>
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	f023 0320 	bic.w	r3, r3, #32
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	bf0c      	ite	eq
 8007d30:	2301      	moveq	r3, #1
 8007d32:	2300      	movne	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d002      	beq.n	8007d44 <dir_read+0x86>
				ord = 0xFF;
 8007d3e:	23ff      	movs	r3, #255	@ 0xff
 8007d40:	757b      	strb	r3, [r7, #21]
 8007d42:	e044      	b.n	8007dce <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b0f      	cmp	r3, #15
 8007d48:	d12f      	bne.n	8007daa <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007d4a:	7dbb      	ldrb	r3, [r7, #22]
 8007d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00d      	beq.n	8007d70 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	7b5b      	ldrb	r3, [r3, #13]
 8007d5a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
 8007d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d62:	75bb      	strb	r3, [r7, #22]
 8007d64:	7dbb      	ldrb	r3, [r7, #22]
 8007d66:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	695a      	ldr	r2, [r3, #20]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007d70:	7dba      	ldrb	r2, [r7, #22]
 8007d72:	7d7b      	ldrb	r3, [r7, #21]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d115      	bne.n	8007da4 <dir_read+0xe6>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	330d      	adds	r3, #13
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	7d3a      	ldrb	r2, [r7, #20]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d10e      	bne.n	8007da4 <dir_read+0xe6>
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f7ff fe03 	bl	800799c <pick_lfn>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <dir_read+0xe6>
 8007d9c:	7d7b      	ldrb	r3, [r7, #21]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	e000      	b.n	8007da6 <dir_read+0xe8>
 8007da4:	23ff      	movs	r3, #255	@ 0xff
 8007da6:	757b      	strb	r3, [r7, #21]
 8007da8:	e011      	b.n	8007dce <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007daa:	7d7b      	ldrb	r3, [r7, #21]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <dir_read+0x106>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff ff61 	bl	8007c7c <sum_sfn>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	7d3b      	ldrb	r3, [r7, #20]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d015      	beq.n	8007df0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dca:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8007dcc:	e010      	b.n	8007df0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007dce:	2100      	movs	r1, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fc27 	bl	8007624 <dir_next>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <dir_read+0x136>
	while (dp->sect) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f47f af79 	bne.w	8007cdc <dir_read+0x1e>
 8007dea:	e004      	b.n	8007df6 <dir_read+0x138>
		if (res != FR_OK) break;
 8007dec:	bf00      	nop
 8007dee:	e002      	b.n	8007df6 <dir_read+0x138>
					break;
 8007df0:	bf00      	nop
 8007df2:	e000      	b.n	8007df6 <dir_read+0x138>
		if (res != FR_OK) break;
 8007df4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <dir_read+0x144>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	61da      	str	r2, [r3, #28]
	return res;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff fb86 	bl	800752e <dir_sdi>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <dir_find+0x24>
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	e0a9      	b.n	8007f84 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007e30:	23ff      	movs	r3, #255	@ 0xff
 8007e32:	753b      	strb	r3, [r7, #20]
 8007e34:	7d3b      	ldrb	r3, [r7, #20]
 8007e36:	757b      	strb	r3, [r7, #21]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6938      	ldr	r0, [r7, #16]
 8007e48:	f7fe fff4 	bl	8006e34 <move_window>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f040 8090 	bne.w	8007f78 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e60:	7dbb      	ldrb	r3, [r7, #22]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <dir_find+0x60>
 8007e66:	2304      	movs	r3, #4
 8007e68:	75fb      	strb	r3, [r7, #23]
 8007e6a:	e08a      	b.n	8007f82 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	330b      	adds	r3, #11
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7bfa      	ldrb	r2, [r7, #15]
 8007e7e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007e80:	7dbb      	ldrb	r3, [r7, #22]
 8007e82:	2be5      	cmp	r3, #229	@ 0xe5
 8007e84:	d007      	beq.n	8007e96 <dir_find+0x8a>
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <dir_find+0x98>
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	2b0f      	cmp	r3, #15
 8007e94:	d006      	beq.n	8007ea4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007e96:	23ff      	movs	r3, #255	@ 0xff
 8007e98:	757b      	strb	r3, [r7, #21]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ea2:	e05e      	b.n	8007f62 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b0f      	cmp	r3, #15
 8007ea8:	d136      	bne.n	8007f18 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d154      	bne.n	8007f62 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007eb8:	7dbb      	ldrb	r3, [r7, #22]
 8007eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00d      	beq.n	8007ede <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	7b5b      	ldrb	r3, [r3, #13]
 8007ec8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007eca:	7dbb      	ldrb	r3, [r7, #22]
 8007ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ed0:	75bb      	strb	r3, [r7, #22]
 8007ed2:	7dbb      	ldrb	r3, [r7, #22]
 8007ed4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695a      	ldr	r2, [r3, #20]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007ede:	7dba      	ldrb	r2, [r7, #22]
 8007ee0:	7d7b      	ldrb	r3, [r7, #21]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d115      	bne.n	8007f12 <dir_find+0x106>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	330d      	adds	r3, #13
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	7d3a      	ldrb	r2, [r7, #20]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d10e      	bne.n	8007f12 <dir_find+0x106>
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f7ff fcdc 	bl	80078bc <cmp_lfn>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <dir_find+0x106>
 8007f0a:	7d7b      	ldrb	r3, [r7, #21]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	e000      	b.n	8007f14 <dir_find+0x108>
 8007f12:	23ff      	movs	r3, #255	@ 0xff
 8007f14:	757b      	strb	r3, [r7, #21]
 8007f16:	e024      	b.n	8007f62 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007f18:	7d7b      	ldrb	r3, [r7, #21]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <dir_find+0x126>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff feaa 	bl	8007c7c <sum_sfn>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	7d3b      	ldrb	r3, [r7, #20]
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d024      	beq.n	8007f7c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <dir_find+0x14a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a18      	ldr	r0, [r3, #32]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3324      	adds	r3, #36	@ 0x24
 8007f48:	220b      	movs	r2, #11
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f7fe fd7f 	bl	8006a4e <mem_cmp>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d014      	beq.n	8007f80 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007f56:	23ff      	movs	r3, #255	@ 0xff
 8007f58:	757b      	strb	r3, [r7, #21]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f60:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007f62:	2100      	movs	r1, #0
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fb5d 	bl	8007624 <dir_next>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f43f af65 	beq.w	8007e40 <dir_find+0x34>
 8007f76:	e004      	b.n	8007f82 <dir_find+0x176>
		if (res != FR_OK) break;
 8007f78:	bf00      	nop
 8007f7a:	e002      	b.n	8007f82 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007f7c:	bf00      	nop
 8007f7e:	e000      	b.n	8007f82 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007f80:	bf00      	nop

	return res;
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08c      	sub	sp, #48	@ 0x30
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007fa0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <dir_register+0x20>
 8007fa8:	2306      	movs	r3, #6
 8007faa:	e0e0      	b.n	800816e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007fac:	2300      	movs	r3, #0
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb0:	e002      	b.n	8007fb8 <dir_register+0x2c>
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	4413      	add	r3, r2
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1f4      	bne.n	8007fb2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	220c      	movs	r2, #12
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fe fcfe 	bl	80069d6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d032      	beq.n	800804a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2240      	movs	r2, #64	@ 0x40
 8007fe8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007fec:	2301      	movs	r3, #1
 8007fee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ff0:	e016      	b.n	8008020 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	f107 010c 	add.w	r1, r7, #12
 8008000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008002:	f7ff fd97 	bl	8007b34 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff ff00 	bl	8007e0c <dir_find>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008012:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800801a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801c:	3301      	adds	r3, #1
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008022:	2b63      	cmp	r3, #99	@ 0x63
 8008024:	d9e5      	bls.n	8007ff2 <dir_register+0x66>
 8008026:	e000      	b.n	800802a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008028:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	2b64      	cmp	r3, #100	@ 0x64
 800802e:	d101      	bne.n	8008034 <dir_register+0xa8>
 8008030:	2307      	movs	r3, #7
 8008032:	e09c      	b.n	800816e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008034:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008038:	2b04      	cmp	r3, #4
 800803a:	d002      	beq.n	8008042 <dir_register+0xb6>
 800803c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008040:	e095      	b.n	800816e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008042:	7dfa      	ldrb	r2, [r7, #23]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <dir_register+0xd8>
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	330c      	adds	r3, #12
 8008058:	4a47      	ldr	r2, [pc, #284]	@ (8008178 <dir_register+0x1ec>)
 800805a:	fba2 2303 	umull	r2, r3, r2, r3
 800805e:	089b      	lsrs	r3, r3, #2
 8008060:	3301      	adds	r3, #1
 8008062:	e000      	b.n	8008066 <dir_register+0xda>
 8008064:	2301      	movs	r3, #1
 8008066:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008068:	6a39      	ldr	r1, [r7, #32]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fb9f 	bl	80077ae <dir_alloc>
 8008070:	4603      	mov	r3, r0
 8008072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800807a:	2b00      	cmp	r3, #0
 800807c:	d148      	bne.n	8008110 <dir_register+0x184>
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	3b01      	subs	r3, #1
 8008082:	623b      	str	r3, [r7, #32]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d042      	beq.n	8008110 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695a      	ldr	r2, [r3, #20]
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	015b      	lsls	r3, r3, #5
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fa49 	bl	800752e <dir_sdi>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80080a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d132      	bne.n	8008110 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3324      	adds	r3, #36	@ 0x24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fde4 	bl	8007c7c <sum_sfn>
 80080b4:	4603      	mov	r3, r0
 80080b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	4619      	mov	r1, r3
 80080be:	69f8      	ldr	r0, [r7, #28]
 80080c0:	f7fe feb8 	bl	8006e34 <move_window>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80080ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d11d      	bne.n	800810e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	68d8      	ldr	r0, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a19      	ldr	r1, [r3, #32]
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	7efb      	ldrb	r3, [r7, #27]
 80080e0:	f7ff fcc0 	bl	8007a64 <put_lfn>
				fs->wflag = 1;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	2201      	movs	r2, #1
 80080e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80080ea:	2100      	movs	r1, #0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fa99 	bl	8007624 <dir_next>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80080f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d107      	bne.n	8008110 <dir_register+0x184>
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	3b01      	subs	r3, #1
 8008104:	623b      	str	r3, [r7, #32]
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1d5      	bne.n	80080b8 <dir_register+0x12c>
 800810c:	e000      	b.n	8008110 <dir_register+0x184>
				if (res != FR_OK) break;
 800810e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008114:	2b00      	cmp	r3, #0
 8008116:	d128      	bne.n	800816a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	4619      	mov	r1, r3
 800811e:	69f8      	ldr	r0, [r7, #28]
 8008120:	f7fe fe88 	bl	8006e34 <move_window>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800812a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800812e:	2b00      	cmp	r3, #0
 8008130:	d11b      	bne.n	800816a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	2220      	movs	r2, #32
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe fc6c 	bl	8006a18 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a18      	ldr	r0, [r3, #32]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3324      	adds	r3, #36	@ 0x24
 8008148:	220b      	movs	r2, #11
 800814a:	4619      	mov	r1, r3
 800814c:	f7fe fc43 	bl	80069d6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	330c      	adds	r3, #12
 800815c:	f002 0218 	and.w	r2, r2, #24
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2201      	movs	r2, #1
 8008168:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800816a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800816e:	4618      	mov	r0, r3
 8008170:	3730      	adds	r7, #48	@ 0x30
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	4ec4ec4f 	.word	0x4ec4ec4f

0800817c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 80d8 	beq.w	800834c <get_fileinfo+0x1d0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d040      	beq.n	8008228 <get_fileinfo+0xac>
			i = j = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80081ae:	e029      	b.n	8008204 <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80081b0:	89fb      	ldrh	r3, [r7, #14]
 80081b2:	2100      	movs	r1, #0
 80081b4:	4618      	mov	r0, r3
 80081b6:	f002 fafb 	bl	800a7b0 <ff_convert>
 80081ba:	4603      	mov	r3, r0
 80081bc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80081be:	89fb      	ldrh	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <get_fileinfo+0x4e>
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]
 80081c8:	e028      	b.n	800821c <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 80081ca:	89fb      	ldrh	r3, [r7, #14]
 80081cc:	2bff      	cmp	r3, #255	@ 0xff
 80081ce:	d90a      	bls.n	80081e6 <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	b299      	uxth	r1, r3
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	61fa      	str	r2, [r7, #28]
 80081dc:	b2c9      	uxtb	r1, r1
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4413      	add	r3, r2
 80081e2:	460a      	mov	r2, r1
 80081e4:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80081ea:	d902      	bls.n	80081f2 <get_fileinfo+0x76>
 80081ec:	2300      	movs	r3, #0
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	e014      	b.n	800821c <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	61fa      	str	r2, [r7, #28]
 80081f8:	89fa      	ldrh	r2, [r7, #14]
 80081fa:	b2d1      	uxtb	r1, r2
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	4413      	add	r3, r2
 8008200:	460a      	mov	r2, r1
 8008202:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	1c59      	adds	r1, r3, #1
 800820c:	61b9      	str	r1, [r7, #24]
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	4413      	add	r3, r2
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	81fb      	strh	r3, [r7, #14]
 8008216:	89fb      	ldrh	r3, [r7, #14]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1c9      	bne.n	80081b0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	3316      	adds	r3, #22
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	4413      	add	r3, r2
 8008236:	3316      	adds	r3, #22
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800823c:	e04d      	b.n	80082da <get_fileinfo+0x15e>
		c = (TCHAR)dp->dir[i++];
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1a      	ldr	r2, [r3, #32]
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	1c59      	adds	r1, r3, #1
 8008246:	61f9      	str	r1, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	2b20      	cmp	r3, #32
 8008252:	d041      	beq.n	80082d8 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	2b05      	cmp	r3, #5
 8008258:	d101      	bne.n	800825e <get_fileinfo+0xe2>
 800825a:	23e5      	movs	r3, #229	@ 0xe5
 800825c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	2b09      	cmp	r3, #9
 8008262:	d10f      	bne.n	8008284 <get_fileinfo+0x108>
			if (!lfv) fno->fname[j] = '.';
 8008264:	89bb      	ldrh	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <get_fileinfo+0xfa>
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	4413      	add	r3, r2
 8008270:	3316      	adds	r3, #22
 8008272:	222e      	movs	r2, #46	@ 0x2e
 8008274:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	61ba      	str	r2, [r7, #24]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	4413      	add	r3, r2
 8008280:	222e      	movs	r2, #46	@ 0x2e
 8008282:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	4413      	add	r3, r2
 800828a:	3309      	adds	r3, #9
 800828c:	7dfa      	ldrb	r2, [r7, #23]
 800828e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008290:	89bb      	ldrh	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11c      	bne.n	80082d0 <get_fileinfo+0x154>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	2b40      	cmp	r3, #64	@ 0x40
 800829a:	d913      	bls.n	80082c4 <get_fileinfo+0x148>
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	2b5a      	cmp	r3, #90	@ 0x5a
 80082a0:	d810      	bhi.n	80082c4 <get_fileinfo+0x148>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	330c      	adds	r3, #12
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	2b08      	cmp	r3, #8
 80082b0:	d901      	bls.n	80082b6 <get_fileinfo+0x13a>
 80082b2:	2310      	movs	r3, #16
 80082b4:	e000      	b.n	80082b8 <get_fileinfo+0x13c>
 80082b6:	2308      	movs	r3, #8
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <get_fileinfo+0x148>
				c += 0x20;			/* To lower */
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	3320      	adds	r3, #32
 80082c2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	4413      	add	r3, r2
 80082ca:	3316      	adds	r3, #22
 80082cc:	7dfa      	ldrb	r2, [r7, #23]
 80082ce:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	3301      	adds	r3, #1
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	e000      	b.n	80082da <get_fileinfo+0x15e>
		if (c == ' ') continue;				/* Skip padding spaces */
 80082d8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2b0a      	cmp	r3, #10
 80082de:	d9ae      	bls.n	800823e <get_fileinfo+0xc2>
	}
	if (!lfv) {
 80082e0:	89bb      	ldrh	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <get_fileinfo+0x186>
		fno->fname[j] = 0;
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	4413      	add	r3, r2
 80082ec:	3316      	adds	r3, #22
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	330c      	adds	r3, #12
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <get_fileinfo+0x186>
 80082fe:	2300      	movs	r3, #0
 8008300:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	4413      	add	r3, r2
 8008308:	3309      	adds	r3, #9
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	7ada      	ldrb	r2, [r3, #11]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	331c      	adds	r3, #28
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe faef 	bl	8006902 <ld_dword>
 8008324:	4602      	mov	r2, r0
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	3316      	adds	r3, #22
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fae6 	bl	8006902 <ld_dword>
 8008336:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	b29a      	uxth	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	80da      	strh	r2, [r3, #6]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	0c1b      	lsrs	r3, r3, #16
 8008344:	b29a      	uxth	r2, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	809a      	strh	r2, [r3, #4]
 800834a:	e000      	b.n	800834e <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800834c:	bf00      	nop
}
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	@ 0x28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	61ba      	str	r2, [r7, #24]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4413      	add	r3, r2
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008384:	2b1f      	cmp	r3, #31
 8008386:	d96a      	bls.n	800845e <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800838a:	2b2f      	cmp	r3, #47	@ 0x2f
 800838c:	d006      	beq.n	800839c <create_name+0x48>
 800838e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008390:	2b5c      	cmp	r3, #92	@ 0x5c
 8008392:	d110      	bne.n	80083b6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008394:	e002      	b.n	800839c <create_name+0x48>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	3301      	adds	r3, #1
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	4413      	add	r3, r2
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80083a6:	d0f6      	beq.n	8008396 <create_name+0x42>
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	4413      	add	r3, r2
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80083b2:	d0f0      	beq.n	8008396 <create_name+0x42>
			break;
 80083b4:	e054      	b.n	8008460 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80083ba:	d901      	bls.n	80083c0 <create_name+0x6c>
 80083bc:	2306      	movs	r3, #6
 80083be:	e1bf      	b.n	8008740 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 80083c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 80083c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b80      	cmp	r3, #128	@ 0x80
 80083cc:	d925      	bls.n	800841a <create_name+0xc6>
 80083ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2bff      	cmp	r3, #255	@ 0xff
 80083d4:	d021      	beq.n	800841a <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	61ba      	str	r2, [r7, #24]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 80083e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	4413      	add	r3, r2
 80083f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 80083f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80083fc:	d903      	bls.n	8008406 <create_name+0xb2>
 80083fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008402:	2b7e      	cmp	r3, #126	@ 0x7e
 8008404:	d909      	bls.n	800841a <create_name+0xc6>
 8008406:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800840a:	2b00      	cmp	r3, #0
 800840c:	da03      	bge.n	8008416 <create_name+0xc2>
 800840e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008412:	2bff      	cmp	r3, #255	@ 0xff
 8008414:	d101      	bne.n	800841a <create_name+0xc6>
 8008416:	2306      	movs	r3, #6
 8008418:	e192      	b.n	8008740 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800841a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800841c:	2101      	movs	r1, #1
 800841e:	4618      	mov	r0, r3
 8008420:	f002 f9c6 	bl	800a7b0 <ff_convert>
 8008424:	4603      	mov	r3, r0
 8008426:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <create_name+0xde>
 800842e:	2306      	movs	r3, #6
 8008430:	e186      	b.n	8008740 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008432:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008434:	2b7f      	cmp	r3, #127	@ 0x7f
 8008436:	d809      	bhi.n	800844c <create_name+0xf8>
 8008438:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800843a:	4619      	mov	r1, r3
 800843c:	489a      	ldr	r0, [pc, #616]	@ (80086a8 <create_name+0x354>)
 800843e:	f7fe fb2d 	bl	8006a9c <chk_chr>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <create_name+0xf8>
 8008448:	2306      	movs	r3, #6
 800844a:	e179      	b.n	8008740 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	617a      	str	r2, [r7, #20]
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800845a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800845c:	e78a      	b.n	8008374 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800845e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	441a      	add	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800846a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800846c:	2b1f      	cmp	r3, #31
 800846e:	d801      	bhi.n	8008474 <create_name+0x120>
 8008470:	2304      	movs	r3, #4
 8008472:	e000      	b.n	8008476 <create_name+0x122>
 8008474:	2300      	movs	r3, #0
 8008476:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800847a:	e011      	b.n	80084a0 <create_name+0x14c>
		w = lfn[di - 1];
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008482:	3b01      	subs	r3, #1
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800848e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008490:	2b20      	cmp	r3, #32
 8008492:	d002      	beq.n	800849a <create_name+0x146>
 8008494:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008496:	2b2e      	cmp	r3, #46	@ 0x2e
 8008498:	d106      	bne.n	80084a8 <create_name+0x154>
		di--;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	3b01      	subs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1ea      	bne.n	800847c <create_name+0x128>
 80084a6:	e000      	b.n	80084aa <create_name+0x156>
		if (w != ' ' && w != '.') break;
 80084a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	2200      	movs	r2, #0
 80084b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <create_name+0x16c>
 80084bc:	2306      	movs	r3, #6
 80084be:	e13f      	b.n	8008740 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3324      	adds	r3, #36	@ 0x24
 80084c4:	220b      	movs	r2, #11
 80084c6:	2120      	movs	r1, #32
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe faa5 	bl	8006a18 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80084ce:	2300      	movs	r3, #0
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	e002      	b.n	80084da <create_name+0x186>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	3301      	adds	r3, #1
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4413      	add	r3, r2
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	2b20      	cmp	r3, #32
 80084e6:	d0f5      	beq.n	80084d4 <create_name+0x180>
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80084f4:	d0ee      	beq.n	80084d4 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d009      	beq.n	8008510 <create_name+0x1bc>
 80084fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008500:	f043 0303 	orr.w	r3, r3, #3
 8008504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008508:	e002      	b.n	8008510 <create_name+0x1bc>
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	3b01      	subs	r3, #1
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <create_name+0x1d6>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800851c:	3b01      	subs	r3, #1
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	2b2e      	cmp	r3, #46	@ 0x2e
 8008528:	d1ef      	bne.n	800850a <create_name+0x1b6>

	i = b = 0; ni = 8;
 800852a:	2300      	movs	r3, #0
 800852c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008530:	2300      	movs	r3, #0
 8008532:	623b      	str	r3, [r7, #32]
 8008534:	2308      	movs	r3, #8
 8008536:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	61ba      	str	r2, [r7, #24]
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008548:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80aa 	beq.w	80086a4 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008550:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008552:	2b20      	cmp	r3, #32
 8008554:	d006      	beq.n	8008564 <create_name+0x210>
 8008556:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008558:	2b2e      	cmp	r3, #46	@ 0x2e
 800855a:	d10a      	bne.n	8008572 <create_name+0x21e>
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	429a      	cmp	r2, r3
 8008562:	d006      	beq.n	8008572 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8008564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008568:	f043 0303 	orr.w	r3, r3, #3
 800856c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008570:	e097      	b.n	80086a2 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008572:	6a3a      	ldr	r2, [r7, #32]
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	429a      	cmp	r2, r3
 8008578:	d203      	bcs.n	8008582 <create_name+0x22e>
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	429a      	cmp	r2, r3
 8008580:	d123      	bne.n	80085ca <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2b0b      	cmp	r3, #11
 8008586:	d106      	bne.n	8008596 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8008588:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800858c:	f043 0303 	orr.w	r3, r3, #3
 8008590:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008594:	e08d      	b.n	80086b2 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	429a      	cmp	r2, r3
 800859c:	d005      	beq.n	80085aa <create_name+0x256>
 800859e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085a2:	f043 0303 	orr.w	r3, r3, #3
 80085a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d87e      	bhi.n	80086b0 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	2308      	movs	r3, #8
 80085b8:	623b      	str	r3, [r7, #32]
 80085ba:	230b      	movs	r3, #11
 80085bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80085be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085c8:	e06b      	b.n	80086a2 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80085ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80085ce:	d910      	bls.n	80085f2 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 80085d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f002 f94a 	bl	800a86c <ff_wtoupper>
 80085d8:	4603      	mov	r3, r0
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f002 f8e7 	bl	800a7b0 <ff_convert>
 80085e2:	4603      	mov	r3, r0
 80085e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80085e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085ea:	f043 0302 	orr.w	r3, r3, #2
 80085ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 80085f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085f4:	2bff      	cmp	r3, #255	@ 0xff
 80085f6:	d91a      	bls.n	800862e <create_name+0x2da>
			if (i >= ni - 1) {
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	6a3a      	ldr	r2, [r7, #32]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d308      	bcc.n	8008614 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8008602:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008606:	f043 0303 	orr.w	r3, r3, #3
 800860a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	623b      	str	r3, [r7, #32]
 8008612:	e046      	b.n	80086a2 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8008614:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	b299      	uxth	r1, r3
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	623a      	str	r2, [r7, #32]
 8008620:	b2c9      	uxtb	r1, r1
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	460a      	mov	r2, r1
 8008628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800862c:	e02f      	b.n	800868e <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800862e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d007      	beq.n	8008644 <create_name+0x2f0>
 8008634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008636:	4619      	mov	r1, r3
 8008638:	481c      	ldr	r0, [pc, #112]	@ (80086ac <create_name+0x358>)
 800863a:	f7fe fa2f 	bl	8006a9c <chk_chr>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008644:	235f      	movs	r3, #95	@ 0x5f
 8008646:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800864c:	f043 0303 	orr.w	r3, r3, #3
 8008650:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008654:	e01b      	b.n	800868e <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008656:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008658:	2b40      	cmp	r3, #64	@ 0x40
 800865a:	d909      	bls.n	8008670 <create_name+0x31c>
 800865c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800865e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008660:	d806      	bhi.n	8008670 <create_name+0x31c>
					b |= 2;
 8008662:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008666:	f043 0302 	orr.w	r3, r3, #2
 800866a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800866e:	e00e      	b.n	800868e <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008672:	2b60      	cmp	r3, #96	@ 0x60
 8008674:	d90b      	bls.n	800868e <create_name+0x33a>
 8008676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008678:	2b7a      	cmp	r3, #122	@ 0x7a
 800867a:	d808      	bhi.n	800868e <create_name+0x33a>
						b |= 1; w -= 0x20;
 800867c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008688:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800868a:	3b20      	subs	r3, #32
 800868c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	623a      	str	r2, [r7, #32]
 8008694:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008696:	b2d1      	uxtb	r1, r2
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	4413      	add	r3, r2
 800869c:	460a      	mov	r2, r1
 800869e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80086a2:	e749      	b.n	8008538 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 80086a4:	bf00      	nop
 80086a6:	e004      	b.n	80086b2 <create_name+0x35e>
 80086a8:	0800bdd0 	.word	0x0800bdd0
 80086ac:	0800bddc 	.word	0x0800bddc
			if (si > di) break;			/* No extension */
 80086b0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086b8:	2be5      	cmp	r3, #229	@ 0xe5
 80086ba:	d103      	bne.n	80086c4 <create_name+0x370>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2205      	movs	r2, #5
 80086c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d104      	bne.n	80086d4 <create_name+0x380>
 80086ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d8:	f003 030c 	and.w	r3, r3, #12
 80086dc:	2b0c      	cmp	r3, #12
 80086de:	d005      	beq.n	80086ec <create_name+0x398>
 80086e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086e4:	f003 0303 	and.w	r3, r3, #3
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d105      	bne.n	80086f8 <create_name+0x3a4>
 80086ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086f0:	f043 0302 	orr.w	r3, r3, #2
 80086f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80086f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d117      	bne.n	8008734 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	2b01      	cmp	r3, #1
 800870e:	d105      	bne.n	800871c <create_name+0x3c8>
 8008710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008714:	f043 0310 	orr.w	r3, r3, #16
 8008718:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800871c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008720:	f003 030c 	and.w	r3, r3, #12
 8008724:	2b04      	cmp	r3, #4
 8008726:	d105      	bne.n	8008734 <create_name+0x3e0>
 8008728:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800872c:	f043 0308 	orr.w	r3, r3, #8
 8008730:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800873a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800873e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008740:	4618      	mov	r0, r3
 8008742:	3728      	adds	r7, #40	@ 0x28
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800875c:	e002      	b.n	8008764 <follow_path+0x1c>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b2f      	cmp	r3, #47	@ 0x2f
 800876a:	d0f8      	beq.n	800875e <follow_path+0x16>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b5c      	cmp	r3, #92	@ 0x5c
 8008772:	d0f4      	beq.n	800875e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2200      	movs	r2, #0
 8008778:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b1f      	cmp	r3, #31
 8008780:	d80a      	bhi.n	8008798 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2280      	movs	r2, #128	@ 0x80
 8008786:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800878a:	2100      	movs	r1, #0
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7fe fece 	bl	800752e <dir_sdi>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
 8008796:	e043      	b.n	8008820 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008798:	463b      	mov	r3, r7
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff fdd9 	bl	8008354 <create_name>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d134      	bne.n	8008816 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff fb2d 	bl	8007e0c <dir_find>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80087bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d127      	bne.n	800881a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d122      	bne.n	800881a <follow_path+0xd2>
 80087d4:	2305      	movs	r3, #5
 80087d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80087d8:	e01f      	b.n	800881a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d11c      	bne.n	800881e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	799b      	ldrb	r3, [r3, #6]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80087f0:	2305      	movs	r3, #5
 80087f2:	75fb      	strb	r3, [r7, #23]
 80087f4:	e014      	b.n	8008820 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008804:	4413      	add	r3, r2
 8008806:	4619      	mov	r1, r3
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff f817 	bl	800783c <ld_clust>
 800880e:	4602      	mov	r2, r0
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008814:	e7c0      	b.n	8008798 <follow_path+0x50>
			if (res != FR_OK) break;
 8008816:	bf00      	nop
 8008818:	e002      	b.n	8008820 <follow_path+0xd8>
				break;
 800881a:	bf00      	nop
 800881c:	e000      	b.n	8008820 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800881e:	bf00      	nop
			}
		}
	}

	return res;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800882a:	b480      	push	{r7}
 800882c:	b087      	sub	sp, #28
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
 8008836:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d031      	beq.n	80088a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	e002      	b.n	800884e <get_ldnumber+0x24>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	3301      	adds	r3, #1
 800884c:	617b      	str	r3, [r7, #20]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b1f      	cmp	r3, #31
 8008854:	d903      	bls.n	800885e <get_ldnumber+0x34>
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b3a      	cmp	r3, #58	@ 0x3a
 800885c:	d1f4      	bne.n	8008848 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b3a      	cmp	r3, #58	@ 0x3a
 8008864:	d11c      	bne.n	80088a0 <get_ldnumber+0x76>
			tp = *path;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	60fa      	str	r2, [r7, #12]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	3b30      	subs	r3, #48	@ 0x30
 8008876:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b09      	cmp	r3, #9
 800887c:	d80e      	bhi.n	800889c <get_ldnumber+0x72>
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	429a      	cmp	r2, r3
 8008884:	d10a      	bne.n	800889c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d107      	bne.n	800889c <get_ldnumber+0x72>
					vol = (int)i;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	3301      	adds	r3, #1
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	e002      	b.n	80088a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80088a0:	2300      	movs	r3, #0
 80088a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80088a4:	693b      	ldr	r3, [r7, #16]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	70da      	strb	r2, [r3, #3]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ca:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fe fab0 	bl	8006e34 <move_window>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <check_fs+0x2a>
 80088da:	2304      	movs	r3, #4
 80088dc:	e038      	b.n	8008950 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3334      	adds	r3, #52	@ 0x34
 80088e2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fd fff2 	bl	80068d0 <ld_word>
 80088ec:	4603      	mov	r3, r0
 80088ee:	461a      	mov	r2, r3
 80088f0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d001      	beq.n	80088fc <check_fs+0x48>
 80088f8:	2303      	movs	r3, #3
 80088fa:	e029      	b.n	8008950 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008902:	2be9      	cmp	r3, #233	@ 0xe9
 8008904:	d009      	beq.n	800891a <check_fs+0x66>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800890c:	2beb      	cmp	r3, #235	@ 0xeb
 800890e:	d11e      	bne.n	800894e <check_fs+0x9a>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008916:	2b90      	cmp	r3, #144	@ 0x90
 8008918:	d119      	bne.n	800894e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3334      	adds	r3, #52	@ 0x34
 800891e:	3336      	adds	r3, #54	@ 0x36
 8008920:	4618      	mov	r0, r3
 8008922:	f7fd ffee 	bl	8006902 <ld_dword>
 8008926:	4603      	mov	r3, r0
 8008928:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800892c:	4a0a      	ldr	r2, [pc, #40]	@ (8008958 <check_fs+0xa4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d101      	bne.n	8008936 <check_fs+0x82>
 8008932:	2300      	movs	r3, #0
 8008934:	e00c      	b.n	8008950 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3334      	adds	r3, #52	@ 0x34
 800893a:	3352      	adds	r3, #82	@ 0x52
 800893c:	4618      	mov	r0, r3
 800893e:	f7fd ffe0 	bl	8006902 <ld_dword>
 8008942:	4603      	mov	r3, r0
 8008944:	4a05      	ldr	r2, [pc, #20]	@ (800895c <check_fs+0xa8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d101      	bne.n	800894e <check_fs+0x9a>
 800894a:	2300      	movs	r3, #0
 800894c:	e000      	b.n	8008950 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800894e:	2302      	movs	r3, #2
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	00544146 	.word	0x00544146
 800895c:	33544146 	.word	0x33544146

08008960 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b096      	sub	sp, #88	@ 0x58
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff ff58 	bl	800882a <get_ldnumber>
 800897a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800897c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	da01      	bge.n	8008986 <find_volume+0x26>
 8008982:	230b      	movs	r3, #11
 8008984:	e22d      	b.n	8008de2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008986:	4aa1      	ldr	r2, [pc, #644]	@ (8008c0c <find_volume+0x2ac>)
 8008988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800898e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <find_volume+0x3a>
 8008996:	230c      	movs	r3, #12
 8008998:	e223      	b.n	8008de2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800899e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01a      	beq.n	80089e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fd feeb 	bl	8006790 <disk_status>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80089c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10c      	bne.n	80089e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <find_volume+0x82>
 80089d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80089de:	230a      	movs	r3, #10
 80089e0:	e1ff      	b.n	8008de2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80089e2:	2300      	movs	r3, #0
 80089e4:	e1fd      	b.n	8008de2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80089e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80089ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd fee3 	bl	80067c4 <disk_initialize>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a10:	2303      	movs	r3, #3
 8008a12:	e1e6      	b.n	8008de2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d007      	beq.n	8008a2a <find_volume+0xca>
 8008a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008a26:	230a      	movs	r3, #10
 8008a28:	e1db      	b.n	8008de2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a32:	f7ff ff3f 	bl	80088b4 <check_fs>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d149      	bne.n	8008ad8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a44:	2300      	movs	r3, #0
 8008a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a48:	e01e      	b.n	8008a88 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008a58:	4413      	add	r3, r2
 8008a5a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5e:	3304      	adds	r3, #4
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <find_volume+0x114>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	3308      	adds	r3, #8
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fd ff49 	bl	8006902 <ld_dword>
 8008a70:	4602      	mov	r2, r0
 8008a72:	e000      	b.n	8008a76 <find_volume+0x116>
 8008a74:	2200      	movs	r2, #0
 8008a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	3358      	adds	r3, #88	@ 0x58
 8008a7c:	443b      	add	r3, r7
 8008a7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a84:	3301      	adds	r3, #1
 8008a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d9dd      	bls.n	8008a4a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a8e:	2300      	movs	r3, #0
 8008a90:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <find_volume+0x13e>
 8008a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	3358      	adds	r3, #88	@ 0x58
 8008aa4:	443b      	add	r3, r7
 8008aa6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008aaa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <find_volume+0x15e>
 8008ab2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ab4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ab6:	f7ff fefd 	bl	80088b4 <check_fs>
 8008aba:	4603      	mov	r3, r0
 8008abc:	e000      	b.n	8008ac0 <find_volume+0x160>
 8008abe:	2303      	movs	r3, #3
 8008ac0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d905      	bls.n	8008ad8 <find_volume+0x178>
 8008acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ace:	3301      	adds	r3, #1
 8008ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d9e2      	bls.n	8008a9e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d101      	bne.n	8008ae4 <find_volume+0x184>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e17e      	b.n	8008de2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d901      	bls.n	8008af0 <find_volume+0x190>
 8008aec:	230d      	movs	r3, #13
 8008aee:	e178      	b.n	8008de2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	3334      	adds	r3, #52	@ 0x34
 8008af4:	330b      	adds	r3, #11
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fd feea 	bl	80068d0 <ld_word>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b02:	d001      	beq.n	8008b08 <find_volume+0x1a8>
 8008b04:	230d      	movs	r3, #13
 8008b06:	e16c      	b.n	8008de2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0a:	3334      	adds	r3, #52	@ 0x34
 8008b0c:	3316      	adds	r3, #22
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd fede 	bl	80068d0 <ld_word>
 8008b14:	4603      	mov	r3, r0
 8008b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d106      	bne.n	8008b2c <find_volume+0x1cc>
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b20:	3334      	adds	r3, #52	@ 0x34
 8008b22:	3324      	adds	r3, #36	@ 0x24
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fd feec 	bl	8006902 <ld_dword>
 8008b2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b30:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	789b      	ldrb	r3, [r3, #2]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d005      	beq.n	8008b50 <find_volume+0x1f0>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	789b      	ldrb	r3, [r3, #2]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d001      	beq.n	8008b50 <find_volume+0x1f0>
 8008b4c:	230d      	movs	r3, #13
 8008b4e:	e148      	b.n	8008de2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	789b      	ldrb	r3, [r3, #2]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b58:	fb02 f303 	mul.w	r3, r2, r3
 8008b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b64:	461a      	mov	r2, r3
 8008b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	895b      	ldrh	r3, [r3, #10]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d008      	beq.n	8008b84 <find_volume+0x224>
 8008b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b74:	895b      	ldrh	r3, [r3, #10]
 8008b76:	461a      	mov	r2, r3
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	895b      	ldrh	r3, [r3, #10]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4013      	ands	r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <find_volume+0x228>
 8008b84:	230d      	movs	r3, #13
 8008b86:	e12c      	b.n	8008de2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	3334      	adds	r3, #52	@ 0x34
 8008b8c:	3311      	adds	r3, #17
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fd fe9e 	bl	80068d0 <ld_word>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9e:	891b      	ldrh	r3, [r3, #8]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <find_volume+0x24e>
 8008baa:	230d      	movs	r3, #13
 8008bac:	e119      	b.n	8008de2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	3334      	adds	r3, #52	@ 0x34
 8008bb2:	3313      	adds	r3, #19
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fd fe8b 	bl	80068d0 <ld_word>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d106      	bne.n	8008bd2 <find_volume+0x272>
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	3334      	adds	r3, #52	@ 0x34
 8008bc8:	3320      	adds	r3, #32
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fd fe99 	bl	8006902 <ld_dword>
 8008bd0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	3334      	adds	r3, #52	@ 0x34
 8008bd6:	330e      	adds	r3, #14
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fd fe79 	bl	80068d0 <ld_word>
 8008bde:	4603      	mov	r3, r0
 8008be0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008be2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <find_volume+0x28c>
 8008be8:	230d      	movs	r3, #13
 8008bea:	e0fa      	b.n	8008de2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008bec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf0:	4413      	add	r3, r2
 8008bf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bf4:	8912      	ldrh	r2, [r2, #8]
 8008bf6:	0912      	lsrs	r2, r2, #4
 8008bf8:	b292      	uxth	r2, r2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d204      	bcs.n	8008c10 <find_volume+0x2b0>
 8008c06:	230d      	movs	r3, #13
 8008c08:	e0eb      	b.n	8008de2 <find_volume+0x482>
 8008c0a:	bf00      	nop
 8008c0c:	20000734 	.word	0x20000734
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c18:	8952      	ldrh	r2, [r2, #10]
 8008c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <find_volume+0x2ca>
 8008c26:	230d      	movs	r3, #13
 8008c28:	e0db      	b.n	8008de2 <find_volume+0x482>
		fmt = FS_FAT32;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c32:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d802      	bhi.n	8008c40 <find_volume+0x2e0>
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d802      	bhi.n	8008c50 <find_volume+0x2f0>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	1c9a      	adds	r2, r3, #2
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c5c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c5e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c62:	441a      	add	r2, r3
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008c68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	441a      	add	r2, r3
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008c72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d11e      	bne.n	8008cb8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	3334      	adds	r3, #52	@ 0x34
 8008c7e:	332a      	adds	r3, #42	@ 0x2a
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fd fe25 	bl	80068d0 <ld_word>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <find_volume+0x330>
 8008c8c:	230d      	movs	r3, #13
 8008c8e:	e0a8      	b.n	8008de2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c92:	891b      	ldrh	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <find_volume+0x33c>
 8008c98:	230d      	movs	r3, #13
 8008c9a:	e0a2      	b.n	8008de2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	3334      	adds	r3, #52	@ 0x34
 8008ca0:	332c      	adds	r3, #44	@ 0x2c
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fe2d 	bl	8006902 <ld_dword>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cb6:	e01f      	b.n	8008cf8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <find_volume+0x364>
 8008cc0:	230d      	movs	r3, #13
 8008cc2:	e08e      	b.n	8008de2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cca:	441a      	add	r2, r3
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d103      	bne.n	8008ce0 <find_volume+0x380>
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	e00a      	b.n	8008cf6 <find_volume+0x396>
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	4413      	add	r3, r2
 8008cea:	085a      	lsrs	r2, r3, #1
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008cf6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	69da      	ldr	r2, [r3, #28]
 8008cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cfe:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008d02:	0a5b      	lsrs	r3, r3, #9
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d201      	bcs.n	8008d0c <find_volume+0x3ac>
 8008d08:	230d      	movs	r3, #13
 8008d0a:	e06a      	b.n	8008de2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d12:	615a      	str	r2, [r3, #20]
 8008d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d16:	695a      	ldr	r2, [r3, #20]
 8008d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1e:	2280      	movs	r2, #128	@ 0x80
 8008d20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d149      	bne.n	8008dbe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	3334      	adds	r3, #52	@ 0x34
 8008d2e:	3330      	adds	r3, #48	@ 0x30
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fd fdcd 	bl	80068d0 <ld_word>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d140      	bne.n	8008dbe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d3e:	3301      	adds	r3, #1
 8008d40:	4619      	mov	r1, r3
 8008d42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d44:	f7fe f876 	bl	8006e34 <move_window>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d137      	bne.n	8008dbe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	2200      	movs	r2, #0
 8008d52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d56:	3334      	adds	r3, #52	@ 0x34
 8008d58:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fd fdb7 	bl	80068d0 <ld_word>
 8008d62:	4603      	mov	r3, r0
 8008d64:	461a      	mov	r2, r3
 8008d66:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d127      	bne.n	8008dbe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d70:	3334      	adds	r3, #52	@ 0x34
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fd fdc5 	bl	8006902 <ld_dword>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dec <find_volume+0x48c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d11e      	bne.n	8008dbe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d82:	3334      	adds	r3, #52	@ 0x34
 8008d84:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fd fdba 	bl	8006902 <ld_dword>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4a17      	ldr	r2, [pc, #92]	@ (8008df0 <find_volume+0x490>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d113      	bne.n	8008dbe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d98:	3334      	adds	r3, #52	@ 0x34
 8008d9a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fd fdaf 	bl	8006902 <ld_dword>
 8008da4:	4602      	mov	r2, r0
 8008da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	3334      	adds	r3, #52	@ 0x34
 8008dae:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fd fda5 	bl	8006902 <ld_dword>
 8008db8:	4602      	mov	r2, r0
 8008dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008dc4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008df4 <find_volume+0x494>)
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	4b09      	ldr	r3, [pc, #36]	@ (8008df4 <find_volume+0x494>)
 8008dd0:	801a      	strh	r2, [r3, #0]
 8008dd2:	4b08      	ldr	r3, [pc, #32]	@ (8008df4 <find_volume+0x494>)
 8008dd4:	881a      	ldrh	r2, [r3, #0]
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008dda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ddc:	f7fd ffc2 	bl	8006d64 <clear_lock>
#endif
	return FR_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3758      	adds	r7, #88	@ 0x58
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	41615252 	.word	0x41615252
 8008df0:	61417272 	.word	0x61417272
 8008df4:	20000738 	.word	0x20000738

08008df8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008e02:	2309      	movs	r3, #9
 8008e04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01c      	beq.n	8008e46 <validate+0x4e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d018      	beq.n	8008e46 <validate+0x4e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d013      	beq.n	8008e46 <validate+0x4e>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	889a      	ldrh	r2, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	88db      	ldrh	r3, [r3, #6]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d10c      	bne.n	8008e46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd fcac 	bl	8006790 <disk_status>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <validate+0x4e>
			res = FR_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <validate+0x5a>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	e000      	b.n	8008e54 <validate+0x5c>
 8008e52:	2300      	movs	r3, #0
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	6013      	str	r3, [r2, #0]
	return res;
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e76:	f107 0310 	add.w	r3, r7, #16
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff fcd5 	bl	800882a <get_ldnumber>
 8008e80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	da01      	bge.n	8008e8c <f_mount+0x28>
 8008e88:	230b      	movs	r3, #11
 8008e8a:	e02b      	b.n	8008ee4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e8c:	4a17      	ldr	r2, [pc, #92]	@ (8008eec <f_mount+0x88>)
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e9c:	69b8      	ldr	r0, [r7, #24]
 8008e9e:	f7fd ff61 	bl	8006d64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	490d      	ldr	r1, [pc, #52]	@ (8008eec <f_mount+0x88>)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <f_mount+0x66>
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d001      	beq.n	8008ece <f_mount+0x6a>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e00a      	b.n	8008ee4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008ece:	f107 010c 	add.w	r1, r7, #12
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fd41 	bl	8008960 <find_volume>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20000734 	.word	0x20000734

08008ef0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008efc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8008f00:	6018      	str	r0, [r3, #0]
 8008f02:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f06:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008f0a:	6019      	str	r1, [r3, #0]
 8008f0c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f10:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008f14:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f16:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f1a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <f_open+0x38>
 8008f24:	2309      	movs	r3, #9
 8008f26:	e291      	b.n	800944c <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f28:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f2c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008f30:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008f34:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008f3e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008f40:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f44:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008f48:	781a      	ldrb	r2, [r3, #0]
 8008f4a:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff fd04 	bl	8008960 <find_volume>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8008f5e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f040 8265 	bne.w	8009432 <f_open+0x542>
		dj.obj.fs = fs;
 8008f68:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8008f6c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8008f70:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8008f74:	f107 0214 	add.w	r2, r7, #20
 8008f78:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f7a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f7e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff fbdc 	bl	8008748 <follow_path>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008f96:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d11c      	bne.n	8008fd8 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f9e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da03      	bge.n	8008fb0 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8008fa8:	2306      	movs	r3, #6
 8008faa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8008fae:	e013      	b.n	8008fd8 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008fb0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fb4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	bf8c      	ite	hi
 8008fbe:	2301      	movhi	r3, #1
 8008fc0:	2300      	movls	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fd fd81 	bl	8006ad4 <chk_lock>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008fd8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fdc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	f003 031c 	and.w	r3, r3, #28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 80a7 	beq.w	800913a <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8008fec:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d01f      	beq.n	8009034 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008ff4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d10e      	bne.n	800901a <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008ffc:	f7fd fdc6 	bl	8006b8c <enq_lock>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d006      	beq.n	8009014 <f_open+0x124>
 8009006:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe ffbe 	bl	8007f8c <dir_register>
 8009010:	4603      	mov	r3, r0
 8009012:	e000      	b.n	8009016 <f_open+0x126>
 8009014:	2312      	movs	r3, #18
 8009016:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800901a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800901e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009022:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009026:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800902a:	7812      	ldrb	r2, [r2, #0]
 800902c:	f042 0208 	orr.w	r2, r2, #8
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	e015      	b.n	8009060 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009034:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009038:	f003 0311 	and.w	r3, r3, #17
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <f_open+0x158>
					res = FR_DENIED;
 8009040:	2307      	movs	r3, #7
 8009042:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009046:	e00b      	b.n	8009060 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009048:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800904c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <f_open+0x170>
 800905a:	2308      	movs	r3, #8
 800905c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009060:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009064:	2b00      	cmp	r3, #0
 8009066:	f040 8088 	bne.w	800917a <f_open+0x28a>
 800906a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800906e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d07e      	beq.n	800917a <f_open+0x28a>
				dw = GET_FATTIME();
 800907c:	f7fd f938 	bl	80062f0 <get_fattime>
 8009080:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009084:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009088:	330e      	adds	r3, #14
 800908a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800908e:	4618      	mov	r0, r3
 8009090:	f7fd fc75 	bl	800697e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009094:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009098:	3316      	adds	r3, #22
 800909a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd fc6d 	bl	800697e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80090a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80090a8:	330b      	adds	r3, #11
 80090aa:	2220      	movs	r2, #32
 80090ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80090ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80090b2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80090b6:	4611      	mov	r1, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fbbf 	bl	800783c <ld_clust>
 80090be:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80090c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80090c6:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 80090ca:	2200      	movs	r2, #0
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe fbd4 	bl	800787a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80090d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80090d6:	331c      	adds	r3, #28
 80090d8:	2100      	movs	r1, #0
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fd fc4f 	bl	800697e <st_dword>
					fs->wflag = 1;
 80090e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80090e4:	2201      	movs	r2, #1
 80090e6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80090e8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d044      	beq.n	800917a <f_open+0x28a>
						dw = fs->winsect;
 80090f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80090f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f6:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80090fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80090fe:	2200      	movs	r2, #0
 8009100:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8009104:	4618      	mov	r0, r3
 8009106:	f7fe f8e1 	bl	80072cc <remove_chain>
 800910a:	4603      	mov	r3, r0
 800910c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8009110:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009114:	2b00      	cmp	r3, #0
 8009116:	d130      	bne.n	800917a <f_open+0x28a>
							res = move_window(fs, dw);
 8009118:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800911c:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009120:	4618      	mov	r0, r3
 8009122:	f7fd fe87 	bl	8006e34 <move_window>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800912c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009130:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8009134:	3a01      	subs	r2, #1
 8009136:	611a      	str	r2, [r3, #16]
 8009138:	e01f      	b.n	800917a <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800913a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800913e:	2b00      	cmp	r3, #0
 8009140:	d11b      	bne.n	800917a <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009142:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009146:	f003 0310 	and.w	r3, r3, #16
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <f_open+0x266>
					res = FR_NO_FILE;
 800914e:	2304      	movs	r3, #4
 8009150:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009154:	e011      	b.n	800917a <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009156:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800915a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <f_open+0x28a>
 8009168:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <f_open+0x28a>
						res = FR_DENIED;
 8009174:	2307      	movs	r3, #7
 8009176:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800917a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800917e:	2b00      	cmp	r3, #0
 8009180:	d148      	bne.n	8009214 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009182:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009186:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	f003 0308 	and.w	r3, r3, #8
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8009194:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009198:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800919c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80091a0:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80091a4:	7812      	ldrb	r2, [r2, #0]
 80091a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091aa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80091ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80091b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091b6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80091be:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80091c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091c6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091d2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	bf8c      	ite	hi
 80091dc:	2301      	movhi	r3, #1
 80091de:	2300      	movls	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80091e8:	4611      	mov	r1, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fd fcf0 	bl	8006bd0 <inc_lock>
 80091f0:	4602      	mov	r2, r0
 80091f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80091fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009202:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d102      	bne.n	8009214 <f_open+0x324>
 800920e:	2302      	movs	r3, #2
 8009210:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009214:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009218:	2b00      	cmp	r3, #0
 800921a:	f040 810a 	bne.w	8009432 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800921e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009222:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009226:	4611      	mov	r1, r2
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe fb07 	bl	800783c <ld_clust>
 800922e:	4602      	mov	r2, r0
 8009230:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009234:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800923c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009240:	331c      	adds	r3, #28
 8009242:	4618      	mov	r0, r3
 8009244:	f7fd fb5d 	bl	8006902 <ld_dword>
 8009248:	4602      	mov	r2, r0
 800924a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800924e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009256:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800925a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2200      	movs	r2, #0
 8009262:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009264:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009268:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800926c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009274:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009278:	88da      	ldrh	r2, [r3, #6]
 800927a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800927e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009286:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800928a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009294:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009298:	7812      	ldrb	r2, [r2, #0]
 800929a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800929c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092a0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2200      	movs	r2, #0
 80092a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80092aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2200      	movs	r2, #0
 80092b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80092b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2200      	movs	r2, #0
 80092c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80092c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092ca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3330      	adds	r3, #48	@ 0x30
 80092d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092d6:	2100      	movs	r1, #0
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fd fb9d 	bl	8006a18 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80092de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092e2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80a0 	beq.w	8009432 <f_open+0x542>
 80092f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 8097 	beq.w	8009432 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009304:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009308:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009314:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800931c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009320:	895b      	ldrh	r3, [r3, #10]
 8009322:	025b      	lsls	r3, r3, #9
 8009324:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009328:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800932c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009338:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800933c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009348:	e021      	b.n	800938e <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 800934a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800934e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd fe26 	bl	8006faa <get_fat>
 800935e:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8009362:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009366:	2b01      	cmp	r3, #1
 8009368:	d802      	bhi.n	8009370 <f_open+0x480>
 800936a:	2302      	movs	r3, #2
 800936c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009370:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d102      	bne.n	8009380 <f_open+0x490>
 800937a:	2301      	movs	r3, #1
 800937c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009380:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009384:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800938e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009392:	2b00      	cmp	r3, #0
 8009394:	d105      	bne.n	80093a2 <f_open+0x4b2>
 8009396:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800939a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800939e:	429a      	cmp	r2, r3
 80093a0:	d8d3      	bhi.n	800934a <f_open+0x45a>
				}
				fp->clust = clst;
 80093a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80093b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80093b2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d13b      	bne.n	8009432 <f_open+0x542>
 80093ba:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80093be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d035      	beq.n	8009432 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80093c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80093ca:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd fdcc 	bl	8006f6c <clust2sect>
 80093d4:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 80093d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <f_open+0x4f8>
						res = FR_INT_ERR;
 80093e0:	2302      	movs	r3, #2
 80093e2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80093e6:	e024      	b.n	8009432 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80093e8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80093ec:	0a5a      	lsrs	r2, r3, #9
 80093ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80093f2:	441a      	add	r2, r3
 80093f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093f8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009400:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009404:	7858      	ldrb	r0, [r3, #1]
 8009406:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800940a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009414:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009418:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6a1a      	ldr	r2, [r3, #32]
 8009420:	2301      	movs	r3, #1
 8009422:	f7fd f9f7 	bl	8006814 <disk_read>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <f_open+0x542>
 800942c:	2301      	movs	r3, #1
 800942e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009432:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009436:	2b00      	cmp	r3, #0
 8009438:	d006      	beq.n	8009448 <f_open+0x558>
 800943a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800943e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009448:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800944c:	4618      	mov	r0, r3
 800944e:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b08e      	sub	sp, #56	@ 0x38
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	607a      	str	r2, [r7, #4]
 8009462:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f107 0214 	add.w	r2, r7, #20
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff fcbe 	bl	8008df8 <validate>
 800947c:	4603      	mov	r3, r0
 800947e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009482:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009486:	2b00      	cmp	r3, #0
 8009488:	d107      	bne.n	800949a <f_read+0x44>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	7d5b      	ldrb	r3, [r3, #21]
 800948e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009492:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <f_read+0x4a>
 800949a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800949e:	e115      	b.n	80096cc <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	7d1b      	ldrb	r3, [r3, #20]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <f_read+0x5a>
 80094ac:	2307      	movs	r3, #7
 80094ae:	e10d      	b.n	80096cc <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68da      	ldr	r2, [r3, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	f240 80fe 	bls.w	80096c2 <f_read+0x26c>
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80094ca:	e0fa      	b.n	80096c2 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f040 80c6 	bne.w	8009666 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	0a5b      	lsrs	r3, r3, #9
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	8952      	ldrh	r2, [r2, #10]
 80094e4:	3a01      	subs	r2, #1
 80094e6:	4013      	ands	r3, r2
 80094e8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d12f      	bne.n	8009550 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d103      	bne.n	8009500 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80094fe:	e013      	b.n	8009528 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d007      	beq.n	8009518 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	4619      	mov	r1, r3
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7fd ffd9 	bl	80074c6 <clmt_clust>
 8009514:	6338      	str	r0, [r7, #48]	@ 0x30
 8009516:	e007      	b.n	8009528 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f7fd fd42 	bl	8006faa <get_fat>
 8009526:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952a:	2b01      	cmp	r3, #1
 800952c:	d804      	bhi.n	8009538 <f_read+0xe2>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2202      	movs	r2, #2
 8009532:	755a      	strb	r2, [r3, #21]
 8009534:	2302      	movs	r3, #2
 8009536:	e0c9      	b.n	80096cc <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953e:	d104      	bne.n	800954a <f_read+0xf4>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2201      	movs	r2, #1
 8009544:	755a      	strb	r2, [r3, #21]
 8009546:	2301      	movs	r3, #1
 8009548:	e0c0      	b.n	80096cc <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f7fd fd07 	bl	8006f6c <clust2sect>
 800955e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <f_read+0x11a>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2202      	movs	r2, #2
 800956a:	755a      	strb	r2, [r3, #21]
 800956c:	2302      	movs	r3, #2
 800956e:	e0ad      	b.n	80096cc <f_read+0x276>
			sect += csect;
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4413      	add	r3, r2
 8009576:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	0a5b      	lsrs	r3, r3, #9
 800957c:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800957e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009580:	2b00      	cmp	r3, #0
 8009582:	d039      	beq.n	80095f8 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009588:	4413      	add	r3, r2
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	8952      	ldrh	r2, [r2, #10]
 800958e:	4293      	cmp	r3, r2
 8009590:	d905      	bls.n	800959e <f_read+0x148>
					cc = fs->csize - csect;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	895b      	ldrh	r3, [r3, #10]
 8009596:	461a      	mov	r2, r3
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	7858      	ldrb	r0, [r3, #1]
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095a8:	f7fd f934 	bl	8006814 <disk_read>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <f_read+0x166>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	755a      	strb	r2, [r3, #21]
 80095b8:	2301      	movs	r3, #1
 80095ba:	e087      	b.n	80096cc <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	7d1b      	ldrb	r3, [r3, #20]
 80095c0:	b25b      	sxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da14      	bge.n	80095f0 <f_read+0x19a>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6a1a      	ldr	r2, [r3, #32]
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d90d      	bls.n	80095f0 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	025b      	lsls	r3, r3, #9
 80095de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e0:	18d0      	adds	r0, r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3330      	adds	r3, #48	@ 0x30
 80095e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095ea:	4619      	mov	r1, r3
 80095ec:	f7fd f9f3 	bl	80069d6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	025b      	lsls	r3, r3, #9
 80095f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80095f6:	e050      	b.n	800969a <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d02e      	beq.n	8009660 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	b25b      	sxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	da18      	bge.n	800963e <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	7858      	ldrb	r0, [r3, #1]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a1a      	ldr	r2, [r3, #32]
 800961a:	2301      	movs	r3, #1
 800961c:	f7fd f91a 	bl	8006854 <disk_write>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <f_read+0x1da>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	755a      	strb	r2, [r3, #21]
 800962c:	2301      	movs	r3, #1
 800962e:	e04d      	b.n	80096cc <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	7d1b      	ldrb	r3, [r3, #20]
 8009634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009638:	b2da      	uxtb	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	7858      	ldrb	r0, [r3, #1]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009648:	2301      	movs	r3, #1
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	f7fd f8e2 	bl	8006814 <disk_read>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <f_read+0x20a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	755a      	strb	r2, [r3, #21]
 800965c:	2301      	movs	r3, #1
 800965e:	e035      	b.n	80096cc <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009672:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	429a      	cmp	r2, r3
 800967a:	d901      	bls.n	8009680 <f_read+0x22a>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968e:	4413      	add	r3, r2
 8009690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009692:	4619      	mov	r1, r3
 8009694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009696:	f7fd f99e 	bl	80069d6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800969a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800969c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969e:	4413      	add	r3, r2
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	699a      	ldr	r2, [r3, #24]
 80096a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a8:	441a      	add	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	619a      	str	r2, [r3, #24]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b4:	441a      	add	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f47f af01 	bne.w	80094cc <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3738      	adds	r7, #56	@ 0x38
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	@ 0x30
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2200      	movs	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f107 0210 	add.w	r2, r7, #16
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff fb7f 	bl	8008df8 <validate>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009700:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009704:	2b00      	cmp	r3, #0
 8009706:	d107      	bne.n	8009718 <f_write+0x44>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	7d5b      	ldrb	r3, [r3, #21]
 800970c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <f_write+0x4a>
 8009718:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800971c:	e14b      	b.n	80099b6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	7d1b      	ldrb	r3, [r3, #20]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <f_write+0x5a>
 800972a:	2307      	movs	r3, #7
 800972c:	e143      	b.n	80099b6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	441a      	add	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	429a      	cmp	r2, r3
 800973c:	f080 812d 	bcs.w	800999a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	43db      	mvns	r3, r3
 8009746:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009748:	e127      	b.n	800999a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 80e3 	bne.w	800991e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	0a5b      	lsrs	r3, r3, #9
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	8952      	ldrh	r2, [r2, #10]
 8009762:	3a01      	subs	r2, #1
 8009764:	4013      	ands	r3, r2
 8009766:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d143      	bne.n	80097f6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10c      	bne.n	8009790 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	2b00      	cmp	r3, #0
 8009780:	d11a      	bne.n	80097b8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2100      	movs	r1, #0
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd fe05 	bl	8007396 <create_chain>
 800978c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800978e:	e013      	b.n	80097b8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d007      	beq.n	80097a8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	4619      	mov	r1, r3
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f7fd fe91 	bl	80074c6 <clmt_clust>
 80097a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80097a6:	e007      	b.n	80097b8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f7fd fdf0 	bl	8007396 <create_chain>
 80097b6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80097b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 80f2 	beq.w	80099a4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80097c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d104      	bne.n	80097d0 <f_write+0xfc>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2202      	movs	r2, #2
 80097ca:	755a      	strb	r2, [r3, #21]
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0f2      	b.n	80099b6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d6:	d104      	bne.n	80097e2 <f_write+0x10e>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2201      	movs	r2, #1
 80097dc:	755a      	strb	r2, [r3, #21]
 80097de:	2301      	movs	r3, #1
 80097e0:	e0e9      	b.n	80099b6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <f_write+0x122>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	7d1b      	ldrb	r3, [r3, #20]
 80097fa:	b25b      	sxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da18      	bge.n	8009832 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	7858      	ldrb	r0, [r3, #1]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6a1a      	ldr	r2, [r3, #32]
 800980e:	2301      	movs	r3, #1
 8009810:	f7fd f820 	bl	8006854 <disk_write>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <f_write+0x150>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	755a      	strb	r2, [r3, #21]
 8009820:	2301      	movs	r3, #1
 8009822:	e0c8      	b.n	80099b6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	7d1b      	ldrb	r3, [r3, #20]
 8009828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800982c:	b2da      	uxtb	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	69db      	ldr	r3, [r3, #28]
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f7fd fb96 	bl	8006f6c <clust2sect>
 8009840:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d104      	bne.n	8009852 <f_write+0x17e>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2202      	movs	r2, #2
 800984c:	755a      	strb	r2, [r3, #21]
 800984e:	2302      	movs	r3, #2
 8009850:	e0b1      	b.n	80099b6 <f_write+0x2e2>
			sect += csect;
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	4413      	add	r3, r2
 8009858:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	0a5b      	lsrs	r3, r3, #9
 800985e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d03c      	beq.n	80098e0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	4413      	add	r3, r2
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	8952      	ldrh	r2, [r2, #10]
 8009870:	4293      	cmp	r3, r2
 8009872:	d905      	bls.n	8009880 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	895b      	ldrh	r3, [r3, #10]
 8009878:	461a      	mov	r2, r3
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	7858      	ldrb	r0, [r3, #1]
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	69f9      	ldr	r1, [r7, #28]
 800988a:	f7fc ffe3 	bl	8006854 <disk_write>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <f_write+0x1ca>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2201      	movs	r2, #1
 8009898:	755a      	strb	r2, [r3, #21]
 800989a:	2301      	movs	r3, #1
 800989c:	e08b      	b.n	80099b6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a1a      	ldr	r2, [r3, #32]
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	6a3a      	ldr	r2, [r7, #32]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d915      	bls.n	80098d8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1a      	ldr	r2, [r3, #32]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	025b      	lsls	r3, r3, #9
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	4413      	add	r3, r2
 80098c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7fd f886 	bl	80069d6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	7d1b      	ldrb	r3, [r3, #20]
 80098ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	025b      	lsls	r3, r3, #9
 80098dc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80098de:	e03f      	b.n	8009960 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d016      	beq.n	8009918 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	699a      	ldr	r2, [r3, #24]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d210      	bcs.n	8009918 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	7858      	ldrb	r0, [r3, #1]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009900:	2301      	movs	r3, #1
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	f7fc ff86 	bl	8006814 <disk_read>
 8009908:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	755a      	strb	r2, [r3, #21]
 8009914:	2301      	movs	r3, #1
 8009916:	e04e      	b.n	80099b6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800992a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800992c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d901      	bls.n	8009938 <f_write+0x264>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009946:	4413      	add	r3, r2
 8009948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800994a:	69f9      	ldr	r1, [r7, #28]
 800994c:	4618      	mov	r0, r3
 800994e:	f7fd f842 	bl	80069d6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	7d1b      	ldrb	r3, [r3, #20]
 8009956:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800995a:	b2da      	uxtb	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009960:	69fa      	ldr	r2, [r7, #28]
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	4413      	add	r3, r2
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	699a      	ldr	r2, [r3, #24]
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	441a      	add	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	619a      	str	r2, [r3, #24]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	429a      	cmp	r2, r3
 800997e:	bf38      	it	cc
 8009980:	461a      	movcc	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	441a      	add	r2, r3
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f47f aed4 	bne.w	800974a <f_write+0x76>
 80099a2:	e000      	b.n	80099a6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80099a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	7d1b      	ldrb	r3, [r3, #20]
 80099aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3730      	adds	r7, #48	@ 0x30
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f107 0208 	add.w	r2, r7, #8
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fa12 	bl	8008df8 <validate>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d168      	bne.n	8009ab0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	7d1b      	ldrb	r3, [r3, #20]
 80099e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d062      	beq.n	8009ab0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	7d1b      	ldrb	r3, [r3, #20]
 80099ee:	b25b      	sxtb	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	da15      	bge.n	8009a20 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	7858      	ldrb	r0, [r3, #1]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1a      	ldr	r2, [r3, #32]
 8009a02:	2301      	movs	r3, #1
 8009a04:	f7fc ff26 	bl	8006854 <disk_write>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <f_sync+0x54>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e04f      	b.n	8009ab2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7d1b      	ldrb	r3, [r3, #20]
 8009a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a20:	f7fc fc66 	bl	80062f0 <get_fattime>
 8009a24:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4610      	mov	r0, r2
 8009a30:	f7fd fa00 	bl	8006e34 <move_window>
 8009a34:	4603      	mov	r3, r0
 8009a36:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d138      	bne.n	8009ab0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a42:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	330b      	adds	r3, #11
 8009a48:	781a      	ldrb	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	330b      	adds	r3, #11
 8009a4e:	f042 0220 	orr.w	r2, r2, #32
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	68f9      	ldr	r1, [r7, #12]
 8009a62:	f7fd ff0a 	bl	800787a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f103 021c 	add.w	r2, r3, #28
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f7fc ff83 	bl	800697e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3316      	adds	r3, #22
 8009a7c:	6939      	ldr	r1, [r7, #16]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fc ff7d 	bl	800697e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3312      	adds	r3, #18
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fc ff5c 	bl	8006948 <st_word>
					fs->wflag = 1;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2201      	movs	r2, #1
 8009a94:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fd f9f9 	bl	8006e90 <sync_fs>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7d1b      	ldrb	r3, [r3, #20]
 8009aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff ff7b 	bl	80099be <f_sync>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d118      	bne.n	8009b04 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f107 0208 	add.w	r2, r7, #8
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7ff f98c 	bl	8008df8 <validate>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10c      	bne.n	8009b04 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fd f8fc 	bl	8006cec <dec_lock>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d102      	bne.n	8009b04 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b090      	sub	sp, #64	@ 0x40
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f107 0208 	add.w	r2, r7, #8
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff f969 	bl	8008df8 <validate>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009b2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d103      	bne.n	8009b3c <f_lseek+0x2e>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7d5b      	ldrb	r3, [r3, #21]
 8009b38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009b3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <f_lseek+0x3c>
 8009b44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009b48:	e1e6      	b.n	8009f18 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 80d1 	beq.w	8009cf6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d15a      	bne.n	8009c12 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b60:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	1d1a      	adds	r2, r3, #4
 8009b66:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d03a      	beq.n	8009bf2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	2300      	movs	r3, #0
 8009b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b86:	3302      	adds	r3, #2
 8009b88:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b90:	3301      	adds	r3, #1
 8009b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fd fa06 	bl	8006faa <get_fat>
 8009b9e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d804      	bhi.n	8009bb0 <f_lseek+0xa2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	755a      	strb	r2, [r3, #21]
 8009bac:	2302      	movs	r3, #2
 8009bae:	e1b3      	b.n	8009f18 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb6:	d104      	bne.n	8009bc2 <f_lseek+0xb4>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	755a      	strb	r2, [r3, #21]
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e1aa      	b.n	8009f18 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d0de      	beq.n	8009b8a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d809      	bhi.n	8009be8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd6:	1d1a      	adds	r2, r3, #4
 8009bd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8009bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be0:	1d1a      	adds	r2, r3, #4
 8009be2:	627a      	str	r2, [r7, #36]	@ 0x24
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d3c4      	bcc.n	8009b7c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bf8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d803      	bhi.n	8009c0a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	e184      	b.n	8009f14 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009c0a:	2311      	movs	r3, #17
 8009c0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009c10:	e180      	b.n	8009f14 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d902      	bls.n	8009c22 <f_lseek+0x114>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 8172 	beq.w	8009f14 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7fd fc45 	bl	80074c6 <clmt_clust>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	f7fd f98e 	bl	8006f6c <clust2sect>
 8009c50:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <f_lseek+0x154>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	755a      	strb	r2, [r3, #21]
 8009c5e:	2302      	movs	r3, #2
 8009c60:	e15a      	b.n	8009f18 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	0a5b      	lsrs	r3, r3, #9
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	8952      	ldrh	r2, [r2, #10]
 8009c6c:	3a01      	subs	r2, #1
 8009c6e:	4013      	ands	r3, r2
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	4413      	add	r3, r2
 8009c74:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8148 	beq.w	8009f14 <f_lseek+0x406>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	f000 8142 	beq.w	8009f14 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	7d1b      	ldrb	r3, [r3, #20]
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	da18      	bge.n	8009ccc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	7858      	ldrb	r0, [r3, #1]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a1a      	ldr	r2, [r3, #32]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f7fc fdd3 	bl	8006854 <disk_write>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d004      	beq.n	8009cbe <f_lseek+0x1b0>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	755a      	strb	r2, [r3, #21]
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e12c      	b.n	8009f18 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7d1b      	ldrb	r3, [r3, #20]
 8009cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	7858      	ldrb	r0, [r3, #1]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	f7fc fd9b 	bl	8006814 <disk_read>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <f_lseek+0x1e0>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	755a      	strb	r2, [r3, #21]
 8009cea:	2301      	movs	r3, #1
 8009cec:	e114      	b.n	8009f18 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	621a      	str	r2, [r3, #32]
 8009cf4:	e10e      	b.n	8009f14 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d908      	bls.n	8009d12 <f_lseek+0x204>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7d1b      	ldrb	r3, [r3, #20]
 8009d04:	f003 0302 	and.w	r3, r3, #2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d20:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80a7 	beq.w	8009e78 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	895b      	ldrh	r3, [r3, #10]
 8009d2e:	025b      	lsls	r3, r3, #9
 8009d30:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01b      	beq.n	8009d70 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	1e5a      	subs	r2, r3, #1
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	1e59      	subs	r1, r3, #1
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d30f      	bcc.n	8009d70 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	1e5a      	subs	r2, r3, #1
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	425b      	negs	r3, r3
 8009d58:	401a      	ands	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d6e:	e022      	b.n	8009db6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d119      	bne.n	8009db0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fd fb08 	bl	8007396 <create_chain>
 8009d86:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d104      	bne.n	8009d98 <f_lseek+0x28a>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2202      	movs	r2, #2
 8009d92:	755a      	strb	r2, [r3, #21]
 8009d94:	2302      	movs	r3, #2
 8009d96:	e0bf      	b.n	8009f18 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9e:	d104      	bne.n	8009daa <f_lseek+0x29c>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	755a      	strb	r2, [r3, #21]
 8009da6:	2301      	movs	r3, #1
 8009da8:	e0b6      	b.n	8009f18 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dae:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009db4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d05d      	beq.n	8009e78 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009dbc:	e03a      	b.n	8009e34 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	603b      	str	r3, [r7, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	441a      	add	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	7d1b      	ldrb	r3, [r3, #20]
 8009dd6:	f003 0302 	and.w	r3, r3, #2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00b      	beq.n	8009df6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fad7 	bl	8007396 <create_chain>
 8009de8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d108      	bne.n	8009e02 <f_lseek+0x2f4>
							ofs = 0; break;
 8009df0:	2300      	movs	r3, #0
 8009df2:	603b      	str	r3, [r7, #0]
 8009df4:	e022      	b.n	8009e3c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fd f8d5 	bl	8006faa <get_fat>
 8009e00:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d104      	bne.n	8009e14 <f_lseek+0x306>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	755a      	strb	r2, [r3, #21]
 8009e10:	2301      	movs	r3, #1
 8009e12:	e081      	b.n	8009f18 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d904      	bls.n	8009e24 <f_lseek+0x316>
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d304      	bcc.n	8009e2e <f_lseek+0x320>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	755a      	strb	r2, [r3, #21]
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e074      	b.n	8009f18 <f_lseek+0x40a>
					fp->clust = clst;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e32:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d8c0      	bhi.n	8009dbe <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	441a      	add	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d012      	beq.n	8009e78 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fd f888 	bl	8006f6c <clust2sect>
 8009e5c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <f_lseek+0x360>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	755a      	strb	r2, [r3, #21]
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	e054      	b.n	8009f18 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	0a5b      	lsrs	r3, r3, #9
 8009e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e74:	4413      	add	r3, r2
 8009e76:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	699a      	ldr	r2, [r3, #24]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d90a      	bls.n	8009e9a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7d1b      	ldrb	r3, [r3, #20]
 8009e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d036      	beq.n	8009f14 <f_lseek+0x406>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d031      	beq.n	8009f14 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7d1b      	ldrb	r3, [r3, #20]
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	da18      	bge.n	8009eec <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	7858      	ldrb	r0, [r3, #1]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a1a      	ldr	r2, [r3, #32]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	f7fc fcc3 	bl	8006854 <disk_write>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <f_lseek+0x3d0>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	755a      	strb	r2, [r3, #21]
 8009eda:	2301      	movs	r3, #1
 8009edc:	e01c      	b.n	8009f18 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	7d1b      	ldrb	r3, [r3, #20]
 8009ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	7858      	ldrb	r0, [r3, #1]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009efa:	f7fc fc8b 	bl	8006814 <disk_read>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <f_lseek+0x400>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	755a      	strb	r2, [r3, #21]
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e004      	b.n	8009f18 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f12:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009f14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3740      	adds	r7, #64	@ 0x40
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f2c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009f30:	6018      	str	r0, [r3, #0]
 8009f32:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f36:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009f3a:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009f3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f40:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <f_opendir+0x2e>
 8009f4a:	2309      	movs	r3, #9
 8009f4c:	e0a0      	b.n	800a090 <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 8009f4e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f52:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8009f5c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8009f60:	463b      	mov	r3, r7
 8009f62:	2200      	movs	r2, #0
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fcfb 	bl	8008960 <find_volume>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8009f70:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f040 8081 	bne.w	800a07c <f_opendir+0x15c>
		obj->fs = fs;
 8009f7a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009f7e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009f82:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8009f84:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009f88:	f107 020c 	add.w	r2, r7, #12
 8009f8c:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009f8e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f92:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f9c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	f7fe fbd0 	bl	8008748 <follow_path>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8009fae:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d15b      	bne.n	800a06e <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009fb6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009fba:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009fc4:	b25b      	sxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	db1a      	blt.n	800a000 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009fca:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009fce:	799b      	ldrb	r3, [r3, #6]
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d010      	beq.n	8009ffa <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009fd8:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009fdc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009fe0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f7fd fc26 	bl	800783c <ld_clust>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009ff6:	609a      	str	r2, [r3, #8]
 8009ff8:	e002      	b.n	800a000 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009ffa:	2305      	movs	r3, #5
 8009ffc:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 800a000:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a004:	2b00      	cmp	r3, #0
 800a006:	d132      	bne.n	800a06e <f_opendir+0x14e>
				obj->id = fs->id;
 800a008:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a00c:	88da      	ldrh	r2, [r3, #6]
 800a00e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a012:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a014:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a018:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a01c:	2100      	movs	r1, #0
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	f7fd fa85 	bl	800752e <dir_sdi>
 800a024:	4603      	mov	r3, r0
 800a026:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a02a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d11d      	bne.n	800a06e <f_opendir+0x14e>
					if (obj->sclust) {
 800a032:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d014      	beq.n	800a066 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a03c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a040:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a044:	2100      	movs	r1, #0
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	f7fc fdc2 	bl	8006bd0 <inc_lock>
 800a04c:	4602      	mov	r2, r0
 800a04e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a052:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a054:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d107      	bne.n	800a06e <f_opendir+0x14e>
 800a05e:	2312      	movs	r3, #18
 800a060:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800a064:	e003      	b.n	800a06e <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a066:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a06a:	2200      	movs	r2, #0
 800a06c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a06e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a072:	2b04      	cmp	r3, #4
 800a074:	d102      	bne.n	800a07c <f_opendir+0x15c>
 800a076:	2305      	movs	r3, #5
 800a078:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a07c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <f_opendir+0x16c>
 800a084:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a08c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 800a090:	4618      	mov	r0, r3
 800a092:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f107 0208 	add.w	r2, r7, #8
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fea4 	bl	8008df8 <validate>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d110      	bne.n	800a0dc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d006      	beq.n	800a0d0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fc fe10 	bl	8006cec <dec_lock>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a0f2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a0f6:	6018      	str	r0, [r3, #0]
 800a0f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a0fc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a100:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a102:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a106:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800a110:	4611      	mov	r1, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fe70 	bl	8008df8 <validate>
 800a118:	4603      	mov	r3, r0
 800a11a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 800a11e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a122:	2b00      	cmp	r3, #0
 800a124:	d14b      	bne.n	800a1be <f_readdir+0xd8>
		if (!fno) {
 800a126:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a12a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10b      	bne.n	800a14c <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a134:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a138:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a13c:	2100      	movs	r1, #0
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	f7fd f9f5 	bl	800752e <dir_sdi>
 800a144:	4603      	mov	r3, r0
 800a146:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800a14a:	e038      	b.n	800a1be <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800a14c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800a150:	f107 0208 	add.w	r2, r7, #8
 800a154:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800a156:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a15a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a15e:	2100      	movs	r1, #0
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	f7fd fdac 	bl	8007cbe <dir_read>
 800a166:	4603      	mov	r3, r0
 800a168:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a16c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a170:	2b04      	cmp	r3, #4
 800a172:	d102      	bne.n	800a17a <f_readdir+0x94>
 800a174:	2300      	movs	r3, #0
 800a176:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800a17a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d11d      	bne.n	800a1be <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a182:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a186:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800a18a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a18e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a192:	6811      	ldr	r1, [r2, #0]
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	f7fd fff1 	bl	800817c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a19a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a19e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f7fd fa3d 	bl	8007624 <dir_next>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a1b0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d102      	bne.n	800a1be <f_readdir+0xd8>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a1be:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	2b0a      	cmp	r3, #10
 800a1dc:	d103      	bne.n	800a1e6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a1de:	210d      	movs	r1, #13
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff fff3 	bl	800a1cc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	db25      	blt.n	800a23e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	60fa      	str	r2, [r7, #12]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	78fa      	ldrb	r2, [r7, #3]
 800a1fe:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b3c      	cmp	r3, #60	@ 0x3c
 800a204:	dd12      	ble.n	800a22c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f103 010c 	add.w	r1, r3, #12
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	f7ff fa5d 	bl	80096d4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d101      	bne.n	800a226 <putc_bfd+0x5a>
 800a222:	2300      	movs	r3, #0
 800a224:	e001      	b.n	800a22a <putc_bfd+0x5e>
 800a226:	f04f 33ff 	mov.w	r3, #4294967295
 800a22a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	609a      	str	r2, [r3, #8]
 800a23c:	e000      	b.n	800a240 <putc_bfd+0x74>
	if (i < 0) return;
 800a23e:	bf00      	nop
}
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	db16      	blt.n	800a284 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f103 010c 	add.w	r1, r3, #12
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	461a      	mov	r2, r3
 800a266:	f107 030c 	add.w	r3, r7, #12
 800a26a:	f7ff fa33 	bl	80096d4 <f_write>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d107      	bne.n	800a284 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d102      	bne.n	800a284 <putc_flush+0x3e>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	e001      	b.n	800a288 <putc_flush+0x42>
	return EOF;
 800a284:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	605a      	str	r2, [r3, #4]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	609a      	str	r2, [r3, #8]
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a2bc:	b40e      	push	{r1, r2, r3}
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b0a7      	sub	sp, #156	@ 0x9c
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a2c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff ffdf 	bl	800a290 <putc_init>

	va_start(arp, fmt);
 800a2d2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800a2d6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800a2d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800a2e8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 81f2 	beq.w	800a6d6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800a2f2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a2f6:	2b25      	cmp	r3, #37	@ 0x25
 800a2f8:	d008      	beq.n	800a30c <f_printf+0x50>
			putc_bfd(&pb, c);
 800a2fa:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800a2fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff ff61 	bl	800a1cc <putc_bfd>
			continue;
 800a30a:	e1e3      	b.n	800a6d4 <f_printf+0x418>
		}
		w = f = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800a312:	2300      	movs	r3, #0
 800a314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800a318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a328:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a32c:	2b30      	cmp	r3, #48	@ 0x30
 800a32e:	d10b      	bne.n	800a348 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800a336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800a346:	e024      	b.n	800a392 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a348:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a34c:	2b2d      	cmp	r3, #45	@ 0x2d
 800a34e:	d120      	bne.n	800a392 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a350:	2302      	movs	r3, #2
 800a352:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800a356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a366:	e014      	b.n	800a392 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a368:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	005b      	lsls	r3, r3, #1
 800a374:	461a      	mov	r2, r3
 800a376:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a37a:	4413      	add	r3, r2
 800a37c:	3b30      	subs	r3, #48	@ 0x30
 800a37e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800a382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a386:	1c5a      	adds	r2, r3, #1
 800a388:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800a392:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a396:	2b2f      	cmp	r3, #47	@ 0x2f
 800a398:	d903      	bls.n	800a3a2 <f_printf+0xe6>
 800a39a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a39e:	2b39      	cmp	r3, #57	@ 0x39
 800a3a0:	d9e2      	bls.n	800a368 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a3a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a3a6:	2b6c      	cmp	r3, #108	@ 0x6c
 800a3a8:	d003      	beq.n	800a3b2 <f_printf+0xf6>
 800a3aa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a3ae:	2b4c      	cmp	r3, #76	@ 0x4c
 800a3b0:	d10d      	bne.n	800a3ce <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a3b2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a3b6:	f043 0304 	orr.w	r3, r3, #4
 800a3ba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800a3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3c2:	1c5a      	adds	r2, r3, #1
 800a3c4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800a3ce:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8181 	beq.w	800a6da <f_printf+0x41e>
		d = c;
 800a3d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a3dc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800a3e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a3e4:	2b60      	cmp	r3, #96	@ 0x60
 800a3e6:	d908      	bls.n	800a3fa <f_printf+0x13e>
 800a3e8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a3ec:	2b7a      	cmp	r3, #122	@ 0x7a
 800a3ee:	d804      	bhi.n	800a3fa <f_printf+0x13e>
 800a3f0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a3f4:	3b20      	subs	r3, #32
 800a3f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800a3fa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a3fe:	3b42      	subs	r3, #66	@ 0x42
 800a400:	2b16      	cmp	r3, #22
 800a402:	f200 8098 	bhi.w	800a536 <f_printf+0x27a>
 800a406:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <f_printf+0x150>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a517 	.word	0x0800a517
 800a410:	0800a4ff 	.word	0x0800a4ff
 800a414:	0800a527 	.word	0x0800a527
 800a418:	0800a537 	.word	0x0800a537
 800a41c:	0800a537 	.word	0x0800a537
 800a420:	0800a537 	.word	0x0800a537
 800a424:	0800a537 	.word	0x0800a537
 800a428:	0800a537 	.word	0x0800a537
 800a42c:	0800a537 	.word	0x0800a537
 800a430:	0800a537 	.word	0x0800a537
 800a434:	0800a537 	.word	0x0800a537
 800a438:	0800a537 	.word	0x0800a537
 800a43c:	0800a537 	.word	0x0800a537
 800a440:	0800a51f 	.word	0x0800a51f
 800a444:	0800a537 	.word	0x0800a537
 800a448:	0800a537 	.word	0x0800a537
 800a44c:	0800a537 	.word	0x0800a537
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a537 	.word	0x0800a537
 800a458:	0800a527 	.word	0x0800a527
 800a45c:	0800a537 	.word	0x0800a537
 800a460:	0800a537 	.word	0x0800a537
 800a464:	0800a52f 	.word	0x0800a52f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a46a:	1d1a      	adds	r2, r3, #4
 800a46c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800a472:	2300      	movs	r3, #0
 800a474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a478:	e004      	b.n	800a484 <f_printf+0x1c8>
 800a47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a47e:	3301      	adds	r3, #1
 800a480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a484:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1f3      	bne.n	800a47a <f_printf+0x1be>
			if (!(f & 2)) {
 800a492:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d11a      	bne.n	800a4d4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a49e:	e005      	b.n	800a4ac <f_printf+0x1f0>
 800a4a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a4a4:	2120      	movs	r1, #32
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff fe90 	bl	800a1cc <putc_bfd>
 800a4ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a4b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d8f0      	bhi.n	800a4a0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a4be:	e009      	b.n	800a4d4 <f_printf+0x218>
 800a4c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a4c6:	781a      	ldrb	r2, [r3, #0]
 800a4c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff fe7c 	bl	800a1cc <putc_bfd>
 800a4d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1f1      	bne.n	800a4c0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a4dc:	e005      	b.n	800a4ea <f_printf+0x22e>
 800a4de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a4e2:	2120      	movs	r1, #32
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff fe71 	bl	800a1cc <putc_bfd>
 800a4ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a4f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d8f0      	bhi.n	800a4de <f_printf+0x222>
			continue;
 800a4fc:	e0ea      	b.n	800a6d4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a4fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	67ba      	str	r2, [r7, #120]	@ 0x78
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	b2da      	uxtb	r2, r3
 800a508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fe5c 	bl	800a1cc <putc_bfd>
 800a514:	e0de      	b.n	800a6d4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800a516:	2302      	movs	r3, #2
 800a518:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800a51c:	e014      	b.n	800a548 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a51e:	2308      	movs	r3, #8
 800a520:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800a524:	e010      	b.n	800a548 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a526:	230a      	movs	r3, #10
 800a528:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800a52c:	e00c      	b.n	800a548 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a52e:	2310      	movs	r3, #16
 800a530:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800a534:	e008      	b.n	800a548 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a536:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800a53a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a53e:	4611      	mov	r1, r2
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fe43 	bl	800a1cc <putc_bfd>
 800a546:	e0c5      	b.n	800a6d4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a548:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <f_printf+0x2a2>
 800a554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a556:	1d1a      	adds	r2, r3, #4
 800a558:	67ba      	str	r2, [r7, #120]	@ 0x78
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	e00c      	b.n	800a578 <f_printf+0x2bc>
 800a55e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a562:	2b44      	cmp	r3, #68	@ 0x44
 800a564:	d104      	bne.n	800a570 <f_printf+0x2b4>
 800a566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a568:	1d1a      	adds	r2, r3, #4
 800a56a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	e003      	b.n	800a578 <f_printf+0x2bc>
 800a570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a572:	1d1a      	adds	r2, r3, #4
 800a574:	67ba      	str	r2, [r7, #120]	@ 0x78
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a57c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a580:	2b44      	cmp	r3, #68	@ 0x44
 800a582:	d10e      	bne.n	800a5a2 <f_printf+0x2e6>
 800a584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a588:	2b00      	cmp	r3, #0
 800a58a:	da0a      	bge.n	800a5a2 <f_printf+0x2e6>
			v = 0 - v;
 800a58c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a590:	425b      	negs	r3, r3
 800a592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800a596:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a59a:	f043 0308 	orr.w	r3, r3, #8
 800a59e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a5a8:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800a5ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a5b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5b4:	fb01 f202 	mul.w	r2, r1, r2
 800a5b8:	1a9b      	subs	r3, r3, r2
 800a5ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800a5be:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800a5c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a5ce:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a5d2:	2b09      	cmp	r3, #9
 800a5d4:	d90b      	bls.n	800a5ee <f_printf+0x332>
 800a5d6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a5da:	2b78      	cmp	r3, #120	@ 0x78
 800a5dc:	d101      	bne.n	800a5e2 <f_printf+0x326>
 800a5de:	2227      	movs	r2, #39	@ 0x27
 800a5e0:	e000      	b.n	800a5e4 <f_printf+0x328>
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800a5ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800a5f8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800a5fc:	3230      	adds	r2, #48	@ 0x30
 800a5fe:	b2d2      	uxtb	r2, r2
 800a600:	3398      	adds	r3, #152	@ 0x98
 800a602:	443b      	add	r3, r7
 800a604:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <f_printf+0x35c>
 800a610:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a614:	2b1f      	cmp	r3, #31
 800a616:	d9c7      	bls.n	800a5a8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a618:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a61c:	f003 0308 	and.w	r3, r3, #8
 800a620:	2b00      	cmp	r3, #0
 800a622:	d009      	beq.n	800a638 <f_printf+0x37c>
 800a624:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800a62e:	3398      	adds	r3, #152	@ 0x98
 800a630:	443b      	add	r3, r7
 800a632:	222d      	movs	r2, #45	@ 0x2d
 800a634:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a63c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a640:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <f_printf+0x394>
 800a64c:	2330      	movs	r3, #48	@ 0x30
 800a64e:	e000      	b.n	800a652 <f_printf+0x396>
 800a650:	2320      	movs	r3, #32
 800a652:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a656:	e007      	b.n	800a668 <f_printf+0x3ac>
 800a658:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800a65c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a660:	4611      	mov	r1, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fdb2 	bl	800a1cc <putc_bfd>
 800a668:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a66c:	f003 0302 	and.w	r3, r3, #2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d108      	bne.n	800a686 <f_printf+0x3ca>
 800a674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a67e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a682:	429a      	cmp	r2, r3
 800a684:	d8e8      	bhi.n	800a658 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800a686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a68a:	3b01      	subs	r3, #1
 800a68c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a690:	f107 020c 	add.w	r2, r7, #12
 800a694:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a698:	4413      	add	r3, r2
 800a69a:	781a      	ldrb	r2, [r3, #0]
 800a69c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff fd92 	bl	800a1cc <putc_bfd>
		} while (i);
 800a6a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1ea      	bne.n	800a686 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800a6b0:	e007      	b.n	800a6c2 <f_printf+0x406>
 800a6b2:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800a6b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fd85 	bl	800a1cc <putc_bfd>
 800a6c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a6cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d8ee      	bhi.n	800a6b2 <f_printf+0x3f6>
		c = *fmt++;
 800a6d4:	e600      	b.n	800a2d8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a6d6:	bf00      	nop
 800a6d8:	e000      	b.n	800a6dc <f_printf+0x420>
		if (!c) break;
 800a6da:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a6dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fdb0 	bl	800a246 <putc_flush>
 800a6e6:	4603      	mov	r3, r0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	379c      	adds	r7, #156	@ 0x9c
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6f2:	b003      	add	sp, #12
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop

0800a6f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	4613      	mov	r3, r2
 800a704:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a706:	2301      	movs	r3, #1
 800a708:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a70e:	4b1f      	ldr	r3, [pc, #124]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a710:	7a5b      	ldrb	r3, [r3, #9]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d131      	bne.n	800a77c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a718:	4b1c      	ldr	r3, [pc, #112]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a71a:	7a5b      	ldrb	r3, [r3, #9]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	461a      	mov	r2, r3
 800a720:	4b1a      	ldr	r3, [pc, #104]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a722:	2100      	movs	r1, #0
 800a724:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a726:	4b19      	ldr	r3, [pc, #100]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a728:	7a5b      	ldrb	r3, [r3, #9]
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	4a17      	ldr	r2, [pc, #92]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a736:	4b15      	ldr	r3, [pc, #84]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a738:	7a5b      	ldrb	r3, [r3, #9]
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	461a      	mov	r2, r3
 800a73e:	4b13      	ldr	r3, [pc, #76]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a740:	4413      	add	r3, r2
 800a742:	79fa      	ldrb	r2, [r7, #7]
 800a744:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a746:	4b11      	ldr	r3, [pc, #68]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a748:	7a5b      	ldrb	r3, [r3, #9]
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	b2d1      	uxtb	r1, r2
 800a750:	4a0e      	ldr	r2, [pc, #56]	@ (800a78c <FATFS_LinkDriverEx+0x94>)
 800a752:	7251      	strb	r1, [r2, #9]
 800a754:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a756:	7dbb      	ldrb	r3, [r7, #22]
 800a758:	3330      	adds	r3, #48	@ 0x30
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	3301      	adds	r3, #1
 800a764:	223a      	movs	r2, #58	@ 0x3a
 800a766:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3302      	adds	r3, #2
 800a76c:	222f      	movs	r2, #47	@ 0x2f
 800a76e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	3303      	adds	r3, #3
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	2000075c 	.word	0x2000075c

0800a790 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a79a:	2200      	movs	r2, #0
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff ffaa 	bl	800a6f8 <FATFS_LinkDriverEx>
 800a7a4:	4603      	mov	r3, r0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b089      	sub	sp, #36	@ 0x24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	6039      	str	r1, [r7, #0]
 800a7ba:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7c0:	d802      	bhi.n	800a7c8 <ff_convert+0x18>
		c = chr;
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	837b      	strh	r3, [r7, #26]
 800a7c6:	e045      	b.n	800a854 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d005      	beq.n	800a7da <ff_convert+0x2a>
			p = oem2uni;
 800a7ce:	4b25      	ldr	r3, [pc, #148]	@ (800a864 <ff_convert+0xb4>)
 800a7d0:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800a7d2:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a7d6:	60bb      	str	r3, [r7, #8]
 800a7d8:	e004      	b.n	800a7e4 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800a7da:	4b23      	ldr	r3, [pc, #140]	@ (800a868 <ff_convert+0xb8>)
 800a7dc:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800a7de:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a7e2:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800a7e8:	2310      	movs	r3, #16
 800a7ea:	613b      	str	r3, [r7, #16]
 800a7ec:	e021      	b.n	800a832 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	0fda      	lsrs	r2, r3, #31
 800a7f6:	4413      	add	r3, r2
 800a7f8:	105b      	asrs	r3, r3, #1
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	69fa      	ldr	r2, [r7, #28]
 800a808:	4413      	add	r3, r2
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	88fa      	ldrh	r2, [r7, #6]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d013      	beq.n	800a83a <ff_convert+0x8a>
			if (chr > p[i * 2])
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	69fa      	ldr	r2, [r7, #28]
 800a818:	4413      	add	r3, r2
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	88fa      	ldrh	r2, [r7, #6]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d902      	bls.n	800a828 <ff_convert+0x78>
				li = i;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	60fb      	str	r3, [r7, #12]
 800a826:	e001      	b.n	800a82c <ff_convert+0x7c>
			else
				hi = i;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	3b01      	subs	r3, #1
 800a830:	613b      	str	r3, [r7, #16]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1da      	bne.n	800a7ee <ff_convert+0x3e>
 800a838:	e000      	b.n	800a83c <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800a83a:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d006      	beq.n	800a850 <ff_convert+0xa0>
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	3302      	adds	r3, #2
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	4413      	add	r3, r2
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	e000      	b.n	800a852 <ff_convert+0xa2>
 800a850:	2300      	movs	r3, #0
 800a852:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800a854:	8b7b      	ldrh	r3, [r7, #26]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3724      	adds	r7, #36	@ 0x24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	080212e0 	.word	0x080212e0
 800a868:	0800be5c 	.word	0x0800be5c

0800a86c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b087      	sub	sp, #28
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a876:	88fb      	ldrh	r3, [r7, #6]
 800a878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a87c:	d201      	bcs.n	800a882 <ff_wtoupper+0x16>
 800a87e:	4b3e      	ldr	r3, [pc, #248]	@ (800a978 <ff_wtoupper+0x10c>)
 800a880:	e000      	b.n	800a884 <ff_wtoupper+0x18>
 800a882:	4b3e      	ldr	r3, [pc, #248]	@ (800a97c <ff_wtoupper+0x110>)
 800a884:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	1c9a      	adds	r2, r3, #2
 800a88a:	617a      	str	r2, [r7, #20]
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a890:	8a7b      	ldrh	r3, [r7, #18]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d068      	beq.n	800a968 <ff_wtoupper+0xfc>
 800a896:	88fa      	ldrh	r2, [r7, #6]
 800a898:	8a7b      	ldrh	r3, [r7, #18]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d364      	bcc.n	800a968 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	1c9a      	adds	r2, r3, #2
 800a8a2:	617a      	str	r2, [r7, #20]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	823b      	strh	r3, [r7, #16]
 800a8a8:	8a3b      	ldrh	r3, [r7, #16]
 800a8aa:	0a1b      	lsrs	r3, r3, #8
 800a8ac:	81fb      	strh	r3, [r7, #14]
 800a8ae:	8a3b      	ldrh	r3, [r7, #16]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a8b4:	88fa      	ldrh	r2, [r7, #6]
 800a8b6:	8a79      	ldrh	r1, [r7, #18]
 800a8b8:	8a3b      	ldrh	r3, [r7, #16]
 800a8ba:	440b      	add	r3, r1
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	da49      	bge.n	800a954 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a8c0:	89fb      	ldrh	r3, [r7, #14]
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d84f      	bhi.n	800a966 <ff_wtoupper+0xfa>
 800a8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8cc <ff_wtoupper+0x60>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a8f1 	.word	0x0800a8f1
 800a8d0:	0800a903 	.word	0x0800a903
 800a8d4:	0800a919 	.word	0x0800a919
 800a8d8:	0800a921 	.word	0x0800a921
 800a8dc:	0800a929 	.word	0x0800a929
 800a8e0:	0800a931 	.word	0x0800a931
 800a8e4:	0800a939 	.word	0x0800a939
 800a8e8:	0800a941 	.word	0x0800a941
 800a8ec:	0800a949 	.word	0x0800a949
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a8f0:	88fa      	ldrh	r2, [r7, #6]
 800a8f2:	8a7b      	ldrh	r3, [r7, #18]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	80fb      	strh	r3, [r7, #6]
 800a900:	e027      	b.n	800a952 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a902:	88fa      	ldrh	r2, [r7, #6]
 800a904:	8a7b      	ldrh	r3, [r7, #18]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	b29b      	uxth	r3, r3
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	b29b      	uxth	r3, r3
 800a910:	88fa      	ldrh	r2, [r7, #6]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	80fb      	strh	r3, [r7, #6]
 800a916:	e01c      	b.n	800a952 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a918:	88fb      	ldrh	r3, [r7, #6]
 800a91a:	3b10      	subs	r3, #16
 800a91c:	80fb      	strh	r3, [r7, #6]
 800a91e:	e018      	b.n	800a952 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a920:	88fb      	ldrh	r3, [r7, #6]
 800a922:	3b20      	subs	r3, #32
 800a924:	80fb      	strh	r3, [r7, #6]
 800a926:	e014      	b.n	800a952 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	3b30      	subs	r3, #48	@ 0x30
 800a92c:	80fb      	strh	r3, [r7, #6]
 800a92e:	e010      	b.n	800a952 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a930:	88fb      	ldrh	r3, [r7, #6]
 800a932:	3b1a      	subs	r3, #26
 800a934:	80fb      	strh	r3, [r7, #6]
 800a936:	e00c      	b.n	800a952 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a938:	88fb      	ldrh	r3, [r7, #6]
 800a93a:	3308      	adds	r3, #8
 800a93c:	80fb      	strh	r3, [r7, #6]
 800a93e:	e008      	b.n	800a952 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a940:	88fb      	ldrh	r3, [r7, #6]
 800a942:	3b50      	subs	r3, #80	@ 0x50
 800a944:	80fb      	strh	r3, [r7, #6]
 800a946:	e004      	b.n	800a952 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a948:	88fb      	ldrh	r3, [r7, #6]
 800a94a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a94e:	80fb      	strh	r3, [r7, #6]
 800a950:	bf00      	nop
			}
			break;
 800a952:	e008      	b.n	800a966 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d195      	bne.n	800a886 <ff_wtoupper+0x1a>
 800a95a:	8a3b      	ldrh	r3, [r7, #16]
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	4413      	add	r3, r2
 800a962:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a964:	e78f      	b.n	800a886 <ff_wtoupper+0x1a>
			break;
 800a966:	bf00      	nop
	}

	return chr;
 800a968:	88fb      	ldrh	r3, [r7, #6]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	08036764 	.word	0x08036764
 800a97c:	08036958 	.word	0x08036958

0800a980 <std>:
 800a980:	2300      	movs	r3, #0
 800a982:	b510      	push	{r4, lr}
 800a984:	4604      	mov	r4, r0
 800a986:	e9c0 3300 	strd	r3, r3, [r0]
 800a98a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a98e:	6083      	str	r3, [r0, #8]
 800a990:	8181      	strh	r1, [r0, #12]
 800a992:	6643      	str	r3, [r0, #100]	@ 0x64
 800a994:	81c2      	strh	r2, [r0, #14]
 800a996:	6183      	str	r3, [r0, #24]
 800a998:	4619      	mov	r1, r3
 800a99a:	2208      	movs	r2, #8
 800a99c:	305c      	adds	r0, #92	@ 0x5c
 800a99e:	f000 f9f9 	bl	800ad94 <memset>
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d8 <std+0x58>)
 800a9a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9dc <std+0x5c>)
 800a9a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e0 <std+0x60>)
 800a9ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <std+0x64>)
 800a9b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e8 <std+0x68>)
 800a9b4:	6224      	str	r4, [r4, #32]
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d006      	beq.n	800a9c8 <std+0x48>
 800a9ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9be:	4294      	cmp	r4, r2
 800a9c0:	d002      	beq.n	800a9c8 <std+0x48>
 800a9c2:	33d0      	adds	r3, #208	@ 0xd0
 800a9c4:	429c      	cmp	r4, r3
 800a9c6:	d105      	bne.n	800a9d4 <std+0x54>
 800a9c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d0:	f000 ba58 	b.w	800ae84 <__retarget_lock_init_recursive>
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800abe5 	.word	0x0800abe5
 800a9dc:	0800ac07 	.word	0x0800ac07
 800a9e0:	0800ac3f 	.word	0x0800ac3f
 800a9e4:	0800ac63 	.word	0x0800ac63
 800a9e8:	20000768 	.word	0x20000768

0800a9ec <stdio_exit_handler>:
 800a9ec:	4a02      	ldr	r2, [pc, #8]	@ (800a9f8 <stdio_exit_handler+0xc>)
 800a9ee:	4903      	ldr	r1, [pc, #12]	@ (800a9fc <stdio_exit_handler+0x10>)
 800a9f0:	4803      	ldr	r0, [pc, #12]	@ (800aa00 <stdio_exit_handler+0x14>)
 800a9f2:	f000 b869 	b.w	800aac8 <_fwalk_sglue>
 800a9f6:	bf00      	nop
 800a9f8:	2000000c 	.word	0x2000000c
 800a9fc:	0800b721 	.word	0x0800b721
 800aa00:	2000001c 	.word	0x2000001c

0800aa04 <cleanup_stdio>:
 800aa04:	6841      	ldr	r1, [r0, #4]
 800aa06:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <cleanup_stdio+0x34>)
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	b510      	push	{r4, lr}
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	d001      	beq.n	800aa14 <cleanup_stdio+0x10>
 800aa10:	f000 fe86 	bl	800b720 <_fflush_r>
 800aa14:	68a1      	ldr	r1, [r4, #8]
 800aa16:	4b09      	ldr	r3, [pc, #36]	@ (800aa3c <cleanup_stdio+0x38>)
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	d002      	beq.n	800aa22 <cleanup_stdio+0x1e>
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fe7f 	bl	800b720 <_fflush_r>
 800aa22:	68e1      	ldr	r1, [r4, #12]
 800aa24:	4b06      	ldr	r3, [pc, #24]	@ (800aa40 <cleanup_stdio+0x3c>)
 800aa26:	4299      	cmp	r1, r3
 800aa28:	d004      	beq.n	800aa34 <cleanup_stdio+0x30>
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa30:	f000 be76 	b.w	800b720 <_fflush_r>
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	20000768 	.word	0x20000768
 800aa3c:	200007d0 	.word	0x200007d0
 800aa40:	20000838 	.word	0x20000838

0800aa44 <global_stdio_init.part.0>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <global_stdio_init.part.0+0x30>)
 800aa48:	4c0b      	ldr	r4, [pc, #44]	@ (800aa78 <global_stdio_init.part.0+0x34>)
 800aa4a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa7c <global_stdio_init.part.0+0x38>)
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	4620      	mov	r0, r4
 800aa50:	2200      	movs	r2, #0
 800aa52:	2104      	movs	r1, #4
 800aa54:	f7ff ff94 	bl	800a980 <std>
 800aa58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	2109      	movs	r1, #9
 800aa60:	f7ff ff8e 	bl	800a980 <std>
 800aa64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa68:	2202      	movs	r2, #2
 800aa6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa6e:	2112      	movs	r1, #18
 800aa70:	f7ff bf86 	b.w	800a980 <std>
 800aa74:	200008a0 	.word	0x200008a0
 800aa78:	20000768 	.word	0x20000768
 800aa7c:	0800a9ed 	.word	0x0800a9ed

0800aa80 <__sfp_lock_acquire>:
 800aa80:	4801      	ldr	r0, [pc, #4]	@ (800aa88 <__sfp_lock_acquire+0x8>)
 800aa82:	f000 ba00 	b.w	800ae86 <__retarget_lock_acquire_recursive>
 800aa86:	bf00      	nop
 800aa88:	200008a9 	.word	0x200008a9

0800aa8c <__sfp_lock_release>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	@ (800aa94 <__sfp_lock_release+0x8>)
 800aa8e:	f000 b9fb 	b.w	800ae88 <__retarget_lock_release_recursive>
 800aa92:	bf00      	nop
 800aa94:	200008a9 	.word	0x200008a9

0800aa98 <__sinit>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	f7ff fff0 	bl	800aa80 <__sfp_lock_acquire>
 800aaa0:	6a23      	ldr	r3, [r4, #32]
 800aaa2:	b11b      	cbz	r3, 800aaac <__sinit+0x14>
 800aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa8:	f7ff bff0 	b.w	800aa8c <__sfp_lock_release>
 800aaac:	4b04      	ldr	r3, [pc, #16]	@ (800aac0 <__sinit+0x28>)
 800aaae:	6223      	str	r3, [r4, #32]
 800aab0:	4b04      	ldr	r3, [pc, #16]	@ (800aac4 <__sinit+0x2c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1f5      	bne.n	800aaa4 <__sinit+0xc>
 800aab8:	f7ff ffc4 	bl	800aa44 <global_stdio_init.part.0>
 800aabc:	e7f2      	b.n	800aaa4 <__sinit+0xc>
 800aabe:	bf00      	nop
 800aac0:	0800aa05 	.word	0x0800aa05
 800aac4:	200008a0 	.word	0x200008a0

0800aac8 <_fwalk_sglue>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	4607      	mov	r7, r0
 800aace:	4688      	mov	r8, r1
 800aad0:	4614      	mov	r4, r2
 800aad2:	2600      	movs	r6, #0
 800aad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aad8:	f1b9 0901 	subs.w	r9, r9, #1
 800aadc:	d505      	bpl.n	800aaea <_fwalk_sglue+0x22>
 800aade:	6824      	ldr	r4, [r4, #0]
 800aae0:	2c00      	cmp	r4, #0
 800aae2:	d1f7      	bne.n	800aad4 <_fwalk_sglue+0xc>
 800aae4:	4630      	mov	r0, r6
 800aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d907      	bls.n	800ab00 <_fwalk_sglue+0x38>
 800aaf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	d003      	beq.n	800ab00 <_fwalk_sglue+0x38>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	4306      	orrs	r6, r0
 800ab00:	3568      	adds	r5, #104	@ 0x68
 800ab02:	e7e9      	b.n	800aad8 <_fwalk_sglue+0x10>

0800ab04 <iprintf>:
 800ab04:	b40f      	push	{r0, r1, r2, r3}
 800ab06:	b507      	push	{r0, r1, r2, lr}
 800ab08:	4906      	ldr	r1, [pc, #24]	@ (800ab24 <iprintf+0x20>)
 800ab0a:	ab04      	add	r3, sp, #16
 800ab0c:	6808      	ldr	r0, [r1, #0]
 800ab0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab12:	6881      	ldr	r1, [r0, #8]
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	f000 fadb 	bl	800b0d0 <_vfiprintf_r>
 800ab1a:	b003      	add	sp, #12
 800ab1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab20:	b004      	add	sp, #16
 800ab22:	4770      	bx	lr
 800ab24:	20000018 	.word	0x20000018

0800ab28 <_puts_r>:
 800ab28:	6a03      	ldr	r3, [r0, #32]
 800ab2a:	b570      	push	{r4, r5, r6, lr}
 800ab2c:	6884      	ldr	r4, [r0, #8]
 800ab2e:	4605      	mov	r5, r0
 800ab30:	460e      	mov	r6, r1
 800ab32:	b90b      	cbnz	r3, 800ab38 <_puts_r+0x10>
 800ab34:	f7ff ffb0 	bl	800aa98 <__sinit>
 800ab38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab3a:	07db      	lsls	r3, r3, #31
 800ab3c:	d405      	bmi.n	800ab4a <_puts_r+0x22>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	0598      	lsls	r0, r3, #22
 800ab42:	d402      	bmi.n	800ab4a <_puts_r+0x22>
 800ab44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab46:	f000 f99e 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	0719      	lsls	r1, r3, #28
 800ab4e:	d502      	bpl.n	800ab56 <_puts_r+0x2e>
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d135      	bne.n	800abc2 <_puts_r+0x9a>
 800ab56:	4621      	mov	r1, r4
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f000 f8c5 	bl	800ace8 <__swsetup_r>
 800ab5e:	b380      	cbz	r0, 800abc2 <_puts_r+0x9a>
 800ab60:	f04f 35ff 	mov.w	r5, #4294967295
 800ab64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab66:	07da      	lsls	r2, r3, #31
 800ab68:	d405      	bmi.n	800ab76 <_puts_r+0x4e>
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	059b      	lsls	r3, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <_puts_r+0x4e>
 800ab70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab72:	f000 f989 	bl	800ae88 <__retarget_lock_release_recursive>
 800ab76:	4628      	mov	r0, r5
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da04      	bge.n	800ab88 <_puts_r+0x60>
 800ab7e:	69a2      	ldr	r2, [r4, #24]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	dc17      	bgt.n	800abb4 <_puts_r+0x8c>
 800ab84:	290a      	cmp	r1, #10
 800ab86:	d015      	beq.n	800abb4 <_puts_r+0x8c>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	7019      	strb	r1, [r3, #0]
 800ab90:	68a3      	ldr	r3, [r4, #8]
 800ab92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab96:	3b01      	subs	r3, #1
 800ab98:	60a3      	str	r3, [r4, #8]
 800ab9a:	2900      	cmp	r1, #0
 800ab9c:	d1ed      	bne.n	800ab7a <_puts_r+0x52>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	da11      	bge.n	800abc6 <_puts_r+0x9e>
 800aba2:	4622      	mov	r2, r4
 800aba4:	210a      	movs	r1, #10
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f85f 	bl	800ac6a <__swbuf_r>
 800abac:	3001      	adds	r0, #1
 800abae:	d0d7      	beq.n	800ab60 <_puts_r+0x38>
 800abb0:	250a      	movs	r5, #10
 800abb2:	e7d7      	b.n	800ab64 <_puts_r+0x3c>
 800abb4:	4622      	mov	r2, r4
 800abb6:	4628      	mov	r0, r5
 800abb8:	f000 f857 	bl	800ac6a <__swbuf_r>
 800abbc:	3001      	adds	r0, #1
 800abbe:	d1e7      	bne.n	800ab90 <_puts_r+0x68>
 800abc0:	e7ce      	b.n	800ab60 <_puts_r+0x38>
 800abc2:	3e01      	subs	r6, #1
 800abc4:	e7e4      	b.n	800ab90 <_puts_r+0x68>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	1c5a      	adds	r2, r3, #1
 800abca:	6022      	str	r2, [r4, #0]
 800abcc:	220a      	movs	r2, #10
 800abce:	701a      	strb	r2, [r3, #0]
 800abd0:	e7ee      	b.n	800abb0 <_puts_r+0x88>
	...

0800abd4 <puts>:
 800abd4:	4b02      	ldr	r3, [pc, #8]	@ (800abe0 <puts+0xc>)
 800abd6:	4601      	mov	r1, r0
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	f7ff bfa5 	b.w	800ab28 <_puts_r>
 800abde:	bf00      	nop
 800abe0:	20000018 	.word	0x20000018

0800abe4 <__sread>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	460c      	mov	r4, r1
 800abe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abec:	f000 f8fc 	bl	800ade8 <_read_r>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	bfab      	itete	ge
 800abf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abf6:	89a3      	ldrhlt	r3, [r4, #12]
 800abf8:	181b      	addge	r3, r3, r0
 800abfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abfe:	bfac      	ite	ge
 800ac00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac02:	81a3      	strhlt	r3, [r4, #12]
 800ac04:	bd10      	pop	{r4, pc}

0800ac06 <__swrite>:
 800ac06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0a:	461f      	mov	r7, r3
 800ac0c:	898b      	ldrh	r3, [r1, #12]
 800ac0e:	05db      	lsls	r3, r3, #23
 800ac10:	4605      	mov	r5, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	4616      	mov	r6, r2
 800ac16:	d505      	bpl.n	800ac24 <__swrite+0x1e>
 800ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f000 f8d0 	bl	800adc4 <_lseek_r>
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac2e:	81a3      	strh	r3, [r4, #12]
 800ac30:	4632      	mov	r2, r6
 800ac32:	463b      	mov	r3, r7
 800ac34:	4628      	mov	r0, r5
 800ac36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3a:	f000 b8e7 	b.w	800ae0c <_write_r>

0800ac3e <__sseek>:
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	460c      	mov	r4, r1
 800ac42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac46:	f000 f8bd 	bl	800adc4 <_lseek_r>
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	bf15      	itete	ne
 800ac50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac5a:	81a3      	strheq	r3, [r4, #12]
 800ac5c:	bf18      	it	ne
 800ac5e:	81a3      	strhne	r3, [r4, #12]
 800ac60:	bd10      	pop	{r4, pc}

0800ac62 <__sclose>:
 800ac62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac66:	f000 b89d 	b.w	800ada4 <_close_r>

0800ac6a <__swbuf_r>:
 800ac6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6c:	460e      	mov	r6, r1
 800ac6e:	4614      	mov	r4, r2
 800ac70:	4605      	mov	r5, r0
 800ac72:	b118      	cbz	r0, 800ac7c <__swbuf_r+0x12>
 800ac74:	6a03      	ldr	r3, [r0, #32]
 800ac76:	b90b      	cbnz	r3, 800ac7c <__swbuf_r+0x12>
 800ac78:	f7ff ff0e 	bl	800aa98 <__sinit>
 800ac7c:	69a3      	ldr	r3, [r4, #24]
 800ac7e:	60a3      	str	r3, [r4, #8]
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	071a      	lsls	r2, r3, #28
 800ac84:	d501      	bpl.n	800ac8a <__swbuf_r+0x20>
 800ac86:	6923      	ldr	r3, [r4, #16]
 800ac88:	b943      	cbnz	r3, 800ac9c <__swbuf_r+0x32>
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 f82b 	bl	800ace8 <__swsetup_r>
 800ac92:	b118      	cbz	r0, 800ac9c <__swbuf_r+0x32>
 800ac94:	f04f 37ff 	mov.w	r7, #4294967295
 800ac98:	4638      	mov	r0, r7
 800ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	6922      	ldr	r2, [r4, #16]
 800aca0:	1a98      	subs	r0, r3, r2
 800aca2:	6963      	ldr	r3, [r4, #20]
 800aca4:	b2f6      	uxtb	r6, r6
 800aca6:	4283      	cmp	r3, r0
 800aca8:	4637      	mov	r7, r6
 800acaa:	dc05      	bgt.n	800acb8 <__swbuf_r+0x4e>
 800acac:	4621      	mov	r1, r4
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 fd36 	bl	800b720 <_fflush_r>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d1ed      	bne.n	800ac94 <__swbuf_r+0x2a>
 800acb8:	68a3      	ldr	r3, [r4, #8]
 800acba:	3b01      	subs	r3, #1
 800acbc:	60a3      	str	r3, [r4, #8]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	6022      	str	r2, [r4, #0]
 800acc4:	701e      	strb	r6, [r3, #0]
 800acc6:	6962      	ldr	r2, [r4, #20]
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	429a      	cmp	r2, r3
 800accc:	d004      	beq.n	800acd8 <__swbuf_r+0x6e>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	07db      	lsls	r3, r3, #31
 800acd2:	d5e1      	bpl.n	800ac98 <__swbuf_r+0x2e>
 800acd4:	2e0a      	cmp	r6, #10
 800acd6:	d1df      	bne.n	800ac98 <__swbuf_r+0x2e>
 800acd8:	4621      	mov	r1, r4
 800acda:	4628      	mov	r0, r5
 800acdc:	f000 fd20 	bl	800b720 <_fflush_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d0d9      	beq.n	800ac98 <__swbuf_r+0x2e>
 800ace4:	e7d6      	b.n	800ac94 <__swbuf_r+0x2a>
	...

0800ace8 <__swsetup_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4b29      	ldr	r3, [pc, #164]	@ (800ad90 <__swsetup_r+0xa8>)
 800acec:	4605      	mov	r5, r0
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	460c      	mov	r4, r1
 800acf2:	b118      	cbz	r0, 800acfc <__swsetup_r+0x14>
 800acf4:	6a03      	ldr	r3, [r0, #32]
 800acf6:	b90b      	cbnz	r3, 800acfc <__swsetup_r+0x14>
 800acf8:	f7ff fece 	bl	800aa98 <__sinit>
 800acfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad00:	0719      	lsls	r1, r3, #28
 800ad02:	d422      	bmi.n	800ad4a <__swsetup_r+0x62>
 800ad04:	06da      	lsls	r2, r3, #27
 800ad06:	d407      	bmi.n	800ad18 <__swsetup_r+0x30>
 800ad08:	2209      	movs	r2, #9
 800ad0a:	602a      	str	r2, [r5, #0]
 800ad0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	f04f 30ff 	mov.w	r0, #4294967295
 800ad16:	e033      	b.n	800ad80 <__swsetup_r+0x98>
 800ad18:	0758      	lsls	r0, r3, #29
 800ad1a:	d512      	bpl.n	800ad42 <__swsetup_r+0x5a>
 800ad1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad1e:	b141      	cbz	r1, 800ad32 <__swsetup_r+0x4a>
 800ad20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad24:	4299      	cmp	r1, r3
 800ad26:	d002      	beq.n	800ad2e <__swsetup_r+0x46>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f8af 	bl	800ae8c <_free_r>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	6063      	str	r3, [r4, #4]
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f043 0308 	orr.w	r3, r3, #8
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	b94b      	cbnz	r3, 800ad62 <__swsetup_r+0x7a>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad58:	d003      	beq.n	800ad62 <__swsetup_r+0x7a>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f000 fd2d 	bl	800b7bc <__smakebuf_r>
 800ad62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad66:	f013 0201 	ands.w	r2, r3, #1
 800ad6a:	d00a      	beq.n	800ad82 <__swsetup_r+0x9a>
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	60a2      	str	r2, [r4, #8]
 800ad70:	6962      	ldr	r2, [r4, #20]
 800ad72:	4252      	negs	r2, r2
 800ad74:	61a2      	str	r2, [r4, #24]
 800ad76:	6922      	ldr	r2, [r4, #16]
 800ad78:	b942      	cbnz	r2, 800ad8c <__swsetup_r+0xa4>
 800ad7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad7e:	d1c5      	bne.n	800ad0c <__swsetup_r+0x24>
 800ad80:	bd38      	pop	{r3, r4, r5, pc}
 800ad82:	0799      	lsls	r1, r3, #30
 800ad84:	bf58      	it	pl
 800ad86:	6962      	ldrpl	r2, [r4, #20]
 800ad88:	60a2      	str	r2, [r4, #8]
 800ad8a:	e7f4      	b.n	800ad76 <__swsetup_r+0x8e>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	e7f7      	b.n	800ad80 <__swsetup_r+0x98>
 800ad90:	20000018 	.word	0x20000018

0800ad94 <memset>:
 800ad94:	4402      	add	r2, r0
 800ad96:	4603      	mov	r3, r0
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d100      	bne.n	800ad9e <memset+0xa>
 800ad9c:	4770      	bx	lr
 800ad9e:	f803 1b01 	strb.w	r1, [r3], #1
 800ada2:	e7f9      	b.n	800ad98 <memset+0x4>

0800ada4 <_close_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d06      	ldr	r5, [pc, #24]	@ (800adc0 <_close_r+0x1c>)
 800ada8:	2300      	movs	r3, #0
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	602b      	str	r3, [r5, #0]
 800adb0:	f7f6 f9db 	bl	800116a <_close>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_close_r+0x1a>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_close_r+0x1a>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	200008a4 	.word	0x200008a4

0800adc4 <_lseek_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	@ (800ade4 <_lseek_r+0x20>)
 800adc8:	4604      	mov	r4, r0
 800adca:	4608      	mov	r0, r1
 800adcc:	4611      	mov	r1, r2
 800adce:	2200      	movs	r2, #0
 800add0:	602a      	str	r2, [r5, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	f7f6 f9f0 	bl	80011b8 <_lseek>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_lseek_r+0x1e>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_lseek_r+0x1e>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	200008a4 	.word	0x200008a4

0800ade8 <_read_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d07      	ldr	r5, [pc, #28]	@ (800ae08 <_read_r+0x20>)
 800adec:	4604      	mov	r4, r0
 800adee:	4608      	mov	r0, r1
 800adf0:	4611      	mov	r1, r2
 800adf2:	2200      	movs	r2, #0
 800adf4:	602a      	str	r2, [r5, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f7f6 f97e 	bl	80010f8 <_read>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_read_r+0x1e>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_read_r+0x1e>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	200008a4 	.word	0x200008a4

0800ae0c <_write_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d07      	ldr	r5, [pc, #28]	@ (800ae2c <_write_r+0x20>)
 800ae10:	4604      	mov	r4, r0
 800ae12:	4608      	mov	r0, r1
 800ae14:	4611      	mov	r1, r2
 800ae16:	2200      	movs	r2, #0
 800ae18:	602a      	str	r2, [r5, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f7f6 f989 	bl	8001132 <_write>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_write_r+0x1e>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_write_r+0x1e>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	200008a4 	.word	0x200008a4

0800ae30 <__errno>:
 800ae30:	4b01      	ldr	r3, [pc, #4]	@ (800ae38 <__errno+0x8>)
 800ae32:	6818      	ldr	r0, [r3, #0]
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	20000018 	.word	0x20000018

0800ae3c <__libc_init_array>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	4d0d      	ldr	r5, [pc, #52]	@ (800ae74 <__libc_init_array+0x38>)
 800ae40:	4c0d      	ldr	r4, [pc, #52]	@ (800ae78 <__libc_init_array+0x3c>)
 800ae42:	1b64      	subs	r4, r4, r5
 800ae44:	10a4      	asrs	r4, r4, #2
 800ae46:	2600      	movs	r6, #0
 800ae48:	42a6      	cmp	r6, r4
 800ae4a:	d109      	bne.n	800ae60 <__libc_init_array+0x24>
 800ae4c:	4d0b      	ldr	r5, [pc, #44]	@ (800ae7c <__libc_init_array+0x40>)
 800ae4e:	4c0c      	ldr	r4, [pc, #48]	@ (800ae80 <__libc_init_array+0x44>)
 800ae50:	f000 fd22 	bl	800b898 <_init>
 800ae54:	1b64      	subs	r4, r4, r5
 800ae56:	10a4      	asrs	r4, r4, #2
 800ae58:	2600      	movs	r6, #0
 800ae5a:	42a6      	cmp	r6, r4
 800ae5c:	d105      	bne.n	800ae6a <__libc_init_array+0x2e>
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae64:	4798      	blx	r3
 800ae66:	3601      	adds	r6, #1
 800ae68:	e7ee      	b.n	800ae48 <__libc_init_array+0xc>
 800ae6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae6e:	4798      	blx	r3
 800ae70:	3601      	adds	r6, #1
 800ae72:	e7f2      	b.n	800ae5a <__libc_init_array+0x1e>
 800ae74:	08036a50 	.word	0x08036a50
 800ae78:	08036a50 	.word	0x08036a50
 800ae7c:	08036a50 	.word	0x08036a50
 800ae80:	08036a54 	.word	0x08036a54

0800ae84 <__retarget_lock_init_recursive>:
 800ae84:	4770      	bx	lr

0800ae86 <__retarget_lock_acquire_recursive>:
 800ae86:	4770      	bx	lr

0800ae88 <__retarget_lock_release_recursive>:
 800ae88:	4770      	bx	lr
	...

0800ae8c <_free_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4605      	mov	r5, r0
 800ae90:	2900      	cmp	r1, #0
 800ae92:	d041      	beq.n	800af18 <_free_r+0x8c>
 800ae94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae98:	1f0c      	subs	r4, r1, #4
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	bfb8      	it	lt
 800ae9e:	18e4      	addlt	r4, r4, r3
 800aea0:	f000 f8e0 	bl	800b064 <__malloc_lock>
 800aea4:	4a1d      	ldr	r2, [pc, #116]	@ (800af1c <_free_r+0x90>)
 800aea6:	6813      	ldr	r3, [r2, #0]
 800aea8:	b933      	cbnz	r3, 800aeb8 <_free_r+0x2c>
 800aeaa:	6063      	str	r3, [r4, #4]
 800aeac:	6014      	str	r4, [r2, #0]
 800aeae:	4628      	mov	r0, r5
 800aeb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeb4:	f000 b8dc 	b.w	800b070 <__malloc_unlock>
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	d908      	bls.n	800aece <_free_r+0x42>
 800aebc:	6820      	ldr	r0, [r4, #0]
 800aebe:	1821      	adds	r1, r4, r0
 800aec0:	428b      	cmp	r3, r1
 800aec2:	bf01      	itttt	eq
 800aec4:	6819      	ldreq	r1, [r3, #0]
 800aec6:	685b      	ldreq	r3, [r3, #4]
 800aec8:	1809      	addeq	r1, r1, r0
 800aeca:	6021      	streq	r1, [r4, #0]
 800aecc:	e7ed      	b.n	800aeaa <_free_r+0x1e>
 800aece:	461a      	mov	r2, r3
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	b10b      	cbz	r3, 800aed8 <_free_r+0x4c>
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	d9fa      	bls.n	800aece <_free_r+0x42>
 800aed8:	6811      	ldr	r1, [r2, #0]
 800aeda:	1850      	adds	r0, r2, r1
 800aedc:	42a0      	cmp	r0, r4
 800aede:	d10b      	bne.n	800aef8 <_free_r+0x6c>
 800aee0:	6820      	ldr	r0, [r4, #0]
 800aee2:	4401      	add	r1, r0
 800aee4:	1850      	adds	r0, r2, r1
 800aee6:	4283      	cmp	r3, r0
 800aee8:	6011      	str	r1, [r2, #0]
 800aeea:	d1e0      	bne.n	800aeae <_free_r+0x22>
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	6053      	str	r3, [r2, #4]
 800aef2:	4408      	add	r0, r1
 800aef4:	6010      	str	r0, [r2, #0]
 800aef6:	e7da      	b.n	800aeae <_free_r+0x22>
 800aef8:	d902      	bls.n	800af00 <_free_r+0x74>
 800aefa:	230c      	movs	r3, #12
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	e7d6      	b.n	800aeae <_free_r+0x22>
 800af00:	6820      	ldr	r0, [r4, #0]
 800af02:	1821      	adds	r1, r4, r0
 800af04:	428b      	cmp	r3, r1
 800af06:	bf04      	itt	eq
 800af08:	6819      	ldreq	r1, [r3, #0]
 800af0a:	685b      	ldreq	r3, [r3, #4]
 800af0c:	6063      	str	r3, [r4, #4]
 800af0e:	bf04      	itt	eq
 800af10:	1809      	addeq	r1, r1, r0
 800af12:	6021      	streq	r1, [r4, #0]
 800af14:	6054      	str	r4, [r2, #4]
 800af16:	e7ca      	b.n	800aeae <_free_r+0x22>
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	bf00      	nop
 800af1c:	200008b0 	.word	0x200008b0

0800af20 <sbrk_aligned>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	4e0f      	ldr	r6, [pc, #60]	@ (800af60 <sbrk_aligned+0x40>)
 800af24:	460c      	mov	r4, r1
 800af26:	6831      	ldr	r1, [r6, #0]
 800af28:	4605      	mov	r5, r0
 800af2a:	b911      	cbnz	r1, 800af32 <sbrk_aligned+0x12>
 800af2c:	f000 fca4 	bl	800b878 <_sbrk_r>
 800af30:	6030      	str	r0, [r6, #0]
 800af32:	4621      	mov	r1, r4
 800af34:	4628      	mov	r0, r5
 800af36:	f000 fc9f 	bl	800b878 <_sbrk_r>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	d103      	bne.n	800af46 <sbrk_aligned+0x26>
 800af3e:	f04f 34ff 	mov.w	r4, #4294967295
 800af42:	4620      	mov	r0, r4
 800af44:	bd70      	pop	{r4, r5, r6, pc}
 800af46:	1cc4      	adds	r4, r0, #3
 800af48:	f024 0403 	bic.w	r4, r4, #3
 800af4c:	42a0      	cmp	r0, r4
 800af4e:	d0f8      	beq.n	800af42 <sbrk_aligned+0x22>
 800af50:	1a21      	subs	r1, r4, r0
 800af52:	4628      	mov	r0, r5
 800af54:	f000 fc90 	bl	800b878 <_sbrk_r>
 800af58:	3001      	adds	r0, #1
 800af5a:	d1f2      	bne.n	800af42 <sbrk_aligned+0x22>
 800af5c:	e7ef      	b.n	800af3e <sbrk_aligned+0x1e>
 800af5e:	bf00      	nop
 800af60:	200008ac 	.word	0x200008ac

0800af64 <_malloc_r>:
 800af64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af68:	1ccd      	adds	r5, r1, #3
 800af6a:	f025 0503 	bic.w	r5, r5, #3
 800af6e:	3508      	adds	r5, #8
 800af70:	2d0c      	cmp	r5, #12
 800af72:	bf38      	it	cc
 800af74:	250c      	movcc	r5, #12
 800af76:	2d00      	cmp	r5, #0
 800af78:	4606      	mov	r6, r0
 800af7a:	db01      	blt.n	800af80 <_malloc_r+0x1c>
 800af7c:	42a9      	cmp	r1, r5
 800af7e:	d904      	bls.n	800af8a <_malloc_r+0x26>
 800af80:	230c      	movs	r3, #12
 800af82:	6033      	str	r3, [r6, #0]
 800af84:	2000      	movs	r0, #0
 800af86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b060 <_malloc_r+0xfc>
 800af8e:	f000 f869 	bl	800b064 <__malloc_lock>
 800af92:	f8d8 3000 	ldr.w	r3, [r8]
 800af96:	461c      	mov	r4, r3
 800af98:	bb44      	cbnz	r4, 800afec <_malloc_r+0x88>
 800af9a:	4629      	mov	r1, r5
 800af9c:	4630      	mov	r0, r6
 800af9e:	f7ff ffbf 	bl	800af20 <sbrk_aligned>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	4604      	mov	r4, r0
 800afa6:	d158      	bne.n	800b05a <_malloc_r+0xf6>
 800afa8:	f8d8 4000 	ldr.w	r4, [r8]
 800afac:	4627      	mov	r7, r4
 800afae:	2f00      	cmp	r7, #0
 800afb0:	d143      	bne.n	800b03a <_malloc_r+0xd6>
 800afb2:	2c00      	cmp	r4, #0
 800afb4:	d04b      	beq.n	800b04e <_malloc_r+0xea>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	4639      	mov	r1, r7
 800afba:	4630      	mov	r0, r6
 800afbc:	eb04 0903 	add.w	r9, r4, r3
 800afc0:	f000 fc5a 	bl	800b878 <_sbrk_r>
 800afc4:	4581      	cmp	r9, r0
 800afc6:	d142      	bne.n	800b04e <_malloc_r+0xea>
 800afc8:	6821      	ldr	r1, [r4, #0]
 800afca:	1a6d      	subs	r5, r5, r1
 800afcc:	4629      	mov	r1, r5
 800afce:	4630      	mov	r0, r6
 800afd0:	f7ff ffa6 	bl	800af20 <sbrk_aligned>
 800afd4:	3001      	adds	r0, #1
 800afd6:	d03a      	beq.n	800b04e <_malloc_r+0xea>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	442b      	add	r3, r5
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	f8d8 3000 	ldr.w	r3, [r8]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	bb62      	cbnz	r2, 800b040 <_malloc_r+0xdc>
 800afe6:	f8c8 7000 	str.w	r7, [r8]
 800afea:	e00f      	b.n	800b00c <_malloc_r+0xa8>
 800afec:	6822      	ldr	r2, [r4, #0]
 800afee:	1b52      	subs	r2, r2, r5
 800aff0:	d420      	bmi.n	800b034 <_malloc_r+0xd0>
 800aff2:	2a0b      	cmp	r2, #11
 800aff4:	d917      	bls.n	800b026 <_malloc_r+0xc2>
 800aff6:	1961      	adds	r1, r4, r5
 800aff8:	42a3      	cmp	r3, r4
 800affa:	6025      	str	r5, [r4, #0]
 800affc:	bf18      	it	ne
 800affe:	6059      	strne	r1, [r3, #4]
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	bf08      	it	eq
 800b004:	f8c8 1000 	streq.w	r1, [r8]
 800b008:	5162      	str	r2, [r4, r5]
 800b00a:	604b      	str	r3, [r1, #4]
 800b00c:	4630      	mov	r0, r6
 800b00e:	f000 f82f 	bl	800b070 <__malloc_unlock>
 800b012:	f104 000b 	add.w	r0, r4, #11
 800b016:	1d23      	adds	r3, r4, #4
 800b018:	f020 0007 	bic.w	r0, r0, #7
 800b01c:	1ac2      	subs	r2, r0, r3
 800b01e:	bf1c      	itt	ne
 800b020:	1a1b      	subne	r3, r3, r0
 800b022:	50a3      	strne	r3, [r4, r2]
 800b024:	e7af      	b.n	800af86 <_malloc_r+0x22>
 800b026:	6862      	ldr	r2, [r4, #4]
 800b028:	42a3      	cmp	r3, r4
 800b02a:	bf0c      	ite	eq
 800b02c:	f8c8 2000 	streq.w	r2, [r8]
 800b030:	605a      	strne	r2, [r3, #4]
 800b032:	e7eb      	b.n	800b00c <_malloc_r+0xa8>
 800b034:	4623      	mov	r3, r4
 800b036:	6864      	ldr	r4, [r4, #4]
 800b038:	e7ae      	b.n	800af98 <_malloc_r+0x34>
 800b03a:	463c      	mov	r4, r7
 800b03c:	687f      	ldr	r7, [r7, #4]
 800b03e:	e7b6      	b.n	800afae <_malloc_r+0x4a>
 800b040:	461a      	mov	r2, r3
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	42a3      	cmp	r3, r4
 800b046:	d1fb      	bne.n	800b040 <_malloc_r+0xdc>
 800b048:	2300      	movs	r3, #0
 800b04a:	6053      	str	r3, [r2, #4]
 800b04c:	e7de      	b.n	800b00c <_malloc_r+0xa8>
 800b04e:	230c      	movs	r3, #12
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	4630      	mov	r0, r6
 800b054:	f000 f80c 	bl	800b070 <__malloc_unlock>
 800b058:	e794      	b.n	800af84 <_malloc_r+0x20>
 800b05a:	6005      	str	r5, [r0, #0]
 800b05c:	e7d6      	b.n	800b00c <_malloc_r+0xa8>
 800b05e:	bf00      	nop
 800b060:	200008b0 	.word	0x200008b0

0800b064 <__malloc_lock>:
 800b064:	4801      	ldr	r0, [pc, #4]	@ (800b06c <__malloc_lock+0x8>)
 800b066:	f7ff bf0e 	b.w	800ae86 <__retarget_lock_acquire_recursive>
 800b06a:	bf00      	nop
 800b06c:	200008a8 	.word	0x200008a8

0800b070 <__malloc_unlock>:
 800b070:	4801      	ldr	r0, [pc, #4]	@ (800b078 <__malloc_unlock+0x8>)
 800b072:	f7ff bf09 	b.w	800ae88 <__retarget_lock_release_recursive>
 800b076:	bf00      	nop
 800b078:	200008a8 	.word	0x200008a8

0800b07c <__sfputc_r>:
 800b07c:	6893      	ldr	r3, [r2, #8]
 800b07e:	3b01      	subs	r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	b410      	push	{r4}
 800b084:	6093      	str	r3, [r2, #8]
 800b086:	da08      	bge.n	800b09a <__sfputc_r+0x1e>
 800b088:	6994      	ldr	r4, [r2, #24]
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	db01      	blt.n	800b092 <__sfputc_r+0x16>
 800b08e:	290a      	cmp	r1, #10
 800b090:	d103      	bne.n	800b09a <__sfputc_r+0x1e>
 800b092:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b096:	f7ff bde8 	b.w	800ac6a <__swbuf_r>
 800b09a:	6813      	ldr	r3, [r2, #0]
 800b09c:	1c58      	adds	r0, r3, #1
 800b09e:	6010      	str	r0, [r2, #0]
 800b0a0:	7019      	strb	r1, [r3, #0]
 800b0a2:	4608      	mov	r0, r1
 800b0a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <__sfputs_r>:
 800b0aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ac:	4606      	mov	r6, r0
 800b0ae:	460f      	mov	r7, r1
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	18d5      	adds	r5, r2, r3
 800b0b4:	42ac      	cmp	r4, r5
 800b0b6:	d101      	bne.n	800b0bc <__sfputs_r+0x12>
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	e007      	b.n	800b0cc <__sfputs_r+0x22>
 800b0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c0:	463a      	mov	r2, r7
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f7ff ffda 	bl	800b07c <__sfputc_r>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d1f3      	bne.n	800b0b4 <__sfputs_r+0xa>
 800b0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0d0 <_vfiprintf_r>:
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	460d      	mov	r5, r1
 800b0d6:	b09d      	sub	sp, #116	@ 0x74
 800b0d8:	4614      	mov	r4, r2
 800b0da:	4698      	mov	r8, r3
 800b0dc:	4606      	mov	r6, r0
 800b0de:	b118      	cbz	r0, 800b0e8 <_vfiprintf_r+0x18>
 800b0e0:	6a03      	ldr	r3, [r0, #32]
 800b0e2:	b90b      	cbnz	r3, 800b0e8 <_vfiprintf_r+0x18>
 800b0e4:	f7ff fcd8 	bl	800aa98 <__sinit>
 800b0e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ea:	07d9      	lsls	r1, r3, #31
 800b0ec:	d405      	bmi.n	800b0fa <_vfiprintf_r+0x2a>
 800b0ee:	89ab      	ldrh	r3, [r5, #12]
 800b0f0:	059a      	lsls	r2, r3, #22
 800b0f2:	d402      	bmi.n	800b0fa <_vfiprintf_r+0x2a>
 800b0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0f6:	f7ff fec6 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	071b      	lsls	r3, r3, #28
 800b0fe:	d501      	bpl.n	800b104 <_vfiprintf_r+0x34>
 800b100:	692b      	ldr	r3, [r5, #16]
 800b102:	b99b      	cbnz	r3, 800b12c <_vfiprintf_r+0x5c>
 800b104:	4629      	mov	r1, r5
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff fdee 	bl	800ace8 <__swsetup_r>
 800b10c:	b170      	cbz	r0, 800b12c <_vfiprintf_r+0x5c>
 800b10e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b110:	07dc      	lsls	r4, r3, #31
 800b112:	d504      	bpl.n	800b11e <_vfiprintf_r+0x4e>
 800b114:	f04f 30ff 	mov.w	r0, #4294967295
 800b118:	b01d      	add	sp, #116	@ 0x74
 800b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11e:	89ab      	ldrh	r3, [r5, #12]
 800b120:	0598      	lsls	r0, r3, #22
 800b122:	d4f7      	bmi.n	800b114 <_vfiprintf_r+0x44>
 800b124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b126:	f7ff feaf 	bl	800ae88 <__retarget_lock_release_recursive>
 800b12a:	e7f3      	b.n	800b114 <_vfiprintf_r+0x44>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b130:	2320      	movs	r3, #32
 800b132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b136:	f8cd 800c 	str.w	r8, [sp, #12]
 800b13a:	2330      	movs	r3, #48	@ 0x30
 800b13c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2ec <_vfiprintf_r+0x21c>
 800b140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b144:	f04f 0901 	mov.w	r9, #1
 800b148:	4623      	mov	r3, r4
 800b14a:	469a      	mov	sl, r3
 800b14c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b150:	b10a      	cbz	r2, 800b156 <_vfiprintf_r+0x86>
 800b152:	2a25      	cmp	r2, #37	@ 0x25
 800b154:	d1f9      	bne.n	800b14a <_vfiprintf_r+0x7a>
 800b156:	ebba 0b04 	subs.w	fp, sl, r4
 800b15a:	d00b      	beq.n	800b174 <_vfiprintf_r+0xa4>
 800b15c:	465b      	mov	r3, fp
 800b15e:	4622      	mov	r2, r4
 800b160:	4629      	mov	r1, r5
 800b162:	4630      	mov	r0, r6
 800b164:	f7ff ffa1 	bl	800b0aa <__sfputs_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	f000 80a7 	beq.w	800b2bc <_vfiprintf_r+0x1ec>
 800b16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b170:	445a      	add	r2, fp
 800b172:	9209      	str	r2, [sp, #36]	@ 0x24
 800b174:	f89a 3000 	ldrb.w	r3, [sl]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 809f 	beq.w	800b2bc <_vfiprintf_r+0x1ec>
 800b17e:	2300      	movs	r3, #0
 800b180:	f04f 32ff 	mov.w	r2, #4294967295
 800b184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b188:	f10a 0a01 	add.w	sl, sl, #1
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	9307      	str	r3, [sp, #28]
 800b190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b194:	931a      	str	r3, [sp, #104]	@ 0x68
 800b196:	4654      	mov	r4, sl
 800b198:	2205      	movs	r2, #5
 800b19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b19e:	4853      	ldr	r0, [pc, #332]	@ (800b2ec <_vfiprintf_r+0x21c>)
 800b1a0:	f7f5 f816 	bl	80001d0 <memchr>
 800b1a4:	9a04      	ldr	r2, [sp, #16]
 800b1a6:	b9d8      	cbnz	r0, 800b1e0 <_vfiprintf_r+0x110>
 800b1a8:	06d1      	lsls	r1, r2, #27
 800b1aa:	bf44      	itt	mi
 800b1ac:	2320      	movmi	r3, #32
 800b1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1b2:	0713      	lsls	r3, r2, #28
 800b1b4:	bf44      	itt	mi
 800b1b6:	232b      	movmi	r3, #43	@ 0x2b
 800b1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1c2:	d015      	beq.n	800b1f0 <_vfiprintf_r+0x120>
 800b1c4:	9a07      	ldr	r2, [sp, #28]
 800b1c6:	4654      	mov	r4, sl
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	f04f 0c0a 	mov.w	ip, #10
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d4:	3b30      	subs	r3, #48	@ 0x30
 800b1d6:	2b09      	cmp	r3, #9
 800b1d8:	d94b      	bls.n	800b272 <_vfiprintf_r+0x1a2>
 800b1da:	b1b0      	cbz	r0, 800b20a <_vfiprintf_r+0x13a>
 800b1dc:	9207      	str	r2, [sp, #28]
 800b1de:	e014      	b.n	800b20a <_vfiprintf_r+0x13a>
 800b1e0:	eba0 0308 	sub.w	r3, r0, r8
 800b1e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	9304      	str	r3, [sp, #16]
 800b1ec:	46a2      	mov	sl, r4
 800b1ee:	e7d2      	b.n	800b196 <_vfiprintf_r+0xc6>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	1d19      	adds	r1, r3, #4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	9103      	str	r1, [sp, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bfbb      	ittet	lt
 800b1fc:	425b      	neglt	r3, r3
 800b1fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b202:	9307      	strge	r3, [sp, #28]
 800b204:	9307      	strlt	r3, [sp, #28]
 800b206:	bfb8      	it	lt
 800b208:	9204      	strlt	r2, [sp, #16]
 800b20a:	7823      	ldrb	r3, [r4, #0]
 800b20c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b20e:	d10a      	bne.n	800b226 <_vfiprintf_r+0x156>
 800b210:	7863      	ldrb	r3, [r4, #1]
 800b212:	2b2a      	cmp	r3, #42	@ 0x2a
 800b214:	d132      	bne.n	800b27c <_vfiprintf_r+0x1ac>
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	1d1a      	adds	r2, r3, #4
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	9203      	str	r2, [sp, #12]
 800b21e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b222:	3402      	adds	r4, #2
 800b224:	9305      	str	r3, [sp, #20]
 800b226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2fc <_vfiprintf_r+0x22c>
 800b22a:	7821      	ldrb	r1, [r4, #0]
 800b22c:	2203      	movs	r2, #3
 800b22e:	4650      	mov	r0, sl
 800b230:	f7f4 ffce 	bl	80001d0 <memchr>
 800b234:	b138      	cbz	r0, 800b246 <_vfiprintf_r+0x176>
 800b236:	9b04      	ldr	r3, [sp, #16]
 800b238:	eba0 000a 	sub.w	r0, r0, sl
 800b23c:	2240      	movs	r2, #64	@ 0x40
 800b23e:	4082      	lsls	r2, r0
 800b240:	4313      	orrs	r3, r2
 800b242:	3401      	adds	r4, #1
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24a:	4829      	ldr	r0, [pc, #164]	@ (800b2f0 <_vfiprintf_r+0x220>)
 800b24c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b250:	2206      	movs	r2, #6
 800b252:	f7f4 ffbd 	bl	80001d0 <memchr>
 800b256:	2800      	cmp	r0, #0
 800b258:	d03f      	beq.n	800b2da <_vfiprintf_r+0x20a>
 800b25a:	4b26      	ldr	r3, [pc, #152]	@ (800b2f4 <_vfiprintf_r+0x224>)
 800b25c:	bb1b      	cbnz	r3, 800b2a6 <_vfiprintf_r+0x1d6>
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	3307      	adds	r3, #7
 800b262:	f023 0307 	bic.w	r3, r3, #7
 800b266:	3308      	adds	r3, #8
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b26c:	443b      	add	r3, r7
 800b26e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b270:	e76a      	b.n	800b148 <_vfiprintf_r+0x78>
 800b272:	fb0c 3202 	mla	r2, ip, r2, r3
 800b276:	460c      	mov	r4, r1
 800b278:	2001      	movs	r0, #1
 800b27a:	e7a8      	b.n	800b1ce <_vfiprintf_r+0xfe>
 800b27c:	2300      	movs	r3, #0
 800b27e:	3401      	adds	r4, #1
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	4619      	mov	r1, r3
 800b284:	f04f 0c0a 	mov.w	ip, #10
 800b288:	4620      	mov	r0, r4
 800b28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b28e:	3a30      	subs	r2, #48	@ 0x30
 800b290:	2a09      	cmp	r2, #9
 800b292:	d903      	bls.n	800b29c <_vfiprintf_r+0x1cc>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0c6      	beq.n	800b226 <_vfiprintf_r+0x156>
 800b298:	9105      	str	r1, [sp, #20]
 800b29a:	e7c4      	b.n	800b226 <_vfiprintf_r+0x156>
 800b29c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e7f0      	b.n	800b288 <_vfiprintf_r+0x1b8>
 800b2a6:	ab03      	add	r3, sp, #12
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	462a      	mov	r2, r5
 800b2ac:	4b12      	ldr	r3, [pc, #72]	@ (800b2f8 <_vfiprintf_r+0x228>)
 800b2ae:	a904      	add	r1, sp, #16
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f3af 8000 	nop.w
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	1c78      	adds	r0, r7, #1
 800b2ba:	d1d6      	bne.n	800b26a <_vfiprintf_r+0x19a>
 800b2bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2be:	07d9      	lsls	r1, r3, #31
 800b2c0:	d405      	bmi.n	800b2ce <_vfiprintf_r+0x1fe>
 800b2c2:	89ab      	ldrh	r3, [r5, #12]
 800b2c4:	059a      	lsls	r2, r3, #22
 800b2c6:	d402      	bmi.n	800b2ce <_vfiprintf_r+0x1fe>
 800b2c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2ca:	f7ff fddd 	bl	800ae88 <__retarget_lock_release_recursive>
 800b2ce:	89ab      	ldrh	r3, [r5, #12]
 800b2d0:	065b      	lsls	r3, r3, #25
 800b2d2:	f53f af1f 	bmi.w	800b114 <_vfiprintf_r+0x44>
 800b2d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2d8:	e71e      	b.n	800b118 <_vfiprintf_r+0x48>
 800b2da:	ab03      	add	r3, sp, #12
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	462a      	mov	r2, r5
 800b2e0:	4b05      	ldr	r3, [pc, #20]	@ (800b2f8 <_vfiprintf_r+0x228>)
 800b2e2:	a904      	add	r1, sp, #16
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f000 f879 	bl	800b3dc <_printf_i>
 800b2ea:	e7e4      	b.n	800b2b6 <_vfiprintf_r+0x1e6>
 800b2ec:	08036a14 	.word	0x08036a14
 800b2f0:	08036a1e 	.word	0x08036a1e
 800b2f4:	00000000 	.word	0x00000000
 800b2f8:	0800b0ab 	.word	0x0800b0ab
 800b2fc:	08036a1a 	.word	0x08036a1a

0800b300 <_printf_common>:
 800b300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b304:	4616      	mov	r6, r2
 800b306:	4698      	mov	r8, r3
 800b308:	688a      	ldr	r2, [r1, #8]
 800b30a:	690b      	ldr	r3, [r1, #16]
 800b30c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b310:	4293      	cmp	r3, r2
 800b312:	bfb8      	it	lt
 800b314:	4613      	movlt	r3, r2
 800b316:	6033      	str	r3, [r6, #0]
 800b318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b31c:	4607      	mov	r7, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	b10a      	cbz	r2, 800b326 <_printf_common+0x26>
 800b322:	3301      	adds	r3, #1
 800b324:	6033      	str	r3, [r6, #0]
 800b326:	6823      	ldr	r3, [r4, #0]
 800b328:	0699      	lsls	r1, r3, #26
 800b32a:	bf42      	ittt	mi
 800b32c:	6833      	ldrmi	r3, [r6, #0]
 800b32e:	3302      	addmi	r3, #2
 800b330:	6033      	strmi	r3, [r6, #0]
 800b332:	6825      	ldr	r5, [r4, #0]
 800b334:	f015 0506 	ands.w	r5, r5, #6
 800b338:	d106      	bne.n	800b348 <_printf_common+0x48>
 800b33a:	f104 0a19 	add.w	sl, r4, #25
 800b33e:	68e3      	ldr	r3, [r4, #12]
 800b340:	6832      	ldr	r2, [r6, #0]
 800b342:	1a9b      	subs	r3, r3, r2
 800b344:	42ab      	cmp	r3, r5
 800b346:	dc26      	bgt.n	800b396 <_printf_common+0x96>
 800b348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	3b00      	subs	r3, #0
 800b350:	bf18      	it	ne
 800b352:	2301      	movne	r3, #1
 800b354:	0692      	lsls	r2, r2, #26
 800b356:	d42b      	bmi.n	800b3b0 <_printf_common+0xb0>
 800b358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b35c:	4641      	mov	r1, r8
 800b35e:	4638      	mov	r0, r7
 800b360:	47c8      	blx	r9
 800b362:	3001      	adds	r0, #1
 800b364:	d01e      	beq.n	800b3a4 <_printf_common+0xa4>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	6922      	ldr	r2, [r4, #16]
 800b36a:	f003 0306 	and.w	r3, r3, #6
 800b36e:	2b04      	cmp	r3, #4
 800b370:	bf02      	ittt	eq
 800b372:	68e5      	ldreq	r5, [r4, #12]
 800b374:	6833      	ldreq	r3, [r6, #0]
 800b376:	1aed      	subeq	r5, r5, r3
 800b378:	68a3      	ldr	r3, [r4, #8]
 800b37a:	bf0c      	ite	eq
 800b37c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b380:	2500      	movne	r5, #0
 800b382:	4293      	cmp	r3, r2
 800b384:	bfc4      	itt	gt
 800b386:	1a9b      	subgt	r3, r3, r2
 800b388:	18ed      	addgt	r5, r5, r3
 800b38a:	2600      	movs	r6, #0
 800b38c:	341a      	adds	r4, #26
 800b38e:	42b5      	cmp	r5, r6
 800b390:	d11a      	bne.n	800b3c8 <_printf_common+0xc8>
 800b392:	2000      	movs	r0, #0
 800b394:	e008      	b.n	800b3a8 <_printf_common+0xa8>
 800b396:	2301      	movs	r3, #1
 800b398:	4652      	mov	r2, sl
 800b39a:	4641      	mov	r1, r8
 800b39c:	4638      	mov	r0, r7
 800b39e:	47c8      	blx	r9
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d103      	bne.n	800b3ac <_printf_common+0xac>
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ac:	3501      	adds	r5, #1
 800b3ae:	e7c6      	b.n	800b33e <_printf_common+0x3e>
 800b3b0:	18e1      	adds	r1, r4, r3
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	2030      	movs	r0, #48	@ 0x30
 800b3b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3ba:	4422      	add	r2, r4
 800b3bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3c4:	3302      	adds	r3, #2
 800b3c6:	e7c7      	b.n	800b358 <_printf_common+0x58>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	4641      	mov	r1, r8
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	47c8      	blx	r9
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	d0e6      	beq.n	800b3a4 <_printf_common+0xa4>
 800b3d6:	3601      	adds	r6, #1
 800b3d8:	e7d9      	b.n	800b38e <_printf_common+0x8e>
	...

0800b3dc <_printf_i>:
 800b3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	7e0f      	ldrb	r7, [r1, #24]
 800b3e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3e4:	2f78      	cmp	r7, #120	@ 0x78
 800b3e6:	4691      	mov	r9, r2
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	469a      	mov	sl, r3
 800b3ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3f2:	d807      	bhi.n	800b404 <_printf_i+0x28>
 800b3f4:	2f62      	cmp	r7, #98	@ 0x62
 800b3f6:	d80a      	bhi.n	800b40e <_printf_i+0x32>
 800b3f8:	2f00      	cmp	r7, #0
 800b3fa:	f000 80d1 	beq.w	800b5a0 <_printf_i+0x1c4>
 800b3fe:	2f58      	cmp	r7, #88	@ 0x58
 800b400:	f000 80b8 	beq.w	800b574 <_printf_i+0x198>
 800b404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b40c:	e03a      	b.n	800b484 <_printf_i+0xa8>
 800b40e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b412:	2b15      	cmp	r3, #21
 800b414:	d8f6      	bhi.n	800b404 <_printf_i+0x28>
 800b416:	a101      	add	r1, pc, #4	@ (adr r1, 800b41c <_printf_i+0x40>)
 800b418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b41c:	0800b475 	.word	0x0800b475
 800b420:	0800b489 	.word	0x0800b489
 800b424:	0800b405 	.word	0x0800b405
 800b428:	0800b405 	.word	0x0800b405
 800b42c:	0800b405 	.word	0x0800b405
 800b430:	0800b405 	.word	0x0800b405
 800b434:	0800b489 	.word	0x0800b489
 800b438:	0800b405 	.word	0x0800b405
 800b43c:	0800b405 	.word	0x0800b405
 800b440:	0800b405 	.word	0x0800b405
 800b444:	0800b405 	.word	0x0800b405
 800b448:	0800b587 	.word	0x0800b587
 800b44c:	0800b4b3 	.word	0x0800b4b3
 800b450:	0800b541 	.word	0x0800b541
 800b454:	0800b405 	.word	0x0800b405
 800b458:	0800b405 	.word	0x0800b405
 800b45c:	0800b5a9 	.word	0x0800b5a9
 800b460:	0800b405 	.word	0x0800b405
 800b464:	0800b4b3 	.word	0x0800b4b3
 800b468:	0800b405 	.word	0x0800b405
 800b46c:	0800b405 	.word	0x0800b405
 800b470:	0800b549 	.word	0x0800b549
 800b474:	6833      	ldr	r3, [r6, #0]
 800b476:	1d1a      	adds	r2, r3, #4
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	6032      	str	r2, [r6, #0]
 800b47c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b484:	2301      	movs	r3, #1
 800b486:	e09c      	b.n	800b5c2 <_printf_i+0x1e6>
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	6820      	ldr	r0, [r4, #0]
 800b48c:	1d19      	adds	r1, r3, #4
 800b48e:	6031      	str	r1, [r6, #0]
 800b490:	0606      	lsls	r6, r0, #24
 800b492:	d501      	bpl.n	800b498 <_printf_i+0xbc>
 800b494:	681d      	ldr	r5, [r3, #0]
 800b496:	e003      	b.n	800b4a0 <_printf_i+0xc4>
 800b498:	0645      	lsls	r5, r0, #25
 800b49a:	d5fb      	bpl.n	800b494 <_printf_i+0xb8>
 800b49c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4a0:	2d00      	cmp	r5, #0
 800b4a2:	da03      	bge.n	800b4ac <_printf_i+0xd0>
 800b4a4:	232d      	movs	r3, #45	@ 0x2d
 800b4a6:	426d      	negs	r5, r5
 800b4a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4ac:	4858      	ldr	r0, [pc, #352]	@ (800b610 <_printf_i+0x234>)
 800b4ae:	230a      	movs	r3, #10
 800b4b0:	e011      	b.n	800b4d6 <_printf_i+0xfa>
 800b4b2:	6821      	ldr	r1, [r4, #0]
 800b4b4:	6833      	ldr	r3, [r6, #0]
 800b4b6:	0608      	lsls	r0, r1, #24
 800b4b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4bc:	d402      	bmi.n	800b4c4 <_printf_i+0xe8>
 800b4be:	0649      	lsls	r1, r1, #25
 800b4c0:	bf48      	it	mi
 800b4c2:	b2ad      	uxthmi	r5, r5
 800b4c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4c6:	4852      	ldr	r0, [pc, #328]	@ (800b610 <_printf_i+0x234>)
 800b4c8:	6033      	str	r3, [r6, #0]
 800b4ca:	bf14      	ite	ne
 800b4cc:	230a      	movne	r3, #10
 800b4ce:	2308      	moveq	r3, #8
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4d6:	6866      	ldr	r6, [r4, #4]
 800b4d8:	60a6      	str	r6, [r4, #8]
 800b4da:	2e00      	cmp	r6, #0
 800b4dc:	db05      	blt.n	800b4ea <_printf_i+0x10e>
 800b4de:	6821      	ldr	r1, [r4, #0]
 800b4e0:	432e      	orrs	r6, r5
 800b4e2:	f021 0104 	bic.w	r1, r1, #4
 800b4e6:	6021      	str	r1, [r4, #0]
 800b4e8:	d04b      	beq.n	800b582 <_printf_i+0x1a6>
 800b4ea:	4616      	mov	r6, r2
 800b4ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4f0:	fb03 5711 	mls	r7, r3, r1, r5
 800b4f4:	5dc7      	ldrb	r7, [r0, r7]
 800b4f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4fa:	462f      	mov	r7, r5
 800b4fc:	42bb      	cmp	r3, r7
 800b4fe:	460d      	mov	r5, r1
 800b500:	d9f4      	bls.n	800b4ec <_printf_i+0x110>
 800b502:	2b08      	cmp	r3, #8
 800b504:	d10b      	bne.n	800b51e <_printf_i+0x142>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	07df      	lsls	r7, r3, #31
 800b50a:	d508      	bpl.n	800b51e <_printf_i+0x142>
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	6861      	ldr	r1, [r4, #4]
 800b510:	4299      	cmp	r1, r3
 800b512:	bfde      	ittt	le
 800b514:	2330      	movle	r3, #48	@ 0x30
 800b516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b51a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b51e:	1b92      	subs	r2, r2, r6
 800b520:	6122      	str	r2, [r4, #16]
 800b522:	f8cd a000 	str.w	sl, [sp]
 800b526:	464b      	mov	r3, r9
 800b528:	aa03      	add	r2, sp, #12
 800b52a:	4621      	mov	r1, r4
 800b52c:	4640      	mov	r0, r8
 800b52e:	f7ff fee7 	bl	800b300 <_printf_common>
 800b532:	3001      	adds	r0, #1
 800b534:	d14a      	bne.n	800b5cc <_printf_i+0x1f0>
 800b536:	f04f 30ff 	mov.w	r0, #4294967295
 800b53a:	b004      	add	sp, #16
 800b53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	f043 0320 	orr.w	r3, r3, #32
 800b546:	6023      	str	r3, [r4, #0]
 800b548:	4832      	ldr	r0, [pc, #200]	@ (800b614 <_printf_i+0x238>)
 800b54a:	2778      	movs	r7, #120	@ 0x78
 800b54c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	6831      	ldr	r1, [r6, #0]
 800b554:	061f      	lsls	r7, r3, #24
 800b556:	f851 5b04 	ldr.w	r5, [r1], #4
 800b55a:	d402      	bmi.n	800b562 <_printf_i+0x186>
 800b55c:	065f      	lsls	r7, r3, #25
 800b55e:	bf48      	it	mi
 800b560:	b2ad      	uxthmi	r5, r5
 800b562:	6031      	str	r1, [r6, #0]
 800b564:	07d9      	lsls	r1, r3, #31
 800b566:	bf44      	itt	mi
 800b568:	f043 0320 	orrmi.w	r3, r3, #32
 800b56c:	6023      	strmi	r3, [r4, #0]
 800b56e:	b11d      	cbz	r5, 800b578 <_printf_i+0x19c>
 800b570:	2310      	movs	r3, #16
 800b572:	e7ad      	b.n	800b4d0 <_printf_i+0xf4>
 800b574:	4826      	ldr	r0, [pc, #152]	@ (800b610 <_printf_i+0x234>)
 800b576:	e7e9      	b.n	800b54c <_printf_i+0x170>
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	f023 0320 	bic.w	r3, r3, #32
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	e7f6      	b.n	800b570 <_printf_i+0x194>
 800b582:	4616      	mov	r6, r2
 800b584:	e7bd      	b.n	800b502 <_printf_i+0x126>
 800b586:	6833      	ldr	r3, [r6, #0]
 800b588:	6825      	ldr	r5, [r4, #0]
 800b58a:	6961      	ldr	r1, [r4, #20]
 800b58c:	1d18      	adds	r0, r3, #4
 800b58e:	6030      	str	r0, [r6, #0]
 800b590:	062e      	lsls	r6, r5, #24
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	d501      	bpl.n	800b59a <_printf_i+0x1be>
 800b596:	6019      	str	r1, [r3, #0]
 800b598:	e002      	b.n	800b5a0 <_printf_i+0x1c4>
 800b59a:	0668      	lsls	r0, r5, #25
 800b59c:	d5fb      	bpl.n	800b596 <_printf_i+0x1ba>
 800b59e:	8019      	strh	r1, [r3, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	6123      	str	r3, [r4, #16]
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	e7bc      	b.n	800b522 <_printf_i+0x146>
 800b5a8:	6833      	ldr	r3, [r6, #0]
 800b5aa:	1d1a      	adds	r2, r3, #4
 800b5ac:	6032      	str	r2, [r6, #0]
 800b5ae:	681e      	ldr	r6, [r3, #0]
 800b5b0:	6862      	ldr	r2, [r4, #4]
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7f4 fe0b 	bl	80001d0 <memchr>
 800b5ba:	b108      	cbz	r0, 800b5c0 <_printf_i+0x1e4>
 800b5bc:	1b80      	subs	r0, r0, r6
 800b5be:	6060      	str	r0, [r4, #4]
 800b5c0:	6863      	ldr	r3, [r4, #4]
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5ca:	e7aa      	b.n	800b522 <_printf_i+0x146>
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	4632      	mov	r2, r6
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	47d0      	blx	sl
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	d0ad      	beq.n	800b536 <_printf_i+0x15a>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	079b      	lsls	r3, r3, #30
 800b5de:	d413      	bmi.n	800b608 <_printf_i+0x22c>
 800b5e0:	68e0      	ldr	r0, [r4, #12]
 800b5e2:	9b03      	ldr	r3, [sp, #12]
 800b5e4:	4298      	cmp	r0, r3
 800b5e6:	bfb8      	it	lt
 800b5e8:	4618      	movlt	r0, r3
 800b5ea:	e7a6      	b.n	800b53a <_printf_i+0x15e>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	4632      	mov	r2, r6
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	47d0      	blx	sl
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	d09d      	beq.n	800b536 <_printf_i+0x15a>
 800b5fa:	3501      	adds	r5, #1
 800b5fc:	68e3      	ldr	r3, [r4, #12]
 800b5fe:	9903      	ldr	r1, [sp, #12]
 800b600:	1a5b      	subs	r3, r3, r1
 800b602:	42ab      	cmp	r3, r5
 800b604:	dcf2      	bgt.n	800b5ec <_printf_i+0x210>
 800b606:	e7eb      	b.n	800b5e0 <_printf_i+0x204>
 800b608:	2500      	movs	r5, #0
 800b60a:	f104 0619 	add.w	r6, r4, #25
 800b60e:	e7f5      	b.n	800b5fc <_printf_i+0x220>
 800b610:	08036a25 	.word	0x08036a25
 800b614:	08036a36 	.word	0x08036a36

0800b618 <__sflush_r>:
 800b618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	0716      	lsls	r6, r2, #28
 800b622:	4605      	mov	r5, r0
 800b624:	460c      	mov	r4, r1
 800b626:	d454      	bmi.n	800b6d2 <__sflush_r+0xba>
 800b628:	684b      	ldr	r3, [r1, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	dc02      	bgt.n	800b634 <__sflush_r+0x1c>
 800b62e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b630:	2b00      	cmp	r3, #0
 800b632:	dd48      	ble.n	800b6c6 <__sflush_r+0xae>
 800b634:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b636:	2e00      	cmp	r6, #0
 800b638:	d045      	beq.n	800b6c6 <__sflush_r+0xae>
 800b63a:	2300      	movs	r3, #0
 800b63c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b640:	682f      	ldr	r7, [r5, #0]
 800b642:	6a21      	ldr	r1, [r4, #32]
 800b644:	602b      	str	r3, [r5, #0]
 800b646:	d030      	beq.n	800b6aa <__sflush_r+0x92>
 800b648:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	0759      	lsls	r1, r3, #29
 800b64e:	d505      	bpl.n	800b65c <__sflush_r+0x44>
 800b650:	6863      	ldr	r3, [r4, #4]
 800b652:	1ad2      	subs	r2, r2, r3
 800b654:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b656:	b10b      	cbz	r3, 800b65c <__sflush_r+0x44>
 800b658:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	2300      	movs	r3, #0
 800b65e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b660:	6a21      	ldr	r1, [r4, #32]
 800b662:	4628      	mov	r0, r5
 800b664:	47b0      	blx	r6
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	d106      	bne.n	800b67a <__sflush_r+0x62>
 800b66c:	6829      	ldr	r1, [r5, #0]
 800b66e:	291d      	cmp	r1, #29
 800b670:	d82b      	bhi.n	800b6ca <__sflush_r+0xb2>
 800b672:	4a2a      	ldr	r2, [pc, #168]	@ (800b71c <__sflush_r+0x104>)
 800b674:	40ca      	lsrs	r2, r1
 800b676:	07d6      	lsls	r6, r2, #31
 800b678:	d527      	bpl.n	800b6ca <__sflush_r+0xb2>
 800b67a:	2200      	movs	r2, #0
 800b67c:	6062      	str	r2, [r4, #4]
 800b67e:	04d9      	lsls	r1, r3, #19
 800b680:	6922      	ldr	r2, [r4, #16]
 800b682:	6022      	str	r2, [r4, #0]
 800b684:	d504      	bpl.n	800b690 <__sflush_r+0x78>
 800b686:	1c42      	adds	r2, r0, #1
 800b688:	d101      	bne.n	800b68e <__sflush_r+0x76>
 800b68a:	682b      	ldr	r3, [r5, #0]
 800b68c:	b903      	cbnz	r3, 800b690 <__sflush_r+0x78>
 800b68e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b692:	602f      	str	r7, [r5, #0]
 800b694:	b1b9      	cbz	r1, 800b6c6 <__sflush_r+0xae>
 800b696:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d002      	beq.n	800b6a4 <__sflush_r+0x8c>
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f7ff fbf4 	bl	800ae8c <_free_r>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6a8:	e00d      	b.n	800b6c6 <__sflush_r+0xae>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	47b0      	blx	r6
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	1c50      	adds	r0, r2, #1
 800b6b4:	d1c9      	bne.n	800b64a <__sflush_r+0x32>
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0c6      	beq.n	800b64a <__sflush_r+0x32>
 800b6bc:	2b1d      	cmp	r3, #29
 800b6be:	d001      	beq.n	800b6c4 <__sflush_r+0xac>
 800b6c0:	2b16      	cmp	r3, #22
 800b6c2:	d11e      	bne.n	800b702 <__sflush_r+0xea>
 800b6c4:	602f      	str	r7, [r5, #0]
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e022      	b.n	800b710 <__sflush_r+0xf8>
 800b6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ce:	b21b      	sxth	r3, r3
 800b6d0:	e01b      	b.n	800b70a <__sflush_r+0xf2>
 800b6d2:	690f      	ldr	r7, [r1, #16]
 800b6d4:	2f00      	cmp	r7, #0
 800b6d6:	d0f6      	beq.n	800b6c6 <__sflush_r+0xae>
 800b6d8:	0793      	lsls	r3, r2, #30
 800b6da:	680e      	ldr	r6, [r1, #0]
 800b6dc:	bf08      	it	eq
 800b6de:	694b      	ldreq	r3, [r1, #20]
 800b6e0:	600f      	str	r7, [r1, #0]
 800b6e2:	bf18      	it	ne
 800b6e4:	2300      	movne	r3, #0
 800b6e6:	eba6 0807 	sub.w	r8, r6, r7
 800b6ea:	608b      	str	r3, [r1, #8]
 800b6ec:	f1b8 0f00 	cmp.w	r8, #0
 800b6f0:	dde9      	ble.n	800b6c6 <__sflush_r+0xae>
 800b6f2:	6a21      	ldr	r1, [r4, #32]
 800b6f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6f6:	4643      	mov	r3, r8
 800b6f8:	463a      	mov	r2, r7
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	47b0      	blx	r6
 800b6fe:	2800      	cmp	r0, #0
 800b700:	dc08      	bgt.n	800b714 <__sflush_r+0xfc>
 800b702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	f04f 30ff 	mov.w	r0, #4294967295
 800b710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b714:	4407      	add	r7, r0
 800b716:	eba8 0800 	sub.w	r8, r8, r0
 800b71a:	e7e7      	b.n	800b6ec <__sflush_r+0xd4>
 800b71c:	20400001 	.word	0x20400001

0800b720 <_fflush_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	690b      	ldr	r3, [r1, #16]
 800b724:	4605      	mov	r5, r0
 800b726:	460c      	mov	r4, r1
 800b728:	b913      	cbnz	r3, 800b730 <_fflush_r+0x10>
 800b72a:	2500      	movs	r5, #0
 800b72c:	4628      	mov	r0, r5
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	b118      	cbz	r0, 800b73a <_fflush_r+0x1a>
 800b732:	6a03      	ldr	r3, [r0, #32]
 800b734:	b90b      	cbnz	r3, 800b73a <_fflush_r+0x1a>
 800b736:	f7ff f9af 	bl	800aa98 <__sinit>
 800b73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0f3      	beq.n	800b72a <_fflush_r+0xa>
 800b742:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b744:	07d0      	lsls	r0, r2, #31
 800b746:	d404      	bmi.n	800b752 <_fflush_r+0x32>
 800b748:	0599      	lsls	r1, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_fflush_r+0x32>
 800b74c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b74e:	f7ff fb9a 	bl	800ae86 <__retarget_lock_acquire_recursive>
 800b752:	4628      	mov	r0, r5
 800b754:	4621      	mov	r1, r4
 800b756:	f7ff ff5f 	bl	800b618 <__sflush_r>
 800b75a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b75c:	07da      	lsls	r2, r3, #31
 800b75e:	4605      	mov	r5, r0
 800b760:	d4e4      	bmi.n	800b72c <_fflush_r+0xc>
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	059b      	lsls	r3, r3, #22
 800b766:	d4e1      	bmi.n	800b72c <_fflush_r+0xc>
 800b768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b76a:	f7ff fb8d 	bl	800ae88 <__retarget_lock_release_recursive>
 800b76e:	e7dd      	b.n	800b72c <_fflush_r+0xc>

0800b770 <__swhatbuf_r>:
 800b770:	b570      	push	{r4, r5, r6, lr}
 800b772:	460c      	mov	r4, r1
 800b774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b778:	2900      	cmp	r1, #0
 800b77a:	b096      	sub	sp, #88	@ 0x58
 800b77c:	4615      	mov	r5, r2
 800b77e:	461e      	mov	r6, r3
 800b780:	da0d      	bge.n	800b79e <__swhatbuf_r+0x2e>
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b788:	f04f 0100 	mov.w	r1, #0
 800b78c:	bf14      	ite	ne
 800b78e:	2340      	movne	r3, #64	@ 0x40
 800b790:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b794:	2000      	movs	r0, #0
 800b796:	6031      	str	r1, [r6, #0]
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	b016      	add	sp, #88	@ 0x58
 800b79c:	bd70      	pop	{r4, r5, r6, pc}
 800b79e:	466a      	mov	r2, sp
 800b7a0:	f000 f848 	bl	800b834 <_fstat_r>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	dbec      	blt.n	800b782 <__swhatbuf_r+0x12>
 800b7a8:	9901      	ldr	r1, [sp, #4]
 800b7aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7b2:	4259      	negs	r1, r3
 800b7b4:	4159      	adcs	r1, r3
 800b7b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7ba:	e7eb      	b.n	800b794 <__swhatbuf_r+0x24>

0800b7bc <__smakebuf_r>:
 800b7bc:	898b      	ldrh	r3, [r1, #12]
 800b7be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c0:	079d      	lsls	r5, r3, #30
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	d507      	bpl.n	800b7d8 <__smakebuf_r+0x1c>
 800b7c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	6163      	str	r3, [r4, #20]
 800b7d4:	b003      	add	sp, #12
 800b7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7d8:	ab01      	add	r3, sp, #4
 800b7da:	466a      	mov	r2, sp
 800b7dc:	f7ff ffc8 	bl	800b770 <__swhatbuf_r>
 800b7e0:	9f00      	ldr	r7, [sp, #0]
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7ff fbbc 	bl	800af64 <_malloc_r>
 800b7ec:	b948      	cbnz	r0, 800b802 <__smakebuf_r+0x46>
 800b7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7f2:	059a      	lsls	r2, r3, #22
 800b7f4:	d4ee      	bmi.n	800b7d4 <__smakebuf_r+0x18>
 800b7f6:	f023 0303 	bic.w	r3, r3, #3
 800b7fa:	f043 0302 	orr.w	r3, r3, #2
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	e7e2      	b.n	800b7c8 <__smakebuf_r+0xc>
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	6020      	str	r0, [r4, #0]
 800b806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	9b01      	ldr	r3, [sp, #4]
 800b80e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b812:	b15b      	cbz	r3, 800b82c <__smakebuf_r+0x70>
 800b814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 f81d 	bl	800b858 <_isatty_r>
 800b81e:	b128      	cbz	r0, 800b82c <__smakebuf_r+0x70>
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f023 0303 	bic.w	r3, r3, #3
 800b826:	f043 0301 	orr.w	r3, r3, #1
 800b82a:	81a3      	strh	r3, [r4, #12]
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	431d      	orrs	r5, r3
 800b830:	81a5      	strh	r5, [r4, #12]
 800b832:	e7cf      	b.n	800b7d4 <__smakebuf_r+0x18>

0800b834 <_fstat_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4d07      	ldr	r5, [pc, #28]	@ (800b854 <_fstat_r+0x20>)
 800b838:	2300      	movs	r3, #0
 800b83a:	4604      	mov	r4, r0
 800b83c:	4608      	mov	r0, r1
 800b83e:	4611      	mov	r1, r2
 800b840:	602b      	str	r3, [r5, #0]
 800b842:	f7f5 fc9e 	bl	8001182 <_fstat>
 800b846:	1c43      	adds	r3, r0, #1
 800b848:	d102      	bne.n	800b850 <_fstat_r+0x1c>
 800b84a:	682b      	ldr	r3, [r5, #0]
 800b84c:	b103      	cbz	r3, 800b850 <_fstat_r+0x1c>
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	bf00      	nop
 800b854:	200008a4 	.word	0x200008a4

0800b858 <_isatty_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d06      	ldr	r5, [pc, #24]	@ (800b874 <_isatty_r+0x1c>)
 800b85c:	2300      	movs	r3, #0
 800b85e:	4604      	mov	r4, r0
 800b860:	4608      	mov	r0, r1
 800b862:	602b      	str	r3, [r5, #0]
 800b864:	f7f5 fc9d 	bl	80011a2 <_isatty>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <_isatty_r+0x1a>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	b103      	cbz	r3, 800b872 <_isatty_r+0x1a>
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	200008a4 	.word	0x200008a4

0800b878 <_sbrk_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4d06      	ldr	r5, [pc, #24]	@ (800b894 <_sbrk_r+0x1c>)
 800b87c:	2300      	movs	r3, #0
 800b87e:	4604      	mov	r4, r0
 800b880:	4608      	mov	r0, r1
 800b882:	602b      	str	r3, [r5, #0]
 800b884:	f7f5 fca6 	bl	80011d4 <_sbrk>
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	d102      	bne.n	800b892 <_sbrk_r+0x1a>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	b103      	cbz	r3, 800b892 <_sbrk_r+0x1a>
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	bd38      	pop	{r3, r4, r5, pc}
 800b894:	200008a4 	.word	0x200008a4

0800b898 <_init>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	bf00      	nop
 800b89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89e:	bc08      	pop	{r3}
 800b8a0:	469e      	mov	lr, r3
 800b8a2:	4770      	bx	lr

0800b8a4 <_fini>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	bf00      	nop
 800b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8aa:	bc08      	pop	{r3}
 800b8ac:	469e      	mov	lr, r3
 800b8ae:	4770      	bx	lr
