
407vet6sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b184  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b140  0800b314  0800b314  0000c314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036454  08036454  00038068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08036454  08036454  00037454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803645c  0803645c  00038068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803645c  0803645c  0003745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08036460  08036460  00037460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08036464  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00038068  2**0
                  CONTENTS
 10 .bss          0000185c  20000068  20000068  00038068  2**2
                  ALLOC
 11 ._user_heap_stack 0000a004  200018c4  200018c4  00038068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00038068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001563b  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c36  00000000  00000000  0004d6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00051310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d65  00000000  00000000  000524c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025632  00000000  00000000  0005322d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0ad  00000000  00000000  0007885f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce48e  00000000  00000000  0009390c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00161d9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dd0  00000000  00000000  00161de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00166bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2fc 	.word	0x0800b2fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800b2fc 	.word	0x0800b2fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <MX_DMA_Init+0x78>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_DMA_Init+0x78>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_DMA_Init+0x78>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	200f      	movs	r0, #15
 80005e0:	f001 f991 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e4:	200f      	movs	r0, #15
 80005e6:	f001 f9aa 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	203b      	movs	r0, #59	@ 0x3b
 80005f0:	f001 f989 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f4:	203b      	movs	r0, #59	@ 0x3b
 80005f6:	f001 f9a2 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2045      	movs	r0, #69	@ 0x45
 8000600:	f001 f981 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000604:	2045      	movs	r0, #69	@ 0x45
 8000606:	f001 f99a 	bl	800193e <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <initFileManager>:
 *      Author: Administrator
 */

#include "filemanager.h"

uint8_t initFileManager(){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

	FRESULT retSD = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	4911      	ldr	r1, [pc, #68]	@ (8000668 <initFileManager+0x50>)
 8000622:	4812      	ldr	r0, [pc, #72]	@ (800066c <initFileManager+0x54>)
 8000624:	f008 fd4a 	bl	80090bc <f_mount>
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]
	printf("%u\r\n", retSD);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4619      	mov	r1, r3
 8000630:	480f      	ldr	r0, [pc, #60]	@ (8000670 <initFileManager+0x58>)
 8000632:	f009 ff89 	bl	800a548 <iprintf>
	printf("Compilation Date: %s %s\n", __DATE__, __TIME__);
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <initFileManager+0x5c>)
 8000638:	490f      	ldr	r1, [pc, #60]	@ (8000678 <initFileManager+0x60>)
 800063a:	4810      	ldr	r0, [pc, #64]	@ (800067c <initFileManager+0x64>)
 800063c:	f009 ff84 	bl	800a548 <iprintf>
	// mount SD card
	//   int retSD = f_mount(&SDFatFS, (TCHAR const *)SDPath, 1);
	if (retSD == FR_OK) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d106      	bne.n	8000654 <initFileManager+0x3c>

		//
		SDCard_ShowInfo();
 8000646:	f000 f895 	bl	8000774 <SDCard_ShowInfo>
		ListFiles("/");
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <initFileManager+0x68>)
 800064c:	f000 f81c 	bl	8000688 <ListFiles>
		return 1;
 8000650:	2301      	movs	r3, #1
 8000652:	e005      	b.n	8000660 <initFileManager+0x48>


	} else {
		printf("!! SDcard mount filesystem error。(%d)\r\n", retSD);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <initFileManager+0x6c>)
 800065a:	f009 ff75 	bl	800a548 <iprintf>
		return 0;
 800065e:	2300      	movs	r3, #0
	}
	// 不带fatfs调试函数

}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20001504 	.word	0x20001504
 800066c:	20001508 	.word	0x20001508
 8000670:	0800b314 	.word	0x0800b314
 8000674:	0800b31c 	.word	0x0800b31c
 8000678:	0800b328 	.word	0x0800b328
 800067c:	0800b334 	.word	0x0800b334
 8000680:	0800b350 	.word	0x0800b350
 8000684:	0800b354 	.word	0x0800b354

08000688 <ListFiles>:
		}
	}
	printf("\r\n"); // 最后补一个换行
}

void ListFiles(const TCHAR *path) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b0d6      	sub	sp, #344	@ 0x158
 800068c:	af00      	add	r7, sp, #0
 800068e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000692:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000696:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;               // 目录对象
	FILINFO fno;           // 文件信息结构体

	// 打开目录
	res = f_opendir(&dir, path);
 8000698:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800069c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006a0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	4610      	mov	r0, r2
 80006a8:	f009 fbf1 	bl	8009e8e <f_opendir>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	if (res != FR_OK) {
 80006b2:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <ListFiles+0x40>
		printf("open dir failed err: %d\r\n", res);
 80006ba:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006be:	4619      	mov	r1, r3
 80006c0:	4826      	ldr	r0, [pc, #152]	@ (800075c <ListFiles+0xd4>)
 80006c2:	f009 ff41 	bl	800a548 <iprintf>
 80006c6:	e045      	b.n	8000754 <ListFiles+0xcc>
		return;
	}

	printf("\r\ndir %s file list : \r\n", path);
 80006c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006cc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	4823      	ldr	r0, [pc, #140]	@ (8000760 <ListFiles+0xd8>)
 80006d4:	f009 ff38 	bl	800a548 <iprintf>
	printf("----------------------------------------\r\n");
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <ListFiles+0xdc>)
 80006da:	f009 ff9d 	bl	800a618 <puts>

	// 循环读取目录项（f_readdir返回FR_OK且fno.fname不为空时继续）
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 80006de:	e01c      	b.n	800071a <ListFiles+0x92>
		// 判断是否为子目录（文件名以'/'结尾，或fno.fattrib包含AM_DIR属性）
		if (fno.fattrib & AM_DIR) {
 80006e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80006e8:	7a1b      	ldrb	r3, [r3, #8]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <ListFiles+0x7a>
			printf(" [dir]  %s\r\n", fno.fname);  // 子目录
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	3316      	adds	r3, #22
 80006f8:	4619      	mov	r1, r3
 80006fa:	481b      	ldr	r0, [pc, #108]	@ (8000768 <ListFiles+0xe0>)
 80006fc:	f009 ff24 	bl	800a548 <iprintf>
 8000700:	e00b      	b.n	800071a <ListFiles+0x92>
		} else {
			// 普通文件：输出文件名和大小（单位：字节）
			printf(" [file]  %s  (size: %ld bytes)\r\n", fno.fname, fno.fsize);
 8000702:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000706:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	3316      	adds	r3, #22
 8000712:	4619      	mov	r1, r3
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <ListFiles+0xe4>)
 8000716:	f009 ff17 	bl	800a548 <iprintf>
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f009 fc95 	bl	800a054 <f_readdir>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <ListFiles+0xb6>
 8000730:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000734:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000738:	7d9b      	ldrb	r3, [r3, #22]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1d0      	bne.n	80006e0 <ListFiles+0x58>
		}
	}

	printf("----------------------------------------\r\n");
 800073e:	4809      	ldr	r0, [pc, #36]	@ (8000764 <ListFiles+0xdc>)
 8000740:	f009 ff6a 	bl	800a618 <puts>
	printf("dir search success\r\n");
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <ListFiles+0xe8>)
 8000746:	f009 ff67 	bl	800a618 <puts>

	// 关闭目录
	f_closedir(&dir);
 800074a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800074e:	4618      	mov	r0, r3
 8000750:	f009 fc5a 	bl	800a008 <f_closedir>
}
 8000754:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	0800b38c 	.word	0x0800b38c
 8000760:	0800b3a8 	.word	0x0800b3a8
 8000764:	0800b3c0 	.word	0x0800b3c0
 8000768:	0800b3ec 	.word	0x0800b3ec
 800076c:	0800b3fc 	.word	0x0800b3fc
 8000770:	0800b420 	.word	0x0800b420

08000774 <SDCard_ShowInfo>:


void SDCard_ShowInfo(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
	// SD卡信息结构体变量
	HAL_SD_CardInfoTypeDef cardInfo;
	HAL_StatusTypeDef res = HAL_SD_GetCardInfo(&hsd, &cardInfo);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4821      	ldr	r0, [pc, #132]	@ (8000804 <SDCard_ShowInfo+0x90>)
 8000780:	f003 ff2c 	bl	80045dc <HAL_SD_GetCardInfo>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res != HAL_OK) {
 800078a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <SDCard_ShowInfo+0x26>
		printf("HAL_SD_GetCardInfo() error\r\n");
 8000792:	481d      	ldr	r0, [pc, #116]	@ (8000808 <SDCard_ShowInfo+0x94>)
 8000794:	f009 ff40 	bl	800a618 <puts>
 8000798:	e030      	b.n	80007fc <SDCard_ShowInfo+0x88>
		return;
	}
	printf("\r\n*** HAL_SD_GetCardInfo() info ***\r\n");
 800079a:	481c      	ldr	r0, [pc, #112]	@ (800080c <SDCard_ShowInfo+0x98>)
 800079c:	f009 ff3c 	bl	800a618 <puts>
	printf("Card Type= %ld\r\n", cardInfo.CardType);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	@ (8000810 <SDCard_ShowInfo+0x9c>)
 80007a6:	f009 fecf 	bl	800a548 <iprintf>
	printf("Card Version= %ld\r\n", cardInfo.CardVersion);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4819      	ldr	r0, [pc, #100]	@ (8000814 <SDCard_ShowInfo+0xa0>)
 80007b0:	f009 feca 	bl	800a548 <iprintf>
	printf("Card Class= %ld\r\n", cardInfo.Class);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4817      	ldr	r0, [pc, #92]	@ (8000818 <SDCard_ShowInfo+0xa4>)
 80007ba:	f009 fec5 	bl	800a548 <iprintf>
	printf("Relative Card Address= %ld\r\n", cardInfo.RelCardAdd);
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4816      	ldr	r0, [pc, #88]	@ (800081c <SDCard_ShowInfo+0xa8>)
 80007c4:	f009 fec0 	bl	800a548 <iprintf>
	printf("Block Count= %ld\r\n", cardInfo.BlockNbr);
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	@ (8000820 <SDCard_ShowInfo+0xac>)
 80007ce:	f009 febb 	bl	800a548 <iprintf>
	printf("Block Size(Bytes)= %ld\r\n", cardInfo.BlockSize);
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <SDCard_ShowInfo+0xb0>)
 80007d8:	f009 feb6 	bl	800a548 <iprintf>
	printf("LogiBlockCount= %ld\r\n", cardInfo.LogBlockNbr);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	4619      	mov	r1, r3
 80007e0:	4811      	ldr	r0, [pc, #68]	@ (8000828 <SDCard_ShowInfo+0xb4>)
 80007e2:	f009 feb1 	bl	800a548 <iprintf>
	printf("LogiBlockSize(Bytes)= %ld\r\n", cardInfo.LogBlockSize);
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <SDCard_ShowInfo+0xb8>)
 80007ec:	f009 feac 	bl	800a548 <iprintf>
	printf("SD Card Capacity(MB)= %ld\r\n", cardInfo.BlockNbr >> 1 >> 10);
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	0adb      	lsrs	r3, r3, #11
 80007f4:	4619      	mov	r1, r3
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <SDCard_ShowInfo+0xbc>)
 80007f8:	f009 fea6 	bl	800a548 <iprintf>
}
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000136c 	.word	0x2000136c
 8000808:	0800b434 	.word	0x0800b434
 800080c:	0800b450 	.word	0x0800b450
 8000810:	0800b478 	.word	0x0800b478
 8000814:	0800b48c 	.word	0x0800b48c
 8000818:	0800b4a0 	.word	0x0800b4a0
 800081c:	0800b4b4 	.word	0x0800b4b4
 8000820:	0800b4d4 	.word	0x0800b4d4
 8000824:	0800b4e8 	.word	0x0800b4e8
 8000828:	0800b504 	.word	0x0800b504
 800082c:	0800b51c 	.word	0x0800b51c
 8000830:	0800b538 	.word	0x0800b538

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a29      	ldr	r2, [pc, #164]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD15 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 80008d6:	f248 0308 	movw	r3, #32776	@ 0x8008
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_GPIO_Init+0xc8>)
 80008ec:	f001 fbe0 	bl	80020b0 <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020c00 	.word	0x40020c00

08000900 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000906:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <MX_I2S2_Init+0x58>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_I2S2_Init+0x54>)
 800090c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000910:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_I2S2_Init+0x54>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000924:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000926:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800092a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_I2S2_Init+0x54>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_I2S2_Init+0x54>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000940:	f001 fd6a 	bl	8002418 <HAL_I2S_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800094a:	f000 fb75 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000084 	.word	0x20000084
 8000958:	40003800 	.word	0x40003800

0800095c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a4d      	ldr	r2, [pc, #308]	@ (8000abc <HAL_I2S_MspInit+0x160>)
 8000988:	4293      	cmp	r3, r2
 800098a:	f040 8093 	bne.w	8000ab4 <HAL_I2S_MspInit+0x158>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000992:	23c0      	movs	r3, #192	@ 0xc0
 8000994:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 ff36 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80009aa:	f000 fb45 	bl	8001038 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b43      	ldr	r3, [pc, #268]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a42      	ldr	r2, [pc, #264]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b40      	ldr	r3, [pc, #256]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b35      	ldr	r3, [pc, #212]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a34      	ldr	r2, [pc, #208]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b32      	ldr	r3, [pc, #200]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a02:	2308      	movs	r3, #8
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a12:	2305      	movs	r3, #5
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4829      	ldr	r0, [pc, #164]	@ (8000ac4 <HAL_I2S_MspInit+0x168>)
 8000a1e:	f001 fb47 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a34:	2305      	movs	r3, #5
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4822      	ldr	r0, [pc, #136]	@ (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a40:	f001 fb36 	bl	80020b0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a46:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <HAL_I2S_MspInit+0x174>)
 8000a48:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a52:	2240      	movs	r2, #64	@ 0x40
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a6a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a72:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a7a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a88:	4810      	ldr	r0, [pc, #64]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a8a:	f000 ff73 	bl	8001974 <HAL_DMA_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000a94:	f000 fad0 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2024      	movs	r0, #36	@ 0x24
 8000aaa:	f000 ff2c 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000aae:	2024      	movs	r0, #36	@ 0x24
 8000ab0:	f000 ff45 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3738      	adds	r7, #56	@ 0x38
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40003800 	.word	0x40003800
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	200000cc 	.word	0x200000cc
 8000ad0:	40026070 	.word	0x40026070

08000ad4 <__io_putchar>:
    uint8_t  buffer2[2048];   // 双缓冲区
    uint8_t  current_buffer;  // 当前使用的缓冲区
    uint8_t  playing;         // 播放状态
} AudioPlayer;

int __io_putchar(int ch) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFFFFFF);
 8000adc:	1d39      	adds	r1, r7, #4
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <__io_putchar+0x20>)
 8000ae6:	f004 fb57 	bl	8005198 <HAL_UART_Transmit>
    return ch;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200014b4 	.word	0x200014b4

08000af8 <__io_getchar>:

int __io_getchar(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
    char rxChar;
    while (HAL_UART_Receive(&huart1, (uint8_t*) &rxChar, 1, 0xFFFFFFFF) == HAL_TIMEOUT);
 8000afe:	bf00      	nop
 8000b00:	1df9      	adds	r1, r7, #7
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	2201      	movs	r2, #1
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <__io_getchar+0x28>)
 8000b0a:	f004 fbd0 	bl	80052ae <HAL_UART_Receive>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d0f5      	beq.n	8000b00 <__io_getchar+0x8>
    return rxChar;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200014b4 	.word	0x200014b4

08000b24 <WavOpen>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 解析WAV文件头部并打开文件
uint8_t WavOpen(const char *filename, WavHeader *header, AudioPlayer *player) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
    FRESULT res;
    UINT bytesRead;

    // 打开文件
    res = f_open(&player->file, filename, FA_READ);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2201      	movs	r2, #1
 8000b34:	68f9      	ldr	r1, [r7, #12]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f008 fb06 	bl	8009148 <f_open>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK) {
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d007      	beq.n	8000b56 <WavOpen+0x32>
        printf("open file failed %s error code: %d\r\n", filename, res);
 8000b46:	7ffb      	ldrb	r3, [r7, #31]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	485b      	ldr	r0, [pc, #364]	@ (8000cbc <WavOpen+0x198>)
 8000b4e:	f009 fcfb 	bl	800a548 <iprintf>
        return 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e0ad      	b.n	8000cb2 <WavOpen+0x18e>
    }

    // 读取WAV头部
    res = f_read(&player->file, header, sizeof(WavHeader), &bytesRead);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	2224      	movs	r2, #36	@ 0x24
 8000b5e:	68b9      	ldr	r1, [r7, #8]
 8000b60:	f008 fda5 	bl	80096ae <f_read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK || bytesRead != sizeof(WavHeader)) {
 8000b68:	7ffb      	ldrb	r3, [r7, #31]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <WavOpen+0x50>
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b24      	cmp	r3, #36	@ 0x24
 8000b72:	d00a      	beq.n	8000b8a <WavOpen+0x66>
        printf("read WAVhead failed error code : %d\r\n", res);
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4851      	ldr	r0, [pc, #324]	@ (8000cc0 <WavOpen+0x19c>)
 8000b7a:	f009 fce5 	bl	800a548 <iprintf>
        f_close(&player->file);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 ff51 	bl	8009a28 <f_close>
        return 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e093      	b.n	8000cb2 <WavOpen+0x18e>
    }

    // 验证WAV文件
    if (memcmp(header->riff, "RIFF", 4) != 0 || memcmp(header->wave, "WAVE", 4) != 0 ||
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	494d      	ldr	r1, [pc, #308]	@ (8000cc4 <WavOpen+0x1a0>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f009 fe21 	bl	800a7d8 <memcmp>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d117      	bne.n	8000bcc <WavOpen+0xa8>
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	4949      	ldr	r1, [pc, #292]	@ (8000cc8 <WavOpen+0x1a4>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f009 fe17 	bl	800a7d8 <memcmp>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10d      	bne.n	8000bcc <WavOpen+0xa8>
        memcmp(header->fmt, "fmt ", 4) != 0 || header->audio_format != 1) {
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	330c      	adds	r3, #12
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4945      	ldr	r1, [pc, #276]	@ (8000ccc <WavOpen+0x1a8>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f009 fe0d 	bl	800a7d8 <memcmp>
 8000bbe:	4603      	mov	r3, r0
    if (memcmp(header->riff, "RIFF", 4) != 0 || memcmp(header->wave, "WAVE", 4) != 0 ||
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d103      	bne.n	8000bcc <WavOpen+0xa8>
        memcmp(header->fmt, "fmt ", 4) != 0 || header->audio_format != 1) {
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	8a9b      	ldrh	r3, [r3, #20]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d008      	beq.n	8000bde <WavOpen+0xba>
        printf("not ok PCM WAV file\r\n");
 8000bcc:	4840      	ldr	r0, [pc, #256]	@ (8000cd0 <WavOpen+0x1ac>)
 8000bce:	f009 fd23 	bl	800a618 <puts>
        f_close(&player->file);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 ff27 	bl	8009a28 <f_close>
        return 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e069      	b.n	8000cb2 <WavOpen+0x18e>
    }

    // 打印音频信息
    printf("WAV file info :\r\n");
 8000bde:	483d      	ldr	r0, [pc, #244]	@ (8000cd4 <WavOpen+0x1b0>)
 8000be0:	f009 fd1a 	bl	800a618 <puts>
    printf("  sample rate : %d Hz\r\n", header->sample_rate);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4619      	mov	r1, r3
 8000bea:	483b      	ldr	r0, [pc, #236]	@ (8000cd8 <WavOpen+0x1b4>)
 8000bec:	f009 fcac 	bl	800a548 <iprintf>
    printf("  channel count: %d\r\n", header->num_channels);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	8adb      	ldrh	r3, [r3, #22]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4839      	ldr	r0, [pc, #228]	@ (8000cdc <WavOpen+0x1b8>)
 8000bf8:	f009 fca6 	bl	800a548 <iprintf>
    printf("  bit sample : %d bits\r\n", header->bits_per_sample);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000c00:	4619      	mov	r1, r3
 8000c02:	4837      	ldr	r0, [pc, #220]	@ (8000ce0 <WavOpen+0x1bc>)
 8000c04:	f009 fca0 	bl	800a548 <iprintf>

    // 查找数据块
    uint8_t chunk_id[4];
    uint32_t chunk_size;
    while (1) {
        res = f_read(&player->file, chunk_id, 4, &bytesRead);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	f107 0114 	add.w	r1, r7, #20
 8000c12:	2204      	movs	r2, #4
 8000c14:	f008 fd4b 	bl	80096ae <f_read>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	77fb      	strb	r3, [r7, #31]
        if (res != FR_OK || bytesRead != 4) break;
 8000c1c:	7ffb      	ldrb	r3, [r7, #31]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d13f      	bne.n	8000ca2 <WavOpen+0x17e>
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d13c      	bne.n	8000ca2 <WavOpen+0x17e>

        res = f_read(&player->file, &chunk_size, 4, &bytesRead);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	f107 0110 	add.w	r1, r7, #16
 8000c32:	2204      	movs	r2, #4
 8000c34:	f008 fd3b 	bl	80096ae <f_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	77fb      	strb	r3, [r7, #31]
        if (res != FR_OK || bytesRead != 4) break;
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d12f      	bne.n	8000ca2 <WavOpen+0x17e>
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d12c      	bne.n	8000ca2 <WavOpen+0x17e>

        // 找到数据块
        if (memcmp(chunk_id, "data", 4) == 0) {
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4925      	ldr	r1, [pc, #148]	@ (8000ce4 <WavOpen+0x1c0>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f009 fdc1 	bl	800a7d8 <memcmp>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d119      	bne.n	8000c90 <WavOpen+0x16c>
            player->data_start = f_tell(&player->file);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
            player->data_size = chunk_size;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
            player->bytes_played = 0;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
            player->playing = 1;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
            printf("find data block : %ld bytes\r\n", chunk_size);
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4818      	ldr	r0, [pc, #96]	@ (8000ce8 <WavOpen+0x1c4>)
 8000c88:	f009 fc5e 	bl	800a548 <iprintf>
            return 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e010      	b.n	8000cb2 <WavOpen+0x18e>
        }

        // 跳过当前块
        f_lseek(&player->file, f_tell(&player->file) + chunk_size);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	699a      	ldr	r2, [r3, #24]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f008 feee 	bl	8009a7c <f_lseek>
        res = f_read(&player->file, chunk_id, 4, &bytesRead);
 8000ca0:	e7b2      	b.n	8000c08 <WavOpen+0xe4>
    }

    printf("未找到数据块！\r\n");
 8000ca2:	4812      	ldr	r0, [pc, #72]	@ (8000cec <WavOpen+0x1c8>)
 8000ca4:	f009 fcb8 	bl	800a618 <puts>
    f_close(&player->file);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f008 febc 	bl	8009a28 <f_close>
    return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3720      	adds	r7, #32
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800b614 	.word	0x0800b614
 8000cc0:	0800b63c 	.word	0x0800b63c
 8000cc4:	0800b664 	.word	0x0800b664
 8000cc8:	0800b66c 	.word	0x0800b66c
 8000ccc:	0800b674 	.word	0x0800b674
 8000cd0:	0800b67c 	.word	0x0800b67c
 8000cd4:	0800b694 	.word	0x0800b694
 8000cd8:	0800b6a8 	.word	0x0800b6a8
 8000cdc:	0800b6c0 	.word	0x0800b6c0
 8000ce0:	0800b6d8 	.word	0x0800b6d8
 8000ce4:	0800b6f4 	.word	0x0800b6f4
 8000ce8:	0800b6fc 	.word	0x0800b6fc
 8000cec:	0800b71c 	.word	0x0800b71c

08000cf0 <FillBuffer>:

// 填充缓冲区
uint8_t FillBuffer(AudioPlayer *player, uint8_t *buffer, uint32_t size) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
    UINT bytesRead;
    uint32_t bytesToRead = size;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	61fb      	str	r3, [r7, #28]

    // 检查是否还有数据可读取
    if (player->bytes_played >= player->data_size) {
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d301      	bcc.n	8000d14 <FillBuffer+0x24>
        return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e03b      	b.n	8000d8c <FillBuffer+0x9c>
    }

    // 计算实际可读取的字节数
    if (player->bytes_played + bytesToRead > player->data_size) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d907      	bls.n	8000d38 <FillBuffer+0x48>
        bytesToRead = player->data_size - player->bytes_played;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	61fb      	str	r3, [r7, #28]
    }

    // 读取数据
    FRESULT res = f_read(&player->file, buffer, bytesToRead, &bytesRead);
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	69fa      	ldr	r2, [r7, #28]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	f008 fcb4 	bl	80096ae <f_read>
 8000d46:	4603      	mov	r3, r0
 8000d48:	76fb      	strb	r3, [r7, #27]
    if (res != FR_OK) {
 8000d4a:	7efb      	ldrb	r3, [r7, #27]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <FillBuffer+0x6e>
        printf("读取音频数据失败！错误码: %d\r\n", res);
 8000d50:	7efb      	ldrb	r3, [r7, #27]
 8000d52:	4619      	mov	r1, r3
 8000d54:	480f      	ldr	r0, [pc, #60]	@ (8000d94 <FillBuffer+0xa4>)
 8000d56:	f009 fbf7 	bl	800a548 <iprintf>
        return 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e016      	b.n	8000d8c <FillBuffer+0x9c>
    }

    // 填充剩余空间（如果需要）
    if (bytesRead < bytesToRead) {
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d909      	bls.n	8000d7a <FillBuffer+0x8a>
        memset(buffer + bytesRead, 0, bytesToRead - bytesRead);
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	18d0      	adds	r0, r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	2100      	movs	r1, #0
 8000d76:	f009 fd3f 	bl	800a7f8 <memset>
    }

    player->bytes_played += bytesRead;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	441a      	add	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
    return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	0800b734 	.word	0x0800b734

08000d98 <WavPlay>:

// 开始播放WAV文件
void WavPlay(AudioPlayer *player) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    // 填充两个缓冲区
    if (!FillBuffer(player, player->buffer, BUFFER_SIZE)) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000da6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff9f 	bl	8000cf0 <FillBuffer>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d106      	bne.n	8000dc6 <WavPlay+0x2e>
        player->playing = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
        return;
 8000dc4:	e021      	b.n	8000e0a <WavPlay+0x72>
    }

    if (!FillBuffer(player, player->buffer2, BUFFER_SIZE)) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f603 233c 	addw	r3, r3, #2620	@ 0xa3c
 8000dcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff8c 	bl	8000cf0 <FillBuffer>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <WavPlay+0x54>
        player->playing = 0;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
        return;
 8000dea:	e00e      	b.n	8000e0a <WavPlay+0x72>
    }

    // 开始播放第一个缓冲区
    player->current_buffer = 0;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)player->buffer, BUFFER_SIZE / 2);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000dfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e02:	4619      	mov	r1, r3
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <WavPlay+0x78>)
 8000e06:	f001 fc47 	bl	8002698 <HAL_I2S_Transmit_DMA>
}
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000084 	.word	0x20000084

08000e14 <HAL_I2S_TxCpltCallback>:

// I2S传输完成回调函数
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]



    if (!player.playing) return;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e22:	f893 323d 	ldrb.w	r3, [r3, #573]	@ 0x23d
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d054      	beq.n	8000ed4 <HAL_I2S_TxCpltCallback+0xc0>

    // 切换缓冲区
    if (player.current_buffer == 0) {
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e30:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d11c      	bne.n	8000e72 <HAL_I2S_TxCpltCallback+0x5e>
        // 填充第一个缓冲区，同时播放第二个
        if (!FillBuffer(&player, player.buffer, BUFFER_SIZE)) {
 8000e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e3c:	4928      	ldr	r1, [pc, #160]	@ (8000ee0 <HAL_I2S_TxCpltCallback+0xcc>)
 8000e3e:	4827      	ldr	r0, [pc, #156]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e40:	f7ff ff56 	bl	8000cf0 <FillBuffer>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d106      	bne.n	8000e58 <HAL_I2S_TxCpltCallback+0x44>
            player.playing = 0;
 8000e4a:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
            return;
 8000e56:	e03e      	b.n	8000ed6 <HAL_I2S_TxCpltCallback+0xc2>
        }
        player.current_buffer = 1;
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
        HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)player.buffer2, BUFFER_SIZE / 2);
 8000e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e68:	491e      	ldr	r1, [pc, #120]	@ (8000ee4 <HAL_I2S_TxCpltCallback+0xd0>)
 8000e6a:	481f      	ldr	r0, [pc, #124]	@ (8000ee8 <HAL_I2S_TxCpltCallback+0xd4>)
 8000e6c:	f001 fc14 	bl	8002698 <HAL_I2S_Transmit_DMA>
 8000e70:	e01b      	b.n	8000eaa <HAL_I2S_TxCpltCallback+0x96>
    } else {
        // 填充第二个缓冲区，同时播放第一个
        if (!FillBuffer(&player, player.buffer2, BUFFER_SIZE)) {
 8000e72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e76:	491b      	ldr	r1, [pc, #108]	@ (8000ee4 <HAL_I2S_TxCpltCallback+0xd0>)
 8000e78:	4818      	ldr	r0, [pc, #96]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e7a:	f7ff ff39 	bl	8000cf0 <FillBuffer>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <HAL_I2S_TxCpltCallback+0x7e>
            player.playing = 0;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
            return;
 8000e90:	e021      	b.n	8000ed6 <HAL_I2S_TxCpltCallback+0xc2>
        }
        player.current_buffer = 0;
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
        HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)player.buffer, BUFFER_SIZE / 2);
 8000e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea2:	490f      	ldr	r1, [pc, #60]	@ (8000ee0 <HAL_I2S_TxCpltCallback+0xcc>)
 8000ea4:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <HAL_I2S_TxCpltCallback+0xd4>)
 8000ea6:	f001 fbf7 	bl	8002698 <HAL_I2S_Transmit_DMA>
    }

    // 检查是否播放完成
    if (player.bytes_played >= player.data_size) {
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000eac:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000eb2:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d30d      	bcc.n	8000ed6 <HAL_I2S_TxCpltCallback+0xc2>
        printf("play complete\r\n");
 8000eba:	480c      	ldr	r0, [pc, #48]	@ (8000eec <HAL_I2S_TxCpltCallback+0xd8>)
 8000ebc:	f009 fbac 	bl	800a618 <puts>
        player.playing = 0;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
        f_close(&player.file);
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <HAL_I2S_TxCpltCallback+0xc8>)
 8000ece:	f008 fdab 	bl	8009a28 <f_close>
 8000ed2:	e000      	b.n	8000ed6 <HAL_I2S_TxCpltCallback+0xc2>
    if (!player.playing) return;
 8000ed4:	bf00      	nop
    }
}
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000012c 	.word	0x2000012c
 8000ee0:	20000368 	.word	0x20000368
 8000ee4:	20000b68 	.word	0x20000b68
 8000ee8:	20000084 	.word	0x20000084
 8000eec:	0800b760 	.word	0x0800b760

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fb95 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f833 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f7ff fc99 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f7ff fb4b 	bl	800059c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000f06:	f000 f89d 	bl	8001044 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000f0a:	f000 faef 	bl	80014ec <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f0e:	f005 fb09 	bl	8006524 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000f12:	f7ff fcf5 	bl	8000900 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  printf("system init success，read play WAV file...\r\n");
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <main+0x60>)
 8000f18:	f009 fb7e 	bl	800a618 <puts>
  initFileManager();
 8000f1c:	f7ff fb7c 	bl	8000618 <initFileManager>

  // 打开WAV文件并开始播放
  if (WavOpen("1.wav", &wavHeader, &player)) {
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <main+0x64>)
 8000f24:	4619      	mov	r1, r3
 8000f26:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <main+0x68>)
 8000f28:	f7ff fdfc 	bl	8000b24 <WavOpen>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <main+0x50>
      printf("start play WAV file ...\r\n");
 8000f32:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <main+0x6c>)
 8000f34:	f009 fb70 	bl	800a618 <puts>
      WavPlay(&player);
 8000f38:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <main+0x64>)
 8000f3a:	f7ff ff2d 	bl	8000d98 <WavPlay>
 8000f3e:	e002      	b.n	8000f46 <main+0x56>
  } else {
      printf("cant play WAV file \r\n");
 8000f40:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <main+0x70>)
 8000f42:	f009 fb69 	bl	800a618 <puts>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 可以在这里添加其他处理逻辑
    HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f000 fbde 	bl	8001708 <HAL_Delay>
 8000f4c:	e7fb      	b.n	8000f46 <main+0x56>
 8000f4e:	bf00      	nop
 8000f50:	0800b770 	.word	0x0800b770
 8000f54:	2000012c 	.word	0x2000012c
 8000f58:	0800b7a0 	.word	0x0800b7a0
 8000f5c:	0800b7a8 	.word	0x0800b7a8
 8000f60:	0800b7c4 	.word	0x0800b7c4

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	@ 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f009 fc40 	bl	800a7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fd8:	23a8      	movs	r3, #168	@ 0xa8
 8000fda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 ffb9 	bl	8002f60 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff4:	f000 f820 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001004:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2105      	movs	r1, #5
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fa1a 	bl	8003450 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001022:	f000 f809 	bl	8001038 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	@ 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 800104a:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <MX_SDIO_SD_Init+0x44>)
 800104c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 8001062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001066:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 8001070:	2205      	movs	r2, #5
 8001072:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <MX_SDIO_SD_Init+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	2000136c 	.word	0x2000136c
 8001088:	40012c00 	.word	0x40012c00

0800108c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a68      	ldr	r2, [pc, #416]	@ (800124c <HAL_SD_MspInit+0x1c0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f040 80c9 	bne.w	8001242 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	4b66      	ldr	r3, [pc, #408]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b8:	4a65      	ldr	r2, [pc, #404]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010be:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c0:	4b63      	ldr	r3, [pc, #396]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6313      	str	r3, [r2, #48]	@ 0x30
 80010dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b58      	ldr	r3, [pc, #352]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	4a57      	ldr	r2, [pc, #348]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f8:	4b55      	ldr	r3, [pc, #340]	@ (8001250 <HAL_SD_MspInit+0x1c4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001104:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001108:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001116:	230c      	movs	r3, #12
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	484c      	ldr	r0, [pc, #304]	@ (8001254 <HAL_SD_MspInit+0x1c8>)
 8001122:	f000 ffc5 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001126:	2304      	movs	r3, #4
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001136:	230c      	movs	r3, #12
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4845      	ldr	r0, [pc, #276]	@ (8001258 <HAL_SD_MspInit+0x1cc>)
 8001142:	f000 ffb5 	bl	80020b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001146:	4b45      	ldr	r3, [pc, #276]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 8001148:	4a45      	ldr	r2, [pc, #276]	@ (8001260 <HAL_SD_MspInit+0x1d4>)
 800114a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800114c:	4b43      	ldr	r3, [pc, #268]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 800114e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001152:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001154:	4b41      	ldr	r3, [pc, #260]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800115a:	4b40      	ldr	r3, [pc, #256]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001160:	4b3e      	ldr	r3, [pc, #248]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 8001162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001166:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001168:	4b3c      	ldr	r3, [pc, #240]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 800116a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800116e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 8001172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001176:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 800117a:	2220      	movs	r2, #32
 800117c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800117e:	4b37      	ldr	r3, [pc, #220]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001184:	4b35      	ldr	r3, [pc, #212]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 8001186:	2204      	movs	r2, #4
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800118a:	4b34      	ldr	r3, [pc, #208]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 800118c:	2203      	movs	r2, #3
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 8001192:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001198:	4b30      	ldr	r3, [pc, #192]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 800119a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800119e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80011a0:	482e      	ldr	r0, [pc, #184]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 80011a2:	f000 fbe7 	bl	8001974 <HAL_DMA_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80011ac:	f7ff ff44 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a2a      	ldr	r2, [pc, #168]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 80011b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80011b6:	4a29      	ldr	r2, [pc, #164]	@ (800125c <HAL_SD_MspInit+0x1d0>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011be:	4a2a      	ldr	r2, [pc, #168]	@ (8001268 <HAL_SD_MspInit+0x1dc>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011c8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011cc:	2240      	movs	r2, #64	@ 0x40
 80011ce:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d6:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011dc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011e4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ec:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011f0:	2220      	movs	r2, #32
 80011f2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 80011fc:	2204      	movs	r2, #4
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 8001202:	2203      	movs	r2, #3
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 8001208:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 8001210:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001214:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001216:	4813      	ldr	r0, [pc, #76]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 8001218:	f000 fbac 	bl	8001974 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001222:	f7ff ff09 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 800122a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <HAL_SD_MspInit+0x1d8>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2031      	movs	r0, #49	@ 0x31
 8001238:	f000 fb65 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800123c:	2031      	movs	r0, #49	@ 0x31
 800123e:	f000 fb7e 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012c00 	.word	0x40012c00
 8001250:	40023800 	.word	0x40023800
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	200013f0 	.word	0x200013f0
 8001260:	40026458 	.word	0x40026458
 8001264:	20001450 	.word	0x20001450
 8001268:	400264a0 	.word	0x400264a0

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	@ 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f9d9 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <DMA1_Stream4_IRQHandler+0x10>)
 8001322:	f000 fc4f 	bl	8001bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000cc 	.word	0x200000cc

08001330 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <SPI2_IRQHandler+0x10>)
 8001336:	f001 fa53 	bl	80027e0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000084 	.word	0x20000084

08001344 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <SDIO_IRQHandler+0x10>)
 800134a:	f002 fe13 	bl	8003f74 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000136c 	.word	0x2000136c

08001358 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <DMA2_Stream3_IRQHandler+0x10>)
 800135e:	f000 fc31 	bl	8001bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200013f0 	.word	0x200013f0

0800136c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <DMA2_Stream6_IRQHandler+0x10>)
 8001372:	f000 fc27 	bl	8001bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20001450 	.word	0x20001450

08001380 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00a      	b.n	80013a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001392:	f7ff fbb1 	bl	8000af8 <__io_getchar>
 8001396:	4601      	mov	r1, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	b2ca      	uxtb	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf0      	blt.n	8001392 <_read+0x12>
  }

  return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e009      	b.n	80013e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fb7d 	bl	8000ad4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf1      	blt.n	80013cc <_write+0x12>
  }
  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141a:	605a      	str	r2, [r3, #4]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_isatty>:

int _isatty(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f009 fa02 	bl	800a894 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20020000 	.word	0x20020000
 80014bc:	00006000 	.word	0x00006000
 80014c0:	200014b0 	.word	0x200014b0
 80014c4:	200018c8 	.word	0x200018c8

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	@ (800153c <MX_USART1_UART_Init+0x50>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	@ (8001538 <MX_USART1_UART_Init+0x4c>)
 8001524:	f003 fde8 	bl	80050f8 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800152e:	f7ff fd83 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200014b4 	.word	0x200014b4
 800153c:	40011000 	.word	0x40011000

08001540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_UART_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12c      	bne.n	80015bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 800156c:	f043 0310 	orr.w	r3, r3, #16
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800159a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ac:	2307      	movs	r3, #7
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <HAL_UART_MspInit+0x8c>)
 80015b8:	f000 fd7a 	bl	80020b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40011000 	.word	0x40011000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001608 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015d4:	f7ff ff78 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	@ (8001610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	@ (800161c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f009 f94f 	bl	800a8a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fc75 	bl	8000ef0 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001614:	08036464 	.word	0x08036464
  ldr r2, =_sbss
 8001618:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800161c:	200018c4 	.word	0x200018c4

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <HAL_Init+0x40>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <HAL_Init+0x40>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_Init+0x40>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f94f 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	200f      	movs	r0, #15
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fe08 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f967 	bl	800195a <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f92f 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	200014fc 	.word	0x200014fc

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200014fc 	.word	0x200014fc

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	@ (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	@ (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	@ 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff3e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff31 	bl	80017b4 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff feb6 	bl	80016f0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e099      	b.n	8001ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	e00f      	b.n	80019d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fe9d 	bl	80016f0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d908      	bls.n	80019d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e078      	b.n	8001ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e8      	bne.n	80019b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <HAL_DMA_Init+0x158>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	4313      	orrs	r3, r2
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
 8001a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d117      	bne.n	8001a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fa9d 	bl	8001fb8 <DMA_CheckFifoParam>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2240      	movs	r2, #64	@ 0x40
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a92:	2301      	movs	r3, #1
 8001a94:	e016      	b.n	8001ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa54 	bl	8001f4c <DMA_CalcBaseAndBitshift>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aac:	223f      	movs	r2, #63	@ 0x3f
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	f010803f 	.word	0xf010803f

08001ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Start_IT+0x26>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e040      	b.n	8001b78 <HAL_DMA_Start_IT+0xa8>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12f      	bne.n	8001b6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f9e6 	bl	8001ef0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b28:	223f      	movs	r2, #63	@ 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0216 	orr.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0208 	orr.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e005      	b.n	8001b76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d004      	beq.n	8001b9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00c      	b.n	8001bb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bd0:	4b8e      	ldr	r3, [pc, #568]	@ (8001e0c <HAL_DMA_IRQHandler+0x248>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a8e      	ldr	r2, [pc, #568]	@ (8001e10 <HAL_DMA_IRQHandler+0x24c>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0a9b      	lsrs	r3, r3, #10
 8001bdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bee:	2208      	movs	r2, #8
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01a      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0204 	bic.w	r2, r2, #4
 8001c16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c34:	2201      	movs	r2, #1
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2201      	movs	r2, #1
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5e:	f043 0202 	orr.w	r2, r3, #2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c88:	2204      	movs	r2, #4
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c94:	f043 0204 	orr.w	r2, r3, #4
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d043      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d03c      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d018      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d108      	bne.n	8001cf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d024      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
 8001cf2:	e01f      	b.n	8001d34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
 8001d04:	e016      	b.n	8001d34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0208 	bic.w	r2, r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	2220      	movs	r2, #32
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 808f 	beq.w	8001e64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8087 	beq.w	8001e64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d136      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0216 	bic.w	r2, r2, #22
 8001d7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <HAL_DMA_IRQHandler+0x1da>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0208 	bic.w	r2, r2, #8
 8001dac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	223f      	movs	r2, #63	@ 0x3f
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d07e      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
        }
        return;
 8001dda:	e079      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01d      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10d      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d031      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
 8001e08:	e02c      	b.n	8001e64 <HAL_DMA_IRQHandler+0x2a0>
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d023      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
 8001e24:	e01e      	b.n	8001e64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10f      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0210 	bic.w	r2, r2, #16
 8001e42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d032      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d022      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2205      	movs	r2, #5
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d307      	bcc.n	8001eac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f2      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x2cc>
 8001eaa:	e000      	b.n	8001eae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001eac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
 8001ece:	e000      	b.n	8001ed2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ed0:	bf00      	nop
    }
  }
}
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b40      	cmp	r3, #64	@ 0x40
 8001f1c:	d108      	bne.n	8001f30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f2e:	e007      	b.n	8001f40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	60da      	str	r2, [r3, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3b10      	subs	r3, #16
 8001f5c:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f66:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d909      	bls.n	8001f8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	1d1a      	adds	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f8c:	e007      	b.n	8001f9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	aaaaaaab 	.word	0xaaaaaaab
 8001fb4:	0800b83c 	.word	0x0800b83c

08001fb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11f      	bne.n	8002012 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d856      	bhi.n	8002086 <DMA_CheckFifoParam+0xce>
 8001fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe0 <DMA_CheckFifoParam+0x28>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08002003 	.word	0x08002003
 8001fe8:	08001ff1 	.word	0x08001ff1
 8001fec:	08002087 	.word	0x08002087
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d046      	beq.n	800208a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002000:	e043      	b.n	800208a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800200a:	d140      	bne.n	800208e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002010:	e03d      	b.n	800208e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800201a:	d121      	bne.n	8002060 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d837      	bhi.n	8002092 <DMA_CheckFifoParam+0xda>
 8002022:	a201      	add	r2, pc, #4	@ (adr r2, 8002028 <DMA_CheckFifoParam+0x70>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002039 	.word	0x08002039
 800202c:	0800203f 	.word	0x0800203f
 8002030:	08002039 	.word	0x08002039
 8002034:	08002051 	.word	0x08002051
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      break;
 800203c:	e030      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d025      	beq.n	8002096 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204e:	e022      	b.n	8002096 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002054:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002058:	d11f      	bne.n	800209a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800205e:	e01c      	b.n	800209a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d903      	bls.n	800206e <DMA_CheckFifoParam+0xb6>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d003      	beq.n	8002074 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800206c:	e018      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
      break;
 8002072:	e015      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
      break;
 8002084:	e00b      	b.n	800209e <DMA_CheckFifoParam+0xe6>
      break;
 8002086:	bf00      	nop
 8002088:	e00a      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
 800208c:	e008      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
 8002090:	e006      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
 8002094:	e004      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e002      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
    }
  } 
  
  return status; 
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e16b      	b.n	80023a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 815a 	bne.w	800239e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d005      	beq.n	8002102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d017      	beq.n	80021a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80b4 	beq.w	800239e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b60      	ldr	r3, [pc, #384]	@ (80023bc <HAL_GPIO_Init+0x30c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a5f      	ldr	r2, [pc, #380]	@ (80023bc <HAL_GPIO_Init+0x30c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b5d      	ldr	r3, [pc, #372]	@ (80023bc <HAL_GPIO_Init+0x30c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a5b      	ldr	r2, [pc, #364]	@ (80023c0 <HAL_GPIO_Init+0x310>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a52      	ldr	r2, [pc, #328]	@ (80023c4 <HAL_GPIO_Init+0x314>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a51      	ldr	r2, [pc, #324]	@ (80023c8 <HAL_GPIO_Init+0x318>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x222>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a50      	ldr	r2, [pc, #320]	@ (80023cc <HAL_GPIO_Init+0x31c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x21e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4f      	ldr	r2, [pc, #316]	@ (80023d0 <HAL_GPIO_Init+0x320>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x21a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4e      	ldr	r2, [pc, #312]	@ (80023d4 <HAL_GPIO_Init+0x324>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x216>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4d      	ldr	r2, [pc, #308]	@ (80023d8 <HAL_GPIO_Init+0x328>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x212>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	@ (80023dc <HAL_GPIO_Init+0x32c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4b      	ldr	r2, [pc, #300]	@ (80023e0 <HAL_GPIO_Init+0x330>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x20a>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e00e      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ba:	2308      	movs	r3, #8
 80022bc:	e00c      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022be:	2306      	movs	r3, #6
 80022c0:	e00a      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022c2:	2305      	movs	r3, #5
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4935      	ldr	r1, [pc, #212]	@ (80023c0 <HAL_GPIO_Init+0x310>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f6:	4b3b      	ldr	r3, [pc, #236]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231a:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002320:	4b30      	ldr	r3, [pc, #192]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002344:	4a27      	ldr	r2, [pc, #156]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234a:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002398:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f ae90 	bls.w	80020cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40021c00 	.word	0x40021c00
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e001      	b.n	800240a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e128      	b.n	800267c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a90      	ldr	r2, [pc, #576]	@ (8002684 <HAL_I2S_Init+0x26c>)
 8002442:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7fe fa89 	bl	800095c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002460:	f023 030f 	bic.w	r3, r3, #15
 8002464:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d060      	beq.n	8002538 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800247e:	2310      	movs	r3, #16
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e001      	b.n	8002488 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b20      	cmp	r3, #32
 800248e:	d802      	bhi.n	8002496 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002496:	2001      	movs	r0, #1
 8002498:	f001 fa9c 	bl	80039d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800249c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024a6:	d125      	bne.n	80024f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	3305      	adds	r3, #5
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e01f      	b.n	8002512 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	461a      	mov	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	3305      	adds	r3, #5
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	e00e      	b.n	8002512 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	461a      	mov	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	3305      	adds	r3, #5
 8002510:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4a5c      	ldr	r2, [pc, #368]	@ (8002688 <HAL_I2S_Init+0x270>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	08db      	lsrs	r3, r3, #3
 800251c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	e003      	b.n	8002540 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002538:	2302      	movs	r3, #2
 800253a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d902      	bls.n	800254c <HAL_I2S_Init+0x134>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2bff      	cmp	r3, #255	@ 0xff
 800254a:	d907      	bls.n	800255c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002550:	f043 0210 	orr.w	r2, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e08f      	b.n	800267c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	ea42 0103 	orr.w	r1, r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	430a      	orrs	r2, r1
 800256e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800257a:	f023 030f 	bic.w	r3, r3, #15
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6851      	ldr	r1, [r2, #4]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6892      	ldr	r2, [r2, #8]
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68d2      	ldr	r2, [r2, #12]
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6992      	ldr	r2, [r2, #24]
 8002592:	430a      	orrs	r2, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800259e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d161      	bne.n	800266c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a38      	ldr	r2, [pc, #224]	@ (800268c <HAL_I2S_Init+0x274>)
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a37      	ldr	r2, [pc, #220]	@ (8002690 <HAL_I2S_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_I2S_Init+0x1a4>
 80025b8:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <HAL_I2S_Init+0x27c>)
 80025ba:	e001      	b.n	80025c0 <HAL_I2S_Init+0x1a8>
 80025bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4932      	ldr	r1, [pc, #200]	@ (8002690 <HAL_I2S_Init+0x278>)
 80025c8:	428a      	cmp	r2, r1
 80025ca:	d101      	bne.n	80025d0 <HAL_I2S_Init+0x1b8>
 80025cc:	4a31      	ldr	r2, [pc, #196]	@ (8002694 <HAL_I2S_Init+0x27c>)
 80025ce:	e001      	b.n	80025d4 <HAL_I2S_Init+0x1bc>
 80025d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80025d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025d8:	f023 030f 	bic.w	r3, r3, #15
 80025dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <HAL_I2S_Init+0x278>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_I2S_Init+0x1d4>
 80025e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002694 <HAL_I2S_Init+0x27c>)
 80025ea:	e001      	b.n	80025f0 <HAL_I2S_Init+0x1d8>
 80025ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025f0:	2202      	movs	r2, #2
 80025f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a25      	ldr	r2, [pc, #148]	@ (8002690 <HAL_I2S_Init+0x278>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_I2S_Init+0x1ea>
 80025fe:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_I2S_Init+0x27c>)
 8002600:	e001      	b.n	8002606 <HAL_I2S_Init+0x1ee>
 8002602:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002612:	d003      	beq.n	800261c <HAL_I2S_Init+0x204>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800261c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e001      	b.n	8002628 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002632:	4313      	orrs	r3, r2
 8002634:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800263c:	4313      	orrs	r3, r2
 800263e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002646:	4313      	orrs	r3, r2
 8002648:	b29a      	uxth	r2, r3
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	4313      	orrs	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002654:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <HAL_I2S_Init+0x278>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_I2S_Init+0x24c>
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_I2S_Init+0x27c>)
 8002662:	e001      	b.n	8002668 <HAL_I2S_Init+0x250>
 8002664:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002668:	897a      	ldrh	r2, [r7, #10]
 800266a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	08002999 	.word	0x08002999
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	08002aad 	.word	0x08002aad
 8002690:	40003800 	.word	0x40003800
 8002694:	40003400 	.word	0x40003400

08002698 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_I2S_Transmit_DMA+0x1a>
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e08a      	b.n	80027cc <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d001      	beq.n	80026c6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	e082      	b.n	80027cc <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_I2S_Transmit_DMA+0x3e>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e07a      	b.n	80027cc <HAL_I2S_Transmit_DMA+0x134>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d002      	beq.n	800270a <HAL_I2S_Transmit_DMA+0x72>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10a      	bne.n	8002720 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800271e:	e005      	b.n	800272c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	4a28      	ldr	r2, [pc, #160]	@ (80027d4 <HAL_I2S_Transmit_DMA+0x13c>)
 8002732:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002738:	4a27      	ldr	r2, [pc, #156]	@ (80027d8 <HAL_I2S_Transmit_DMA+0x140>)
 800273a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <HAL_I2S_Transmit_DMA+0x144>)
 8002742:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800274c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002754:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800275c:	f7ff f9b8 	bl	8001ad0 <HAL_DMA_Start_IT>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00f      	beq.n	8002786 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f043 0208 	orr.w	r2, r3, #8
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e022      	b.n	80027cc <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0202 	orr.w	r2, r2, #2
 80027aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027c8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	08002877 	.word	0x08002877
 80027d8:	08002835 	.word	0x08002835
 80027dc:	08002893 	.word	0x08002893

080027e0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0202 	bic.w	r2, r2, #2
 8002858:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7fe fad3 	bl	8000e14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff ffb7 	bl	80027f8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0203 	bic.w	r2, r2, #3
 80028ae:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	f043 0208 	orr.w	r2, r3, #8
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff ffa5 	bl	8002820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	1c9a      	adds	r2, r3, #2
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10e      	bne.n	8002932 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002922:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fe fa71 	bl	8000e14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	b292      	uxth	r2, r2
 800294e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	1c9a      	adds	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10e      	bne.n	8002990 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002980:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff3e 	bl	800280c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d13a      	bne.n	8002a2a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d109      	bne.n	80029d2 <I2S_IRQHandler+0x3a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	d102      	bne.n	80029d2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ffb4 	bl	800293a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d8:	2b40      	cmp	r3, #64	@ 0x40
 80029da:	d126      	bne.n	8002a2a <I2S_IRQHandler+0x92>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d11f      	bne.n	8002a2a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029f8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fefb 	bl	8002820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d136      	bne.n	8002aa4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d109      	bne.n	8002a54 <I2S_IRQHandler+0xbc>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4a:	2b80      	cmp	r3, #128	@ 0x80
 8002a4c:	d102      	bne.n	8002a54 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ff45 	bl	80028de <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d122      	bne.n	8002aa4 <I2S_IRQHandler+0x10c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d11b      	bne.n	8002aa4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a7a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff febe 	bl	8002820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a92      	ldr	r2, [pc, #584]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002ac6:	4b92      	ldr	r3, [pc, #584]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ac8:	e001      	b.n	8002ace <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002aca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a8b      	ldr	r2, [pc, #556]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ae4:	4b8a      	ldr	r3, [pc, #552]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ae6:	e001      	b.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af8:	d004      	beq.n	8002b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 8099 	bne.w	8002c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f925 	bl	8002d68 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9c8 	bl	8002ec8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b40      	cmp	r3, #64	@ 0x40
 8002b40:	d13a      	bne.n	8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d035      	beq.n	8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002b56:	4b6e      	ldr	r3, [pc, #440]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b58:	e001      	b.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002b5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4969      	ldr	r1, [pc, #420]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b66:	428b      	cmp	r3, r1
 8002b68:	d101      	bne.n	8002b6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002b6a:	4b69      	ldr	r3, [pc, #420]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b6c:	e001      	b.n	8002b72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002b6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b76:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f043 0202 	orr.w	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fe34 	bl	8002820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	f040 80c3 	bne.w	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80bd 	beq.w	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a49      	ldr	r2, [pc, #292]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002bea:	4b49      	ldr	r3, [pc, #292]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4944      	ldr	r1, [pc, #272]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bfa:	428b      	cmp	r3, r1
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002bfe:	4b44      	ldr	r3, [pc, #272]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c00:	e001      	b.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c0a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fdf6 	bl	8002820 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c34:	e089      	b.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d107      	bne.n	8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8be 	bl	8002dcc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8fd 	bl	8002e64 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c70:	2b40      	cmp	r3, #64	@ 0x40
 8002c72:	d12f      	bne.n	8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02a      	beq.n	8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c8c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002c98:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c9a:	e001      	b.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002c9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4919      	ldr	r1, [pc, #100]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ca8:	428b      	cmp	r3, r1
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002cac:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cae:	e001      	b.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002cb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cb4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002cb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f043 0202 	orr.w	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fda6 	bl	8002820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d136      	bne.n	8002d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d031      	beq.n	8002d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cf4:	e001      	b.n	8002cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002cf6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4902      	ldr	r1, [pc, #8]	@ (8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d02:	428b      	cmp	r3, r1
 8002d04:	d106      	bne.n	8002d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002d06:	4b02      	ldr	r3, [pc, #8]	@ (8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d08:	e006      	b.n	8002d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002d0a:	bf00      	nop
 8002d0c:	40003800 	.word	0x40003800
 8002d10:	40003400 	.word	0x40003400
 8002d14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d1c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d2c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fd6c 	bl	8002820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d48:	e000      	b.n	8002d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d4a:	bf00      	nop
}
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	1c99      	adds	r1, r3, #2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6251      	str	r1, [r2, #36]	@ 0x24
 8002d7a:	881a      	ldrh	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002da8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ffc9 	bl	8002d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c99      	adds	r1, r3, #2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6251      	str	r1, [r2, #36]	@ 0x24
 8002dde:	8819      	ldrh	r1, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <I2SEx_TxISR_I2SExt+0x90>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <I2SEx_TxISR_I2SExt+0x22>
 8002dea:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <I2SEx_TxISR_I2SExt+0x94>)
 8002dec:	e001      	b.n	8002df2 <I2SEx_TxISR_I2SExt+0x26>
 8002dee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002df2:	460a      	mov	r2, r1
 8002df4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d121      	bne.n	8002e52 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <I2SEx_TxISR_I2SExt+0x90>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <I2SEx_TxISR_I2SExt+0x50>
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <I2SEx_TxISR_I2SExt+0x94>)
 8002e1a:	e001      	b.n	8002e20 <I2SEx_TxISR_I2SExt+0x54>
 8002e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	490d      	ldr	r1, [pc, #52]	@ (8002e5c <I2SEx_TxISR_I2SExt+0x90>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d101      	bne.n	8002e30 <I2SEx_TxISR_I2SExt+0x64>
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <I2SEx_TxISR_I2SExt+0x94>)
 8002e2e:	e001      	b.n	8002e34 <I2SEx_TxISR_I2SExt+0x68>
 8002e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff81 	bl	8002d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40003800 	.word	0x40003800
 8002e60:	40003400 	.word	0x40003400

08002e64 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68d8      	ldr	r0, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	1c99      	adds	r1, r3, #2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002e7c:	b282      	uxth	r2, r0
 8002e7e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d113      	bne.n	8002ec0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ea6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff4a 	bl	8002d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	@ (8002f58 <I2SEx_RxISR_I2SExt+0x90>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <I2SEx_RxISR_I2SExt+0x16>
 8002eda:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <I2SEx_RxISR_I2SExt+0x94>)
 8002edc:	e001      	b.n	8002ee2 <I2SEx_RxISR_I2SExt+0x1a>
 8002ede:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ee2:	68d8      	ldr	r0, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	1c99      	adds	r1, r3, #2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002eee:	b282      	uxth	r2, r0
 8002ef0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d121      	bne.n	8002f4e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <I2SEx_RxISR_I2SExt+0x90>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <I2SEx_RxISR_I2SExt+0x50>
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <I2SEx_RxISR_I2SExt+0x94>)
 8002f16:	e001      	b.n	8002f1c <I2SEx_RxISR_I2SExt+0x54>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	490d      	ldr	r1, [pc, #52]	@ (8002f58 <I2SEx_RxISR_I2SExt+0x90>)
 8002f24:	428b      	cmp	r3, r1
 8002f26:	d101      	bne.n	8002f2c <I2SEx_RxISR_I2SExt+0x64>
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <I2SEx_RxISR_I2SExt+0x94>)
 8002f2a:	e001      	b.n	8002f30 <I2SEx_RxISR_I2SExt+0x68>
 8002f2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f34:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff03 	bl	8002d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40003800 	.word	0x40003800
 8002f5c:	40003400 	.word	0x40003400

08002f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e267      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d075      	beq.n	800306a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f7e:	4b88      	ldr	r3, [pc, #544]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d00c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8a:	4b85      	ldr	r3, [pc, #532]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d112      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f96:	4b82      	ldr	r3, [pc, #520]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fa2:	d10b      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d05b      	beq.n	8003068 <HAL_RCC_OscConfig+0x108>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d157      	bne.n	8003068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e242      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x74>
 8002fc6:	4b76      	ldr	r3, [pc, #472]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a75      	ldr	r2, [pc, #468]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e01d      	b.n	8003010 <HAL_RCC_OscConfig+0xb0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x98>
 8002fde:	4b70      	ldr	r3, [pc, #448]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b6d      	ldr	r3, [pc, #436]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6c      	ldr	r2, [pc, #432]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0xb0>
 8002ff8:	4b69      	ldr	r3, [pc, #420]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a68      	ldr	r2, [pc, #416]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b66      	ldr	r3, [pc, #408]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a65      	ldr	r2, [pc, #404]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 800300a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800300e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fb6a 	bl	80016f0 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fb66 	bl	80016f0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	@ 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e207      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	4b5b      	ldr	r3, [pc, #364]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0xc0>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fb56 	bl	80016f0 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fb52 	bl	80016f0 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	@ 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1f3      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	4b51      	ldr	r3, [pc, #324]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0xe8>
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d063      	beq.n	800313e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003076:	4b4a      	ldr	r3, [pc, #296]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003082:	4b47      	ldr	r3, [pc, #284]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800308a:	2b08      	cmp	r3, #8
 800308c:	d11c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308e:	4b44      	ldr	r3, [pc, #272]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d116      	bne.n	80030c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	4b41      	ldr	r3, [pc, #260]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_RCC_OscConfig+0x152>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e1c7      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b2:	4b3b      	ldr	r3, [pc, #236]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4937      	ldr	r1, [pc, #220]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	e03a      	b.n	800313e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d0:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <HAL_RCC_OscConfig+0x244>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe fb0b 	bl	80016f0 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030de:	f7fe fb07 	bl	80016f0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e1a8      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f0:	4b2b      	ldr	r3, [pc, #172]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fc:	4b28      	ldr	r3, [pc, #160]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4925      	ldr	r1, [pc, #148]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
 8003110:	e015      	b.n	800313e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003112:	4b24      	ldr	r3, [pc, #144]	@ (80031a4 <HAL_RCC_OscConfig+0x244>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe faea 	bl	80016f0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003120:	f7fe fae6 	bl	80016f0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e187      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003132:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d036      	beq.n	80031b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d016      	beq.n	8003180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <HAL_RCC_OscConfig+0x248>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe faca 	bl	80016f0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003160:	f7fe fac6 	bl	80016f0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e167      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_RCC_OscConfig+0x240>)
 8003174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x200>
 800317e:	e01b      	b.n	80031b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003180:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <HAL_RCC_OscConfig+0x248>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fe fab3 	bl	80016f0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	e00e      	b.n	80031ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe faaf 	bl	80016f0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d907      	bls.n	80031ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e150      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
 80031a0:	40023800 	.word	0x40023800
 80031a4:	42470000 	.word	0x42470000
 80031a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	4b88      	ldr	r3, [pc, #544]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ea      	bne.n	800318e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8097 	beq.w	80032f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ca:	4b81      	ldr	r3, [pc, #516]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	4b7d      	ldr	r3, [pc, #500]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	4a7c      	ldr	r2, [pc, #496]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e6:	4b7a      	ldr	r3, [pc, #488]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f2:	2301      	movs	r3, #1
 80031f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b77      	ldr	r3, [pc, #476]	@ (80033d4 <HAL_RCC_OscConfig+0x474>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d118      	bne.n	8003234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003202:	4b74      	ldr	r3, [pc, #464]	@ (80033d4 <HAL_RCC_OscConfig+0x474>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a73      	ldr	r2, [pc, #460]	@ (80033d4 <HAL_RCC_OscConfig+0x474>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fe fa6f 	bl	80016f0 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fe fa6b 	bl	80016f0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e10c      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b6a      	ldr	r3, [pc, #424]	@ (80033d4 <HAL_RCC_OscConfig+0x474>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <HAL_RCC_OscConfig+0x2ea>
 800323c:	4b64      	ldr	r3, [pc, #400]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003240:	4a63      	ldr	r2, [pc, #396]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6713      	str	r3, [r2, #112]	@ 0x70
 8003248:	e01c      	b.n	8003284 <HAL_RCC_OscConfig+0x324>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b05      	cmp	r3, #5
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x30c>
 8003252:	4b5f      	ldr	r3, [pc, #380]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	4a5e      	ldr	r2, [pc, #376]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6713      	str	r3, [r2, #112]	@ 0x70
 800325e:	4b5c      	ldr	r3, [pc, #368]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	4a5b      	ldr	r2, [pc, #364]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	@ 0x70
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0x324>
 800326c:	4b58      	ldr	r3, [pc, #352]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	4a57      	ldr	r2, [pc, #348]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	@ 0x70
 8003278:	4b55      	ldr	r3, [pc, #340]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	4a54      	ldr	r2, [pc, #336]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 800327e:	f023 0304 	bic.w	r3, r3, #4
 8003282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fe fa30 	bl	80016f0 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fe fa2c 	bl	80016f0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0cb      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	4b49      	ldr	r3, [pc, #292]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ee      	beq.n	8003294 <HAL_RCC_OscConfig+0x334>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b8:	f7fe fa1a 	bl	80016f0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fe fa16 	bl	80016f0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0b5      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d6:	4b3e      	ldr	r3, [pc, #248]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ee      	bne.n	80032c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e8:	4b39      	ldr	r3, [pc, #228]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	4a38      	ldr	r2, [pc, #224]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a1 	beq.w	8003440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032fe:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b08      	cmp	r3, #8
 8003308:	d05c      	beq.n	80033c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d141      	bne.n	8003396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <HAL_RCC_OscConfig+0x478>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe f9ea 	bl	80016f0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe f9e6 	bl	80016f0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e087      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	4b27      	ldr	r3, [pc, #156]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	3b01      	subs	r3, #1
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	061b      	lsls	r3, r3, #24
 8003362:	491b      	ldr	r1, [pc, #108]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003368:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <HAL_RCC_OscConfig+0x478>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe f9bf 	bl	80016f0 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe f9bb 	bl	80016f0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e05c      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003388:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x416>
 8003394:	e054      	b.n	8003440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <HAL_RCC_OscConfig+0x478>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe f9a8 	bl	80016f0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe f9a4 	bl	80016f0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e045      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x444>
 80033c2:	e03d      	b.n	8003440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e038      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40007000 	.word	0x40007000
 80033d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033dc:	4b1b      	ldr	r3, [pc, #108]	@ (800344c <HAL_RCC_OscConfig+0x4ec>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d028      	beq.n	800343c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d121      	bne.n	800343c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d11a      	bne.n	800343c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003414:	4293      	cmp	r3, r2
 8003416:	d111      	bne.n	800343c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	3b01      	subs	r3, #1
 8003426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d107      	bne.n	800343c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0cc      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b68      	ldr	r3, [pc, #416]	@ (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d90c      	bls.n	800348c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b65      	ldr	r3, [pc, #404]	@ (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b63      	ldr	r3, [pc, #396]	@ (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0b8      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a4:	4b59      	ldr	r3, [pc, #356]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a58      	ldr	r2, [pc, #352]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034bc:	4b53      	ldr	r3, [pc, #332]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a52      	ldr	r2, [pc, #328]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b50      	ldr	r3, [pc, #320]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	494d      	ldr	r1, [pc, #308]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d044      	beq.n	8003570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b47      	ldr	r3, [pc, #284]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d119      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e07f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d003      	beq.n	800350e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	2b03      	cmp	r3, #3
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b3f      	ldr	r3, [pc, #252]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	4b3b      	ldr	r3, [pc, #236]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e067      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b37      	ldr	r3, [pc, #220]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4934      	ldr	r1, [pc, #208]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003540:	f7fe f8d6 	bl	80016f0 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fe f8d2 	bl	80016f0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e04f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b2b      	ldr	r3, [pc, #172]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003570:	4b25      	ldr	r3, [pc, #148]	@ (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d20c      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b22      	ldr	r3, [pc, #136]	@ (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e032      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4b19      	ldr	r3, [pc, #100]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4916      	ldr	r1, [pc, #88]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c2:	4b12      	ldr	r3, [pc, #72]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	490e      	ldr	r1, [pc, #56]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035d6:	f000 f821 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80035da:	4602      	mov	r2, r0
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	490a      	ldr	r1, [pc, #40]	@ (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	5ccb      	ldrb	r3, [r1, r3]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a09      	ldr	r2, [pc, #36]	@ (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035f2:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe f836 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023c00 	.word	0x40023c00
 800360c:	40023800 	.word	0x40023800
 8003610:	0800b824 	.word	0x0800b824
 8003614:	20000000 	.word	0x20000000
 8003618:	20000004 	.word	0x20000004

0800361c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800361c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003620:	b090      	sub	sp, #64	@ 0x40
 8003622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003634:	4b59      	ldr	r3, [pc, #356]	@ (800379c <HAL_RCC_GetSysClockFreq+0x180>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b08      	cmp	r3, #8
 800363e:	d00d      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x40>
 8003640:	2b08      	cmp	r3, #8
 8003642:	f200 80a1 	bhi.w	8003788 <HAL_RCC_GetSysClockFreq+0x16c>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x34>
 800364a:	2b04      	cmp	r3, #4
 800364c:	d003      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x3a>
 800364e:	e09b      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b53      	ldr	r3, [pc, #332]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003652:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003654:	e09b      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003656:	4b53      	ldr	r3, [pc, #332]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003658:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800365a:	e098      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800365c:	4b4f      	ldr	r3, [pc, #316]	@ (800379c <HAL_RCC_GetSysClockFreq+0x180>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003664:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003666:	4b4d      	ldr	r3, [pc, #308]	@ (800379c <HAL_RCC_GetSysClockFreq+0x180>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d028      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003672:	4b4a      	ldr	r3, [pc, #296]	@ (800379c <HAL_RCC_GetSysClockFreq+0x180>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	2200      	movs	r2, #0
 800367a:	623b      	str	r3, [r7, #32]
 800367c:	627a      	str	r2, [r7, #36]	@ 0x24
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003684:	2100      	movs	r1, #0
 8003686:	4b47      	ldr	r3, [pc, #284]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003688:	fb03 f201 	mul.w	r2, r3, r1
 800368c:	2300      	movs	r3, #0
 800368e:	fb00 f303 	mul.w	r3, r0, r3
 8003692:	4413      	add	r3, r2
 8003694:	4a43      	ldr	r2, [pc, #268]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003696:	fba0 1202 	umull	r1, r2, r0, r2
 800369a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800369c:	460a      	mov	r2, r1
 800369e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a2:	4413      	add	r3, r2
 80036a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a8:	2200      	movs	r2, #0
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	61fa      	str	r2, [r7, #28]
 80036ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80036b6:	f7fc fddb 	bl	8000270 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4613      	mov	r3, r2
 80036c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036c2:	e053      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c4:	4b35      	ldr	r3, [pc, #212]	@ (800379c <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	2200      	movs	r2, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	617a      	str	r2, [r7, #20]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036d6:	f04f 0b00 	mov.w	fp, #0
 80036da:	4652      	mov	r2, sl
 80036dc:	465b      	mov	r3, fp
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	0159      	lsls	r1, r3, #5
 80036e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ec:	0150      	lsls	r0, r2, #5
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	ebb2 080a 	subs.w	r8, r2, sl
 80036f6:	eb63 090b 	sbc.w	r9, r3, fp
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003706:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800370a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800370e:	ebb2 0408 	subs.w	r4, r2, r8
 8003712:	eb63 0509 	sbc.w	r5, r3, r9
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	00eb      	lsls	r3, r5, #3
 8003720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003724:	00e2      	lsls	r2, r4, #3
 8003726:	4614      	mov	r4, r2
 8003728:	461d      	mov	r5, r3
 800372a:	eb14 030a 	adds.w	r3, r4, sl
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	eb45 030b 	adc.w	r3, r5, fp
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003742:	4629      	mov	r1, r5
 8003744:	028b      	lsls	r3, r1, #10
 8003746:	4621      	mov	r1, r4
 8003748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800374c:	4621      	mov	r1, r4
 800374e:	028a      	lsls	r2, r1, #10
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003756:	2200      	movs	r2, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	60fa      	str	r2, [r7, #12]
 800375c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003760:	f7fc fd86 	bl	8000270 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_GetSysClockFreq+0x180>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	3301      	adds	r3, #1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800377c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003786:	e002      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800378c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003790:	4618      	mov	r0, r3
 8003792:	3740      	adds	r7, #64	@ 0x40
 8003794:	46bd      	mov	sp, r7
 8003796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	017d7840 	.word	0x017d7840

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c4:	f7ff fff0 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0a9b      	lsrs	r3, r3, #10
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	@ (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	0800b834 	.word	0x0800b834

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037ec:	f7ff ffdc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0b5b      	lsrs	r3, r3, #13
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	@ (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	0800b834 	.word	0x0800b834

08003810 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003834:	2b00      	cmp	r3, #0
 8003836:	d035      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003838:	4b62      	ldr	r3, [pc, #392]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800383e:	f7fd ff57 	bl	80016f0 <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003846:	f7fd ff53 	bl	80016f0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0b0      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003858:	4b5b      	ldr	r3, [pc, #364]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	019a      	lsls	r2, r3, #6
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	071b      	lsls	r3, r3, #28
 8003870:	4955      	ldr	r1, [pc, #340]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003878:	4b52      	ldr	r3, [pc, #328]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800387e:	f7fd ff37 	bl	80016f0 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003886:	f7fd ff33 	bl	80016f0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e090      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003898:	4b4b      	ldr	r3, [pc, #300]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8083 	beq.w	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b44      	ldr	r3, [pc, #272]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	4a43      	ldr	r2, [pc, #268]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c2:	4b41      	ldr	r3, [pc, #260]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038ce:	4b3f      	ldr	r3, [pc, #252]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3e      	ldr	r2, [pc, #248]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038da:	f7fd ff09 	bl	80016f0 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fd ff05 	bl	80016f0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e062      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80038f4:	4b35      	ldr	r3, [pc, #212]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003908:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02f      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	429a      	cmp	r2, r3
 800391c:	d028      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391e:	4b2a      	ldr	r3, [pc, #168]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003926:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b29      	ldr	r3, [pc, #164]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392e:	4b28      	ldr	r3, [pc, #160]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003934:	4a24      	ldr	r2, [pc, #144]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800393a:	4b23      	ldr	r3, [pc, #140]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d114      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003946:	f7fd fed3 	bl	80016f0 <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd fecf 	bl	80016f0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e02a      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ee      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003978:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800397c:	d10d      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800397e:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800398e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003992:	490d      	ldr	r1, [pc, #52]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]
 8003998:	e005      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800399a:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80039a4:	6093      	str	r3, [r2, #8]
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	4905      	ldr	r1, [pc, #20]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	42470068 	.word	0x42470068
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40007000 	.word	0x40007000
 80039d0:	42470e40 	.word	0x42470e40

080039d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d13f      	bne.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80039f2:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039fa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d006      	beq.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a08:	d12f      	bne.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a0c:	617b      	str	r3, [r7, #20]
          break;
 8003a0e:	e02f      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a10:	4b1c      	ldr	r3, [pc, #112]	@ (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a1c:	d108      	bne.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a1e:	4b19      	ldr	r3, [pc, #100]	@ (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a26:	4a19      	ldr	r2, [pc, #100]	@ (8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e007      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a30:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a38:	4a15      	ldr	r2, [pc, #84]	@ (8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a40:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a5a:	0f1b      	lsrs	r3, r3, #28
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	617b      	str	r3, [r7, #20]
          break;
 8003a68:	e002      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
          break;
 8003a6e:	bf00      	nop
        }
      }
      break;
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003a72:	bf00      	nop
    }
  }
  return frequency;
 8003a74:	697b      	ldr	r3, [r7, #20]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00bb8000 	.word	0x00bb8000
 8003a8c:	017d7840 	.word	0x017d7840
 8003a90:	00f42400 	.word	0x00f42400

08003a94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e022      	b.n	8003aec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fae7 	bl	800108c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f814 	bl	8003af4 <HAL_SD_InitCard>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00a      	b.n	8003aec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003af4:	b5b0      	push	{r4, r5, r7, lr}
 8003af6:	b08e      	sub	sp, #56	@ 0x38
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003b10:	2376      	movs	r3, #118	@ 0x76
 8003b12:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681d      	ldr	r5, [r3, #0]
 8003b18:	466c      	mov	r4, sp
 8003b1a:	f107 0318 	add.w	r3, r7, #24
 8003b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	f001 ff85 	bl	8005a3c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003b32:	4b2a      	ldr	r3, [pc, #168]	@ (8003bdc <HAL_SD_InitCard+0xe8>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 ffc6 	bl	8005ace <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003b42:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <HAL_SD_InitCard+0xe8>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003b48:	2002      	movs	r0, #2
 8003b4a:	f7fd fddd 	bl	8001708 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f001 f806 	bl	8004b60 <SD_PowerON>
 8003b54:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e02e      	b.n	8003bd2 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 ff25 	bl	80049c4 <SD_InitCard>
 8003b7a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01b      	b.n	8003bd2 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f002 f825 	bl	8005bf2 <SDMMC_CmdBlockLength>
 8003ba8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00f      	beq.n	8003bd0 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003be0 <HAL_SD_InitCard+0xec>)
 8003bb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3728      	adds	r7, #40	@ 0x28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	422580a0 	.word	0x422580a0
 8003be0:	004005ff 	.word	0x004005ff

08003be4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	@ 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0c0      	b.n	8003d8e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 80b9 	bne.w	8003d8c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	441a      	add	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d907      	bls.n	8003c3e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c32:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0a7      	b.n	8003d8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2203      	movs	r2, #3
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	4a4c      	ldr	r2, [pc, #304]	@ (8003d98 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003c68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8003d9c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003c70:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2200      	movs	r2, #0
 8003c78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3380      	adds	r3, #128	@ 0x80
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	025b      	lsls	r3, r3, #9
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	f7fd ff0d 	bl	8001ad0 <HAL_DMA_Start_IT>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d017      	beq.n	8003cec <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003cca:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a33      	ldr	r2, [pc, #204]	@ (8003da0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003cd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e050      	b.n	8003d8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003cec:	4b2d      	ldr	r3, [pc, #180]	@ (8003da4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d002      	beq.n	8003d00 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	025b      	lsls	r3, r3, #9
 8003cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	025b      	lsls	r3, r3, #9
 8003d0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d0c:	2390      	movs	r3, #144	@ 0x90
 8003d0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d10:	2302      	movs	r3, #2
 8003d12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f107 0210 	add.w	r2, r7, #16
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 ff37 	bl	8005b9a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d90a      	bls.n	8003d48 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2282      	movs	r2, #130	@ 0x82
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 ff9b 	bl	8005c7a <SDMMC_CmdReadMultiBlock>
 8003d44:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003d46:	e009      	b.n	8003d5c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2281      	movs	r2, #129	@ 0x81
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 ff6e 	bl	8005c36 <SDMMC_CmdReadSingleBlock>
 8003d5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d012      	beq.n	8003d88 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a0e      	ldr	r2, [pc, #56]	@ (8003da0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e002      	b.n	8003d8e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3730      	adds	r7, #48	@ 0x30
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	080047d3 	.word	0x080047d3
 8003d9c:	08004845 	.word	0x08004845
 8003da0:	004005ff 	.word	0x004005ff
 8003da4:	4225858c 	.word	0x4225858c

08003da8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	@ 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0c5      	b.n	8003f5c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 80be 	bne.w	8003f5a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	441a      	add	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d907      	bls.n	8003e02 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0ac      	b.n	8003f5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2203      	movs	r2, #3
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f64 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e32:	4a4d      	ldr	r2, [pc, #308]	@ (8003f68 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003e34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d002      	beq.n	8003e4c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d90a      	bls.n	8003e68 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	22a0      	movs	r2, #160	@ 0xa0
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 ff4f 	bl	8005d02 <SDMMC_CmdWriteMultiBlock>
 8003e64:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003e66:	e009      	b.n	8003e7c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2290      	movs	r2, #144	@ 0x90
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 ff22 	bl	8005cbe <SDMMC_CmdWriteSingleBlock>
 8003e7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a39      	ldr	r2, [pc, #228]	@ (8003f6c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003e88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e059      	b.n	8003f5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003ea8:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	2240      	movs	r2, #64	@ 0x40
 8003eb4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3380      	adds	r3, #128	@ 0x80
 8003ede:	461a      	mov	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	025b      	lsls	r3, r3, #9
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	f7fd fdf3 	bl	8001ad0 <HAL_DMA_Start_IT>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01c      	beq.n	8003f2a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8003efe:	f023 0302 	bic.w	r3, r3, #2
 8003f02:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003f0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e018      	b.n	8003f5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	025b      	lsls	r3, r3, #9
 8003f34:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003f36:	2390      	movs	r3, #144	@ 0x90
 8003f38:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f107 0210 	add.w	r2, r7, #16
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fe22 	bl	8005b9a <SDIO_ConfigData>

      return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	@ 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	080047a9 	.word	0x080047a9
 8003f68:	08004845 	.word	0x08004845
 8003f6c:	004005ff 	.word	0x004005ff
 8003f70:	4225858c 	.word	0x4225858c

08003f74 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_SD_IRQHandler+0x2e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 f806 	bl	8004fac <SD_Read_IT>
 8003fa0:	e165      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 808f 	beq.w	80040d0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003fca:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003fce:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d039      	beq.n	800405e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <HAL_SD_IRQHandler+0x8a>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d011      	beq.n	8004022 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f001 fea0 	bl	8005d48 <SDMMC_CmdStopTransfer>
 8004008:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f92f 	bl	8004280 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f240 523a 	movw	r2, #1338	@ 0x53a
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_SD_IRQHandler+0xda>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f002 fb0e 	bl	8006670 <HAL_SD_RxCpltCallback>
 8004054:	e10b      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f002 fb00 	bl	800665c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800405c:	e107      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8102 	beq.w	800426e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d011      	beq.n	8004098 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f001 fe65 	bl	8005d48 <SDMMC_CmdStopTransfer>
 800407e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f8f4 	bl	8004280 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 80e5 	bne.w	800426e <HAL_SD_IRQHandler+0x2fa>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 80df 	bne.w	800426e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0208 	bic.w	r2, r2, #8
 80040be:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f002 fac7 	bl	800665c <HAL_SD_TxCpltCallback>
}
 80040ce:	e0ce      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_SD_IRQHandler+0x17c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 ffb0 	bl	800504e <SD_Write_IT>
 80040ee:	e0be      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040f6:	f240 233a 	movw	r3, #570	@ 0x23a
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80b6 	beq.w	800426e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	f043 0202 	orr.w	r2, r3, #2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	f043 0208 	orr.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	f043 0208 	orr.w	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f240 723a 	movw	r2, #1850	@ 0x73a
 800418c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800419c:	f023 0302 	bic.w	r3, r3, #2
 80041a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fdce 	bl	8005d48 <SDMMC_CmdStopTransfer>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f855 	bl	8004280 <HAL_SD_ErrorCallback>
}
 80041d6:	e04a      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d045      	beq.n	800426e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_SD_IRQHandler+0x282>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004278 <HAL_SD_IRQHandler+0x304>)
 80041fc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fcbc 	bl	8001b80 <HAL_DMA_Abort_IT>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d02f      	beq.n	800426e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fb68 	bl	80048e8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004218:	e029      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <HAL_SD_IRQHandler+0x2ba>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d011      	beq.n	8004252 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	4a12      	ldr	r2, [pc, #72]	@ (800427c <HAL_SD_IRQHandler+0x308>)
 8004234:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd fca0 	bl	8001b80 <HAL_DMA_Abort_IT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d013      	beq.n	800426e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb83 	bl	8004956 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004250:	e00d      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f002 f9ee 	bl	8006648 <HAL_SD_AbortCallback>
}
 800426c:	e7ff      	b.n	800426e <HAL_SD_IRQHandler+0x2fa>
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	080048e9 	.word	0x080048e9
 800427c:	08004957 	.word	0x08004957

08004280 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042a2:	0f9b      	lsrs	r3, r3, #30
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ae:	0e9b      	lsrs	r3, r3, #26
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042c0:	0e1b      	lsrs	r3, r3, #24
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042f4:	0d1b      	lsrs	r3, r3, #20
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004312:	0bdb      	lsrs	r3, r3, #15
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004324:	0b9b      	lsrs	r3, r3, #14
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004336:	0b5b      	lsrs	r3, r3, #13
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004348:	0b1b      	lsrs	r3, r3, #12
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2200      	movs	r2, #0
 800435a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	2b00      	cmp	r3, #0
 8004362:	d163      	bne.n	800442c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004368:	009a      	lsls	r2, r3, #2
 800436a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800436e:	4013      	ands	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004374:	0f92      	lsrs	r2, r2, #30
 8004376:	431a      	orrs	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004380:	0edb      	lsrs	r3, r3, #27
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	b2da      	uxtb	r2, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004392:	0e1b      	lsrs	r3, r3, #24
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	b2da      	uxtb	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a4:	0d5b      	lsrs	r3, r3, #21
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b6:	0c9b      	lsrs	r3, r3, #18
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c8:	0bdb      	lsrs	r3, r3, #15
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	7e1b      	ldrb	r3, [r3, #24]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	3302      	adds	r3, #2
 80043ec:	2201      	movs	r2, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80043f6:	fb03 f202 	mul.w	r2, r3, r2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	7a1b      	ldrb	r3, [r3, #8]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2201      	movs	r2, #1
 800440a:	409a      	lsls	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004418:	0a52      	lsrs	r2, r2, #9
 800441a:	fb03 f202 	mul.w	r2, r3, r2
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004428:	661a      	str	r2, [r3, #96]	@ 0x60
 800442a:	e031      	b.n	8004490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	2b01      	cmp	r3, #1
 8004432:	d11d      	bne.n	8004470 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004442:	0c1b      	lsrs	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	3301      	adds	r3, #1
 8004450:	029a      	lsls	r2, r3, #10
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004464:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60
 800446e:	e00f      	b.n	8004490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a58      	ldr	r2, [pc, #352]	@ (80045d8 <HAL_SD_GetCardCSD+0x344>)
 8004476:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e09d      	b.n	80045cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004494:	0b9b      	lsrs	r3, r3, #14
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044a6:	09db      	lsrs	r3, r3, #7
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c8:	0fdb      	lsrs	r3, r3, #31
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d4:	0f5b      	lsrs	r3, r3, #29
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	0e9b      	lsrs	r3, r3, #26
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f8:	0d9b      	lsrs	r3, r3, #22
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	b2da      	uxtb	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	0d5b      	lsrs	r3, r3, #21
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	b2da      	uxtb	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	0bdb      	lsrs	r3, r3, #15
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454e:	0b9b      	lsrs	r3, r3, #14
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	b2da      	uxtb	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	0b5b      	lsrs	r3, r3, #13
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004576:	0b1b      	lsrs	r3, r3, #12
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	0a9b      	lsrs	r3, r3, #10
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	b2da      	uxtb	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	004005ff 	.word	0x004005ff

080045dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b08e      	sub	sp, #56	@ 0x38
 8004638:	af04      	add	r7, sp, #16
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2203      	movs	r2, #3
 8004648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	2b03      	cmp	r3, #3
 8004652:	d02e      	beq.n	80046b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465a:	d106      	bne.n	800466a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	@ 0x38
 8004668:	e029      	b.n	80046be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004670:	d10a      	bne.n	8004688 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fb2a 	bl	8004ccc <SD_WideBus_Enable>
 8004678:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	639a      	str	r2, [r3, #56]	@ 0x38
 8004686:	e01a      	b.n	80046be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fb67 	bl	8004d62 <SD_WideBus_Disable>
 8004694:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80046a2:	e00c      	b.n	80046be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80046b0:	e005      	b.n	80046be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a26      	ldr	r2, [pc, #152]	@ (8004764 <HAL_SD_ConfigWideBusOperation+0x130>)
 80046cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046dc:	e01f      	b.n	800471e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681d      	ldr	r5, [r3, #0]
 8004704:	466c      	mov	r4, sp
 8004706:	f107 0314 	add.w	r3, r7, #20
 800470a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800470e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004712:	f107 0308 	add.w	r3, r7, #8
 8004716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004718:	4628      	mov	r0, r5
 800471a:	f001 f98f 	bl	8005a3c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004726:	4618      	mov	r0, r3
 8004728:	f001 fa63 	bl	8005bf2 <SDMMC_CmdBlockLength>
 800472c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0a      	ldr	r2, [pc, #40]	@ (8004764 <HAL_SD_ConfigWideBusOperation+0x130>)
 800473a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800475a:	4618      	mov	r0, r3
 800475c:	3728      	adds	r7, #40	@ 0x28
 800475e:	46bd      	mov	sp, r7
 8004760:	bdb0      	pop	{r4, r5, r7, pc}
 8004762:	bf00      	nop
 8004764:	004005ff 	.word	0x004005ff

08004768 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa7e 	bl	8004c7c <SD_SendStatus>
 8004780:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	0a5b      	lsrs	r3, r3, #9
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800479e:	693b      	ldr	r3, [r7, #16]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047de:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	2b82      	cmp	r3, #130	@ 0x82
 80047e6:	d111      	bne.n	800480c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 faab 	bl	8005d48 <SDMMC_CmdStopTransfer>
 80047f2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	431a      	orrs	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fd3a 	bl	8004280 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0208 	bic.w	r2, r2, #8
 800481a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004824:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f001 ff1b 	bl	8006670 <HAL_SD_RxCpltCallback>
#endif
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fd fb40 	bl	8001ed8 <HAL_DMA_GetError>
 8004858:	4603      	mov	r3, r0
 800485a:	2b02      	cmp	r3, #2
 800485c:	d03e      	beq.n	80048dc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004864:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d002      	beq.n	800487a <SD_DMAError+0x36>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d12d      	bne.n	80048d6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a19      	ldr	r2, [pc, #100]	@ (80048e4 <SD_DMAError+0xa0>)
 8004880:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004890:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800489e:	6978      	ldr	r0, [r7, #20]
 80048a0:	f7ff ff62 	bl	8004768 <HAL_SD_GetCardState>
 80048a4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b06      	cmp	r3, #6
 80048aa:	d002      	beq.n	80048b2 <SD_DMAError+0x6e>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d10a      	bne.n	80048c8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 fa46 	bl	8005d48 <SDMMC_CmdStopTransfer>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c2:	431a      	orrs	r2, r3
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f7ff fcd2 	bl	8004280 <HAL_SD_ErrorCallback>
#endif
  }
}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	004005ff 	.word	0x004005ff

080048e8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80048fe:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff ff31 	bl	8004768 <HAL_SD_GetCardState>
 8004906:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d002      	beq.n	8004922 <SD_DMATxAbort+0x3a>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b05      	cmp	r3, #5
 8004920:	d10a      	bne.n	8004938 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fa0e 	bl	8005d48 <SDMMC_CmdStopTransfer>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	431a      	orrs	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f001 fe81 	bl	8006648 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004946:	e002      	b.n	800494e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fc99 	bl	8004280 <HAL_SD_ErrorCallback>
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f240 523a 	movw	r2, #1338	@ 0x53a
 800496c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff fefa 	bl	8004768 <HAL_SD_GetCardState>
 8004974:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b06      	cmp	r3, #6
 8004988:	d002      	beq.n	8004990 <SD_DMARxAbort+0x3a>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d10a      	bne.n	80049a6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f001 f9d7 	bl	8005d48 <SDMMC_CmdStopTransfer>
 800499a:	4602      	mov	r2, r0
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f001 fe4a 	bl	8006648 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80049b4:	e002      	b.n	80049bc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff fc62 	bl	8004280 <HAL_SD_ErrorCallback>
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049c4:	b5b0      	push	{r4, r5, r7, lr}
 80049c6:	b094      	sub	sp, #80	@ 0x50
 80049c8:	af04      	add	r7, sp, #16
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80049cc:	2301      	movs	r3, #1
 80049ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f888 	bl	8005aea <SDIO_GetPowerState>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80049e4:	e0b8      	b.n	8004b58 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d02f      	beq.n	8004a4e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 fab2 	bl	8005f5c <SDMMC_CmdSendCID>
 80049f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <SD_InitCard+0x40>
    {
      return errorstate;
 8004a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a02:	e0a9      	b.n	8004b58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 f8b2 	bl	8005b74 <SDIO_GetResponse>
 8004a10:	4602      	mov	r2, r0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2104      	movs	r1, #4
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 f8a9 	bl	8005b74 <SDIO_GetResponse>
 8004a22:	4602      	mov	r2, r0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2108      	movs	r1, #8
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f8a0 	bl	8005b74 <SDIO_GetResponse>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	210c      	movs	r1, #12
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 f897 	bl	8005b74 <SDIO_GetResponse>
 8004a46:	4602      	mov	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d00d      	beq.n	8004a72 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f107 020e 	add.w	r2, r7, #14
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fab8 	bl	8005fd6 <SDMMC_CmdSetRelAdd>
 8004a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <SD_InitCard+0xae>
    {
      return errorstate;
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a70:	e072      	b.n	8004b58 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d036      	beq.n	8004ae8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004a7a:	89fb      	ldrh	r3, [r7, #14]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f001 fa82 	bl	8005f98 <SDMMC_CmdSendCSD>
 8004a94:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9e:	e05b      	b.n	8004b58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f001 f864 	bl	8005b74 <SDIO_GetResponse>
 8004aac:	4602      	mov	r2, r0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 f85b 	bl	8005b74 <SDIO_GetResponse>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2108      	movs	r1, #8
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 f852 	bl	8005b74 <SDIO_GetResponse>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	210c      	movs	r1, #12
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 f849 	bl	8005b74 <SDIO_GetResponse>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2104      	movs	r1, #4
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 f840 	bl	8005b74 <SDIO_GetResponse>
 8004af4:	4603      	mov	r3, r0
 8004af6:	0d1a      	lsrs	r2, r3, #20
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004afc:	f107 0310 	add.w	r3, r7, #16
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fbc6 	bl	8004294 <HAL_SD_GetCardCSD>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b12:	e021      	b.n	8004b58 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6819      	ldr	r1, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	2200      	movs	r2, #0
 8004b20:	461c      	mov	r4, r3
 8004b22:	4615      	mov	r5, r2
 8004b24:	4622      	mov	r2, r4
 8004b26:	462b      	mov	r3, r5
 8004b28:	4608      	mov	r0, r1
 8004b2a:	f001 f92f 	bl	8005d8c <SDMMC_CmdSelDesel>
 8004b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <SD_InitCard+0x176>
  {
    return errorstate;
 8004b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b38:	e00e      	b.n	8004b58 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681d      	ldr	r5, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	466c      	mov	r4, sp
 8004b42:	f103 0210 	add.w	r2, r3, #16
 8004b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 ff73 	bl	8005a3c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3740      	adds	r7, #64	@ 0x40
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bdb0      	pop	{r4, r5, r7, pc}

08004b60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 f92a 	bl	8005dd2 <SDMMC_CmdGoIdleState>
 8004b7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	e072      	b.n	8004c70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 f93d 	bl	8005e0e <SDMMC_CmdOperCond>
 8004b94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00d      	beq.n	8004bb8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 f913 	bl	8005dd2 <SDMMC_CmdGoIdleState>
 8004bac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <SD_PowerON+0x5e>
    {
      return errorstate;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	e05b      	b.n	8004c70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d137      	bne.n	8004c36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f93d 	bl	8005e4c <SDMMC_CmdAppCommand>
 8004bd2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02d      	beq.n	8004c36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004bda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004bde:	e047      	b.n	8004c70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 f930 	bl	8005e4c <SDMMC_CmdAppCommand>
 8004bec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <SD_PowerON+0x98>
    {
      return errorstate;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	e03b      	b.n	8004c70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	491e      	ldr	r1, [pc, #120]	@ (8004c78 <SD_PowerON+0x118>)
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 f946 	bl	8005e90 <SDMMC_CmdAppOperCommand>
 8004c04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c10:	e02e      	b.n	8004c70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 ffab 	bl	8005b74 <SDIO_GetResponse>
 8004c1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	0fdb      	lsrs	r3, r3, #31
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <SD_PowerON+0xcc>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <SD_PowerON+0xce>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]

    count++;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d802      	bhi.n	8004c46 <SD_PowerON+0xe6>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0cc      	beq.n	8004be0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d902      	bls.n	8004c56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004c50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c54:	e00c      	b.n	8004c70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	645a      	str	r2, [r3, #68]	@ 0x44
 8004c66:	e002      	b.n	8004c6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	c1100000 	.word	0xc1100000

08004c7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d102      	bne.n	8004c92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004c8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c90:	e018      	b.n	8004cc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f001 f9ba 	bl	8006018 <SDMMC_CmdSendStatus>
 8004ca4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	e009      	b.n	8004cc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 ff5c 	bl	8005b74 <SDIO_GetResponse>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 ff46 	bl	8005b74 <SDIO_GetResponse>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cf2:	d102      	bne.n	8004cfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004cf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cf8:	e02f      	b.n	8004d5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f879 	bl	8004df8 <SD_FindSCR>
 8004d06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	e023      	b.n	8004d5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01c      	beq.n	8004d56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f001 f88f 	bl	8005e4c <SDMMC_CmdAppCommand>
 8004d2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	e00f      	b.n	8004d5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f001 f8c8 	bl	8005ed6 <SDMMC_CmdBusWidth>
 8004d46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	e003      	b.n	8004d5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e001      	b.n	8004d5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d56:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b086      	sub	sp, #24
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fefb 	bl	8005b74 <SDIO_GetResponse>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d88:	d102      	bne.n	8004d90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d8e:	e02f      	b.n	8004df0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f82e 	bl	8004df8 <SD_FindSCR>
 8004d9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	e023      	b.n	8004df0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01c      	beq.n	8004dec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dba:	041b      	lsls	r3, r3, #16
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f001 f844 	bl	8005e4c <SDMMC_CmdAppCommand>
 8004dc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	e00f      	b.n	8004df0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f87d 	bl	8005ed6 <SDMMC_CmdBusWidth>
 8004ddc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	e003      	b.n	8004df0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e001      	b.n	8004df0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004dec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b08f      	sub	sp, #60	@ 0x3c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004e02:	f7fc fc75 	bl	80016f0 <HAL_GetTick>
 8004e06:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2108      	movs	r1, #8
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fee7 	bl	8005bf2 <SDMMC_CmdBlockLength>
 8004e24:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2e:	e0b9      	b.n	8004fa4 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f001 f805 	bl	8005e4c <SDMMC_CmdAppCommand>
 8004e42:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	e0aa      	b.n	8004fa4 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004e54:	2308      	movs	r3, #8
 8004e56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004e58:	2330      	movs	r3, #48	@ 0x30
 8004e5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f107 0210 	add.w	r2, r7, #16
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fe91 	bl	8005b9a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 f84c 	bl	8005f1a <SDMMC_CmdSendSCR>
 8004e82:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02a      	beq.n	8004ee0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	e08a      	b.n	8004fa4 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00f      	beq.n	8004ebc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	f107 0208 	add.w	r2, r7, #8
 8004ea8:	18d4      	adds	r4, r2, r3
 8004eaa:	4608      	mov	r0, r1
 8004eac:	f000 fdf1 	bl	8005a92 <SDIO_ReadFIFO>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	6023      	str	r3, [r4, #0]
      index++;
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eba:	e006      	b.n	8004eca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d012      	beq.n	8004ef0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004eca:	f7fc fc11 	bl	80016f0 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d102      	bne.n	8004ee0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004eda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004ede:	e061      	b.n	8004fa4 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0cf      	beq.n	8004e8e <SD_FindSCR+0x96>
 8004eee:	e000      	b.n	8004ef2 <SD_FindSCR+0xfa>
      break;
 8004ef0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <SD_FindSCR+0x116>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2208      	movs	r2, #8
 8004f14:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004f16:	2308      	movs	r3, #8
 8004f18:	e044      	b.n	8004fa4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f30:	2302      	movs	r3, #2
 8004f32:	e037      	b.n	8004fa4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2220      	movs	r2, #32
 8004f48:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	e02a      	b.n	8004fa4 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f56:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	061a      	lsls	r2, r3, #24
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	0e1b      	lsrs	r3, r3, #24
 8004f74:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	601a      	str	r2, [r3, #0]
    scr++;
 8004f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	061a      	lsls	r2, r3, #24
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0e1b      	lsrs	r3, r3, #24
 8004f9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	373c      	adds	r7, #60	@ 0x3c
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}

08004fac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d03f      	beq.n	8005046 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e033      	b.n	8005034 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fd5e 	bl	8005a92 <SDIO_ReadFIFO>
 8004fd6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3b01      	subs	r3, #1
 8005016:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	0e1b      	lsrs	r3, r3, #24
 800501c:	b2da      	uxtb	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	3b01      	subs	r3, #1
 800502c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3301      	adds	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b07      	cmp	r3, #7
 8005038:	d9c8      	bls.n	8004fcc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005046:	bf00      	nop
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d043      	beq.n	80050f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e037      	b.n	80050de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3b01      	subs	r3, #1
 800507e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3301      	adds	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3b01      	subs	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	041a      	lsls	r2, r3, #16
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	061a      	lsls	r2, r3, #24
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f107 0208 	add.w	r2, r7, #8
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fcea 	bl	8005aac <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3301      	adds	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b07      	cmp	r3, #7
 80050e2:	d9c4      	bls.n	800506e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e042      	b.n	8005190 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc fa0e 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2224      	movs	r2, #36	@ 0x24
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800513a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fa09 	bl	8005554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	@ 0x28
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d175      	bne.n	80052a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_UART_Transmit+0x2c>
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e06e      	b.n	80052a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2221      	movs	r2, #33	@ 0x21
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051d6:	f7fc fa8b 	bl	80016f0 <HAL_GetTick>
 80051da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	88fa      	ldrh	r2, [r7, #6]
 80051e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f0:	d108      	bne.n	8005204 <HAL_UART_Transmit+0x6c>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e003      	b.n	800520c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800520c:	e02e      	b.n	800526c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2200      	movs	r2, #0
 8005216:	2180      	movs	r1, #128	@ 0x80
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f8df 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e03a      	b.n	80052a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005244:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	3302      	adds	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e007      	b.n	800525e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	3301      	adds	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1cb      	bne.n	800520e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	2140      	movs	r1, #64	@ 0x40
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f8ab 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e006      	b.n	80052a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b08a      	sub	sp, #40	@ 0x28
 80052b2:	af02      	add	r7, sp, #8
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	f040 8081 	bne.w	80053d2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_UART_Receive+0x2e>
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e079      	b.n	80053d4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2222      	movs	r2, #34	@ 0x22
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052f4:	f7fc f9fc 	bl	80016f0 <HAL_GetTick>
 80052f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	d108      	bne.n	8005322 <HAL_UART_Receive+0x74>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e003      	b.n	800532a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800532a:	e047      	b.n	80053bc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	2120      	movs	r1, #32
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f850 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e042      	b.n	80053d4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10c      	bne.n	800536e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005360:	b29a      	uxth	r2, r3
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	3302      	adds	r3, #2
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	e01f      	b.n	80053ae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005376:	d007      	beq.n	8005388 <HAL_UART_Receive+0xda>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <HAL_UART_Receive+0xe8>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	e008      	b.n	80053a8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	3301      	adds	r3, #1
 80053ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1b2      	bne.n	800532c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ec:	e03b      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d037      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fc f97b 	bl	80016f0 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <UART_WaitOnFlagUntilTimeout+0x30>
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e03a      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d023      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b80      	cmp	r3, #128	@ 0x80
 8005422:	d020      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b40      	cmp	r3, #64	@ 0x40
 8005428:	d01d      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b08      	cmp	r3, #8
 8005436:	d116      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f81d 	bl	800548e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2208      	movs	r2, #8
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e00f      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4013      	ands	r3, r2
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	429a      	cmp	r2, r3
 8005482:	d0b4      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800548e:	b480      	push	{r7}
 8005490:	b095      	sub	sp, #84	@ 0x54
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80054b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e5      	bne.n	8005496 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3314      	adds	r3, #20
 80054d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3314      	adds	r3, #20
 80054e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	2b01      	cmp	r3, #1
 8005504:	d119      	bne.n	800553a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	60bb      	str	r3, [r7, #8]
   return(result);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f023 0310 	bic.w	r3, r3, #16
 800551c:	647b      	str	r3, [r7, #68]	@ 0x44
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005526:	61ba      	str	r2, [r7, #24]
 8005528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6979      	ldr	r1, [r7, #20]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	613b      	str	r3, [r7, #16]
   return(result);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e5      	bne.n	8005506 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005548:	bf00      	nop
 800554a:	3754      	adds	r7, #84	@ 0x54
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b0c0      	sub	sp, #256	@ 0x100
 800555a:	af00      	add	r7, sp, #0
 800555c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	ea40 0301 	orr.w	r3, r0, r1
 800557c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	431a      	orrs	r2, r3
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	431a      	orrs	r2, r3
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055ac:	f021 010c 	bic.w	r1, r1, #12
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ba:	430b      	orrs	r3, r1
 80055bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	6999      	ldr	r1, [r3, #24]
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	ea40 0301 	orr.w	r3, r0, r1
 80055da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005820 <UART_SetConfig+0x2cc>)
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d005      	beq.n	80055f4 <UART_SetConfig+0xa0>
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005824 <UART_SetConfig+0x2d0>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d104      	bne.n	80055fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7fe f8f8 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 80055f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055fc:	e003      	b.n	8005606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055fe:	f7fe f8df 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005602:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005610:	f040 810c 	bne.w	800582c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005618:	2200      	movs	r2, #0
 800561a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800561e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	1891      	adds	r1, r2, r2
 800562c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800562e:	415b      	adcs	r3, r3
 8005630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005636:	4621      	mov	r1, r4
 8005638:	eb12 0801 	adds.w	r8, r2, r1
 800563c:	4629      	mov	r1, r5
 800563e:	eb43 0901 	adc.w	r9, r3, r1
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800564e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005656:	4690      	mov	r8, r2
 8005658:	4699      	mov	r9, r3
 800565a:	4623      	mov	r3, r4
 800565c:	eb18 0303 	adds.w	r3, r8, r3
 8005660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005664:	462b      	mov	r3, r5
 8005666:	eb49 0303 	adc.w	r3, r9, r3
 800566a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800567a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800567e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005682:	460b      	mov	r3, r1
 8005684:	18db      	adds	r3, r3, r3
 8005686:	653b      	str	r3, [r7, #80]	@ 0x50
 8005688:	4613      	mov	r3, r2
 800568a:	eb42 0303 	adc.w	r3, r2, r3
 800568e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005698:	f7fa fdea 	bl	8000270 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b61      	ldr	r3, [pc, #388]	@ (8005828 <UART_SetConfig+0x2d4>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011c      	lsls	r4, r3, #4
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	1891      	adds	r1, r2, r2
 80056c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056c4:	415b      	adcs	r3, r3
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056cc:	4641      	mov	r1, r8
 80056ce:	eb12 0a01 	adds.w	sl, r2, r1
 80056d2:	4649      	mov	r1, r9
 80056d4:	eb43 0b01 	adc.w	fp, r3, r1
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ec:	4692      	mov	sl, r2
 80056ee:	469b      	mov	fp, r3
 80056f0:	4643      	mov	r3, r8
 80056f2:	eb1a 0303 	adds.w	r3, sl, r3
 80056f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056fa:	464b      	mov	r3, r9
 80056fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005700:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005710:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005718:	460b      	mov	r3, r1
 800571a:	18db      	adds	r3, r3, r3
 800571c:	643b      	str	r3, [r7, #64]	@ 0x40
 800571e:	4613      	mov	r3, r2
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	647b      	str	r3, [r7, #68]	@ 0x44
 8005726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800572a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800572e:	f7fa fd9f 	bl	8000270 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4611      	mov	r1, r2
 8005738:	4b3b      	ldr	r3, [pc, #236]	@ (8005828 <UART_SetConfig+0x2d4>)
 800573a:	fba3 2301 	umull	r2, r3, r3, r1
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2264      	movs	r2, #100	@ 0x64
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	1acb      	subs	r3, r1, r3
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800574e:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005750:	fba3 2302 	umull	r2, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800575c:	441c      	add	r4, r3
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005768:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800576c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	1891      	adds	r1, r2, r2
 8005776:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005778:	415b      	adcs	r3, r3
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800577c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005780:	4641      	mov	r1, r8
 8005782:	1851      	adds	r1, r2, r1
 8005784:	6339      	str	r1, [r7, #48]	@ 0x30
 8005786:	4649      	mov	r1, r9
 8005788:	414b      	adcs	r3, r1
 800578a:	637b      	str	r3, [r7, #52]	@ 0x34
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005798:	4659      	mov	r1, fp
 800579a:	00cb      	lsls	r3, r1, #3
 800579c:	4651      	mov	r1, sl
 800579e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a2:	4651      	mov	r1, sl
 80057a4:	00ca      	lsls	r2, r1, #3
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	4642      	mov	r2, r8
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057b4:	464b      	mov	r3, r9
 80057b6:	460a      	mov	r2, r1
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057d4:	460b      	mov	r3, r1
 80057d6:	18db      	adds	r3, r3, r3
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057da:	4613      	mov	r3, r2
 80057dc:	eb42 0303 	adc.w	r3, r2, r3
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057ea:	f7fa fd41 	bl	8000270 <__aeabi_uldivmod>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <UART_SetConfig+0x2d4>)
 80057f4:	fba3 1302 	umull	r1, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	2164      	movs	r1, #100	@ 0x64
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3332      	adds	r3, #50	@ 0x32
 8005806:	4a08      	ldr	r2, [pc, #32]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f003 0207 	and.w	r2, r3, #7
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4422      	add	r2, r4
 800581a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800581c:	e106      	b.n	8005a2c <UART_SetConfig+0x4d8>
 800581e:	bf00      	nop
 8005820:	40011000 	.word	0x40011000
 8005824:	40011400 	.word	0x40011400
 8005828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005836:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800583a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	1891      	adds	r1, r2, r2
 8005844:	6239      	str	r1, [r7, #32]
 8005846:	415b      	adcs	r3, r3
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
 800584a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800584e:	4641      	mov	r1, r8
 8005850:	1854      	adds	r4, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0501 	adc.w	r5, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	00eb      	lsls	r3, r5, #3
 8005862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005866:	00e2      	lsls	r2, r4, #3
 8005868:	4614      	mov	r4, r2
 800586a:	461d      	mov	r5, r3
 800586c:	4643      	mov	r3, r8
 800586e:	18e3      	adds	r3, r4, r3
 8005870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005874:	464b      	mov	r3, r9
 8005876:	eb45 0303 	adc.w	r3, r5, r3
 800587a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800588a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800589a:	4629      	mov	r1, r5
 800589c:	008b      	lsls	r3, r1, #2
 800589e:	4621      	mov	r1, r4
 80058a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a4:	4621      	mov	r1, r4
 80058a6:	008a      	lsls	r2, r1, #2
 80058a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058ac:	f7fa fce0 	bl	8000270 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4b60      	ldr	r3, [pc, #384]	@ (8005a38 <UART_SetConfig+0x4e4>)
 80058b6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	011c      	lsls	r4, r3, #4
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	61b9      	str	r1, [r7, #24]
 80058d8:	415b      	adcs	r3, r3
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e0:	4641      	mov	r1, r8
 80058e2:	1851      	adds	r1, r2, r1
 80058e4:	6139      	str	r1, [r7, #16]
 80058e6:	4649      	mov	r1, r9
 80058e8:	414b      	adcs	r3, r1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058f8:	4659      	mov	r1, fp
 80058fa:	00cb      	lsls	r3, r1, #3
 80058fc:	4651      	mov	r1, sl
 80058fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005902:	4651      	mov	r1, sl
 8005904:	00ca      	lsls	r2, r1, #3
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	4603      	mov	r3, r0
 800590c:	4642      	mov	r2, r8
 800590e:	189b      	adds	r3, r3, r2
 8005910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800592a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005938:	4649      	mov	r1, r9
 800593a:	008b      	lsls	r3, r1, #2
 800593c:	4641      	mov	r1, r8
 800593e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005942:	4641      	mov	r1, r8
 8005944:	008a      	lsls	r2, r1, #2
 8005946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800594a:	f7fa fc91 	bl	8000270 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4611      	mov	r1, r2
 8005954:	4b38      	ldr	r3, [pc, #224]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005956:	fba3 2301 	umull	r2, r3, r3, r1
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	2264      	movs	r2, #100	@ 0x64
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	3332      	adds	r3, #50	@ 0x32
 8005968:	4a33      	ldr	r2, [pc, #204]	@ (8005a38 <UART_SetConfig+0x4e4>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005974:	441c      	add	r4, r3
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	673b      	str	r3, [r7, #112]	@ 0x70
 800597e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005980:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	415b      	adcs	r3, r3
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005994:	4641      	mov	r1, r8
 8005996:	1851      	adds	r1, r2, r1
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	4649      	mov	r1, r9
 800599c:	414b      	adcs	r3, r1
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059ac:	4659      	mov	r1, fp
 80059ae:	00cb      	lsls	r3, r1, #3
 80059b0:	4651      	mov	r1, sl
 80059b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b6:	4651      	mov	r1, sl
 80059b8:	00ca      	lsls	r2, r1, #3
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	4642      	mov	r2, r8
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059c6:	464b      	mov	r3, r9
 80059c8:	460a      	mov	r2, r1
 80059ca:	eb42 0303 	adc.w	r3, r2, r3
 80059ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059da:	667a      	str	r2, [r7, #100]	@ 0x64
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059e8:	4649      	mov	r1, r9
 80059ea:	008b      	lsls	r3, r1, #2
 80059ec:	4641      	mov	r1, r8
 80059ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f2:	4641      	mov	r1, r8
 80059f4:	008a      	lsls	r2, r1, #2
 80059f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059fa:	f7fa fc39 	bl	8000270 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a04:	fba3 1302 	umull	r1, r3, r3, r2
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	2164      	movs	r1, #100	@ 0x64
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	3332      	adds	r3, #50	@ 0x32
 8005a16:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4422      	add	r2, r4
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a38:	51eb851f 	.word	0x51eb851f

08005a3c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	f107 001c 	add.w	r0, r7, #28
 8005a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005a52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005a54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005a56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005a5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005a5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005a62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005a66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005a76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	b004      	add	sp, #16
 8005a90:	4770      	bx	lr

08005a92 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0303 	and.w	r3, r3, #3
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b24:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005b2a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005b30:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b40:	f023 030f 	bic.w	r3, r3, #15
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	b2db      	uxtb	r3, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3314      	adds	r3, #20
 8005b82:	461a      	mov	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	4413      	add	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
}  
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bc0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005bc6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005bcc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0

}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b088      	sub	sp, #32
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005c00:	2310      	movs	r3, #16
 8005c02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c04:	2340      	movs	r3, #64	@ 0x40
 8005c06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c12:	f107 0308 	add.w	r3, r7, #8
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ff74 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c22:	2110      	movs	r1, #16
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa19 	bl	800605c <SDMMC_GetCmdResp1>
 8005c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b088      	sub	sp, #32
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005c44:	2311      	movs	r3, #17
 8005c46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c48:	2340      	movs	r3, #64	@ 0x40
 8005c4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff ff52 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c66:	2111      	movs	r1, #17
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f9f7 	bl	800605c <SDMMC_GetCmdResp1>
 8005c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c70:	69fb      	ldr	r3, [r7, #28]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b088      	sub	sp, #32
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005c88:	2312      	movs	r3, #18
 8005c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c8c:	2340      	movs	r3, #64	@ 0x40
 8005c8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c9a:	f107 0308 	add.w	r3, r7, #8
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff30 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005caa:	2112      	movs	r1, #18
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f9d5 	bl	800605c <SDMMC_GetCmdResp1>
 8005cb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b088      	sub	sp, #32
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005ccc:	2318      	movs	r3, #24
 8005cce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cd0:	2340      	movs	r3, #64	@ 0x40
 8005cd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff0e 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cee:	2118      	movs	r1, #24
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f9b3 	bl	800605c <SDMMC_GetCmdResp1>
 8005cf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005d10:	2319      	movs	r3, #25
 8005d12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d14:	2340      	movs	r3, #64	@ 0x40
 8005d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d22:	f107 0308 	add.w	r3, r7, #8
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff feec 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d32:	2119      	movs	r1, #25
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f991 	bl	800605c <SDMMC_GetCmdResp1>
 8005d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005d54:	230c      	movs	r3, #12
 8005d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d58:	2340      	movs	r3, #64	@ 0x40
 8005d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff feca 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005d72:	4a05      	ldr	r2, [pc, #20]	@ (8005d88 <SDMMC_CmdStopTransfer+0x40>)
 8005d74:	210c      	movs	r1, #12
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f970 	bl	800605c <SDMMC_GetCmdResp1>
 8005d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	05f5e100 	.word	0x05f5e100

08005d8c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	@ 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d9c:	2307      	movs	r3, #7
 8005d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005da0:	2340      	movs	r3, #64	@ 0x40
 8005da2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dae:	f107 0310 	add.w	r3, r7, #16
 8005db2:	4619      	mov	r1, r3
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff fea6 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbe:	2107      	movs	r1, #7
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f94b 	bl	800605c <SDMMC_GetCmdResp1>
 8005dc6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3728      	adds	r7, #40	@ 0x28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b088      	sub	sp, #32
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005df0:	f107 0308 	add.w	r3, r7, #8
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fe85 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fb65 	bl	80064cc <SDMMC_GetCmdError>
 8005e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e04:	69fb      	ldr	r3, [r7, #28]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b088      	sub	sp, #32
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005e16:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e20:	2340      	movs	r3, #64	@ 0x40
 8005e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fe66 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 faf8 	bl	8006430 <SDMMC_GetCmdResp7>
 8005e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e42:	69fb      	ldr	r3, [r7, #28]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005e5a:	2337      	movs	r3, #55	@ 0x37
 8005e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e5e:	2340      	movs	r3, #64	@ 0x40
 8005e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e6c:	f107 0308 	add.w	r3, r7, #8
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff fe47 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e7c:	2137      	movs	r1, #55	@ 0x37
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f8ec 	bl	800605c <SDMMC_GetCmdResp1>
 8005e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e86:	69fb      	ldr	r3, [r7, #28]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ea0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005ea6:	2329      	movs	r3, #41	@ 0x29
 8005ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005eaa:	2340      	movs	r3, #64	@ 0x40
 8005eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eb8:	f107 0308 	add.w	r3, r7, #8
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fe21 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f9ff 	bl	80062c8 <SDMMC_GetCmdResp3>
 8005eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b088      	sub	sp, #32
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005ee4:	2306      	movs	r3, #6
 8005ee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ee8:	2340      	movs	r3, #64	@ 0x40
 8005eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ef4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ef6:	f107 0308 	add.w	r3, r7, #8
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff fe02 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f06:	2106      	movs	r1, #6
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8a7 	bl	800605c <SDMMC_GetCmdResp1>
 8005f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f10:	69fb      	ldr	r3, [r7, #28]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b088      	sub	sp, #32
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005f26:	2333      	movs	r3, #51	@ 0x33
 8005f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f2a:	2340      	movs	r3, #64	@ 0x40
 8005f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f38:	f107 0308 	add.w	r3, r7, #8
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fde1 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f48:	2133      	movs	r1, #51	@ 0x33
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f886 	bl	800605c <SDMMC_GetCmdResp1>
 8005f50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f52:	69fb      	ldr	r3, [r7, #28]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005f6c:	23c0      	movs	r3, #192	@ 0xc0
 8005f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f7a:	f107 0308 	add.w	r3, r7, #8
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff fdc0 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f956 	bl	8006238 <SDMMC_GetCmdResp2>
 8005f8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005fa6:	2309      	movs	r3, #9
 8005fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005faa:	23c0      	movs	r3, #192	@ 0xc0
 8005fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb8:	f107 0308 	add.w	r3, r7, #8
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fda1 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f937 	bl	8006238 <SDMMC_GetCmdResp2>
 8005fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b088      	sub	sp, #32
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fe8:	2340      	movs	r3, #64	@ 0x40
 8005fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ff4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff6:	f107 0308 	add.w	r3, r7, #8
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fd82 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	2103      	movs	r1, #3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f99c 	bl	8006344 <SDMMC_GetCmdResp6>
 800600c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800600e:	69fb      	ldr	r3, [r7, #28]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006026:	230d      	movs	r3, #13
 8006028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800602a:	2340      	movs	r3, #64	@ 0x40
 800602c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006036:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006038:	f107 0308 	add.w	r3, r7, #8
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fd61 	bl	8005b06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006048:	210d      	movs	r1, #13
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f806 	bl	800605c <SDMMC_GetCmdResp1>
 8006050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006052:	69fb      	ldr	r3, [r7, #28]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	460b      	mov	r3, r1
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800606a:	4b70      	ldr	r3, [pc, #448]	@ (800622c <SDMMC_GetCmdResp1+0x1d0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a70      	ldr	r2, [pc, #448]	@ (8006230 <SDMMC_GetCmdResp1+0x1d4>)
 8006070:	fba2 2303 	umull	r2, r3, r2, r3
 8006074:	0a5a      	lsrs	r2, r3, #9
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1e5a      	subs	r2, r3, #1
 8006082:	61fa      	str	r2, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006088:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800608c:	e0c9      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0ef      	beq.n	800607e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1ea      	bne.n	800607e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d004      	beq.n	80060be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2204      	movs	r2, #4
 80060b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060ba:	2304      	movs	r3, #4
 80060bc:	e0b1      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0a6      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	22c5      	movs	r2, #197	@ 0xc5
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fd3d 	bl	8005b5a <SDIO_GetCommandResponse>
 80060e0:	4603      	mov	r3, r0
 80060e2:	461a      	mov	r2, r3
 80060e4:	7afb      	ldrb	r3, [r7, #11]
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d001      	beq.n	80060ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e099      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80060ee:	2100      	movs	r1, #0
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff fd3f 	bl	8005b74 <SDIO_GetResponse>
 80060f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4b4e      	ldr	r3, [pc, #312]	@ (8006234 <SDMMC_GetCmdResp1+0x1d8>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006102:	2300      	movs	r3, #0
 8006104:	e08d      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	da02      	bge.n	8006112 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800610c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006110:	e087      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800611c:	2340      	movs	r3, #64	@ 0x40
 800611e:	e080      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800612a:	2380      	movs	r3, #128	@ 0x80
 800612c:	e079      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800613c:	e071      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800614c:	e069      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800615c:	e061      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006168:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800616c:	e059      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800617c:	e051      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800618c:	e049      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006198:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800619c:	e041      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80061a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ac:	e039      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80061b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061bc:	e031      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80061c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80061cc:	e029      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80061d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80061dc:	e021      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80061e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80061ec:	e019      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80061f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80061fc:	e011      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006208:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800620c:	e009      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006218:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800621c:	e001      	b.n	8006222 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800621e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3720      	adds	r7, #32
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000000 	.word	0x20000000
 8006230:	10624dd3 	.word	0x10624dd3
 8006234:	fdffe008 	.word	0xfdffe008

08006238 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006240:	4b1f      	ldr	r3, [pc, #124]	@ (80062c0 <SDMMC_GetCmdResp2+0x88>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1f      	ldr	r2, [pc, #124]	@ (80062c4 <SDMMC_GetCmdResp2+0x8c>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	0a5b      	lsrs	r3, r3, #9
 800624c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1e5a      	subs	r2, r3, #1
 800625a:	60fa      	str	r2, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006260:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006264:	e026      	b.n	80062b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0ef      	beq.n	8006256 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1ea      	bne.n	8006256 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2204      	movs	r2, #4
 8006290:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006292:	2304      	movs	r3, #4
 8006294:	e00e      	b.n	80062b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e003      	b.n	80062b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	22c5      	movs	r2, #197	@ 0xc5
 80062b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000000 	.word	0x20000000
 80062c4:	10624dd3 	.word	0x10624dd3

080062c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062d0:	4b1a      	ldr	r3, [pc, #104]	@ (800633c <SDMMC_GetCmdResp3+0x74>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006340 <SDMMC_GetCmdResp3+0x78>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	0a5b      	lsrs	r3, r3, #9
 80062dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e0:	fb02 f303 	mul.w	r3, r2, r3
 80062e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1e5a      	subs	r2, r3, #1
 80062ea:	60fa      	str	r2, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d102      	bne.n	80062f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062f4:	e01b      	b.n	800632e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ef      	beq.n	80062e6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ea      	bne.n	80062e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d004      	beq.n	8006326 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2204      	movs	r2, #4
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006322:	2304      	movs	r3, #4
 8006324:	e003      	b.n	800632e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	22c5      	movs	r2, #197	@ 0xc5
 800632a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000000 	.word	0x20000000
 8006340:	10624dd3 	.word	0x10624dd3

08006344 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	460b      	mov	r3, r1
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006352:	4b35      	ldr	r3, [pc, #212]	@ (8006428 <SDMMC_GetCmdResp6+0xe4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a35      	ldr	r2, [pc, #212]	@ (800642c <SDMMC_GetCmdResp6+0xe8>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	0a5b      	lsrs	r3, r3, #9
 800635e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	61fa      	str	r2, [r7, #28]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006372:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006376:	e052      	b.n	800641e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0ef      	beq.n	8006368 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1ea      	bne.n	8006368 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2204      	movs	r2, #4
 80063a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063a4:	2304      	movs	r3, #4
 80063a6:	e03a      	b.n	800641e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d004      	beq.n	80063be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e02f      	b.n	800641e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff fbcb 	bl	8005b5a <SDIO_GetCommandResponse>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d001      	beq.n	80063d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e025      	b.n	800641e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	22c5      	movs	r2, #197	@ 0xc5
 80063d6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80063d8:	2100      	movs	r1, #0
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff fbca 	bl	8005b74 <SDIO_GetResponse>
 80063e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	0c1b      	lsrs	r3, r3, #16
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e011      	b.n	800641e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006408:	e009      	b.n	800641e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006418:	e001      	b.n	800641e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800641a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000000 	.word	0x20000000
 800642c:	10624dd3 	.word	0x10624dd3

08006430 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006438:	4b22      	ldr	r3, [pc, #136]	@ (80064c4 <SDMMC_GetCmdResp7+0x94>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a22      	ldr	r2, [pc, #136]	@ (80064c8 <SDMMC_GetCmdResp7+0x98>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	0a5b      	lsrs	r3, r3, #9
 8006444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006448:	fb02 f303 	mul.w	r3, r2, r3
 800644c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1e5a      	subs	r2, r3, #1
 8006452:	60fa      	str	r2, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006458:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800645c:	e02c      	b.n	80064b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0ef      	beq.n	800644e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1ea      	bne.n	800644e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2204      	movs	r2, #4
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800648a:	2304      	movs	r3, #4
 800648c:	e014      	b.n	80064b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e009      	b.n	80064b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2240      	movs	r2, #64	@ 0x40
 80064b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064b6:	2300      	movs	r3, #0
  
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	20000000 	.word	0x20000000
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064d4:	4b11      	ldr	r3, [pc, #68]	@ (800651c <SDMMC_GetCmdError+0x50>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a11      	ldr	r2, [pc, #68]	@ (8006520 <SDMMC_GetCmdError+0x54>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	0a5b      	lsrs	r3, r3, #9
 80064e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
 80064e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1e5a      	subs	r2, r3, #1
 80064ee:	60fa      	str	r2, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064f8:	e009      	b.n	800650e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f1      	beq.n	80064ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	22c5      	movs	r2, #197	@ 0xc5
 800650a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000000 	.word	0x20000000
 8006520:	10624dd3 	.word	0x10624dd3

08006524 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006528:	4904      	ldr	r1, [pc, #16]	@ (800653c <MX_FATFS_Init+0x18>)
 800652a:	4805      	ldr	r0, [pc, #20]	@ (8006540 <MX_FATFS_Init+0x1c>)
 800652c:	f003 fe52 	bl	800a1d4 <FATFS_LinkDriver>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	4b03      	ldr	r3, [pc, #12]	@ (8006544 <MX_FATFS_Init+0x20>)
 8006536:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006538:	bf00      	nop
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20001504 	.word	0x20001504
 8006540:	0800b844 	.word	0x0800b844
 8006544:	20001500 	.word	0x20001500

08006548 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800654c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800654e:	4618      	mov	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006562:	f000 f896 	bl	8006692 <BSP_SD_IsDetected>
 8006566:	4603      	mov	r3, r0
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e012      	b.n	8006596 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006570:	480b      	ldr	r0, [pc, #44]	@ (80065a0 <BSP_SD_Init+0x48>)
 8006572:	f7fd fa8f 	bl	8003a94 <HAL_SD_Init>
 8006576:	4603      	mov	r3, r0
 8006578:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006584:	4806      	ldr	r0, [pc, #24]	@ (80065a0 <BSP_SD_Init+0x48>)
 8006586:	f7fe f855 	bl	8004634 <HAL_SD_ConfigWideBusOperation>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006594:	79fb      	ldrb	r3, [r7, #7]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	2000136c 	.word	0x2000136c

080065a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	4806      	ldr	r0, [pc, #24]	@ (80065d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80065bc:	f7fd fb12 	bl	8003be4 <HAL_SD_ReadBlocks_DMA>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	2000136c 	.word	0x2000136c

080065d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	68f9      	ldr	r1, [r7, #12]
 80065ee:	4806      	ldr	r0, [pc, #24]	@ (8006608 <BSP_SD_WriteBlocks_DMA+0x30>)
 80065f0:	f7fd fbda 	bl	8003da8 <HAL_SD_WriteBlocks_DMA>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	2000136c 	.word	0x2000136c

0800660c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006610:	4805      	ldr	r0, [pc, #20]	@ (8006628 <BSP_SD_GetCardState+0x1c>)
 8006612:	f7fe f8a9 	bl	8004768 <HAL_SD_GetCardState>
 8006616:	4603      	mov	r3, r0
 8006618:	2b04      	cmp	r3, #4
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
}
 8006622:	4618      	mov	r0, r3
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	2000136c 	.word	0x2000136c

0800662c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4803      	ldr	r0, [pc, #12]	@ (8006644 <BSP_SD_GetCardInfo+0x18>)
 8006638:	f7fd ffd0 	bl	80045dc <HAL_SD_GetCardInfo>
}
 800663c:	bf00      	nop
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	2000136c 	.word	0x2000136c

08006648 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006650:	f000 f818 	bl	8006684 <BSP_SD_AbortCallback>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006664:	f000 f9a8 	bl	80069b8 <BSP_SD_WriteCpltCallback>
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006678:	f000 f9aa 	bl	80069d0 <BSP_SD_ReadCpltCallback>
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0

}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006698:	2301      	movs	r3, #1
 800669a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800669c:	f000 f80c 	bl	80066b8 <BSP_PlatformIsDetected>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80066a6:	2300      	movs	r3, #0
 80066a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	b2db      	uxtb	r3, r3
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80066be:	2301      	movs	r3, #1
 80066c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80066c2:	2108      	movs	r1, #8
 80066c4:	4806      	ldr	r0, [pc, #24]	@ (80066e0 <BSP_PlatformIsDetected+0x28>)
 80066c6:	f7fb fe8f 	bl	80023e8 <HAL_GPIO_ReadPin>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80066d0:	2300      	movs	r3, #0
 80066d2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80066d4:	79fb      	ldrb	r3, [r7, #7]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40020c00 	.word	0x40020c00

080066e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80066ec:	f7fb f800 	bl	80016f0 <HAL_GetTick>
 80066f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80066f2:	e006      	b.n	8006702 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80066f4:	f7ff ff8a 	bl	800660c <BSP_SD_GetCardState>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	e009      	b.n	8006716 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006702:	f7fa fff5 	bl	80016f0 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d8f0      	bhi.n	80066f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800672a:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <SD_CheckStatus+0x38>)
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006730:	f7ff ff6c 	bl	800660c <BSP_SD_GetCardState>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800673a:	4b07      	ldr	r3, [pc, #28]	@ (8006758 <SD_CheckStatus+0x38>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	b2da      	uxtb	r2, r3
 8006746:	4b04      	ldr	r3, [pc, #16]	@ (8006758 <SD_CheckStatus+0x38>)
 8006748:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800674a:	4b03      	ldr	r3, [pc, #12]	@ (8006758 <SD_CheckStatus+0x38>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b2db      	uxtb	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000009 	.word	0x20000009

0800675c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006766:	f7ff fef7 	bl	8006558 <BSP_SD_Init>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d107      	bne.n	8006780 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff ffd4 	bl	8006720 <SD_CheckStatus>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	4b04      	ldr	r3, [pc, #16]	@ (8006790 <SD_initialize+0x34>)
 800677e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006780:	4b03      	ldr	r3, [pc, #12]	@ (8006790 <SD_initialize+0x34>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000009 	.word	0x20000009

08006794 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff ffbd 	bl	8006720 <SD_CheckStatus>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4603      	mov	r3, r0
 80067be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80067c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80067c8:	f7ff ff8c 	bl	80066e4 <SD_CheckStatusWithTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da01      	bge.n	80067d6 <SD_read+0x26>
  {
    return res;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	e03b      	b.n	800684e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	68b8      	ldr	r0, [r7, #8]
 80067dc:	f7ff fee2 	bl	80065a4 <BSP_SD_ReadBlocks_DMA>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d132      	bne.n	800684c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80067e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006858 <SD_read+0xa8>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80067ec:	f7fa ff80 	bl	80016f0 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80067f2:	bf00      	nop
 80067f4:	4b18      	ldr	r3, [pc, #96]	@ (8006858 <SD_read+0xa8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d108      	bne.n	800680e <SD_read+0x5e>
 80067fc:	f7fa ff78 	bl	80016f0 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	f247 522f 	movw	r2, #29999	@ 0x752f
 800680a:	4293      	cmp	r3, r2
 800680c:	d9f2      	bls.n	80067f4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800680e:	4b12      	ldr	r3, [pc, #72]	@ (8006858 <SD_read+0xa8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
 800681a:	e017      	b.n	800684c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800681c:	4b0e      	ldr	r3, [pc, #56]	@ (8006858 <SD_read+0xa8>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006822:	f7fa ff65 	bl	80016f0 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006828:	e007      	b.n	800683a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800682a:	f7ff feef 	bl	800660c <BSP_SD_GetCardState>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <SD_read+0x8a>
          {
            res = RES_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006838:	e008      	b.n	800684c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800683a:	f7fa ff59 	bl	80016f0 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006848:	4293      	cmp	r3, r2
 800684a:	d9ee      	bls.n	800682a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800684c:	7dfb      	ldrb	r3, [r7, #23]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20001740 	.word	0x20001740

0800685c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006870:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <SD_write+0xa8>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006876:	f247 5030 	movw	r0, #30000	@ 0x7530
 800687a:	f7ff ff33 	bl	80066e4 <SD_CheckStatusWithTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	da01      	bge.n	8006888 <SD_write+0x2c>
  {
    return res;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	e038      	b.n	80068fa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f7ff fea3 	bl	80065d8 <BSP_SD_WriteBlocks_DMA>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d12f      	bne.n	80068f8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006898:	f7fa ff2a 	bl	80016f0 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800689e:	bf00      	nop
 80068a0:	4b18      	ldr	r3, [pc, #96]	@ (8006904 <SD_write+0xa8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d108      	bne.n	80068ba <SD_write+0x5e>
 80068a8:	f7fa ff22 	bl	80016f0 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d9f2      	bls.n	80068a0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80068ba:	4b12      	ldr	r3, [pc, #72]	@ (8006904 <SD_write+0xa8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	75fb      	strb	r3, [r7, #23]
 80068c6:	e017      	b.n	80068f8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80068c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006904 <SD_write+0xa8>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80068ce:	f7fa ff0f 	bl	80016f0 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80068d4:	e007      	b.n	80068e6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80068d6:	f7ff fe99 	bl	800660c <BSP_SD_GetCardState>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <SD_write+0x8a>
          {
            res = RES_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	75fb      	strb	r3, [r7, #23]
            break;
 80068e4:	e008      	b.n	80068f8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80068e6:	f7fa ff03 	bl	80016f0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d9ee      	bls.n	80068d6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	2000173c 	.word	0x2000173c

08006908 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	@ 0x30
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	603a      	str	r2, [r7, #0]
 8006912:	71fb      	strb	r3, [r7, #7]
 8006914:	460b      	mov	r3, r1
 8006916:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800691e:	4b25      	ldr	r3, [pc, #148]	@ (80069b4 <SD_ioctl+0xac>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <SD_ioctl+0x28>
 800692c:	2303      	movs	r3, #3
 800692e:	e03c      	b.n	80069aa <SD_ioctl+0xa2>

  switch (cmd)
 8006930:	79bb      	ldrb	r3, [r7, #6]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d834      	bhi.n	80069a0 <SD_ioctl+0x98>
 8006936:	a201      	add	r2, pc, #4	@ (adr r2, 800693c <SD_ioctl+0x34>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	0800694d 	.word	0x0800694d
 8006940:	08006955 	.word	0x08006955
 8006944:	0800696d 	.word	0x0800696d
 8006948:	08006987 	.word	0x08006987
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006952:	e028      	b.n	80069a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fe67 	bl	800662c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800695e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800696a:	e01c      	b.n	80069a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800696c:	f107 030c 	add.w	r3, r7, #12
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fe5b 	bl	800662c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	b29a      	uxth	r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006984:	e00f      	b.n	80069a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006986:	f107 030c 	add.w	r3, r7, #12
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fe4e 	bl	800662c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006992:	0a5a      	lsrs	r2, r3, #9
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800699e:	e002      	b.n	80069a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80069a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3730      	adds	r7, #48	@ 0x30
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000009 	.word	0x20000009

080069b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80069bc:	4b03      	ldr	r3, [pc, #12]	@ (80069cc <BSP_SD_WriteCpltCallback+0x14>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
}
 80069c2:	bf00      	nop
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	2000173c 	.word	0x2000173c

080069d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80069d4:	4b03      	ldr	r3, [pc, #12]	@ (80069e4 <BSP_SD_ReadCpltCallback+0x14>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
}
 80069da:	bf00      	nop
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	20001740 	.word	0x20001740

080069e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	4a08      	ldr	r2, [pc, #32]	@ (8006a18 <disk_status+0x30>)
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	79fa      	ldrb	r2, [r7, #7]
 8006a00:	4905      	ldr	r1, [pc, #20]	@ (8006a18 <disk_status+0x30>)
 8006a02:	440a      	add	r2, r1
 8006a04:	7a12      	ldrb	r2, [r2, #8]
 8006a06:	4610      	mov	r0, r2
 8006a08:	4798      	blx	r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	2000176c 	.word	0x2000176c

08006a1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006a68 <disk_initialize+0x4c>)
 8006a2e:	5cd3      	ldrb	r3, [r2, r3]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d114      	bne.n	8006a5e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	4a0c      	ldr	r2, [pc, #48]	@ (8006a68 <disk_initialize+0x4c>)
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	79fa      	ldrb	r2, [r7, #7]
 8006a42:	4909      	ldr	r1, [pc, #36]	@ (8006a68 <disk_initialize+0x4c>)
 8006a44:	440a      	add	r2, r1
 8006a46:	7a12      	ldrb	r2, [r2, #8]
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	4a03      	ldr	r2, [pc, #12]	@ (8006a68 <disk_initialize+0x4c>)
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	2000176c 	.word	0x2000176c

08006a6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa8 <disk_read+0x3c>)
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	689c      	ldr	r4, [r3, #8]
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	4a07      	ldr	r2, [pc, #28]	@ (8006aa8 <disk_read+0x3c>)
 8006a8c:	4413      	add	r3, r2
 8006a8e:	7a18      	ldrb	r0, [r3, #8]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	47a0      	blx	r4
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd90      	pop	{r4, r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	2000176c 	.word	0x2000176c

08006aac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006aac:	b590      	push	{r4, r7, lr}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae8 <disk_write+0x3c>)
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	68dc      	ldr	r4, [r3, #12]
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	4a07      	ldr	r2, [pc, #28]	@ (8006ae8 <disk_write+0x3c>)
 8006acc:	4413      	add	r3, r2
 8006ace:	7a18      	ldrb	r0, [r3, #8]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	47a0      	blx	r4
 8006ad8:	4603      	mov	r3, r0
 8006ada:	75fb      	strb	r3, [r7, #23]
  return res;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2000176c 	.word	0x2000176c

08006aec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	603a      	str	r2, [r7, #0]
 8006af6:	71fb      	strb	r3, [r7, #7]
 8006af8:	460b      	mov	r3, r1
 8006afa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	4a09      	ldr	r2, [pc, #36]	@ (8006b24 <disk_ioctl+0x38>)
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	79fa      	ldrb	r2, [r7, #7]
 8006b0a:	4906      	ldr	r1, [pc, #24]	@ (8006b24 <disk_ioctl+0x38>)
 8006b0c:	440a      	add	r2, r1
 8006b0e:	7a10      	ldrb	r0, [r2, #8]
 8006b10:	79b9      	ldrb	r1, [r7, #6]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
  return res;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	2000176c 	.word	0x2000176c

08006b28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3301      	adds	r3, #1
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006b38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	b21a      	sxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b21b      	sxth	r3, r3
 8006b46:	4313      	orrs	r3, r2
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3303      	adds	r3, #3
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	3202      	adds	r2, #2
 8006b72:	7812      	ldrb	r2, [r2, #0]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	021b      	lsls	r3, r3, #8
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	3201      	adds	r2, #1
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	887b      	ldrh	r3, [r7, #2]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	887a      	ldrh	r2, [r7, #2]
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	1c53      	adds	r3, r2, #1
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	6179      	str	r1, [r7, #20]
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f1      	bne.n	8006c48 <mem_cpy+0x1a>
	}
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	617a      	str	r2, [r7, #20]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1f3      	bne.n	8006c80 <mem_set+0x10>
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ca6:	b480      	push	{r7}
 8006ca8:	b089      	sub	sp, #36	@ 0x24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	61fa      	str	r2, [r7, #28]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	61ba      	str	r2, [r7, #24]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	1acb      	subs	r3, r1, r3
 8006cd2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	607b      	str	r3, [r7, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <mem_cmp+0x40>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0eb      	beq.n	8006cbe <mem_cmp+0x18>

	return r;
 8006ce6:	697b      	ldr	r3, [r7, #20]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3724      	adds	r7, #36	@ 0x24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006cfe:	e002      	b.n	8006d06 <chk_chr+0x12>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <chk_chr+0x26>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d1f2      	bne.n	8006d00 <chk_chr+0xc>
	return *str;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e029      	b.n	8006d94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006d40:	4a27      	ldr	r2, [pc, #156]	@ (8006de0 <chk_lock+0xb4>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	4413      	add	r3, r2
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01d      	beq.n	8006d8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d4e:	4a24      	ldr	r2, [pc, #144]	@ (8006de0 <chk_lock+0xb4>)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	4413      	add	r3, r2
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d116      	bne.n	8006d8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006d60:	4a1f      	ldr	r2, [pc, #124]	@ (8006de0 <chk_lock+0xb4>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	4413      	add	r3, r2
 8006d68:	3304      	adds	r3, #4
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d10c      	bne.n	8006d8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d74:	4a1a      	ldr	r2, [pc, #104]	@ (8006de0 <chk_lock+0xb4>)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d102      	bne.n	8006d8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d88:	e007      	b.n	8006d9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3301      	adds	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d9d2      	bls.n	8006d40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d109      	bne.n	8006db4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <chk_lock+0x80>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d101      	bne.n	8006db0 <chk_lock+0x84>
 8006dac:	2300      	movs	r3, #0
 8006dae:	e010      	b.n	8006dd2 <chk_lock+0xa6>
 8006db0:	2312      	movs	r3, #18
 8006db2:	e00e      	b.n	8006dd2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <chk_lock+0xa0>
 8006dba:	4a09      	ldr	r2, [pc, #36]	@ (8006de0 <chk_lock+0xb4>)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	4413      	add	r3, r2
 8006dc2:	330c      	adds	r3, #12
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dca:	d101      	bne.n	8006dd0 <chk_lock+0xa4>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	e000      	b.n	8006dd2 <chk_lock+0xa6>
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	2000174c 	.word	0x2000174c

08006de4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	e002      	b.n	8006df6 <enq_lock+0x12>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3301      	adds	r3, #1
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d806      	bhi.n	8006e0a <enq_lock+0x26>
 8006dfc:	4a09      	ldr	r2, [pc, #36]	@ (8006e24 <enq_lock+0x40>)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	4413      	add	r3, r2
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f2      	bne.n	8006df0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000174c 	.word	0x2000174c

08006e28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e01f      	b.n	8006e78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006e38:	4a41      	ldr	r2, [pc, #260]	@ (8006f40 <inc_lock+0x118>)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	4413      	add	r3, r2
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d113      	bne.n	8006e72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8006f40 <inc_lock+0x118>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	4413      	add	r3, r2
 8006e52:	3304      	adds	r3, #4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d109      	bne.n	8006e72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006e5e:	4a38      	ldr	r2, [pc, #224]	@ (8006f40 <inc_lock+0x118>)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	4413      	add	r3, r2
 8006e66:	3308      	adds	r3, #8
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d006      	beq.n	8006e80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d9dc      	bls.n	8006e38 <inc_lock+0x10>
 8006e7e:	e000      	b.n	8006e82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006e80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d132      	bne.n	8006eee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e002      	b.n	8006e94 <inc_lock+0x6c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d806      	bhi.n	8006ea8 <inc_lock+0x80>
 8006e9a:	4a29      	ldr	r2, [pc, #164]	@ (8006f40 <inc_lock+0x118>)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	4413      	add	r3, r2
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f2      	bne.n	8006e8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d101      	bne.n	8006eb2 <inc_lock+0x8a>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e040      	b.n	8006f34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4922      	ldr	r1, [pc, #136]	@ (8006f40 <inc_lock+0x118>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	440b      	add	r3, r1
 8006ebe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	491e      	ldr	r1, [pc, #120]	@ (8006f40 <inc_lock+0x118>)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	440b      	add	r3, r1
 8006ecc:	3304      	adds	r3, #4
 8006ece:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	491a      	ldr	r1, [pc, #104]	@ (8006f40 <inc_lock+0x118>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	440b      	add	r3, r1
 8006edc:	3308      	adds	r3, #8
 8006ede:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006ee0:	4a17      	ldr	r2, [pc, #92]	@ (8006f40 <inc_lock+0x118>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	4413      	add	r3, r2
 8006ee8:	330c      	adds	r3, #12
 8006eea:	2200      	movs	r2, #0
 8006eec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <inc_lock+0xe0>
 8006ef4:	4a12      	ldr	r2, [pc, #72]	@ (8006f40 <inc_lock+0x118>)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	4413      	add	r3, r2
 8006efc:	330c      	adds	r3, #12
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <inc_lock+0xe0>
 8006f04:	2300      	movs	r3, #0
 8006f06:	e015      	b.n	8006f34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d108      	bne.n	8006f20 <inc_lock+0xf8>
 8006f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f40 <inc_lock+0x118>)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	4413      	add	r3, r2
 8006f16:	330c      	adds	r3, #12
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	e001      	b.n	8006f24 <inc_lock+0xfc>
 8006f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f24:	4906      	ldr	r1, [pc, #24]	@ (8006f40 <inc_lock+0x118>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	440b      	add	r3, r1
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	2000174c 	.word	0x2000174c

08006f44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d825      	bhi.n	8006fa4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006f58:	4a17      	ldr	r2, [pc, #92]	@ (8006fb8 <dec_lock+0x74>)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	4413      	add	r3, r2
 8006f60:	330c      	adds	r3, #12
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f66:	89fb      	ldrh	r3, [r7, #14]
 8006f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6c:	d101      	bne.n	8006f72 <dec_lock+0x2e>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f72:	89fb      	ldrh	r3, [r7, #14]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <dec_lock+0x3a>
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb8 <dec_lock+0x74>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	4413      	add	r3, r2
 8006f86:	330c      	adds	r3, #12
 8006f88:	89fa      	ldrh	r2, [r7, #14]
 8006f8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f8c:	89fb      	ldrh	r3, [r7, #14]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d105      	bne.n	8006f9e <dec_lock+0x5a>
 8006f92:	4a09      	ldr	r2, [pc, #36]	@ (8006fb8 <dec_lock+0x74>)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	4413      	add	r3, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	737b      	strb	r3, [r7, #13]
 8006fa2:	e001      	b.n	8006fa8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006fa8:	7b7b      	ldrb	r3, [r7, #13]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000174c 	.word	0x2000174c

08006fbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	e010      	b.n	8006fec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fca:	4a0d      	ldr	r2, [pc, #52]	@ (8007000 <clear_lock+0x44>)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	4413      	add	r3, r2
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d105      	bne.n	8006fe6 <clear_lock+0x2a>
 8006fda:	4a09      	ldr	r2, [pc, #36]	@ (8007000 <clear_lock+0x44>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	4413      	add	r3, r2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d9eb      	bls.n	8006fca <clear_lock+0xe>
	}
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	2000174c 	.word	0x2000174c

08007004 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	78db      	ldrb	r3, [r3, #3]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d034      	beq.n	8007082 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7858      	ldrb	r0, [r3, #1]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007028:	2301      	movs	r3, #1
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	f7ff fd3e 	bl	8006aac <disk_write>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007036:	2301      	movs	r3, #1
 8007038:	73fb      	strb	r3, [r7, #15]
 800703a:	e022      	b.n	8007082 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	1ad2      	subs	r2, r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	429a      	cmp	r2, r3
 8007050:	d217      	bcs.n	8007082 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	789b      	ldrb	r3, [r3, #2]
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	e010      	b.n	800707c <sync_window+0x78>
					wsect += fs->fsize;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4413      	add	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	7858      	ldrb	r0, [r3, #1]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800706e:	2301      	movs	r3, #1
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	f7ff fd1b 	bl	8006aac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3b01      	subs	r3, #1
 800707a:	613b      	str	r3, [r7, #16]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d8eb      	bhi.n	800705a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d01b      	beq.n	80070dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff ffad 	bl	8007004 <sync_window>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d113      	bne.n	80070dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7858      	ldrb	r0, [r3, #1]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80070be:	2301      	movs	r3, #1
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	f7ff fcd3 	bl	8006a6c <disk_read>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295
 80070d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff ff87 	bl	8007004 <sync_window>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d158      	bne.n	80071b2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d148      	bne.n	800719a <sync_fs+0xb2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	791b      	ldrb	r3, [r3, #4]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d144      	bne.n	800719a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3334      	adds	r3, #52	@ 0x34
 8007114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fda8 	bl	8006c70 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3334      	adds	r3, #52	@ 0x34
 8007124:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007128:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff fd37 	bl	8006ba0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3334      	adds	r3, #52	@ 0x34
 8007136:	4921      	ldr	r1, [pc, #132]	@ (80071bc <sync_fs+0xd4>)
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fd4c 	bl	8006bd6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3334      	adds	r3, #52	@ 0x34
 8007142:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007146:	491e      	ldr	r1, [pc, #120]	@ (80071c0 <sync_fs+0xd8>)
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fd44 	bl	8006bd6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3334      	adds	r3, #52	@ 0x34
 8007152:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f7ff fd3a 	bl	8006bd6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3334      	adds	r3, #52	@ 0x34
 8007166:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	4619      	mov	r1, r3
 8007170:	4610      	mov	r0, r2
 8007172:	f7ff fd30 	bl	8006bd6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7858      	ldrb	r0, [r3, #1]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800718e:	2301      	movs	r3, #1
 8007190:	f7ff fc8c 	bl	8006aac <disk_write>
			fs->fsi_flag = 0;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2200      	movs	r2, #0
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff fca2 	bl	8006aec <disk_ioctl>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <sync_fs+0xca>
 80071ae:	2301      	movs	r3, #1
 80071b0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	41615252 	.word	0x41615252
 80071c0:	61417272 	.word	0x61417272

080071c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	3b02      	subs	r3, #2
 80071d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	3b02      	subs	r3, #2
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d301      	bcc.n	80071e4 <clust2sect+0x20>
 80071e0:	2300      	movs	r3, #0
 80071e2:	e008      	b.n	80071f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	895b      	ldrh	r3, [r3, #10]
 80071e8:	461a      	mov	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	fb03 f202 	mul.w	r2, r3, r2
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	4413      	add	r3, r2
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d904      	bls.n	8007222 <get_fat+0x20>
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007222:	2301      	movs	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e08e      	b.n	8007346 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b03      	cmp	r3, #3
 8007234:	d061      	beq.n	80072fa <get_fat+0xf8>
 8007236:	2b03      	cmp	r3, #3
 8007238:	dc7b      	bgt.n	8007332 <get_fat+0x130>
 800723a:	2b01      	cmp	r3, #1
 800723c:	d002      	beq.n	8007244 <get_fat+0x42>
 800723e:	2b02      	cmp	r3, #2
 8007240:	d041      	beq.n	80072c6 <get_fat+0xc4>
 8007242:	e076      	b.n	8007332 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	0a5b      	lsrs	r3, r3, #9
 800725a:	4413      	add	r3, r2
 800725c:	4619      	mov	r1, r3
 800725e:	6938      	ldr	r0, [r7, #16]
 8007260:	f7ff ff14 	bl	800708c <move_window>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d166      	bne.n	8007338 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	60fa      	str	r2, [r7, #12]
 8007270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4413      	add	r3, r2
 8007278:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800727c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	0a5b      	lsrs	r3, r3, #9
 8007286:	4413      	add	r3, r2
 8007288:	4619      	mov	r1, r3
 800728a:	6938      	ldr	r0, [r7, #16]
 800728c:	f7ff fefe 	bl	800708c <move_window>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d152      	bne.n	800733c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4413      	add	r3, r2
 80072a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <get_fat+0xba>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	e002      	b.n	80072c2 <get_fat+0xc0>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c2:	617b      	str	r3, [r7, #20]
			break;
 80072c4:	e03f      	b.n	8007346 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	0a1b      	lsrs	r3, r3, #8
 80072ce:	4413      	add	r3, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	6938      	ldr	r0, [r7, #16]
 80072d4:	f7ff feda 	bl	800708c <move_window>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d130      	bne.n	8007340 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80072ec:	4413      	add	r3, r2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fc1a 	bl	8006b28 <ld_word>
 80072f4:	4603      	mov	r3, r0
 80072f6:	617b      	str	r3, [r7, #20]
			break;
 80072f8:	e025      	b.n	8007346 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	09db      	lsrs	r3, r3, #7
 8007302:	4413      	add	r3, r2
 8007304:	4619      	mov	r1, r3
 8007306:	6938      	ldr	r0, [r7, #16]
 8007308:	f7ff fec0 	bl	800708c <move_window>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d118      	bne.n	8007344 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007320:	4413      	add	r3, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff fc19 	bl	8006b5a <ld_dword>
 8007328:	4603      	mov	r3, r0
 800732a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800732e:	617b      	str	r3, [r7, #20]
			break;
 8007330:	e009      	b.n	8007346 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007332:	2301      	movs	r3, #1
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	e006      	b.n	8007346 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007338:	bf00      	nop
 800733a:	e004      	b.n	8007346 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800733c:	bf00      	nop
 800733e:	e002      	b.n	8007346 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007344:	bf00      	nop
		}
	}

	return val;
 8007346:	697b      	ldr	r3, [r7, #20]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b089      	sub	sp, #36	@ 0x24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800735c:	2302      	movs	r3, #2
 800735e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b01      	cmp	r3, #1
 8007364:	f240 80d9 	bls.w	800751a <put_fat+0x1ca>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	429a      	cmp	r2, r3
 8007370:	f080 80d3 	bcs.w	800751a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b03      	cmp	r3, #3
 800737a:	f000 8096 	beq.w	80074aa <put_fat+0x15a>
 800737e:	2b03      	cmp	r3, #3
 8007380:	f300 80cb 	bgt.w	800751a <put_fat+0x1ca>
 8007384:	2b01      	cmp	r3, #1
 8007386:	d002      	beq.n	800738e <put_fat+0x3e>
 8007388:	2b02      	cmp	r3, #2
 800738a:	d06e      	beq.n	800746a <put_fat+0x11a>
 800738c:	e0c5      	b.n	800751a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	4413      	add	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	0a5b      	lsrs	r3, r3, #9
 80073a4:	4413      	add	r3, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff fe6f 	bl	800708c <move_window>
 80073ae:	4603      	mov	r3, r0
 80073b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f040 80a9 	bne.w	800750c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	61b9      	str	r1, [r7, #24]
 80073c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ca:	4413      	add	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00d      	beq.n	80073f4 <put_fat+0xa4>
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b25b      	sxtb	r3, r3
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	b25a      	sxtb	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	b25b      	sxtb	r3, r3
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	b25b      	sxtb	r3, r3
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b25b      	sxtb	r3, r3
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	e001      	b.n	80073f8 <put_fat+0xa8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	0a5b      	lsrs	r3, r3, #9
 800740a:	4413      	add	r3, r2
 800740c:	4619      	mov	r1, r3
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff fe3c 	bl	800708c <move_window>
 8007414:	4603      	mov	r3, r0
 8007416:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007418:	7ffb      	ldrb	r3, [r7, #31]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d178      	bne.n	8007510 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	4413      	add	r3, r2
 800742c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <put_fat+0xf0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	091b      	lsrs	r3, r3, #4
 800743c:	b2db      	uxtb	r3, r3
 800743e:	e00e      	b.n	800745e <put_fat+0x10e>
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	b25b      	sxtb	r3, r3
 8007446:	f023 030f 	bic.w	r3, r3, #15
 800744a:	b25a      	sxtb	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	b25b      	sxtb	r3, r3
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	b25b      	sxtb	r3, r3
 8007458:	4313      	orrs	r3, r2
 800745a:	b25b      	sxtb	r3, r3
 800745c:	b2db      	uxtb	r3, r3
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2201      	movs	r2, #1
 8007466:	70da      	strb	r2, [r3, #3]
			break;
 8007468:	e057      	b.n	800751a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	0a1b      	lsrs	r3, r3, #8
 8007472:	4413      	add	r3, r2
 8007474:	4619      	mov	r1, r3
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fe08 	bl	800708c <move_window>
 800747c:	4603      	mov	r3, r0
 800747e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007480:	7ffb      	ldrb	r3, [r7, #31]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d146      	bne.n	8007514 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007494:	4413      	add	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	b292      	uxth	r2, r2
 800749a:	4611      	mov	r1, r2
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fb7f 	bl	8006ba0 <st_word>
			fs->wflag = 1;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	70da      	strb	r2, [r3, #3]
			break;
 80074a8:	e037      	b.n	800751a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	09db      	lsrs	r3, r3, #7
 80074b2:	4413      	add	r3, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff fde8 	bl	800708c <move_window>
 80074bc:	4603      	mov	r3, r0
 80074be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074c0:	7ffb      	ldrb	r3, [r7, #31]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d128      	bne.n	8007518 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80074da:	4413      	add	r3, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fb3c 	bl	8006b5a <ld_dword>
 80074e2:	4603      	mov	r3, r0
 80074e4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80074e8:	4323      	orrs	r3, r4
 80074ea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80074fa:	4413      	add	r3, r2
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fb69 	bl	8006bd6 <st_dword>
			fs->wflag = 1;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	70da      	strb	r2, [r3, #3]
			break;
 800750a:	e006      	b.n	800751a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800750c:	bf00      	nop
 800750e:	e004      	b.n	800751a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007510:	bf00      	nop
 8007512:	e002      	b.n	800751a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007518:	bf00      	nop
		}
	}
	return res;
 800751a:	7ffb      	ldrb	r3, [r7, #31]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3724      	adds	r7, #36	@ 0x24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd90      	pop	{r4, r7, pc}

08007524 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d904      	bls.n	800754a <remove_chain+0x26>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	d301      	bcc.n	800754e <remove_chain+0x2a>
 800754a:	2302      	movs	r3, #2
 800754c:	e04b      	b.n	80075e6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00c      	beq.n	800756e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007554:	f04f 32ff 	mov.w	r2, #4294967295
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	69b8      	ldr	r0, [r7, #24]
 800755c:	f7ff fef8 	bl	8007350 <put_fat>
 8007560:	4603      	mov	r3, r0
 8007562:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007564:	7ffb      	ldrb	r3, [r7, #31]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <remove_chain+0x4a>
 800756a:	7ffb      	ldrb	r3, [r7, #31]
 800756c:	e03b      	b.n	80075e6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff fe46 	bl	8007202 <get_fat>
 8007576:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d031      	beq.n	80075e2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <remove_chain+0x64>
 8007584:	2302      	movs	r3, #2
 8007586:	e02e      	b.n	80075e6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d101      	bne.n	8007594 <remove_chain+0x70>
 8007590:	2301      	movs	r3, #1
 8007592:	e028      	b.n	80075e6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007594:	2200      	movs	r2, #0
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	69b8      	ldr	r0, [r7, #24]
 800759a:	f7ff fed9 	bl	8007350 <put_fat>
 800759e:	4603      	mov	r3, r0
 80075a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80075a2:	7ffb      	ldrb	r3, [r7, #31]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <remove_chain+0x88>
 80075a8:	7ffb      	ldrb	r3, [r7, #31]
 80075aa:	e01c      	b.n	80075e6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	3b02      	subs	r3, #2
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d20b      	bcs.n	80075d2 <remove_chain+0xae>
			fs->free_clst++;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	791b      	ldrb	r3, [r3, #4]
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d3c6      	bcc.n	800756e <remove_chain+0x4a>
 80075e0:	e000      	b.n	80075e4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80075e2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b088      	sub	sp, #32
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10d      	bne.n	8007620 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <create_chain+0x2c>
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d31b      	bcc.n	8007652 <create_chain+0x64>
 800761a:	2301      	movs	r3, #1
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	e018      	b.n	8007652 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff fded 	bl	8007202 <get_fat>
 8007628:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d801      	bhi.n	8007634 <create_chain+0x46>
 8007630:	2301      	movs	r3, #1
 8007632:	e070      	b.n	8007716 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d101      	bne.n	8007640 <create_chain+0x52>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	e06a      	b.n	8007716 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	429a      	cmp	r2, r3
 8007648:	d201      	bcs.n	800764e <create_chain+0x60>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	e063      	b.n	8007716 <create_chain+0x128>
		scl = clst;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3301      	adds	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	429a      	cmp	r2, r3
 8007664:	d307      	bcc.n	8007676 <create_chain+0x88>
				ncl = 2;
 8007666:	2302      	movs	r3, #2
 8007668:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	429a      	cmp	r2, r3
 8007670:	d901      	bls.n	8007676 <create_chain+0x88>
 8007672:	2300      	movs	r3, #0
 8007674:	e04f      	b.n	8007716 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007676:	69f9      	ldr	r1, [r7, #28]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff fdc2 	bl	8007202 <get_fat>
 800767e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00e      	beq.n	80076a4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d003      	beq.n	8007694 <create_chain+0xa6>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d101      	bne.n	8007698 <create_chain+0xaa>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	e03e      	b.n	8007716 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	429a      	cmp	r2, r3
 800769e:	d1da      	bne.n	8007656 <create_chain+0x68>
 80076a0:	2300      	movs	r3, #0
 80076a2:	e038      	b.n	8007716 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80076a4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80076a6:	f04f 32ff 	mov.w	r2, #4294967295
 80076aa:	69f9      	ldr	r1, [r7, #28]
 80076ac:	6938      	ldr	r0, [r7, #16]
 80076ae:	f7ff fe4f 	bl	8007350 <put_fat>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d109      	bne.n	80076d0 <create_chain+0xe2>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6938      	ldr	r0, [r7, #16]
 80076c8:	f7ff fe42 	bl	8007350 <put_fat>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d116      	bne.n	8007704 <create_chain+0x116>
		fs->last_clst = ncl;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	695a      	ldr	r2, [r3, #20]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	3b02      	subs	r3, #2
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d804      	bhi.n	80076f4 <create_chain+0x106>
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	1e5a      	subs	r2, r3, #1
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	791b      	ldrb	r3, [r3, #4]
 80076f8:	f043 0301 	orr.w	r3, r3, #1
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	711a      	strb	r2, [r3, #4]
 8007702:	e007      	b.n	8007714 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d102      	bne.n	8007710 <create_chain+0x122>
 800770a:	f04f 33ff 	mov.w	r3, #4294967295
 800770e:	e000      	b.n	8007712 <create_chain+0x124>
 8007710:	2301      	movs	r3, #1
 8007712:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007714:	69fb      	ldr	r3, [r7, #28]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3720      	adds	r7, #32
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	3304      	adds	r3, #4
 8007734:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	0a5b      	lsrs	r3, r3, #9
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	8952      	ldrh	r2, [r2, #10]
 800773e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007742:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	1d1a      	adds	r2, r3, #4
 8007748:	613a      	str	r2, [r7, #16]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <clmt_clust+0x3a>
 8007754:	2300      	movs	r3, #0
 8007756:	e010      	b.n	800777a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	429a      	cmp	r2, r3
 800775e:	d307      	bcc.n	8007770 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3304      	adds	r3, #4
 800776c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800776e:	e7e9      	b.n	8007744 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007770:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4413      	add	r3, r2
}
 800777a:	4618      	mov	r0, r3
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b086      	sub	sp, #24
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800779c:	d204      	bcs.n	80077a8 <dir_sdi+0x22>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	f003 031f 	and.w	r3, r3, #31
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <dir_sdi+0x26>
		return FR_INT_ERR;
 80077a8:	2302      	movs	r3, #2
 80077aa:	e063      	b.n	8007874 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <dir_sdi+0x46>
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d902      	bls.n	80077cc <dir_sdi+0x46>
		clst = fs->dirbase;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10c      	bne.n	80077ec <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	8912      	ldrh	r2, [r2, #8]
 80077da:	4293      	cmp	r3, r2
 80077dc:	d301      	bcc.n	80077e2 <dir_sdi+0x5c>
 80077de:	2302      	movs	r3, #2
 80077e0:	e048      	b.n	8007874 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	61da      	str	r2, [r3, #28]
 80077ea:	e029      	b.n	8007840 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	895b      	ldrh	r3, [r3, #10]
 80077f0:	025b      	lsls	r3, r3, #9
 80077f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80077f4:	e019      	b.n	800782a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6979      	ldr	r1, [r7, #20]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fd01 	bl	8007202 <get_fat>
 8007800:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d101      	bne.n	800780e <dir_sdi+0x88>
 800780a:	2301      	movs	r3, #1
 800780c:	e032      	b.n	8007874 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d904      	bls.n	800781e <dir_sdi+0x98>
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	429a      	cmp	r2, r3
 800781c:	d301      	bcc.n	8007822 <dir_sdi+0x9c>
 800781e:	2302      	movs	r3, #2
 8007820:	e028      	b.n	8007874 <dir_sdi+0xee>
			ofs -= csz;
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	429a      	cmp	r2, r3
 8007830:	d2e1      	bcs.n	80077f6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007832:	6979      	ldr	r1, [r7, #20]
 8007834:	6938      	ldr	r0, [r7, #16]
 8007836:	f7ff fcc5 	bl	80071c4 <clust2sect>
 800783a:	4602      	mov	r2, r0
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <dir_sdi+0xcc>
 800784e:	2302      	movs	r3, #2
 8007850:	e010      	b.n	8007874 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	69da      	ldr	r2, [r3, #28]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	0a5b      	lsrs	r3, r3, #9
 800785a:	441a      	add	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786c:	441a      	add	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	3320      	adds	r3, #32
 8007892:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <dir_next+0x28>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078a2:	d301      	bcc.n	80078a8 <dir_next+0x2c>
 80078a4:	2304      	movs	r3, #4
 80078a6:	e0aa      	b.n	80079fe <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f040 8098 	bne.w	80079e4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	095b      	lsrs	r3, r3, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	8912      	ldrh	r2, [r2, #8]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	f0c0 8088 	bcc.w	80079e4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	61da      	str	r2, [r3, #28]
 80078da:	2304      	movs	r3, #4
 80078dc:	e08f      	b.n	80079fe <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	0a5b      	lsrs	r3, r3, #9
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	8952      	ldrh	r2, [r2, #10]
 80078e6:	3a01      	subs	r2, #1
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d17a      	bne.n	80079e4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7ff fc83 	bl	8007202 <get_fat>
 80078fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d801      	bhi.n	8007908 <dir_next+0x8c>
 8007904:	2302      	movs	r3, #2
 8007906:	e07a      	b.n	80079fe <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d101      	bne.n	8007914 <dir_next+0x98>
 8007910:	2301      	movs	r3, #1
 8007912:	e074      	b.n	80079fe <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	429a      	cmp	r2, r3
 800791c:	d358      	bcc.n	80079d0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	61da      	str	r2, [r3, #28]
 800792a:	2304      	movs	r3, #4
 800792c:	e067      	b.n	80079fe <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7ff fe59 	bl	80075ee <create_chain>
 800793c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <dir_next+0xcc>
 8007944:	2307      	movs	r3, #7
 8007946:	e05a      	b.n	80079fe <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <dir_next+0xd6>
 800794e:	2302      	movs	r3, #2
 8007950:	e055      	b.n	80079fe <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d101      	bne.n	800795e <dir_next+0xe2>
 800795a:	2301      	movs	r3, #1
 800795c:	e04f      	b.n	80079fe <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fb50 	bl	8007004 <sync_window>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <dir_next+0xf2>
 800796a:	2301      	movs	r3, #1
 800796c:	e047      	b.n	80079fe <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3334      	adds	r3, #52	@ 0x34
 8007972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff f979 	bl	8006c70 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fc1d 	bl	80071c4 <clust2sect>
 800798a:	4602      	mov	r2, r0
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007990:	e012      	b.n	80079b8 <dir_next+0x13c>
						fs->wflag = 1;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fb33 	bl	8007004 <sync_window>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <dir_next+0x12c>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e02a      	b.n	80079fe <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	3301      	adds	r3, #1
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	895b      	ldrh	r3, [r3, #10]
 80079bc:	461a      	mov	r2, r3
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d3e6      	bcc.n	8007992 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80079d6:	6979      	ldr	r1, [r7, #20]
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7ff fbf3 	bl	80071c4 <clust2sect>
 80079de:	4602      	mov	r2, r0
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f6:	441a      	add	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007a16:	2100      	movs	r1, #0
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff feb4 	bl	8007786 <dir_sdi>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d12b      	bne.n	8007a80 <dir_alloc+0x7a>
		n = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	4619      	mov	r1, r3
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fb2a 	bl	800708c <move_window>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11d      	bne.n	8007a7e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2be5      	cmp	r3, #229	@ 0xe5
 8007a4a:	d004      	beq.n	8007a56 <dir_alloc+0x50>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d107      	bne.n	8007a66 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d102      	bne.n	8007a6a <dir_alloc+0x64>
 8007a64:	e00c      	b.n	8007a80 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ff05 	bl	800787c <dir_next>
 8007a72:	4603      	mov	r3, r0
 8007a74:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0d7      	beq.n	8007a2c <dir_alloc+0x26>
 8007a7c:	e000      	b.n	8007a80 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007a7e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d101      	bne.n	8007a8a <dir_alloc+0x84>
 8007a86:	2307      	movs	r3, #7
 8007a88:	75fb      	strb	r3, [r7, #23]
	return res;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	331a      	adds	r3, #26
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff f840 	bl	8006b28 <ld_word>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d109      	bne.n	8007ac8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3314      	adds	r3, #20
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff f835 	bl	8006b28 <ld_word>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	041b      	lsls	r3, r3, #16
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	331a      	adds	r3, #26
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff f859 	bl	8006ba0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d109      	bne.n	8007b0a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f103 0214 	add.w	r2, r3, #20
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	0c1b      	lsrs	r3, r3, #16
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	4619      	mov	r1, r3
 8007b04:	4610      	mov	r0, r2
 8007b06:	f7ff f84b 	bl	8006ba0 <st_word>
	}
}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007b14:	b590      	push	{r4, r7, lr}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	331a      	adds	r3, #26
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff f800 	bl	8006b28 <ld_word>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <cmp_lfn+0x1e>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e059      	b.n	8007be6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b3a:	1e5a      	subs	r2, r3, #1
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007b48:	2301      	movs	r3, #1
 8007b4a:	81fb      	strh	r3, [r7, #14]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	e033      	b.n	8007bba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007b52:	4a27      	ldr	r2, [pc, #156]	@ (8007bf0 <cmp_lfn+0xdc>)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4413      	add	r3, r2
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	4413      	add	r3, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe ffe1 	bl	8006b28 <ld_word>
 8007b66:	4603      	mov	r3, r0
 8007b68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007b6a:	89fb      	ldrh	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01a      	beq.n	8007ba6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b74:	d812      	bhi.n	8007b9c <cmp_lfn+0x88>
 8007b76:	89bb      	ldrh	r3, [r7, #12]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f002 fb99 	bl	800a2b0 <ff_wtoupper>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	461c      	mov	r4, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	617a      	str	r2, [r7, #20]
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f002 fb8d 	bl	800a2b0 <ff_wtoupper>
 8007b96:	4603      	mov	r3, r0
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d001      	beq.n	8007ba0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e022      	b.n	8007be6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007ba0:	89bb      	ldrh	r3, [r7, #12]
 8007ba2:	81fb      	strh	r3, [r7, #14]
 8007ba4:	e006      	b.n	8007bb4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007ba6:	89bb      	ldrh	r3, [r7, #12]
 8007ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d001      	beq.n	8007bb4 <cmp_lfn+0xa0>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e018      	b.n	8007be6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b0c      	cmp	r3, #12
 8007bbe:	d9c8      	bls.n	8007b52 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <cmp_lfn+0xd0>
 8007bcc:	89fb      	ldrh	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d008      	beq.n	8007be4 <cmp_lfn+0xd0>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <cmp_lfn+0xd0>
 8007be0:	2300      	movs	r3, #0
 8007be2:	e000      	b.n	8007be6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007be4:	2301      	movs	r3, #1
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd90      	pop	{r4, r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	0800b858 	.word	0x0800b858

08007bf4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	331a      	adds	r3, #26
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe ff90 	bl	8006b28 <ld_word>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <pick_lfn+0x1e>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e04d      	b.n	8007cae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c1a:	1e5a      	subs	r2, r3, #1
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c28:	2301      	movs	r3, #1
 8007c2a:	81fb      	strh	r3, [r7, #14]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	e028      	b.n	8007c84 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007c32:	4a21      	ldr	r2, [pc, #132]	@ (8007cb8 <pick_lfn+0xc4>)
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	4413      	add	r3, r2
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	4413      	add	r3, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe ff71 	bl	8006b28 <ld_word>
 8007c46:	4603      	mov	r3, r0
 8007c48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007c4a:	89fb      	ldrh	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00f      	beq.n	8007c70 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2bfe      	cmp	r3, #254	@ 0xfe
 8007c54:	d901      	bls.n	8007c5a <pick_lfn+0x66>
 8007c56:	2300      	movs	r3, #0
 8007c58:	e029      	b.n	8007cae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007c5a:	89bb      	ldrh	r3, [r7, #12]
 8007c5c:	81fb      	strh	r3, [r7, #14]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	617a      	str	r2, [r7, #20]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	4413      	add	r3, r2
 8007c6a:	89fa      	ldrh	r2, [r7, #14]
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	e006      	b.n	8007c7e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007c70:	89bb      	ldrh	r3, [r7, #12]
 8007c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d001      	beq.n	8007c7e <pick_lfn+0x8a>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e017      	b.n	8007cae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	3301      	adds	r3, #1
 8007c82:	613b      	str	r3, [r7, #16]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b0c      	cmp	r3, #12
 8007c88:	d9d3      	bls.n	8007c32 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2bfe      	cmp	r3, #254	@ 0xfe
 8007c9a:	d901      	bls.n	8007ca0 <pick_lfn+0xac>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e006      	b.n	8007cae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	2200      	movs	r2, #0
 8007caa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007cac:	2301      	movs	r3, #1
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800b858 	.word	0x0800b858

08007cbc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	460b      	mov	r3, r1
 8007ccc:	71fb      	strb	r3, [r7, #7]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	330d      	adds	r3, #13
 8007cd6:	79ba      	ldrb	r2, [r7, #6]
 8007cd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	330b      	adds	r3, #11
 8007cde:	220f      	movs	r2, #15
 8007ce0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	331a      	adds	r3, #26
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe ff55 	bl	8006ba0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	1e5a      	subs	r2, r3, #1
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	82fb      	strh	r3, [r7, #22]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007d0e:	8afb      	ldrh	r3, [r7, #22]
 8007d10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <put_lfn+0x6c>
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	61fa      	str	r2, [r7, #28]
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4413      	add	r3, r2
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007d28:	4a17      	ldr	r2, [pc, #92]	@ (8007d88 <put_lfn+0xcc>)
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	4413      	add	r3, r2
 8007d36:	8afa      	ldrh	r2, [r7, #22]
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe ff30 	bl	8006ba0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007d40:	8afb      	ldrh	r3, [r7, #22]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <put_lfn+0x90>
 8007d46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d4a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	2b0c      	cmp	r3, #12
 8007d56:	d9da      	bls.n	8007d0e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007d58:	8afb      	ldrh	r3, [r7, #22]
 8007d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d006      	beq.n	8007d70 <put_lfn+0xb4>
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <put_lfn+0xbc>
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d76:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	79fa      	ldrb	r2, [r7, #7]
 8007d7c:	701a      	strb	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	3720      	adds	r7, #32
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	0800b858 	.word	0x0800b858

08007d8c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08c      	sub	sp, #48	@ 0x30
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007d9a:	220b      	movs	r2, #11
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7fe ff45 	bl	8006c2e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	d92b      	bls.n	8007e02 <gen_numname+0x76>
		sr = seq;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007dae:	e022      	b.n	8007df6 <gen_numname+0x6a>
			wc = *lfn++;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1c9a      	adds	r2, r3, #2
 8007db4:	607a      	str	r2, [r7, #4]
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007dba:	2300      	movs	r3, #0
 8007dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dbe:	e017      	b.n	8007df0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	005a      	lsls	r2, r3, #1
 8007dc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	4413      	add	r3, r2
 8007dcc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007dce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <gen_numname+0x5e>
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007de4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007de8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dec:	3301      	adds	r3, #1
 8007dee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	2b0f      	cmp	r3, #15
 8007df4:	d9e4      	bls.n	8007dc0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1d8      	bne.n	8007db0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007e02:	2307      	movs	r3, #7
 8007e04:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	3330      	adds	r3, #48	@ 0x30
 8007e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e1a:	2b39      	cmp	r3, #57	@ 0x39
 8007e1c:	d904      	bls.n	8007e28 <gen_numname+0x9c>
 8007e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e22:	3307      	adds	r3, #7
 8007e24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	1e5a      	subs	r2, r3, #1
 8007e2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007e2e:	3330      	adds	r3, #48	@ 0x30
 8007e30:	443b      	add	r3, r7
 8007e32:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007e36:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	091b      	lsrs	r3, r3, #4
 8007e3e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1df      	bne.n	8007e06 <gen_numname+0x7a>
	ns[i] = '~';
 8007e46:	f107 0214 	add.w	r2, r7, #20
 8007e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4c:	4413      	add	r3, r2
 8007e4e:	227e      	movs	r2, #126	@ 0x7e
 8007e50:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007e52:	2300      	movs	r3, #0
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e56:	e016      	b.n	8007e86 <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	4413      	add	r3, r2
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b80      	cmp	r3, #128	@ 0x80
 8007e62:	d90d      	bls.n	8007e80 <gen_numname+0xf4>
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	4413      	add	r3, r2
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2bff      	cmp	r3, #255	@ 0xff
 8007e6e:	d007      	beq.n	8007e80 <gen_numname+0xf4>
			if (j == i - 1) break;
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	3b01      	subs	r3, #1
 8007e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d010      	beq.n	8007e9c <gen_numname+0x110>
			j++;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e82:	3301      	adds	r3, #1
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d207      	bcs.n	8007e9e <gen_numname+0x112>
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	4413      	add	r3, r2
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d1de      	bne.n	8007e58 <gen_numname+0xcc>
 8007e9a:	e000      	b.n	8007e9e <gen_numname+0x112>
			if (j == i - 1) break;
 8007e9c:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	2b07      	cmp	r3, #7
 8007ea2:	d807      	bhi.n	8007eb4 <gen_numname+0x128>
 8007ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007eaa:	3330      	adds	r3, #48	@ 0x30
 8007eac:	443b      	add	r3, r7
 8007eae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007eb2:	e000      	b.n	8007eb6 <gen_numname+0x12a>
 8007eb4:	2120      	movs	r1, #32
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	d9e9      	bls.n	8007e9e <gen_numname+0x112>
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	3730      	adds	r7, #48	@ 0x30
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007ee0:	230b      	movs	r3, #11
 8007ee2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	0852      	lsrs	r2, r2, #1
 8007eea:	01db      	lsls	r3, r3, #7
 8007eec:	4313      	orrs	r3, r2
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	6079      	str	r1, [r7, #4]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4413      	add	r3, r2
 8007efa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1ed      	bne.n	8007ee4 <sum_sfn+0x10>
	return sum;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007f20:	2304      	movs	r3, #4
 8007f22:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007f2a:	23ff      	movs	r3, #255	@ 0xff
 8007f2c:	757b      	strb	r3, [r7, #21]
 8007f2e:	23ff      	movs	r3, #255	@ 0xff
 8007f30:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007f32:	e081      	b.n	8008038 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f7ff f8a6 	bl	800708c <move_window>
 8007f40:	4603      	mov	r3, r0
 8007f42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d17c      	bne.n	8008044 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007f52:	7dbb      	ldrb	r3, [r7, #22]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007f58:	2304      	movs	r3, #4
 8007f5a:	75fb      	strb	r3, [r7, #23]
 8007f5c:	e077      	b.n	800804e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	330b      	adds	r3, #11
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f6a:	73fb      	strb	r3, [r7, #15]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7bfa      	ldrb	r2, [r7, #15]
 8007f70:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007f72:	7dbb      	ldrb	r3, [r7, #22]
 8007f74:	2be5      	cmp	r3, #229	@ 0xe5
 8007f76:	d00e      	beq.n	8007f96 <dir_read+0x80>
 8007f78:	7dbb      	ldrb	r3, [r7, #22]
 8007f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f7c:	d00b      	beq.n	8007f96 <dir_read+0x80>
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	f023 0320 	bic.w	r3, r3, #32
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d002      	beq.n	8007f9c <dir_read+0x86>
				ord = 0xFF;
 8007f96:	23ff      	movs	r3, #255	@ 0xff
 8007f98:	757b      	strb	r3, [r7, #21]
 8007f9a:	e044      	b.n	8008026 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b0f      	cmp	r3, #15
 8007fa0:	d12f      	bne.n	8008002 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007fa2:	7dbb      	ldrb	r3, [r7, #22]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00d      	beq.n	8007fc8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	7b5b      	ldrb	r3, [r3, #13]
 8007fb2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007fb4:	7dbb      	ldrb	r3, [r7, #22]
 8007fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fba:	75bb      	strb	r3, [r7, #22]
 8007fbc:	7dbb      	ldrb	r3, [r7, #22]
 8007fbe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	695a      	ldr	r2, [r3, #20]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007fc8:	7dba      	ldrb	r2, [r7, #22]
 8007fca:	7d7b      	ldrb	r3, [r7, #21]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d115      	bne.n	8007ffc <dir_read+0xe6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	330d      	adds	r3, #13
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	7d3a      	ldrb	r2, [r7, #20]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d10e      	bne.n	8007ffc <dir_read+0xe6>
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f7ff fe03 	bl	8007bf4 <pick_lfn>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <dir_read+0xe6>
 8007ff4:	7d7b      	ldrb	r3, [r7, #21]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	e000      	b.n	8007ffe <dir_read+0xe8>
 8007ffc:	23ff      	movs	r3, #255	@ 0xff
 8007ffe:	757b      	strb	r3, [r7, #21]
 8008000:	e011      	b.n	8008026 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008002:	7d7b      	ldrb	r3, [r7, #21]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <dir_read+0x106>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff ff61 	bl	8007ed4 <sum_sfn>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	7d3b      	ldrb	r3, [r7, #20]
 8008018:	4293      	cmp	r3, r2
 800801a:	d015      	beq.n	8008048 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f04f 32ff 	mov.w	r2, #4294967295
 8008022:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8008024:	e010      	b.n	8008048 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008026:	2100      	movs	r1, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fc27 	bl	800787c <dir_next>
 800802e:	4603      	mov	r3, r0
 8008030:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d109      	bne.n	800804c <dir_read+0x136>
	while (dp->sect) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f47f af79 	bne.w	8007f34 <dir_read+0x1e>
 8008042:	e004      	b.n	800804e <dir_read+0x138>
		if (res != FR_OK) break;
 8008044:	bf00      	nop
 8008046:	e002      	b.n	800804e <dir_read+0x138>
					break;
 8008048:	bf00      	nop
 800804a:	e000      	b.n	800804e <dir_read+0x138>
		if (res != FR_OK) break;
 800804c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <dir_read+0x144>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	61da      	str	r2, [r3, #28]
	return res;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008072:	2100      	movs	r1, #0
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fb86 	bl	8007786 <dir_sdi>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <dir_find+0x24>
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	e0a9      	b.n	80081dc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008088:	23ff      	movs	r3, #255	@ 0xff
 800808a:	753b      	strb	r3, [r7, #20]
 800808c:	7d3b      	ldrb	r3, [r7, #20]
 800808e:	757b      	strb	r3, [r7, #21]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f04f 32ff 	mov.w	r2, #4294967295
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	4619      	mov	r1, r3
 800809e:	6938      	ldr	r0, [r7, #16]
 80080a0:	f7fe fff4 	bl	800708c <move_window>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f040 8090 	bne.w	80081d0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080b8:	7dbb      	ldrb	r3, [r7, #22]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <dir_find+0x60>
 80080be:	2304      	movs	r3, #4
 80080c0:	75fb      	strb	r3, [r7, #23]
 80080c2:	e08a      	b.n	80081da <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	330b      	adds	r3, #11
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080d0:	73fb      	strb	r3, [r7, #15]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7bfa      	ldrb	r2, [r7, #15]
 80080d6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80080d8:	7dbb      	ldrb	r3, [r7, #22]
 80080da:	2be5      	cmp	r3, #229	@ 0xe5
 80080dc:	d007      	beq.n	80080ee <dir_find+0x8a>
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d009      	beq.n	80080fc <dir_find+0x98>
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b0f      	cmp	r3, #15
 80080ec:	d006      	beq.n	80080fc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80080ee:	23ff      	movs	r3, #255	@ 0xff
 80080f0:	757b      	strb	r3, [r7, #21]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f04f 32ff 	mov.w	r2, #4294967295
 80080f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80080fa:	e05e      	b.n	80081ba <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b0f      	cmp	r3, #15
 8008100:	d136      	bne.n	8008170 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d154      	bne.n	80081ba <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008110:	7dbb      	ldrb	r3, [r7, #22]
 8008112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	7b5b      	ldrb	r3, [r3, #13]
 8008120:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008122:	7dbb      	ldrb	r3, [r7, #22]
 8008124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008128:	75bb      	strb	r3, [r7, #22]
 800812a:	7dbb      	ldrb	r3, [r7, #22]
 800812c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695a      	ldr	r2, [r3, #20]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008136:	7dba      	ldrb	r2, [r7, #22]
 8008138:	7d7b      	ldrb	r3, [r7, #21]
 800813a:	429a      	cmp	r2, r3
 800813c:	d115      	bne.n	800816a <dir_find+0x106>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	330d      	adds	r3, #13
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	7d3a      	ldrb	r2, [r7, #20]
 8008148:	429a      	cmp	r2, r3
 800814a:	d10e      	bne.n	800816a <dir_find+0x106>
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f7ff fcdc 	bl	8007b14 <cmp_lfn>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <dir_find+0x106>
 8008162:	7d7b      	ldrb	r3, [r7, #21]
 8008164:	3b01      	subs	r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	e000      	b.n	800816c <dir_find+0x108>
 800816a:	23ff      	movs	r3, #255	@ 0xff
 800816c:	757b      	strb	r3, [r7, #21]
 800816e:	e024      	b.n	80081ba <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008170:	7d7b      	ldrb	r3, [r7, #21]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <dir_find+0x126>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff feaa 	bl	8007ed4 <sum_sfn>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	7d3b      	ldrb	r3, [r7, #20]
 8008186:	4293      	cmp	r3, r2
 8008188:	d024      	beq.n	80081d4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <dir_find+0x14a>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a18      	ldr	r0, [r3, #32]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3324      	adds	r3, #36	@ 0x24
 80081a0:	220b      	movs	r2, #11
 80081a2:	4619      	mov	r1, r3
 80081a4:	f7fe fd7f 	bl	8006ca6 <mem_cmp>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d014      	beq.n	80081d8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081ae:	23ff      	movs	r3, #255	@ 0xff
 80081b0:	757b      	strb	r3, [r7, #21]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80081ba:	2100      	movs	r1, #0
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fb5d 	bl	800787c <dir_next>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f43f af65 	beq.w	8008098 <dir_find+0x34>
 80081ce:	e004      	b.n	80081da <dir_find+0x176>
		if (res != FR_OK) break;
 80081d0:	bf00      	nop
 80081d2:	e002      	b.n	80081da <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80081d4:	bf00      	nop
 80081d6:	e000      	b.n	80081da <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80081d8:	bf00      	nop

	return res;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	@ 0x30
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80081f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <dir_register+0x20>
 8008200:	2306      	movs	r3, #6
 8008202:	e0e0      	b.n	80083c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008204:	2300      	movs	r3, #0
 8008206:	627b      	str	r3, [r7, #36]	@ 0x24
 8008208:	e002      	b.n	8008210 <dir_register+0x2c>
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	3301      	adds	r3, #1
 800820e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1f4      	bne.n	800820a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008226:	f107 030c 	add.w	r3, r7, #12
 800822a:	220c      	movs	r2, #12
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fcfe 	bl	8006c2e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d032      	beq.n	80082a2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2240      	movs	r2, #64	@ 0x40
 8008240:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008244:	2301      	movs	r3, #1
 8008246:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008248:	e016      	b.n	8008278 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	f107 010c 	add.w	r1, r7, #12
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	f7ff fd97 	bl	8007d8c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff ff00 	bl	8008064 <dir_find>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800826a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008274:	3301      	adds	r3, #1
 8008276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	2b63      	cmp	r3, #99	@ 0x63
 800827c:	d9e5      	bls.n	800824a <dir_register+0x66>
 800827e:	e000      	b.n	8008282 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008280:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	2b64      	cmp	r3, #100	@ 0x64
 8008286:	d101      	bne.n	800828c <dir_register+0xa8>
 8008288:	2307      	movs	r3, #7
 800828a:	e09c      	b.n	80083c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800828c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008290:	2b04      	cmp	r3, #4
 8008292:	d002      	beq.n	800829a <dir_register+0xb6>
 8008294:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008298:	e095      	b.n	80083c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800829a:	7dfa      	ldrb	r2, [r7, #23]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <dir_register+0xd8>
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	330c      	adds	r3, #12
 80082b0:	4a47      	ldr	r2, [pc, #284]	@ (80083d0 <dir_register+0x1ec>)
 80082b2:	fba2 2303 	umull	r2, r3, r2, r3
 80082b6:	089b      	lsrs	r3, r3, #2
 80082b8:	3301      	adds	r3, #1
 80082ba:	e000      	b.n	80082be <dir_register+0xda>
 80082bc:	2301      	movs	r3, #1
 80082be:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80082c0:	6a39      	ldr	r1, [r7, #32]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fb9f 	bl	8007a06 <dir_alloc>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80082ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d148      	bne.n	8008368 <dir_register+0x184>
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	3b01      	subs	r3, #1
 80082da:	623b      	str	r3, [r7, #32]
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d042      	beq.n	8008368 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695a      	ldr	r2, [r3, #20]
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	015b      	lsls	r3, r3, #5
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fa49 	bl	8007786 <dir_sdi>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80082fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d132      	bne.n	8008368 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3324      	adds	r3, #36	@ 0x24
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff fde4 	bl	8007ed4 <sum_sfn>
 800830c:	4603      	mov	r3, r0
 800830e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	4619      	mov	r1, r3
 8008316:	69f8      	ldr	r0, [r7, #28]
 8008318:	f7fe feb8 	bl	800708c <move_window>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008322:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008326:	2b00      	cmp	r3, #0
 8008328:	d11d      	bne.n	8008366 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	68d8      	ldr	r0, [r3, #12]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a19      	ldr	r1, [r3, #32]
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	b2da      	uxtb	r2, r3
 8008336:	7efb      	ldrb	r3, [r7, #27]
 8008338:	f7ff fcc0 	bl	8007cbc <put_lfn>
				fs->wflag = 1;
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	2201      	movs	r2, #1
 8008340:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008342:	2100      	movs	r1, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff fa99 	bl	800787c <dir_next>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008350:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008354:	2b00      	cmp	r3, #0
 8008356:	d107      	bne.n	8008368 <dir_register+0x184>
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	3b01      	subs	r3, #1
 800835c:	623b      	str	r3, [r7, #32]
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1d5      	bne.n	8008310 <dir_register+0x12c>
 8008364:	e000      	b.n	8008368 <dir_register+0x184>
				if (res != FR_OK) break;
 8008366:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008368:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800836c:	2b00      	cmp	r3, #0
 800836e:	d128      	bne.n	80083c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4619      	mov	r1, r3
 8008376:	69f8      	ldr	r0, [r7, #28]
 8008378:	f7fe fe88 	bl	800708c <move_window>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008382:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008386:	2b00      	cmp	r3, #0
 8008388:	d11b      	bne.n	80083c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	2220      	movs	r2, #32
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fc6c 	bl	8006c70 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a18      	ldr	r0, [r3, #32]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3324      	adds	r3, #36	@ 0x24
 80083a0:	220b      	movs	r2, #11
 80083a2:	4619      	mov	r1, r3
 80083a4:	f7fe fc43 	bl	8006c2e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	330c      	adds	r3, #12
 80083b4:	f002 0218 	and.w	r2, r2, #24
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	2201      	movs	r2, #1
 80083c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80083c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3730      	adds	r7, #48	@ 0x30
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	4ec4ec4f 	.word	0x4ec4ec4f

080083d4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80d8 	beq.w	80085a4 <get_fileinfo+0x1d0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d040      	beq.n	8008480 <get_fileinfo+0xac>
			i = j = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	61bb      	str	r3, [r7, #24]
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008406:	e029      	b.n	800845c <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008408:	89fb      	ldrh	r3, [r7, #14]
 800840a:	2100      	movs	r1, #0
 800840c:	4618      	mov	r0, r3
 800840e:	f001 fef1 	bl	800a1f4 <ff_convert>
 8008412:	4603      	mov	r3, r0
 8008414:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008416:	89fb      	ldrh	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <get_fileinfo+0x4e>
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e028      	b.n	8008474 <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 8008422:	89fb      	ldrh	r3, [r7, #14]
 8008424:	2bff      	cmp	r3, #255	@ 0xff
 8008426:	d90a      	bls.n	800843e <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 8008428:	89fb      	ldrh	r3, [r7, #14]
 800842a:	0a1b      	lsrs	r3, r3, #8
 800842c:	b299      	uxth	r1, r3
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	61fa      	str	r2, [r7, #28]
 8008434:	b2c9      	uxtb	r1, r1
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	4413      	add	r3, r2
 800843a:	460a      	mov	r2, r1
 800843c:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2bfe      	cmp	r3, #254	@ 0xfe
 8008442:	d902      	bls.n	800844a <get_fileinfo+0x76>
 8008444:	2300      	movs	r3, #0
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e014      	b.n	8008474 <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	61fa      	str	r2, [r7, #28]
 8008450:	89fa      	ldrh	r2, [r7, #14]
 8008452:	b2d1      	uxtb	r1, r2
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	4413      	add	r3, r2
 8008458:	460a      	mov	r2, r1
 800845a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	1c59      	adds	r1, r3, #1
 8008464:	61b9      	str	r1, [r7, #24]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	4413      	add	r3, r2
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	81fb      	strh	r3, [r7, #14]
 800846e:	89fb      	ldrh	r3, [r7, #14]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1c9      	bne.n	8008408 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4413      	add	r3, r2
 800847a:	3316      	adds	r3, #22
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	61bb      	str	r3, [r7, #24]
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	3316      	adds	r3, #22
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008494:	e04d      	b.n	8008532 <get_fileinfo+0x15e>
		c = (TCHAR)dp->dir[i++];
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1a      	ldr	r2, [r3, #32]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	1c59      	adds	r1, r3, #1
 800849e:	61f9      	str	r1, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d041      	beq.n	8008530 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d101      	bne.n	80084b6 <get_fileinfo+0xe2>
 80084b2:	23e5      	movs	r3, #229	@ 0xe5
 80084b4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	2b09      	cmp	r3, #9
 80084ba:	d10f      	bne.n	80084dc <get_fileinfo+0x108>
			if (!lfv) fno->fname[j] = '.';
 80084bc:	89bb      	ldrh	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d105      	bne.n	80084ce <get_fileinfo+0xfa>
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	4413      	add	r3, r2
 80084c8:	3316      	adds	r3, #22
 80084ca:	222e      	movs	r2, #46	@ 0x2e
 80084cc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	61ba      	str	r2, [r7, #24]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	4413      	add	r3, r2
 80084d8:	222e      	movs	r2, #46	@ 0x2e
 80084da:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	4413      	add	r3, r2
 80084e2:	3309      	adds	r3, #9
 80084e4:	7dfa      	ldrb	r2, [r7, #23]
 80084e6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80084e8:	89bb      	ldrh	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d11c      	bne.n	8008528 <get_fileinfo+0x154>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	2b40      	cmp	r3, #64	@ 0x40
 80084f2:	d913      	bls.n	800851c <get_fileinfo+0x148>
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b5a      	cmp	r3, #90	@ 0x5a
 80084f8:	d810      	bhi.n	800851c <get_fileinfo+0x148>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	330c      	adds	r3, #12
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	2b08      	cmp	r3, #8
 8008508:	d901      	bls.n	800850e <get_fileinfo+0x13a>
 800850a:	2310      	movs	r3, #16
 800850c:	e000      	b.n	8008510 <get_fileinfo+0x13c>
 800850e:	2308      	movs	r3, #8
 8008510:	4013      	ands	r3, r2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <get_fileinfo+0x148>
				c += 0x20;			/* To lower */
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	3320      	adds	r3, #32
 800851a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	4413      	add	r3, r2
 8008522:	3316      	adds	r3, #22
 8008524:	7dfa      	ldrb	r2, [r7, #23]
 8008526:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	3301      	adds	r3, #1
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	e000      	b.n	8008532 <get_fileinfo+0x15e>
		if (c == ' ') continue;				/* Skip padding spaces */
 8008530:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2b0a      	cmp	r3, #10
 8008536:	d9ae      	bls.n	8008496 <get_fileinfo+0xc2>
	}
	if (!lfv) {
 8008538:	89bb      	ldrh	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10d      	bne.n	800855a <get_fileinfo+0x186>
		fno->fname[j] = 0;
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	4413      	add	r3, r2
 8008544:	3316      	adds	r3, #22
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	330c      	adds	r3, #12
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <get_fileinfo+0x186>
 8008556:	2300      	movs	r3, #0
 8008558:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	4413      	add	r3, r2
 8008560:	3309      	adds	r3, #9
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	7ada      	ldrb	r2, [r3, #11]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	331c      	adds	r3, #28
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe faef 	bl	8006b5a <ld_dword>
 800857c:	4602      	mov	r2, r0
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	3316      	adds	r3, #22
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fae6 	bl	8006b5a <ld_dword>
 800858e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	b29a      	uxth	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	80da      	strh	r2, [r3, #6]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	0c1b      	lsrs	r3, r3, #16
 800859c:	b29a      	uxth	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	809a      	strh	r2, [r3, #4]
 80085a2:	e000      	b.n	80085a6 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80085a4:	bf00      	nop
}
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08a      	sub	sp, #40	@ 0x28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	61ba      	str	r2, [r7, #24]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4413      	add	r3, r2
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80085da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085dc:	2b1f      	cmp	r3, #31
 80085de:	d96a      	bls.n	80086b6 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80085e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80085e4:	d006      	beq.n	80085f4 <create_name+0x48>
 80085e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80085ea:	d110      	bne.n	800860e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085ec:	e002      	b.n	80085f4 <create_name+0x48>
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	3301      	adds	r3, #1
 80085f2:	61bb      	str	r3, [r7, #24]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	4413      	add	r3, r2
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80085fe:	d0f6      	beq.n	80085ee <create_name+0x42>
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	4413      	add	r3, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b5c      	cmp	r3, #92	@ 0x5c
 800860a:	d0f0      	beq.n	80085ee <create_name+0x42>
			break;
 800860c:	e054      	b.n	80086b8 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2bfe      	cmp	r3, #254	@ 0xfe
 8008612:	d901      	bls.n	8008618 <create_name+0x6c>
 8008614:	2306      	movs	r3, #6
 8008616:	e1bf      	b.n	8008998 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800861a:	b2db      	uxtb	r3, r3
 800861c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800861e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b80      	cmp	r3, #128	@ 0x80
 8008624:	d925      	bls.n	8008672 <create_name+0xc6>
 8008626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2bff      	cmp	r3, #255	@ 0xff
 800862c:	d021      	beq.n	8008672 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	61ba      	str	r2, [r7, #24]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	4413      	add	r3, r2
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800863e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	b29a      	uxth	r2, r3
 8008644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008648:	b29b      	uxth	r3, r3
 800864a:	4413      	add	r3, r2
 800864c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800864e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008652:	2b3f      	cmp	r3, #63	@ 0x3f
 8008654:	d903      	bls.n	800865e <create_name+0xb2>
 8008656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800865a:	2b7e      	cmp	r3, #126	@ 0x7e
 800865c:	d909      	bls.n	8008672 <create_name+0xc6>
 800865e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008662:	2b00      	cmp	r3, #0
 8008664:	da03      	bge.n	800866e <create_name+0xc2>
 8008666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800866a:	2bff      	cmp	r3, #255	@ 0xff
 800866c:	d101      	bne.n	8008672 <create_name+0xc6>
 800866e:	2306      	movs	r3, #6
 8008670:	e192      	b.n	8008998 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008674:	2101      	movs	r1, #1
 8008676:	4618      	mov	r0, r3
 8008678:	f001 fdbc 	bl	800a1f4 <ff_convert>
 800867c:	4603      	mov	r3, r0
 800867e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <create_name+0xde>
 8008686:	2306      	movs	r3, #6
 8008688:	e186      	b.n	8008998 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800868a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800868c:	2b7f      	cmp	r3, #127	@ 0x7f
 800868e:	d809      	bhi.n	80086a4 <create_name+0xf8>
 8008690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008692:	4619      	mov	r1, r3
 8008694:	489a      	ldr	r0, [pc, #616]	@ (8008900 <create_name+0x354>)
 8008696:	f7fe fb2d 	bl	8006cf4 <chk_chr>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <create_name+0xf8>
 80086a0:	2306      	movs	r3, #6
 80086a2:	e179      	b.n	8008998 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	617a      	str	r2, [r7, #20]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80086b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80086b4:	e78a      	b.n	80085cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80086b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	441a      	add	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80086c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086c4:	2b1f      	cmp	r3, #31
 80086c6:	d801      	bhi.n	80086cc <create_name+0x120>
 80086c8:	2304      	movs	r3, #4
 80086ca:	e000      	b.n	80086ce <create_name+0x122>
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80086d2:	e011      	b.n	80086f8 <create_name+0x14c>
		w = lfn[di - 1];
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80086da:	3b01      	subs	r3, #1
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80086e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d002      	beq.n	80086f2 <create_name+0x146>
 80086ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80086f0:	d106      	bne.n	8008700 <create_name+0x154>
		di--;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1ea      	bne.n	80086d4 <create_name+0x128>
 80086fe:	e000      	b.n	8008702 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8008700:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	2200      	movs	r2, #0
 800870c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <create_name+0x16c>
 8008714:	2306      	movs	r3, #6
 8008716:	e13f      	b.n	8008998 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3324      	adds	r3, #36	@ 0x24
 800871c:	220b      	movs	r2, #11
 800871e:	2120      	movs	r1, #32
 8008720:	4618      	mov	r0, r3
 8008722:	f7fe faa5 	bl	8006c70 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008726:	2300      	movs	r3, #0
 8008728:	61bb      	str	r3, [r7, #24]
 800872a:	e002      	b.n	8008732 <create_name+0x186>
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	3301      	adds	r3, #1
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	2b20      	cmp	r3, #32
 800873e:	d0f5      	beq.n	800872c <create_name+0x180>
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	2b2e      	cmp	r3, #46	@ 0x2e
 800874c:	d0ee      	beq.n	800872c <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <create_name+0x1bc>
 8008754:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008758:	f043 0303 	orr.w	r3, r3, #3
 800875c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008760:	e002      	b.n	8008768 <create_name+0x1bc>
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	3b01      	subs	r3, #1
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <create_name+0x1d6>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008774:	3b01      	subs	r3, #1
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4413      	add	r3, r2
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008780:	d1ef      	bne.n	8008762 <create_name+0x1b6>

	i = b = 0; ni = 8;
 8008782:	2300      	movs	r3, #0
 8008784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008788:	2300      	movs	r3, #0
 800878a:	623b      	str	r3, [r7, #32]
 800878c:	2308      	movs	r3, #8
 800878e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	61ba      	str	r2, [r7, #24]
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80087a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80aa 	beq.w	80088fc <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80087a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	d006      	beq.n	80087bc <create_name+0x210>
 80087ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80087b2:	d10a      	bne.n	80087ca <create_name+0x21e>
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d006      	beq.n	80087ca <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 80087bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087c0:	f043 0303 	orr.w	r3, r3, #3
 80087c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80087c8:	e097      	b.n	80088fa <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80087ca:	6a3a      	ldr	r2, [r7, #32]
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d203      	bcs.n	80087da <create_name+0x22e>
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d123      	bne.n	8008822 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2b0b      	cmp	r3, #11
 80087de:	d106      	bne.n	80087ee <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 80087e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087e4:	f043 0303 	orr.w	r3, r3, #3
 80087e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80087ec:	e08d      	b.n	800890a <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d005      	beq.n	8008802 <create_name+0x256>
 80087f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087fa:	f043 0303 	orr.w	r3, r3, #3
 80087fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	429a      	cmp	r2, r3
 8008808:	d87e      	bhi.n	8008908 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	61bb      	str	r3, [r7, #24]
 800880e:	2308      	movs	r3, #8
 8008810:	623b      	str	r3, [r7, #32]
 8008812:	230b      	movs	r3, #11
 8008814:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008816:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008820:	e06b      	b.n	80088fa <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008824:	2b7f      	cmp	r3, #127	@ 0x7f
 8008826:	d910      	bls.n	800884a <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8008828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800882a:	4618      	mov	r0, r3
 800882c:	f001 fd40 	bl	800a2b0 <ff_wtoupper>
 8008830:	4603      	mov	r3, r0
 8008832:	2100      	movs	r1, #0
 8008834:	4618      	mov	r0, r3
 8008836:	f001 fcdd 	bl	800a1f4 <ff_convert>
 800883a:	4603      	mov	r3, r0
 800883c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800883e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008842:	f043 0302 	orr.w	r3, r3, #2
 8008846:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800884a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800884c:	2bff      	cmp	r3, #255	@ 0xff
 800884e:	d91a      	bls.n	8008886 <create_name+0x2da>
			if (i >= ni - 1) {
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	3b01      	subs	r3, #1
 8008854:	6a3a      	ldr	r2, [r7, #32]
 8008856:	429a      	cmp	r2, r3
 8008858:	d308      	bcc.n	800886c <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800885a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800885e:	f043 0303 	orr.w	r3, r3, #3
 8008862:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	623b      	str	r3, [r7, #32]
 800886a:	e046      	b.n	80088fa <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800886c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	b299      	uxth	r1, r3
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	623a      	str	r2, [r7, #32]
 8008878:	b2c9      	uxtb	r1, r1
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	460a      	mov	r2, r1
 8008880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008884:	e02f      	b.n	80088e6 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008888:	2b00      	cmp	r3, #0
 800888a:	d007      	beq.n	800889c <create_name+0x2f0>
 800888c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800888e:	4619      	mov	r1, r3
 8008890:	481c      	ldr	r0, [pc, #112]	@ (8008904 <create_name+0x358>)
 8008892:	f7fe fa2f 	bl	8006cf4 <chk_chr>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800889c:	235f      	movs	r3, #95	@ 0x5f
 800889e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80088a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80088a4:	f043 0303 	orr.w	r3, r3, #3
 80088a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80088ac:	e01b      	b.n	80088e6 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80088ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088b0:	2b40      	cmp	r3, #64	@ 0x40
 80088b2:	d909      	bls.n	80088c8 <create_name+0x31c>
 80088b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088b6:	2b5a      	cmp	r3, #90	@ 0x5a
 80088b8:	d806      	bhi.n	80088c8 <create_name+0x31c>
					b |= 2;
 80088ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088be:	f043 0302 	orr.w	r3, r3, #2
 80088c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088c6:	e00e      	b.n	80088e6 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80088c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088ca:	2b60      	cmp	r3, #96	@ 0x60
 80088cc:	d90b      	bls.n	80088e6 <create_name+0x33a>
 80088ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088d0:	2b7a      	cmp	r3, #122	@ 0x7a
 80088d2:	d808      	bhi.n	80088e6 <create_name+0x33a>
						b |= 1; w -= 0x20;
 80088d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088d8:	f043 0301 	orr.w	r3, r3, #1
 80088dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088e2:	3b20      	subs	r3, #32
 80088e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	623a      	str	r2, [r7, #32]
 80088ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80088ee:	b2d1      	uxtb	r1, r2
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4413      	add	r3, r2
 80088f4:	460a      	mov	r2, r1
 80088f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80088fa:	e749      	b.n	8008790 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 80088fc:	bf00      	nop
 80088fe:	e004      	b.n	800890a <create_name+0x35e>
 8008900:	0800b7dc 	.word	0x0800b7dc
 8008904:	0800b7e8 	.word	0x0800b7e8
			if (si > di) break;			/* No extension */
 8008908:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008910:	2be5      	cmp	r3, #229	@ 0xe5
 8008912:	d103      	bne.n	800891c <create_name+0x370>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2205      	movs	r2, #5
 8008918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2b08      	cmp	r3, #8
 8008920:	d104      	bne.n	800892c <create_name+0x380>
 8008922:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800892c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008930:	f003 030c 	and.w	r3, r3, #12
 8008934:	2b0c      	cmp	r3, #12
 8008936:	d005      	beq.n	8008944 <create_name+0x398>
 8008938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	2b03      	cmp	r3, #3
 8008942:	d105      	bne.n	8008950 <create_name+0x3a4>
 8008944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008948:	f043 0302 	orr.w	r3, r3, #2
 800894c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008950:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d117      	bne.n	800898c <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800895c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008960:	f003 0303 	and.w	r3, r3, #3
 8008964:	2b01      	cmp	r3, #1
 8008966:	d105      	bne.n	8008974 <create_name+0x3c8>
 8008968:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800896c:	f043 0310 	orr.w	r3, r3, #16
 8008970:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008978:	f003 030c 	and.w	r3, r3, #12
 800897c:	2b04      	cmp	r3, #4
 800897e:	d105      	bne.n	800898c <create_name+0x3e0>
 8008980:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008984:	f043 0308 	orr.w	r3, r3, #8
 8008988:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008992:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008996:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80089b4:	e002      	b.n	80089bc <follow_path+0x1c>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80089c2:	d0f8      	beq.n	80089b6 <follow_path+0x16>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80089ca:	d0f4      	beq.n	80089b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2200      	movs	r2, #0
 80089d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b1f      	cmp	r3, #31
 80089d8:	d80a      	bhi.n	80089f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2280      	movs	r2, #128	@ 0x80
 80089de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fe fece 	bl	8007786 <dir_sdi>
 80089ea:	4603      	mov	r3, r0
 80089ec:	75fb      	strb	r3, [r7, #23]
 80089ee:	e043      	b.n	8008a78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80089f0:	463b      	mov	r3, r7
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff fdd9 	bl	80085ac <create_name>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d134      	bne.n	8008a6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff fb2d 	bl	8008064 <dir_find>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008a14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d127      	bne.n	8008a72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a22:	7afb      	ldrb	r3, [r7, #11]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d122      	bne.n	8008a72 <follow_path+0xd2>
 8008a2c:	2305      	movs	r3, #5
 8008a2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008a30:	e01f      	b.n	8008a72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a32:	7afb      	ldrb	r3, [r7, #11]
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11c      	bne.n	8008a76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	799b      	ldrb	r3, [r3, #6]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008a48:	2305      	movs	r3, #5
 8008a4a:	75fb      	strb	r3, [r7, #23]
 8008a4c:	e014      	b.n	8008a78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5c:	4413      	add	r3, r2
 8008a5e:	4619      	mov	r1, r3
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff f817 	bl	8007a94 <ld_clust>
 8008a66:	4602      	mov	r2, r0
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a6c:	e7c0      	b.n	80089f0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008a6e:	bf00      	nop
 8008a70:	e002      	b.n	8008a78 <follow_path+0xd8>
				break;
 8008a72:	bf00      	nop
 8008a74:	e000      	b.n	8008a78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a76:	bf00      	nop
			}
		}
	}

	return res;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b087      	sub	sp, #28
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d031      	beq.n	8008afc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	e002      	b.n	8008aa6 <get_ldnumber+0x24>
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b1f      	cmp	r3, #31
 8008aac:	d903      	bls.n	8008ab6 <get_ldnumber+0x34>
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ab4:	d1f4      	bne.n	8008aa0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b3a      	cmp	r3, #58	@ 0x3a
 8008abc:	d11c      	bne.n	8008af8 <get_ldnumber+0x76>
			tp = *path;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	60fa      	str	r2, [r7, #12]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	3b30      	subs	r3, #48	@ 0x30
 8008ace:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b09      	cmp	r3, #9
 8008ad4:	d80e      	bhi.n	8008af4 <get_ldnumber+0x72>
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d10a      	bne.n	8008af4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d107      	bne.n	8008af4 <get_ldnumber+0x72>
					vol = (int)i;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	3301      	adds	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	e002      	b.n	8008afe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008af8:	2300      	movs	r3, #0
 8008afa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008afc:	693b      	ldr	r3, [r7, #16]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	70da      	strb	r2, [r3, #3]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b22:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7fe fab0 	bl	800708c <move_window>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <check_fs+0x2a>
 8008b32:	2304      	movs	r3, #4
 8008b34:	e038      	b.n	8008ba8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3334      	adds	r3, #52	@ 0x34
 8008b3a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fd fff2 	bl	8006b28 <ld_word>
 8008b44:	4603      	mov	r3, r0
 8008b46:	461a      	mov	r2, r3
 8008b48:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d001      	beq.n	8008b54 <check_fs+0x48>
 8008b50:	2303      	movs	r3, #3
 8008b52:	e029      	b.n	8008ba8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b5a:	2be9      	cmp	r3, #233	@ 0xe9
 8008b5c:	d009      	beq.n	8008b72 <check_fs+0x66>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b64:	2beb      	cmp	r3, #235	@ 0xeb
 8008b66:	d11e      	bne.n	8008ba6 <check_fs+0x9a>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008b6e:	2b90      	cmp	r3, #144	@ 0x90
 8008b70:	d119      	bne.n	8008ba6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3334      	adds	r3, #52	@ 0x34
 8008b76:	3336      	adds	r3, #54	@ 0x36
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fd ffee 	bl	8006b5a <ld_dword>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008b84:	4a0a      	ldr	r2, [pc, #40]	@ (8008bb0 <check_fs+0xa4>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d101      	bne.n	8008b8e <check_fs+0x82>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e00c      	b.n	8008ba8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3334      	adds	r3, #52	@ 0x34
 8008b92:	3352      	adds	r3, #82	@ 0x52
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fd ffe0 	bl	8006b5a <ld_dword>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4a05      	ldr	r2, [pc, #20]	@ (8008bb4 <check_fs+0xa8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d101      	bne.n	8008ba6 <check_fs+0x9a>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e000      	b.n	8008ba8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008ba6:	2302      	movs	r3, #2
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	00544146 	.word	0x00544146
 8008bb4:	33544146 	.word	0x33544146

08008bb8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b096      	sub	sp, #88	@ 0x58
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7ff ff58 	bl	8008a82 <get_ldnumber>
 8008bd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da01      	bge.n	8008bde <find_volume+0x26>
 8008bda:	230b      	movs	r3, #11
 8008bdc:	e22d      	b.n	800903a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008bde:	4aa1      	ldr	r2, [pc, #644]	@ (8008e64 <find_volume+0x2ac>)
 8008be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <find_volume+0x3a>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	e223      	b.n	800903a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bf6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	f023 0301 	bic.w	r3, r3, #1
 8008bfe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d01a      	beq.n	8008c3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fd feeb 	bl	80069e8 <disk_status>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10c      	bne.n	8008c3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <find_volume+0x82>
 8008c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008c36:	230a      	movs	r3, #10
 8008c38:	e1ff      	b.n	800903a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e1fd      	b.n	800903a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c40:	2200      	movs	r2, #0
 8008c42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4e:	785b      	ldrb	r3, [r3, #1]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fd fee3 	bl	8006a1c <disk_initialize>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e1e6      	b.n	800903a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d007      	beq.n	8008c82 <find_volume+0xca>
 8008c72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008c7e:	230a      	movs	r3, #10
 8008c80:	e1db      	b.n	800903a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c8a:	f7ff ff3f 	bl	8008b0c <check_fs>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008c94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d149      	bne.n	8008d30 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ca0:	e01e      	b.n	8008ce0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008cb0:	4413      	add	r3, r2
 8008cb2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d006      	beq.n	8008ccc <find_volume+0x114>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fd ff49 	bl	8006b5a <ld_dword>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	e000      	b.n	8008cce <find_volume+0x116>
 8008ccc:	2200      	movs	r2, #0
 8008cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	3358      	adds	r3, #88	@ 0x58
 8008cd4:	443b      	add	r3, r7
 8008cd6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cdc:	3301      	adds	r3, #1
 8008cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d9dd      	bls.n	8008ca2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <find_volume+0x13e>
 8008cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	3358      	adds	r3, #88	@ 0x58
 8008cfc:	443b      	add	r3, r7
 8008cfe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d02:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <find_volume+0x15e>
 8008d0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d0e:	f7ff fefd 	bl	8008b0c <check_fs>
 8008d12:	4603      	mov	r3, r0
 8008d14:	e000      	b.n	8008d18 <find_volume+0x160>
 8008d16:	2303      	movs	r3, #3
 8008d18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d905      	bls.n	8008d30 <find_volume+0x178>
 8008d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d26:	3301      	adds	r3, #1
 8008d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d9e2      	bls.n	8008cf6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008d30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d101      	bne.n	8008d3c <find_volume+0x184>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e17e      	b.n	800903a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d901      	bls.n	8008d48 <find_volume+0x190>
 8008d44:	230d      	movs	r3, #13
 8008d46:	e178      	b.n	800903a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	3334      	adds	r3, #52	@ 0x34
 8008d4c:	330b      	adds	r3, #11
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fd feea 	bl	8006b28 <ld_word>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d5a:	d001      	beq.n	8008d60 <find_volume+0x1a8>
 8008d5c:	230d      	movs	r3, #13
 8008d5e:	e16c      	b.n	800903a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d62:	3334      	adds	r3, #52	@ 0x34
 8008d64:	3316      	adds	r3, #22
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fd fede 	bl	8006b28 <ld_word>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <find_volume+0x1cc>
 8008d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d78:	3334      	adds	r3, #52	@ 0x34
 8008d7a:	3324      	adds	r3, #36	@ 0x24
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fd feec 	bl	8006b5a <ld_dword>
 8008d82:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d88:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d96:	789b      	ldrb	r3, [r3, #2]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d005      	beq.n	8008da8 <find_volume+0x1f0>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9e:	789b      	ldrb	r3, [r3, #2]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d001      	beq.n	8008da8 <find_volume+0x1f0>
 8008da4:	230d      	movs	r3, #13
 8008da6:	e148      	b.n	800903a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	789b      	ldrb	r3, [r3, #2]
 8008dac:	461a      	mov	r2, r3
 8008dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db0:	fb02 f303 	mul.w	r3, r2, r3
 8008db4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc4:	895b      	ldrh	r3, [r3, #10]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d008      	beq.n	8008ddc <find_volume+0x224>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	895b      	ldrh	r3, [r3, #10]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	895b      	ldrh	r3, [r3, #10]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <find_volume+0x228>
 8008ddc:	230d      	movs	r3, #13
 8008dde:	e12c      	b.n	800903a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	3334      	adds	r3, #52	@ 0x34
 8008de4:	3311      	adds	r3, #17
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fe9e 	bl	8006b28 <ld_word>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	891b      	ldrh	r3, [r3, #8]
 8008df8:	f003 030f 	and.w	r3, r3, #15
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <find_volume+0x24e>
 8008e02:	230d      	movs	r3, #13
 8008e04:	e119      	b.n	800903a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	3334      	adds	r3, #52	@ 0x34
 8008e0a:	3313      	adds	r3, #19
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fd fe8b 	bl	8006b28 <ld_word>
 8008e12:	4603      	mov	r3, r0
 8008e14:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <find_volume+0x272>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	3334      	adds	r3, #52	@ 0x34
 8008e20:	3320      	adds	r3, #32
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd fe99 	bl	8006b5a <ld_dword>
 8008e28:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2c:	3334      	adds	r3, #52	@ 0x34
 8008e2e:	330e      	adds	r3, #14
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fd fe79 	bl	8006b28 <ld_word>
 8008e36:	4603      	mov	r3, r0
 8008e38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008e3a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <find_volume+0x28c>
 8008e40:	230d      	movs	r3, #13
 8008e42:	e0fa      	b.n	800903a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008e44:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e48:	4413      	add	r3, r2
 8008e4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e4c:	8912      	ldrh	r2, [r2, #8]
 8008e4e:	0912      	lsrs	r2, r2, #4
 8008e50:	b292      	uxth	r2, r2
 8008e52:	4413      	add	r3, r2
 8008e54:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d204      	bcs.n	8008e68 <find_volume+0x2b0>
 8008e5e:	230d      	movs	r3, #13
 8008e60:	e0eb      	b.n	800903a <find_volume+0x482>
 8008e62:	bf00      	nop
 8008e64:	20001744 	.word	0x20001744
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e70:	8952      	ldrh	r2, [r2, #10]
 8008e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e76:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <find_volume+0x2ca>
 8008e7e:	230d      	movs	r3, #13
 8008e80:	e0db      	b.n	800903a <find_volume+0x482>
		fmt = FS_FAT32;
 8008e82:	2303      	movs	r3, #3
 8008e84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d802      	bhi.n	8008e98 <find_volume+0x2e0>
 8008e92:	2302      	movs	r3, #2
 8008e94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d802      	bhi.n	8008ea8 <find_volume+0x2f0>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	1c9a      	adds	r2, r3, #2
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008eb4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008eb6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eba:	441a      	add	r2, r3
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008ec0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	441a      	add	r2, r3
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008eca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d11e      	bne.n	8008f10 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed4:	3334      	adds	r3, #52	@ 0x34
 8008ed6:	332a      	adds	r3, #42	@ 0x2a
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd fe25 	bl	8006b28 <ld_word>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <find_volume+0x330>
 8008ee4:	230d      	movs	r3, #13
 8008ee6:	e0a8      	b.n	800903a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eea:	891b      	ldrh	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <find_volume+0x33c>
 8008ef0:	230d      	movs	r3, #13
 8008ef2:	e0a2      	b.n	800903a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	3334      	adds	r3, #52	@ 0x34
 8008ef8:	332c      	adds	r3, #44	@ 0x2c
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fd fe2d 	bl	8006b5a <ld_dword>
 8008f00:	4602      	mov	r2, r0
 8008f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f04:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f0e:	e01f      	b.n	8008f50 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f12:	891b      	ldrh	r3, [r3, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <find_volume+0x364>
 8008f18:	230d      	movs	r3, #13
 8008f1a:	e08e      	b.n	800903a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f22:	441a      	add	r2, r3
 8008f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f26:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d103      	bne.n	8008f38 <find_volume+0x380>
 8008f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	e00a      	b.n	8008f4e <find_volume+0x396>
 8008f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3a:	699a      	ldr	r2, [r3, #24]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	4413      	add	r3, r2
 8008f42:	085a      	lsrs	r2, r3, #1
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008f4e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f56:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008f5a:	0a5b      	lsrs	r3, r3, #9
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d201      	bcs.n	8008f64 <find_volume+0x3ac>
 8008f60:	230d      	movs	r3, #13
 8008f62:	e06a      	b.n	800903a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	615a      	str	r2, [r3, #20]
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	695a      	ldr	r2, [r3, #20]
 8008f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f72:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f76:	2280      	movs	r2, #128	@ 0x80
 8008f78:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d149      	bne.n	8009016 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f84:	3334      	adds	r3, #52	@ 0x34
 8008f86:	3330      	adds	r3, #48	@ 0x30
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fd fdcd 	bl	8006b28 <ld_word>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d140      	bne.n	8009016 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f96:	3301      	adds	r3, #1
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f9c:	f7fe f876 	bl	800708c <move_window>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d137      	bne.n	8009016 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa8:	2200      	movs	r2, #0
 8008faa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	3334      	adds	r3, #52	@ 0x34
 8008fb0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fd fdb7 	bl	8006b28 <ld_word>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d127      	bne.n	8009016 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	3334      	adds	r3, #52	@ 0x34
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fd fdc5 	bl	8006b5a <ld_dword>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8009044 <find_volume+0x48c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d11e      	bne.n	8009016 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	3334      	adds	r3, #52	@ 0x34
 8008fdc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fd fdba 	bl	8006b5a <ld_dword>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4a17      	ldr	r2, [pc, #92]	@ (8009048 <find_volume+0x490>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d113      	bne.n	8009016 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff0:	3334      	adds	r3, #52	@ 0x34
 8008ff2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd fdaf 	bl	8006b5a <ld_dword>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009000:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	3334      	adds	r3, #52	@ 0x34
 8009006:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800900a:	4618      	mov	r0, r3
 800900c:	f7fd fda5 	bl	8006b5a <ld_dword>
 8009010:	4602      	mov	r2, r0
 8009012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009014:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009018:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800901c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800901e:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <find_volume+0x494>)
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	3301      	adds	r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	4b09      	ldr	r3, [pc, #36]	@ (800904c <find_volume+0x494>)
 8009028:	801a      	strh	r2, [r3, #0]
 800902a:	4b08      	ldr	r3, [pc, #32]	@ (800904c <find_volume+0x494>)
 800902c:	881a      	ldrh	r2, [r3, #0]
 800902e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009030:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009032:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009034:	f7fd ffc2 	bl	8006fbc <clear_lock>
#endif
	return FR_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3758      	adds	r7, #88	@ 0x58
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	41615252 	.word	0x41615252
 8009048:	61417272 	.word	0x61417272
 800904c:	20001748 	.word	0x20001748

08009050 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800905a:	2309      	movs	r3, #9
 800905c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01c      	beq.n	800909e <validate+0x4e>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d018      	beq.n	800909e <validate+0x4e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d013      	beq.n	800909e <validate+0x4e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	889a      	ldrh	r2, [r3, #4]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	88db      	ldrh	r3, [r3, #6]
 8009080:	429a      	cmp	r2, r3
 8009082:	d10c      	bne.n	800909e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	4618      	mov	r0, r3
 800908c:	f7fd fcac 	bl	80069e8 <disk_status>
 8009090:	4603      	mov	r3, r0
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <validate+0x4e>
			res = FR_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <validate+0x5a>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	e000      	b.n	80090ac <validate+0x5c>
 80090aa:	2300      	movs	r3, #0
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	6013      	str	r3, [r2, #0]
	return res;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	4613      	mov	r3, r2
 80090c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80090ce:	f107 0310 	add.w	r3, r7, #16
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff fcd5 	bl	8008a82 <get_ldnumber>
 80090d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da01      	bge.n	80090e4 <f_mount+0x28>
 80090e0:	230b      	movs	r3, #11
 80090e2:	e02b      	b.n	800913c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80090e4:	4a17      	ldr	r2, [pc, #92]	@ (8009144 <f_mount+0x88>)
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80090f4:	69b8      	ldr	r0, [r7, #24]
 80090f6:	f7fd ff61 	bl	8006fbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2200      	movs	r2, #0
 80090fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	490d      	ldr	r1, [pc, #52]	@ (8009144 <f_mount+0x88>)
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <f_mount+0x66>
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d001      	beq.n	8009126 <f_mount+0x6a>
 8009122:	2300      	movs	r3, #0
 8009124:	e00a      	b.n	800913c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009126:	f107 010c 	add.w	r1, r7, #12
 800912a:	f107 0308 	add.w	r3, r7, #8
 800912e:	2200      	movs	r2, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fd41 	bl	8008bb8 <find_volume>
 8009136:	4603      	mov	r3, r0
 8009138:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800913a:	7dfb      	ldrb	r3, [r7, #23]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3720      	adds	r7, #32
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	20001744 	.word	0x20001744

08009148 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800914e:	af00      	add	r7, sp, #0
 8009150:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009154:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009158:	6018      	str	r0, [r3, #0]
 800915a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800915e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8009162:	6019      	str	r1, [r3, #0]
 8009164:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009168:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800916c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800916e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009172:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <f_open+0x38>
 800917c:	2309      	movs	r3, #9
 800917e:	e291      	b.n	80096a4 <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009180:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009184:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009188:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800918c:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009190:	7812      	ldrb	r2, [r2, #0]
 8009192:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009196:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8009198:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800919c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80091a0:	781a      	ldrb	r2, [r3, #0]
 80091a2:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80091a6:	f107 0308 	add.w	r3, r7, #8
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff fd04 	bl	8008bb8 <find_volume>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 80091b6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f040 8265 	bne.w	800968a <f_open+0x542>
		dj.obj.fs = fs;
 80091c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80091c4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 80091c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80091cc:	f107 0214 	add.w	r2, r7, #20
 80091d0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80091d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091d6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fbdc 	bl	80089a0 <follow_path>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80091ee:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d11c      	bne.n	8009230 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80091f6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80091fa:	b25b      	sxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	da03      	bge.n	8009208 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8009200:	2306      	movs	r3, #6
 8009202:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009206:	e013      	b.n	8009230 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009208:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800920c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b01      	cmp	r3, #1
 8009214:	bf8c      	ite	hi
 8009216:	2301      	movhi	r3, #1
 8009218:	2300      	movls	r3, #0
 800921a:	b2db      	uxtb	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009222:	4611      	mov	r1, r2
 8009224:	4618      	mov	r0, r3
 8009226:	f7fd fd81 	bl	8006d2c <chk_lock>
 800922a:	4603      	mov	r3, r0
 800922c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009230:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009234:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	f003 031c 	and.w	r3, r3, #28
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 80a7 	beq.w	8009392 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8009244:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01f      	beq.n	800928c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800924c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009250:	2b04      	cmp	r3, #4
 8009252:	d10e      	bne.n	8009272 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009254:	f7fd fdc6 	bl	8006de4 <enq_lock>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d006      	beq.n	800926c <f_open+0x124>
 800925e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe ffbe 	bl	80081e4 <dir_register>
 8009268:	4603      	mov	r3, r0
 800926a:	e000      	b.n	800926e <f_open+0x126>
 800926c:	2312      	movs	r3, #18
 800926e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009272:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009276:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800927a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800927e:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009282:	7812      	ldrb	r2, [r2, #0]
 8009284:	f042 0208 	orr.w	r2, r2, #8
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	e015      	b.n	80092b8 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800928c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009290:	f003 0311 	and.w	r3, r3, #17
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <f_open+0x158>
					res = FR_DENIED;
 8009298:	2307      	movs	r3, #7
 800929a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800929e:	e00b      	b.n	80092b8 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80092a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092a4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <f_open+0x170>
 80092b2:	2308      	movs	r3, #8
 80092b4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80092b8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 8088 	bne.w	80093d2 <f_open+0x28a>
 80092c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092c6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 0308 	and.w	r3, r3, #8
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d07e      	beq.n	80093d2 <f_open+0x28a>
				dw = GET_FATTIME();
 80092d4:	f7fd f938 	bl	8006548 <get_fattime>
 80092d8:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80092dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80092e0:	330e      	adds	r3, #14
 80092e2:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fd fc75 	bl	8006bd6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80092ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80092f0:	3316      	adds	r3, #22
 80092f2:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fd fc6d 	bl	8006bd6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80092fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009300:	330b      	adds	r3, #11
 8009302:	2220      	movs	r2, #32
 8009304:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009306:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800930a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800930e:	4611      	mov	r1, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f7fe fbbf 	bl	8007a94 <ld_clust>
 8009316:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800931a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800931e:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8009322:	2200      	movs	r2, #0
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe fbd4 	bl	8007ad2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800932a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800932e:	331c      	adds	r3, #28
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f7fd fc4f 	bl	8006bd6 <st_dword>
					fs->wflag = 1;
 8009338:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800933c:	2201      	movs	r2, #1
 800933e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009340:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009344:	2b00      	cmp	r3, #0
 8009346:	d044      	beq.n	80093d2 <f_open+0x28a>
						dw = fs->winsect;
 8009348:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800934c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8009352:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009356:	2200      	movs	r2, #0
 8009358:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe f8e1 	bl	8007524 <remove_chain>
 8009362:	4603      	mov	r3, r0
 8009364:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8009368:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800936c:	2b00      	cmp	r3, #0
 800936e:	d130      	bne.n	80093d2 <f_open+0x28a>
							res = move_window(fs, dw);
 8009370:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009374:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009378:	4618      	mov	r0, r3
 800937a:	f7fd fe87 	bl	800708c <move_window>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009384:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009388:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800938c:	3a01      	subs	r2, #1
 800938e:	611a      	str	r2, [r3, #16]
 8009390:	e01f      	b.n	80093d2 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009392:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009396:	2b00      	cmp	r3, #0
 8009398:	d11b      	bne.n	80093d2 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800939a:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800939e:	f003 0310 	and.w	r3, r3, #16
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <f_open+0x266>
					res = FR_NO_FILE;
 80093a6:	2304      	movs	r3, #4
 80093a8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80093ac:	e011      	b.n	80093d2 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80093ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093b2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d008      	beq.n	80093d2 <f_open+0x28a>
 80093c0:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <f_open+0x28a>
						res = FR_DENIED;
 80093cc:	2307      	movs	r3, #7
 80093ce:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80093d2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d148      	bne.n	800946c <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80093da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093de:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 80093ec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093f0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80093f4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80093f8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80093fc:	7812      	ldrb	r2, [r2, #0]
 80093fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009402:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009404:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800940a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800940e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009416:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800941a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800941e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009426:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800942a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	bf8c      	ite	hi
 8009434:	2301      	movhi	r3, #1
 8009436:	2300      	movls	r3, #0
 8009438:	b2db      	uxtb	r3, r3
 800943a:	461a      	mov	r2, r3
 800943c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f7fd fcf0 	bl	8006e28 <inc_lock>
 8009448:	4602      	mov	r2, r0
 800944a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800944e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009456:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800945a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <f_open+0x324>
 8009466:	2302      	movs	r3, #2
 8009468:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800946c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009470:	2b00      	cmp	r3, #0
 8009472:	f040 810a 	bne.w	800968a <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009476:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800947a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fb07 	bl	8007a94 <ld_clust>
 8009486:	4602      	mov	r2, r0
 8009488:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800948c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009494:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009498:	331c      	adds	r3, #28
 800949a:	4618      	mov	r0, r3
 800949c:	f7fd fb5d 	bl	8006b5a <ld_dword>
 80094a0:	4602      	mov	r2, r0
 80094a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80094ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094b2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2200      	movs	r2, #0
 80094ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80094bc:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80094c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094c4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80094cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80094d0:	88da      	ldrh	r2, [r3, #6]
 80094d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094d6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80094de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094e2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80094ec:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80094f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094f8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2200      	movs	r2, #0
 8009500:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009502:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009506:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2200      	movs	r2, #0
 800950e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009510:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009514:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800951e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009522:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3330      	adds	r3, #48	@ 0x30
 800952a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f7fd fb9d 	bl	8006c70 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009536:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800953a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 0320 	and.w	r3, r3, #32
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80a0 	beq.w	800968a <f_open+0x542>
 800954a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800954e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8097 	beq.w	800968a <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800955c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009560:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800956c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009574:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009578:	895b      	ldrh	r3, [r3, #10]
 800957a:	025b      	lsls	r3, r3, #9
 800957c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009580:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009584:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009590:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009594:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80095a0:	e021      	b.n	80095e6 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 80095a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fd fe26 	bl	8007202 <get_fat>
 80095b6:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80095ba:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d802      	bhi.n	80095c8 <f_open+0x480>
 80095c2:	2302      	movs	r3, #2
 80095c4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80095c8:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d102      	bne.n	80095d8 <f_open+0x490>
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80095d8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80095dc:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80095e6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <f_open+0x4b2>
 80095ee:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80095f2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d8d3      	bhi.n	80095a2 <f_open+0x45a>
				}
				fp->clust = clst;
 80095fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095fe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009608:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800960a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800960e:	2b00      	cmp	r3, #0
 8009610:	d13b      	bne.n	800968a <f_open+0x542>
 8009612:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961a:	2b00      	cmp	r3, #0
 800961c:	d035      	beq.n	800968a <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800961e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009622:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009626:	4618      	mov	r0, r3
 8009628:	f7fd fdcc 	bl	80071c4 <clust2sect>
 800962c:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8009630:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d103      	bne.n	8009640 <f_open+0x4f8>
						res = FR_INT_ERR;
 8009638:	2302      	movs	r3, #2
 800963a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800963e:	e024      	b.n	800968a <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009640:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009644:	0a5a      	lsrs	r2, r3, #9
 8009646:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800964a:	441a      	add	r2, r3
 800964c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009650:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009658:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800965c:	7858      	ldrb	r0, [r3, #1]
 800965e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009662:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800966c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009670:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6a1a      	ldr	r2, [r3, #32]
 8009678:	2301      	movs	r3, #1
 800967a:	f7fd f9f7 	bl	8006a6c <disk_read>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <f_open+0x542>
 8009684:	2301      	movs	r3, #1
 8009686:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800968a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800968e:	2b00      	cmp	r3, #0
 8009690:	d006      	beq.n	80096a0 <f_open+0x558>
 8009692:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009696:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2200      	movs	r2, #0
 800969e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80096a0:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b08e      	sub	sp, #56	@ 0x38
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f107 0214 	add.w	r2, r7, #20
 80096cc:	4611      	mov	r1, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fcbe 	bl	8009050 <validate>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80096da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d107      	bne.n	80096f2 <f_read+0x44>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	7d5b      	ldrb	r3, [r3, #21]
 80096e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80096ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <f_read+0x4a>
 80096f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096f6:	e115      	b.n	8009924 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	7d1b      	ldrb	r3, [r3, #20]
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <f_read+0x5a>
 8009704:	2307      	movs	r3, #7
 8009706:	e10d      	b.n	8009924 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	429a      	cmp	r2, r3
 800971a:	f240 80fe 	bls.w	800991a <f_read+0x26c>
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009722:	e0fa      	b.n	800991a <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972c:	2b00      	cmp	r3, #0
 800972e:	f040 80c6 	bne.w	80098be <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	0a5b      	lsrs	r3, r3, #9
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	8952      	ldrh	r2, [r2, #10]
 800973c:	3a01      	subs	r2, #1
 800973e:	4013      	ands	r3, r2
 8009740:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d12f      	bne.n	80097a8 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	633b      	str	r3, [r7, #48]	@ 0x30
 8009756:	e013      	b.n	8009780 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	4619      	mov	r1, r3
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f7fd ffd9 	bl	800771e <clmt_clust>
 800976c:	6338      	str	r0, [r7, #48]	@ 0x30
 800976e:	e007      	b.n	8009780 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f7fd fd42 	bl	8007202 <get_fat>
 800977e:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	2b01      	cmp	r3, #1
 8009784:	d804      	bhi.n	8009790 <f_read+0xe2>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2202      	movs	r2, #2
 800978a:	755a      	strb	r2, [r3, #21]
 800978c:	2302      	movs	r3, #2
 800978e:	e0c9      	b.n	8009924 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009796:	d104      	bne.n	80097a2 <f_read+0xf4>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2201      	movs	r2, #1
 800979c:	755a      	strb	r2, [r3, #21]
 800979e:	2301      	movs	r3, #1
 80097a0:	e0c0      	b.n	8009924 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f7fd fd07 	bl	80071c4 <clust2sect>
 80097b6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <f_read+0x11a>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2202      	movs	r2, #2
 80097c2:	755a      	strb	r2, [r3, #21]
 80097c4:	2302      	movs	r3, #2
 80097c6:	e0ad      	b.n	8009924 <f_read+0x276>
			sect += csect;
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	4413      	add	r3, r2
 80097ce:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	0a5b      	lsrs	r3, r3, #9
 80097d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80097d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d039      	beq.n	8009850 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80097dc:	69fa      	ldr	r2, [r7, #28]
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	4413      	add	r3, r2
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	8952      	ldrh	r2, [r2, #10]
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d905      	bls.n	80097f6 <f_read+0x148>
					cc = fs->csize - csect;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	895b      	ldrh	r3, [r3, #10]
 80097ee:	461a      	mov	r2, r3
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	7858      	ldrb	r0, [r3, #1]
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009800:	f7fd f934 	bl	8006a6c <disk_read>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <f_read+0x166>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	755a      	strb	r2, [r3, #21]
 8009810:	2301      	movs	r3, #1
 8009812:	e087      	b.n	8009924 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	7d1b      	ldrb	r3, [r3, #20]
 8009818:	b25b      	sxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	da14      	bge.n	8009848 <f_read+0x19a>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6a1a      	ldr	r2, [r3, #32]
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009828:	429a      	cmp	r2, r3
 800982a:	d90d      	bls.n	8009848 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a1a      	ldr	r2, [r3, #32]
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	025b      	lsls	r3, r3, #9
 8009836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009838:	18d0      	adds	r0, r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3330      	adds	r3, #48	@ 0x30
 800983e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009842:	4619      	mov	r1, r3
 8009844:	f7fd f9f3 	bl	8006c2e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	025b      	lsls	r3, r3, #9
 800984c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800984e:	e050      	b.n	80098f2 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	429a      	cmp	r2, r3
 8009858:	d02e      	beq.n	80098b8 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	7d1b      	ldrb	r3, [r3, #20]
 800985e:	b25b      	sxtb	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	da18      	bge.n	8009896 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	7858      	ldrb	r0, [r3, #1]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1a      	ldr	r2, [r3, #32]
 8009872:	2301      	movs	r3, #1
 8009874:	f7fd f91a 	bl	8006aac <disk_write>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <f_read+0x1da>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2201      	movs	r2, #1
 8009882:	755a      	strb	r2, [r3, #21]
 8009884:	2301      	movs	r3, #1
 8009886:	e04d      	b.n	8009924 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009890:	b2da      	uxtb	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	7858      	ldrb	r0, [r3, #1]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098a0:	2301      	movs	r3, #1
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	f7fd f8e2 	bl	8006a6c <disk_read>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <f_read+0x20a>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	755a      	strb	r2, [r3, #21]
 80098b4:	2301      	movs	r3, #1
 80098b6:	e035      	b.n	8009924 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80098ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80098cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d901      	bls.n	80098d8 <f_read+0x22a>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e6:	4413      	add	r3, r2
 80098e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ea:	4619      	mov	r1, r3
 80098ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80098ee:	f7fd f99e 	bl	8006c2e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80098f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f6:	4413      	add	r3, r2
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	699a      	ldr	r2, [r3, #24]
 80098fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009900:	441a      	add	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	619a      	str	r2, [r3, #24]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990c:	441a      	add	r2, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	f47f af01 	bne.w	8009724 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3738      	adds	r7, #56	@ 0x38
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fb87 	bl	8009050 <validate>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d168      	bne.n	8009a1e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7d1b      	ldrb	r3, [r3, #20]
 8009950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	d062      	beq.n	8009a1e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7d1b      	ldrb	r3, [r3, #20]
 800995c:	b25b      	sxtb	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	da15      	bge.n	800998e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	7858      	ldrb	r0, [r3, #1]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1a      	ldr	r2, [r3, #32]
 8009970:	2301      	movs	r3, #1
 8009972:	f7fd f89b 	bl	8006aac <disk_write>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <f_sync+0x54>
 800997c:	2301      	movs	r3, #1
 800997e:	e04f      	b.n	8009a20 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7d1b      	ldrb	r3, [r3, #20]
 8009984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009988:	b2da      	uxtb	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800998e:	f7fc fddb 	bl	8006548 <get_fattime>
 8009992:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f7fd fb75 	bl	800708c <move_window>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d138      	bne.n	8009a1e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	330b      	adds	r3, #11
 80099b6:	781a      	ldrb	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	330b      	adds	r3, #11
 80099bc:	f042 0220 	orr.w	r2, r2, #32
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	461a      	mov	r2, r3
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	f7fe f87f 	bl	8007ad2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f103 021c 	add.w	r2, r3, #28
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7fd f8f8 	bl	8006bd6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3316      	adds	r3, #22
 80099ea:	6939      	ldr	r1, [r7, #16]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fd f8f2 	bl	8006bd6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3312      	adds	r3, #18
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fd f8d1 	bl	8006ba0 <st_word>
					fs->wflag = 1;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2201      	movs	r2, #1
 8009a02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd fb6e 	bl	80070e8 <sync_fs>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	7d1b      	ldrb	r3, [r3, #20]
 8009a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ff7b 	bl	800992c <f_sync>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d118      	bne.n	8009a72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f107 0208 	add.w	r2, r7, #8
 8009a46:	4611      	mov	r1, r2
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff fb01 	bl	8009050 <validate>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10c      	bne.n	8009a72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fd fa71 	bl	8006f44 <dec_lock>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b090      	sub	sp, #64	@ 0x40
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f107 0208 	add.w	r2, r7, #8
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff fade 	bl	8009050 <validate>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009a9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d103      	bne.n	8009aaa <f_lseek+0x2e>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7d5b      	ldrb	r3, [r3, #21]
 8009aa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009aaa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <f_lseek+0x3c>
 8009ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ab6:	e1e6      	b.n	8009e86 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80d1 	beq.w	8009c64 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d15a      	bne.n	8009b80 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ace:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	2302      	movs	r3, #2
 8009adc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d03a      	beq.n	8009b60 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	2300      	movs	r3, #0
 8009af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af4:	3302      	adds	r3, #2
 8009af6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afe:	3301      	adds	r3, #1
 8009b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fd fb7b 	bl	8007202 <get_fat>
 8009b0c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d804      	bhi.n	8009b1e <f_lseek+0xa2>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	755a      	strb	r2, [r3, #21]
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e1b3      	b.n	8009e86 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d104      	bne.n	8009b30 <f_lseek+0xb4>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	755a      	strb	r2, [r3, #21]
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e1aa      	b.n	8009e86 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3301      	adds	r3, #1
 8009b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d0de      	beq.n	8009af8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d809      	bhi.n	8009b56 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	1d1a      	adds	r2, r3, #4
 8009b46:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	1d1a      	adds	r2, r3, #4
 8009b50:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d3c4      	bcc.n	8009aea <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b66:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d803      	bhi.n	8009b78 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e184      	b.n	8009e82 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009b78:	2311      	movs	r3, #17
 8009b7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009b7e:	e180      	b.n	8009e82 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d902      	bls.n	8009b90 <f_lseek+0x114>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 8172 	beq.w	8009e82 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7fd fdba 	bl	800771e <clmt_clust>
 8009baa:	4602      	mov	r2, r0
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4610      	mov	r0, r2
 8009bba:	f7fd fb03 	bl	80071c4 <clust2sect>
 8009bbe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d104      	bne.n	8009bd0 <f_lseek+0x154>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2202      	movs	r2, #2
 8009bca:	755a      	strb	r2, [r3, #21]
 8009bcc:	2302      	movs	r3, #2
 8009bce:	e15a      	b.n	8009e86 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	0a5b      	lsrs	r3, r3, #9
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	8952      	ldrh	r2, [r2, #10]
 8009bda:	3a01      	subs	r2, #1
 8009bdc:	4013      	ands	r3, r2
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	4413      	add	r3, r2
 8009be2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 8148 	beq.w	8009e82 <f_lseek+0x406>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	f000 8142 	beq.w	8009e82 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7d1b      	ldrb	r3, [r3, #20]
 8009c02:	b25b      	sxtb	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	da18      	bge.n	8009c3a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	7858      	ldrb	r0, [r3, #1]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1a      	ldr	r2, [r3, #32]
 8009c16:	2301      	movs	r3, #1
 8009c18:	f7fc ff48 	bl	8006aac <disk_write>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <f_lseek+0x1b0>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	755a      	strb	r2, [r3, #21]
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e12c      	b.n	8009e86 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7d1b      	ldrb	r3, [r3, #20]
 8009c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	7858      	ldrb	r0, [r3, #1]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c44:	2301      	movs	r3, #1
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	f7fc ff10 	bl	8006a6c <disk_read>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <f_lseek+0x1e0>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	755a      	strb	r2, [r3, #21]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e114      	b.n	8009e86 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	621a      	str	r2, [r3, #32]
 8009c62:	e10e      	b.n	8009e82 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d908      	bls.n	8009c80 <f_lseek+0x204>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7d1b      	ldrb	r3, [r3, #20]
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d102      	bne.n	8009c80 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c8e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80a7 	beq.w	8009de6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	895b      	ldrh	r3, [r3, #10]
 8009c9c:	025b      	lsls	r3, r3, #9
 8009c9e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d01b      	beq.n	8009cde <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	1e5a      	subs	r2, r3, #1
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	1e59      	subs	r1, r3, #1
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d30f      	bcc.n	8009cde <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	1e5a      	subs	r2, r3, #1
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	425b      	negs	r3, r3
 8009cc6:	401a      	ands	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cdc:	e022      	b.n	8009d24 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d119      	bne.n	8009d1e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2100      	movs	r1, #0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fd fc7d 	bl	80075ee <create_chain>
 8009cf4:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d104      	bne.n	8009d06 <f_lseek+0x28a>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	755a      	strb	r2, [r3, #21]
 8009d02:	2302      	movs	r3, #2
 8009d04:	e0bf      	b.n	8009e86 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0c:	d104      	bne.n	8009d18 <f_lseek+0x29c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	755a      	strb	r2, [r3, #21]
 8009d14:	2301      	movs	r3, #1
 8009d16:	e0b6      	b.n	8009e86 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d1c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d22:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d05d      	beq.n	8009de6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009d2a:	e03a      	b.n	8009da2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	699a      	ldr	r2, [r3, #24]
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	441a      	add	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	7d1b      	ldrb	r3, [r3, #20]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fd fc4c 	bl	80075ee <create_chain>
 8009d56:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d108      	bne.n	8009d70 <f_lseek+0x2f4>
							ofs = 0; break;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	603b      	str	r3, [r7, #0]
 8009d62:	e022      	b.n	8009daa <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fd fa4a 	bl	8007202 <get_fat>
 8009d6e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d76:	d104      	bne.n	8009d82 <f_lseek+0x306>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	755a      	strb	r2, [r3, #21]
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e081      	b.n	8009e86 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d904      	bls.n	8009d92 <f_lseek+0x316>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d304      	bcc.n	8009d9c <f_lseek+0x320>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2202      	movs	r2, #2
 8009d96:	755a      	strb	r2, [r3, #21]
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e074      	b.n	8009e86 <f_lseek+0x40a>
					fp->clust = clst;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009da0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d8c0      	bhi.n	8009d2c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699a      	ldr	r2, [r3, #24]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	441a      	add	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d012      	beq.n	8009de6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fd f9fd 	bl	80071c4 <clust2sect>
 8009dca:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d104      	bne.n	8009ddc <f_lseek+0x360>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	755a      	strb	r2, [r3, #21]
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e054      	b.n	8009e86 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	0a5b      	lsrs	r3, r3, #9
 8009de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009de2:	4413      	add	r3, r2
 8009de4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699a      	ldr	r2, [r3, #24]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d90a      	bls.n	8009e08 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	7d1b      	ldrb	r3, [r3, #20]
 8009dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d036      	beq.n	8009e82 <f_lseek+0x406>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a1b      	ldr	r3, [r3, #32]
 8009e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d031      	beq.n	8009e82 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7d1b      	ldrb	r3, [r3, #20]
 8009e22:	b25b      	sxtb	r3, r3
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	da18      	bge.n	8009e5a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	7858      	ldrb	r0, [r3, #1]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a1a      	ldr	r2, [r3, #32]
 8009e36:	2301      	movs	r3, #1
 8009e38:	f7fc fe38 	bl	8006aac <disk_write>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d004      	beq.n	8009e4c <f_lseek+0x3d0>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	755a      	strb	r2, [r3, #21]
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e01c      	b.n	8009e86 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7d1b      	ldrb	r3, [r3, #20]
 8009e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	7858      	ldrb	r0, [r3, #1]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e64:	2301      	movs	r3, #1
 8009e66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e68:	f7fc fe00 	bl	8006a6c <disk_read>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <f_lseek+0x400>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	755a      	strb	r2, [r3, #21]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e004      	b.n	8009e86 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e80:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009e82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3740      	adds	r7, #64	@ 0x40
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009e9a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009e9e:	6018      	str	r0, [r3, #0]
 8009ea0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009ea4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009ea8:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009eaa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009eae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <f_opendir+0x2e>
 8009eb8:	2309      	movs	r3, #9
 8009eba:	e0a0      	b.n	8009ffe <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 8009ebc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009ec0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8009eca:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8009ece:	463b      	mov	r3, r7
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fe70 	bl	8008bb8 <find_volume>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8009ede:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f040 8081 	bne.w	8009fea <f_opendir+0x15c>
		obj->fs = fs;
 8009ee8:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009eec:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009ef0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8009ef2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009ef6:	f107 020c 	add.w	r2, r7, #12
 8009efa:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009efc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f00:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f0a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009f0e:	4611      	mov	r1, r2
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	f7fe fd45 	bl	80089a0 <follow_path>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8009f1c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d15b      	bne.n	8009fdc <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009f24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f28:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	db1a      	blt.n	8009f6e <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009f38:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009f3c:	799b      	ldrb	r3, [r3, #6]
 8009f3e:	f003 0310 	and.w	r3, r3, #16
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d010      	beq.n	8009f68 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009f46:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009f4a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f4e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	f7fd fd9b 	bl	8007a94 <ld_clust>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009f64:	609a      	str	r2, [r3, #8]
 8009f66:	e002      	b.n	8009f6e <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009f68:	2305      	movs	r3, #5
 8009f6a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8009f6e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d132      	bne.n	8009fdc <f_opendir+0x14e>
				obj->id = fs->id;
 8009f76:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009f7a:	88da      	ldrh	r2, [r3, #6]
 8009f7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009f80:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009f82:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009f86:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	f7fd fbfa 	bl	8007786 <dir_sdi>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009f98:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d11d      	bne.n	8009fdc <f_opendir+0x14e>
					if (obj->sclust) {
 8009fa0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d014      	beq.n	8009fd4 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009faa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009fae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	f7fc ff37 	bl	8006e28 <inc_lock>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009fc0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009fc2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d107      	bne.n	8009fdc <f_opendir+0x14e>
 8009fcc:	2312      	movs	r3, #18
 8009fce:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8009fd2:	e003      	b.n	8009fdc <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009fd4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009fd8:	2200      	movs	r2, #0
 8009fda:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009fdc:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d102      	bne.n	8009fea <f_opendir+0x15c>
 8009fe4:	2305      	movs	r3, #5
 8009fe6:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009fea:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <f_opendir+0x16c>
 8009ff2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ffa:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f107 0208 	add.w	r2, r7, #8
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff f819 	bl	8009050 <validate>
 800a01e:	4603      	mov	r3, r0
 800a020:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d110      	bne.n	800a04a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d006      	beq.n	800a03e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	4618      	mov	r0, r3
 800a036:	f7fc ff85 	bl	8006f44 <dec_lock>
 800a03a:	4603      	mov	r3, r0
 800a03c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a060:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a064:	6018      	str	r0, [r3, #0]
 800a066:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a06a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a06e:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a070:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a074:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800a07e:	4611      	mov	r1, r2
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe ffe5 	bl	8009050 <validate>
 800a086:	4603      	mov	r3, r0
 800a088:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 800a08c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a090:	2b00      	cmp	r3, #0
 800a092:	d14b      	bne.n	800a12c <f_readdir+0xd8>
		if (!fno) {
 800a094:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a098:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10b      	bne.n	800a0ba <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a0a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a0a6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	f7fd fb6a 	bl	8007786 <dir_sdi>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800a0b8:	e038      	b.n	800a12c <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800a0ba:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800a0be:	f107 0208 	add.w	r2, r7, #8
 800a0c2:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800a0c4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a0c8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	f7fd ff21 	bl	8007f16 <dir_read>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a0da:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d102      	bne.n	800a0e8 <f_readdir+0x94>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800a0e8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d11d      	bne.n	800a12c <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a0f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a0f4:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800a0f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a0fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a100:	6811      	ldr	r1, [r2, #0]
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	f7fe f966 	bl	80083d4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a108:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a10c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a110:	2100      	movs	r1, #0
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	f7fd fbb2 	bl	800787c <dir_next>
 800a118:	4603      	mov	r3, r0
 800a11a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a11e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a122:	2b04      	cmp	r3, #4
 800a124:	d102      	bne.n	800a12c <f_readdir+0xd8>
 800a126:	2300      	movs	r3, #0
 800a128:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a12c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 800a130:	4618      	mov	r0, r3
 800a132:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a14a:	2301      	movs	r3, #1
 800a14c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a152:	4b1f      	ldr	r3, [pc, #124]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a154:	7a5b      	ldrb	r3, [r3, #9]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d131      	bne.n	800a1c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a15c:	4b1c      	ldr	r3, [pc, #112]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a15e:	7a5b      	ldrb	r3, [r3, #9]
 800a160:	b2db      	uxtb	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a166:	2100      	movs	r1, #0
 800a168:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a16a:	4b19      	ldr	r3, [pc, #100]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a16c:	7a5b      	ldrb	r3, [r3, #9]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	4a17      	ldr	r2, [pc, #92]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a17a:	4b15      	ldr	r3, [pc, #84]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a17c:	7a5b      	ldrb	r3, [r3, #9]
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	461a      	mov	r2, r3
 800a182:	4b13      	ldr	r3, [pc, #76]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a184:	4413      	add	r3, r2
 800a186:	79fa      	ldrb	r2, [r7, #7]
 800a188:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a18a:	4b11      	ldr	r3, [pc, #68]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a18c:	7a5b      	ldrb	r3, [r3, #9]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	b2d1      	uxtb	r1, r2
 800a194:	4a0e      	ldr	r2, [pc, #56]	@ (800a1d0 <FATFS_LinkDriverEx+0x94>)
 800a196:	7251      	strb	r1, [r2, #9]
 800a198:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a19a:	7dbb      	ldrb	r3, [r7, #22]
 800a19c:	3330      	adds	r3, #48	@ 0x30
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	223a      	movs	r2, #58	@ 0x3a
 800a1aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	3302      	adds	r3, #2
 800a1b0:	222f      	movs	r2, #47	@ 0x2f
 800a1b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	3303      	adds	r3, #3
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	2000176c 	.word	0x2000176c

0800a1d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff ffaa 	bl	800a13c <FATFS_LinkDriverEx>
 800a1e8:	4603      	mov	r3, r0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b089      	sub	sp, #36	@ 0x24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	6039      	str	r1, [r7, #0]
 800a1fe:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	2b7f      	cmp	r3, #127	@ 0x7f
 800a204:	d802      	bhi.n	800a20c <ff_convert+0x18>
		c = chr;
 800a206:	88fb      	ldrh	r3, [r7, #6]
 800a208:	837b      	strh	r3, [r7, #26]
 800a20a:	e045      	b.n	800a298 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d005      	beq.n	800a21e <ff_convert+0x2a>
			p = oem2uni;
 800a212:	4b25      	ldr	r3, [pc, #148]	@ (800a2a8 <ff_convert+0xb4>)
 800a214:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800a216:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a21a:	60bb      	str	r3, [r7, #8]
 800a21c:	e004      	b.n	800a228 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800a21e:	4b23      	ldr	r3, [pc, #140]	@ (800a2ac <ff_convert+0xb8>)
 800a220:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800a222:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a226:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800a22c:	2310      	movs	r3, #16
 800a22e:	613b      	str	r3, [r7, #16]
 800a230:	e021      	b.n	800a276 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	0fda      	lsrs	r2, r3, #31
 800a23a:	4413      	add	r3, r2
 800a23c:	105b      	asrs	r3, r3, #1
 800a23e:	461a      	mov	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	88fa      	ldrh	r2, [r7, #6]
 800a252:	429a      	cmp	r2, r3
 800a254:	d013      	beq.n	800a27e <ff_convert+0x8a>
			if (chr > p[i * 2])
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	69fa      	ldr	r2, [r7, #28]
 800a25c:	4413      	add	r3, r2
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	88fa      	ldrh	r2, [r7, #6]
 800a262:	429a      	cmp	r2, r3
 800a264:	d902      	bls.n	800a26c <ff_convert+0x78>
				li = i;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e001      	b.n	800a270 <ff_convert+0x7c>
			else
				hi = i;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	3b01      	subs	r3, #1
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1da      	bne.n	800a232 <ff_convert+0x3e>
 800a27c:	e000      	b.n	800a280 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800a27e:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d006      	beq.n	800a294 <ff_convert+0xa0>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	3302      	adds	r3, #2
 800a28c:	69fa      	ldr	r2, [r7, #28]
 800a28e:	4413      	add	r3, r2
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	e000      	b.n	800a296 <ff_convert+0xa2>
 800a294:	2300      	movs	r3, #0
 800a296:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800a298:	8b7b      	ldrh	r3, [r7, #26]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3724      	adds	r7, #36	@ 0x24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	08020cec 	.word	0x08020cec
 800a2ac:	0800b868 	.word	0x0800b868

0800a2b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c0:	d201      	bcs.n	800a2c6 <ff_wtoupper+0x16>
 800a2c2:	4b3e      	ldr	r3, [pc, #248]	@ (800a3bc <ff_wtoupper+0x10c>)
 800a2c4:	e000      	b.n	800a2c8 <ff_wtoupper+0x18>
 800a2c6:	4b3e      	ldr	r3, [pc, #248]	@ (800a3c0 <ff_wtoupper+0x110>)
 800a2c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	1c9a      	adds	r2, r3, #2
 800a2ce:	617a      	str	r2, [r7, #20]
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a2d4:	8a7b      	ldrh	r3, [r7, #18]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d068      	beq.n	800a3ac <ff_wtoupper+0xfc>
 800a2da:	88fa      	ldrh	r2, [r7, #6]
 800a2dc:	8a7b      	ldrh	r3, [r7, #18]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d364      	bcc.n	800a3ac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	1c9a      	adds	r2, r3, #2
 800a2e6:	617a      	str	r2, [r7, #20]
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	823b      	strh	r3, [r7, #16]
 800a2ec:	8a3b      	ldrh	r3, [r7, #16]
 800a2ee:	0a1b      	lsrs	r3, r3, #8
 800a2f0:	81fb      	strh	r3, [r7, #14]
 800a2f2:	8a3b      	ldrh	r3, [r7, #16]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a2f8:	88fa      	ldrh	r2, [r7, #6]
 800a2fa:	8a79      	ldrh	r1, [r7, #18]
 800a2fc:	8a3b      	ldrh	r3, [r7, #16]
 800a2fe:	440b      	add	r3, r1
 800a300:	429a      	cmp	r2, r3
 800a302:	da49      	bge.n	800a398 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a304:	89fb      	ldrh	r3, [r7, #14]
 800a306:	2b08      	cmp	r3, #8
 800a308:	d84f      	bhi.n	800a3aa <ff_wtoupper+0xfa>
 800a30a:	a201      	add	r2, pc, #4	@ (adr r2, 800a310 <ff_wtoupper+0x60>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a335 	.word	0x0800a335
 800a314:	0800a347 	.word	0x0800a347
 800a318:	0800a35d 	.word	0x0800a35d
 800a31c:	0800a365 	.word	0x0800a365
 800a320:	0800a36d 	.word	0x0800a36d
 800a324:	0800a375 	.word	0x0800a375
 800a328:	0800a37d 	.word	0x0800a37d
 800a32c:	0800a385 	.word	0x0800a385
 800a330:	0800a38d 	.word	0x0800a38d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a334:	88fa      	ldrh	r2, [r7, #6]
 800a336:	8a7b      	ldrh	r3, [r7, #18]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	005b      	lsls	r3, r3, #1
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4413      	add	r3, r2
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	80fb      	strh	r3, [r7, #6]
 800a344:	e027      	b.n	800a396 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a346:	88fa      	ldrh	r2, [r7, #6]
 800a348:	8a7b      	ldrh	r3, [r7, #18]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	b29b      	uxth	r3, r3
 800a354:	88fa      	ldrh	r2, [r7, #6]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	80fb      	strh	r3, [r7, #6]
 800a35a:	e01c      	b.n	800a396 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a35c:	88fb      	ldrh	r3, [r7, #6]
 800a35e:	3b10      	subs	r3, #16
 800a360:	80fb      	strh	r3, [r7, #6]
 800a362:	e018      	b.n	800a396 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a364:	88fb      	ldrh	r3, [r7, #6]
 800a366:	3b20      	subs	r3, #32
 800a368:	80fb      	strh	r3, [r7, #6]
 800a36a:	e014      	b.n	800a396 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a36c:	88fb      	ldrh	r3, [r7, #6]
 800a36e:	3b30      	subs	r3, #48	@ 0x30
 800a370:	80fb      	strh	r3, [r7, #6]
 800a372:	e010      	b.n	800a396 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	3b1a      	subs	r3, #26
 800a378:	80fb      	strh	r3, [r7, #6]
 800a37a:	e00c      	b.n	800a396 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a37c:	88fb      	ldrh	r3, [r7, #6]
 800a37e:	3308      	adds	r3, #8
 800a380:	80fb      	strh	r3, [r7, #6]
 800a382:	e008      	b.n	800a396 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	3b50      	subs	r3, #80	@ 0x50
 800a388:	80fb      	strh	r3, [r7, #6]
 800a38a:	e004      	b.n	800a396 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a392:	80fb      	strh	r3, [r7, #6]
 800a394:	bf00      	nop
			}
			break;
 800a396:	e008      	b.n	800a3aa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d195      	bne.n	800a2ca <ff_wtoupper+0x1a>
 800a39e:	8a3b      	ldrh	r3, [r7, #16]
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a3a8:	e78f      	b.n	800a2ca <ff_wtoupper+0x1a>
			break;
 800a3aa:	bf00      	nop
	}

	return chr;
 800a3ac:	88fb      	ldrh	r3, [r7, #6]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	08036170 	.word	0x08036170
 800a3c0:	08036364 	.word	0x08036364

0800a3c4 <std>:
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3d2:	6083      	str	r3, [r0, #8]
 800a3d4:	8181      	strh	r1, [r0, #12]
 800a3d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a3d8:	81c2      	strh	r2, [r0, #14]
 800a3da:	6183      	str	r3, [r0, #24]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	2208      	movs	r2, #8
 800a3e0:	305c      	adds	r0, #92	@ 0x5c
 800a3e2:	f000 fa09 	bl	800a7f8 <memset>
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a41c <std+0x58>)
 800a3e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a420 <std+0x5c>)
 800a3ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a424 <std+0x60>)
 800a3f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a428 <std+0x64>)
 800a3f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a42c <std+0x68>)
 800a3f8:	6224      	str	r4, [r4, #32]
 800a3fa:	429c      	cmp	r4, r3
 800a3fc:	d006      	beq.n	800a40c <std+0x48>
 800a3fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a402:	4294      	cmp	r4, r2
 800a404:	d002      	beq.n	800a40c <std+0x48>
 800a406:	33d0      	adds	r3, #208	@ 0xd0
 800a408:	429c      	cmp	r4, r3
 800a40a:	d105      	bne.n	800a418 <std+0x54>
 800a40c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a414:	f000 ba68 	b.w	800a8e8 <__retarget_lock_init_recursive>
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	bf00      	nop
 800a41c:	0800a629 	.word	0x0800a629
 800a420:	0800a64b 	.word	0x0800a64b
 800a424:	0800a683 	.word	0x0800a683
 800a428:	0800a6a7 	.word	0x0800a6a7
 800a42c:	20001778 	.word	0x20001778

0800a430 <stdio_exit_handler>:
 800a430:	4a02      	ldr	r2, [pc, #8]	@ (800a43c <stdio_exit_handler+0xc>)
 800a432:	4903      	ldr	r1, [pc, #12]	@ (800a440 <stdio_exit_handler+0x10>)
 800a434:	4803      	ldr	r0, [pc, #12]	@ (800a444 <stdio_exit_handler+0x14>)
 800a436:	f000 b869 	b.w	800a50c <_fwalk_sglue>
 800a43a:	bf00      	nop
 800a43c:	2000000c 	.word	0x2000000c
 800a440:	0800b185 	.word	0x0800b185
 800a444:	2000001c 	.word	0x2000001c

0800a448 <cleanup_stdio>:
 800a448:	6841      	ldr	r1, [r0, #4]
 800a44a:	4b0c      	ldr	r3, [pc, #48]	@ (800a47c <cleanup_stdio+0x34>)
 800a44c:	4299      	cmp	r1, r3
 800a44e:	b510      	push	{r4, lr}
 800a450:	4604      	mov	r4, r0
 800a452:	d001      	beq.n	800a458 <cleanup_stdio+0x10>
 800a454:	f000 fe96 	bl	800b184 <_fflush_r>
 800a458:	68a1      	ldr	r1, [r4, #8]
 800a45a:	4b09      	ldr	r3, [pc, #36]	@ (800a480 <cleanup_stdio+0x38>)
 800a45c:	4299      	cmp	r1, r3
 800a45e:	d002      	beq.n	800a466 <cleanup_stdio+0x1e>
 800a460:	4620      	mov	r0, r4
 800a462:	f000 fe8f 	bl	800b184 <_fflush_r>
 800a466:	68e1      	ldr	r1, [r4, #12]
 800a468:	4b06      	ldr	r3, [pc, #24]	@ (800a484 <cleanup_stdio+0x3c>)
 800a46a:	4299      	cmp	r1, r3
 800a46c:	d004      	beq.n	800a478 <cleanup_stdio+0x30>
 800a46e:	4620      	mov	r0, r4
 800a470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a474:	f000 be86 	b.w	800b184 <_fflush_r>
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	bf00      	nop
 800a47c:	20001778 	.word	0x20001778
 800a480:	200017e0 	.word	0x200017e0
 800a484:	20001848 	.word	0x20001848

0800a488 <global_stdio_init.part.0>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b8 <global_stdio_init.part.0+0x30>)
 800a48c:	4c0b      	ldr	r4, [pc, #44]	@ (800a4bc <global_stdio_init.part.0+0x34>)
 800a48e:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c0 <global_stdio_init.part.0+0x38>)
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	4620      	mov	r0, r4
 800a494:	2200      	movs	r2, #0
 800a496:	2104      	movs	r1, #4
 800a498:	f7ff ff94 	bl	800a3c4 <std>
 800a49c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	2109      	movs	r1, #9
 800a4a4:	f7ff ff8e 	bl	800a3c4 <std>
 800a4a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b2:	2112      	movs	r1, #18
 800a4b4:	f7ff bf86 	b.w	800a3c4 <std>
 800a4b8:	200018b0 	.word	0x200018b0
 800a4bc:	20001778 	.word	0x20001778
 800a4c0:	0800a431 	.word	0x0800a431

0800a4c4 <__sfp_lock_acquire>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	@ (800a4cc <__sfp_lock_acquire+0x8>)
 800a4c6:	f000 ba10 	b.w	800a8ea <__retarget_lock_acquire_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	200018b9 	.word	0x200018b9

0800a4d0 <__sfp_lock_release>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	@ (800a4d8 <__sfp_lock_release+0x8>)
 800a4d2:	f000 ba0b 	b.w	800a8ec <__retarget_lock_release_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	200018b9 	.word	0x200018b9

0800a4dc <__sinit>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	4604      	mov	r4, r0
 800a4e0:	f7ff fff0 	bl	800a4c4 <__sfp_lock_acquire>
 800a4e4:	6a23      	ldr	r3, [r4, #32]
 800a4e6:	b11b      	cbz	r3, 800a4f0 <__sinit+0x14>
 800a4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ec:	f7ff bff0 	b.w	800a4d0 <__sfp_lock_release>
 800a4f0:	4b04      	ldr	r3, [pc, #16]	@ (800a504 <__sinit+0x28>)
 800a4f2:	6223      	str	r3, [r4, #32]
 800a4f4:	4b04      	ldr	r3, [pc, #16]	@ (800a508 <__sinit+0x2c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f5      	bne.n	800a4e8 <__sinit+0xc>
 800a4fc:	f7ff ffc4 	bl	800a488 <global_stdio_init.part.0>
 800a500:	e7f2      	b.n	800a4e8 <__sinit+0xc>
 800a502:	bf00      	nop
 800a504:	0800a449 	.word	0x0800a449
 800a508:	200018b0 	.word	0x200018b0

0800a50c <_fwalk_sglue>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	4607      	mov	r7, r0
 800a512:	4688      	mov	r8, r1
 800a514:	4614      	mov	r4, r2
 800a516:	2600      	movs	r6, #0
 800a518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a51c:	f1b9 0901 	subs.w	r9, r9, #1
 800a520:	d505      	bpl.n	800a52e <_fwalk_sglue+0x22>
 800a522:	6824      	ldr	r4, [r4, #0]
 800a524:	2c00      	cmp	r4, #0
 800a526:	d1f7      	bne.n	800a518 <_fwalk_sglue+0xc>
 800a528:	4630      	mov	r0, r6
 800a52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d907      	bls.n	800a544 <_fwalk_sglue+0x38>
 800a534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a538:	3301      	adds	r3, #1
 800a53a:	d003      	beq.n	800a544 <_fwalk_sglue+0x38>
 800a53c:	4629      	mov	r1, r5
 800a53e:	4638      	mov	r0, r7
 800a540:	47c0      	blx	r8
 800a542:	4306      	orrs	r6, r0
 800a544:	3568      	adds	r5, #104	@ 0x68
 800a546:	e7e9      	b.n	800a51c <_fwalk_sglue+0x10>

0800a548 <iprintf>:
 800a548:	b40f      	push	{r0, r1, r2, r3}
 800a54a:	b507      	push	{r0, r1, r2, lr}
 800a54c:	4906      	ldr	r1, [pc, #24]	@ (800a568 <iprintf+0x20>)
 800a54e:	ab04      	add	r3, sp, #16
 800a550:	6808      	ldr	r0, [r1, #0]
 800a552:	f853 2b04 	ldr.w	r2, [r3], #4
 800a556:	6881      	ldr	r1, [r0, #8]
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	f000 faeb 	bl	800ab34 <_vfiprintf_r>
 800a55e:	b003      	add	sp, #12
 800a560:	f85d eb04 	ldr.w	lr, [sp], #4
 800a564:	b004      	add	sp, #16
 800a566:	4770      	bx	lr
 800a568:	20000018 	.word	0x20000018

0800a56c <_puts_r>:
 800a56c:	6a03      	ldr	r3, [r0, #32]
 800a56e:	b570      	push	{r4, r5, r6, lr}
 800a570:	6884      	ldr	r4, [r0, #8]
 800a572:	4605      	mov	r5, r0
 800a574:	460e      	mov	r6, r1
 800a576:	b90b      	cbnz	r3, 800a57c <_puts_r+0x10>
 800a578:	f7ff ffb0 	bl	800a4dc <__sinit>
 800a57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a57e:	07db      	lsls	r3, r3, #31
 800a580:	d405      	bmi.n	800a58e <_puts_r+0x22>
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	0598      	lsls	r0, r3, #22
 800a586:	d402      	bmi.n	800a58e <_puts_r+0x22>
 800a588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a58a:	f000 f9ae 	bl	800a8ea <__retarget_lock_acquire_recursive>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	0719      	lsls	r1, r3, #28
 800a592:	d502      	bpl.n	800a59a <_puts_r+0x2e>
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d135      	bne.n	800a606 <_puts_r+0x9a>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4628      	mov	r0, r5
 800a59e:	f000 f8c5 	bl	800a72c <__swsetup_r>
 800a5a2:	b380      	cbz	r0, 800a606 <_puts_r+0x9a>
 800a5a4:	f04f 35ff 	mov.w	r5, #4294967295
 800a5a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5aa:	07da      	lsls	r2, r3, #31
 800a5ac:	d405      	bmi.n	800a5ba <_puts_r+0x4e>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	059b      	lsls	r3, r3, #22
 800a5b2:	d402      	bmi.n	800a5ba <_puts_r+0x4e>
 800a5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5b6:	f000 f999 	bl	800a8ec <__retarget_lock_release_recursive>
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	bd70      	pop	{r4, r5, r6, pc}
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	da04      	bge.n	800a5cc <_puts_r+0x60>
 800a5c2:	69a2      	ldr	r2, [r4, #24]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	dc17      	bgt.n	800a5f8 <_puts_r+0x8c>
 800a5c8:	290a      	cmp	r1, #10
 800a5ca:	d015      	beq.n	800a5f8 <_puts_r+0x8c>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	7019      	strb	r1, [r3, #0]
 800a5d4:	68a3      	ldr	r3, [r4, #8]
 800a5d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	2900      	cmp	r1, #0
 800a5e0:	d1ed      	bne.n	800a5be <_puts_r+0x52>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	da11      	bge.n	800a60a <_puts_r+0x9e>
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	210a      	movs	r1, #10
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 f85f 	bl	800a6ae <__swbuf_r>
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d0d7      	beq.n	800a5a4 <_puts_r+0x38>
 800a5f4:	250a      	movs	r5, #10
 800a5f6:	e7d7      	b.n	800a5a8 <_puts_r+0x3c>
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 f857 	bl	800a6ae <__swbuf_r>
 800a600:	3001      	adds	r0, #1
 800a602:	d1e7      	bne.n	800a5d4 <_puts_r+0x68>
 800a604:	e7ce      	b.n	800a5a4 <_puts_r+0x38>
 800a606:	3e01      	subs	r6, #1
 800a608:	e7e4      	b.n	800a5d4 <_puts_r+0x68>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	6022      	str	r2, [r4, #0]
 800a610:	220a      	movs	r2, #10
 800a612:	701a      	strb	r2, [r3, #0]
 800a614:	e7ee      	b.n	800a5f4 <_puts_r+0x88>
	...

0800a618 <puts>:
 800a618:	4b02      	ldr	r3, [pc, #8]	@ (800a624 <puts+0xc>)
 800a61a:	4601      	mov	r1, r0
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f7ff bfa5 	b.w	800a56c <_puts_r>
 800a622:	bf00      	nop
 800a624:	20000018 	.word	0x20000018

0800a628 <__sread>:
 800a628:	b510      	push	{r4, lr}
 800a62a:	460c      	mov	r4, r1
 800a62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a630:	f000 f90c 	bl	800a84c <_read_r>
 800a634:	2800      	cmp	r0, #0
 800a636:	bfab      	itete	ge
 800a638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a63a:	89a3      	ldrhlt	r3, [r4, #12]
 800a63c:	181b      	addge	r3, r3, r0
 800a63e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a642:	bfac      	ite	ge
 800a644:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a646:	81a3      	strhlt	r3, [r4, #12]
 800a648:	bd10      	pop	{r4, pc}

0800a64a <__swrite>:
 800a64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a64e:	461f      	mov	r7, r3
 800a650:	898b      	ldrh	r3, [r1, #12]
 800a652:	05db      	lsls	r3, r3, #23
 800a654:	4605      	mov	r5, r0
 800a656:	460c      	mov	r4, r1
 800a658:	4616      	mov	r6, r2
 800a65a:	d505      	bpl.n	800a668 <__swrite+0x1e>
 800a65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a660:	2302      	movs	r3, #2
 800a662:	2200      	movs	r2, #0
 800a664:	f000 f8e0 	bl	800a828 <_lseek_r>
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a66e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a672:	81a3      	strh	r3, [r4, #12]
 800a674:	4632      	mov	r2, r6
 800a676:	463b      	mov	r3, r7
 800a678:	4628      	mov	r0, r5
 800a67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a67e:	f000 b8f7 	b.w	800a870 <_write_r>

0800a682 <__sseek>:
 800a682:	b510      	push	{r4, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68a:	f000 f8cd 	bl	800a828 <_lseek_r>
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	bf15      	itete	ne
 800a694:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a69a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a69e:	81a3      	strheq	r3, [r4, #12]
 800a6a0:	bf18      	it	ne
 800a6a2:	81a3      	strhne	r3, [r4, #12]
 800a6a4:	bd10      	pop	{r4, pc}

0800a6a6 <__sclose>:
 800a6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6aa:	f000 b8ad 	b.w	800a808 <_close_r>

0800a6ae <__swbuf_r>:
 800a6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b0:	460e      	mov	r6, r1
 800a6b2:	4614      	mov	r4, r2
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	b118      	cbz	r0, 800a6c0 <__swbuf_r+0x12>
 800a6b8:	6a03      	ldr	r3, [r0, #32]
 800a6ba:	b90b      	cbnz	r3, 800a6c0 <__swbuf_r+0x12>
 800a6bc:	f7ff ff0e 	bl	800a4dc <__sinit>
 800a6c0:	69a3      	ldr	r3, [r4, #24]
 800a6c2:	60a3      	str	r3, [r4, #8]
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	071a      	lsls	r2, r3, #28
 800a6c8:	d501      	bpl.n	800a6ce <__swbuf_r+0x20>
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	b943      	cbnz	r3, 800a6e0 <__swbuf_r+0x32>
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f000 f82b 	bl	800a72c <__swsetup_r>
 800a6d6:	b118      	cbz	r0, 800a6e0 <__swbuf_r+0x32>
 800a6d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6dc:	4638      	mov	r0, r7
 800a6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	1a98      	subs	r0, r3, r2
 800a6e6:	6963      	ldr	r3, [r4, #20]
 800a6e8:	b2f6      	uxtb	r6, r6
 800a6ea:	4283      	cmp	r3, r0
 800a6ec:	4637      	mov	r7, r6
 800a6ee:	dc05      	bgt.n	800a6fc <__swbuf_r+0x4e>
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 fd46 	bl	800b184 <_fflush_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d1ed      	bne.n	800a6d8 <__swbuf_r+0x2a>
 800a6fc:	68a3      	ldr	r3, [r4, #8]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	60a3      	str	r3, [r4, #8]
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	6022      	str	r2, [r4, #0]
 800a708:	701e      	strb	r6, [r3, #0]
 800a70a:	6962      	ldr	r2, [r4, #20]
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	429a      	cmp	r2, r3
 800a710:	d004      	beq.n	800a71c <__swbuf_r+0x6e>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	07db      	lsls	r3, r3, #31
 800a716:	d5e1      	bpl.n	800a6dc <__swbuf_r+0x2e>
 800a718:	2e0a      	cmp	r6, #10
 800a71a:	d1df      	bne.n	800a6dc <__swbuf_r+0x2e>
 800a71c:	4621      	mov	r1, r4
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 fd30 	bl	800b184 <_fflush_r>
 800a724:	2800      	cmp	r0, #0
 800a726:	d0d9      	beq.n	800a6dc <__swbuf_r+0x2e>
 800a728:	e7d6      	b.n	800a6d8 <__swbuf_r+0x2a>
	...

0800a72c <__swsetup_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4b29      	ldr	r3, [pc, #164]	@ (800a7d4 <__swsetup_r+0xa8>)
 800a730:	4605      	mov	r5, r0
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	460c      	mov	r4, r1
 800a736:	b118      	cbz	r0, 800a740 <__swsetup_r+0x14>
 800a738:	6a03      	ldr	r3, [r0, #32]
 800a73a:	b90b      	cbnz	r3, 800a740 <__swsetup_r+0x14>
 800a73c:	f7ff fece 	bl	800a4dc <__sinit>
 800a740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a744:	0719      	lsls	r1, r3, #28
 800a746:	d422      	bmi.n	800a78e <__swsetup_r+0x62>
 800a748:	06da      	lsls	r2, r3, #27
 800a74a:	d407      	bmi.n	800a75c <__swsetup_r+0x30>
 800a74c:	2209      	movs	r2, #9
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a754:	81a3      	strh	r3, [r4, #12]
 800a756:	f04f 30ff 	mov.w	r0, #4294967295
 800a75a:	e033      	b.n	800a7c4 <__swsetup_r+0x98>
 800a75c:	0758      	lsls	r0, r3, #29
 800a75e:	d512      	bpl.n	800a786 <__swsetup_r+0x5a>
 800a760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a762:	b141      	cbz	r1, 800a776 <__swsetup_r+0x4a>
 800a764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a768:	4299      	cmp	r1, r3
 800a76a:	d002      	beq.n	800a772 <__swsetup_r+0x46>
 800a76c:	4628      	mov	r0, r5
 800a76e:	f000 f8bf 	bl	800a8f0 <_free_r>
 800a772:	2300      	movs	r3, #0
 800a774:	6363      	str	r3, [r4, #52]	@ 0x34
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	2300      	movs	r3, #0
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f043 0308 	orr.w	r3, r3, #8
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	b94b      	cbnz	r3, 800a7a6 <__swsetup_r+0x7a>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a79c:	d003      	beq.n	800a7a6 <__swsetup_r+0x7a>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 fd3d 	bl	800b220 <__smakebuf_r>
 800a7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7aa:	f013 0201 	ands.w	r2, r3, #1
 800a7ae:	d00a      	beq.n	800a7c6 <__swsetup_r+0x9a>
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	60a2      	str	r2, [r4, #8]
 800a7b4:	6962      	ldr	r2, [r4, #20]
 800a7b6:	4252      	negs	r2, r2
 800a7b8:	61a2      	str	r2, [r4, #24]
 800a7ba:	6922      	ldr	r2, [r4, #16]
 800a7bc:	b942      	cbnz	r2, 800a7d0 <__swsetup_r+0xa4>
 800a7be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7c2:	d1c5      	bne.n	800a750 <__swsetup_r+0x24>
 800a7c4:	bd38      	pop	{r3, r4, r5, pc}
 800a7c6:	0799      	lsls	r1, r3, #30
 800a7c8:	bf58      	it	pl
 800a7ca:	6962      	ldrpl	r2, [r4, #20]
 800a7cc:	60a2      	str	r2, [r4, #8]
 800a7ce:	e7f4      	b.n	800a7ba <__swsetup_r+0x8e>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7f7      	b.n	800a7c4 <__swsetup_r+0x98>
 800a7d4:	20000018 	.word	0x20000018

0800a7d8 <memcmp>:
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	3901      	subs	r1, #1
 800a7dc:	4402      	add	r2, r0
 800a7de:	4290      	cmp	r0, r2
 800a7e0:	d101      	bne.n	800a7e6 <memcmp+0xe>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	e005      	b.n	800a7f2 <memcmp+0x1a>
 800a7e6:	7803      	ldrb	r3, [r0, #0]
 800a7e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	d001      	beq.n	800a7f4 <memcmp+0x1c>
 800a7f0:	1b18      	subs	r0, r3, r4
 800a7f2:	bd10      	pop	{r4, pc}
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	e7f2      	b.n	800a7de <memcmp+0x6>

0800a7f8 <memset>:
 800a7f8:	4402      	add	r2, r0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d100      	bne.n	800a802 <memset+0xa>
 800a800:	4770      	bx	lr
 800a802:	f803 1b01 	strb.w	r1, [r3], #1
 800a806:	e7f9      	b.n	800a7fc <memset+0x4>

0800a808 <_close_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d06      	ldr	r5, [pc, #24]	@ (800a824 <_close_r+0x1c>)
 800a80c:	2300      	movs	r3, #0
 800a80e:	4604      	mov	r4, r0
 800a810:	4608      	mov	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7f6 fded 	bl	80013f2 <_close>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_close_r+0x1a>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_close_r+0x1a>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	200018b4 	.word	0x200018b4

0800a828 <_lseek_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d07      	ldr	r5, [pc, #28]	@ (800a848 <_lseek_r+0x20>)
 800a82c:	4604      	mov	r4, r0
 800a82e:	4608      	mov	r0, r1
 800a830:	4611      	mov	r1, r2
 800a832:	2200      	movs	r2, #0
 800a834:	602a      	str	r2, [r5, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	f7f6 fe02 	bl	8001440 <_lseek>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_lseek_r+0x1e>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_lseek_r+0x1e>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	200018b4 	.word	0x200018b4

0800a84c <_read_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	@ (800a86c <_read_r+0x20>)
 800a850:	4604      	mov	r4, r0
 800a852:	4608      	mov	r0, r1
 800a854:	4611      	mov	r1, r2
 800a856:	2200      	movs	r2, #0
 800a858:	602a      	str	r2, [r5, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	f7f6 fd90 	bl	8001380 <_read>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_read_r+0x1e>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_read_r+0x1e>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	200018b4 	.word	0x200018b4

0800a870 <_write_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d07      	ldr	r5, [pc, #28]	@ (800a890 <_write_r+0x20>)
 800a874:	4604      	mov	r4, r0
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	2200      	movs	r2, #0
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f7f6 fd9b 	bl	80013ba <_write>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_write_r+0x1e>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_write_r+0x1e>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	200018b4 	.word	0x200018b4

0800a894 <__errno>:
 800a894:	4b01      	ldr	r3, [pc, #4]	@ (800a89c <__errno+0x8>)
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	20000018 	.word	0x20000018

0800a8a0 <__libc_init_array>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a8d8 <__libc_init_array+0x38>)
 800a8a4:	4c0d      	ldr	r4, [pc, #52]	@ (800a8dc <__libc_init_array+0x3c>)
 800a8a6:	1b64      	subs	r4, r4, r5
 800a8a8:	10a4      	asrs	r4, r4, #2
 800a8aa:	2600      	movs	r6, #0
 800a8ac:	42a6      	cmp	r6, r4
 800a8ae:	d109      	bne.n	800a8c4 <__libc_init_array+0x24>
 800a8b0:	4d0b      	ldr	r5, [pc, #44]	@ (800a8e0 <__libc_init_array+0x40>)
 800a8b2:	4c0c      	ldr	r4, [pc, #48]	@ (800a8e4 <__libc_init_array+0x44>)
 800a8b4:	f000 fd22 	bl	800b2fc <_init>
 800a8b8:	1b64      	subs	r4, r4, r5
 800a8ba:	10a4      	asrs	r4, r4, #2
 800a8bc:	2600      	movs	r6, #0
 800a8be:	42a6      	cmp	r6, r4
 800a8c0:	d105      	bne.n	800a8ce <__libc_init_array+0x2e>
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c8:	4798      	blx	r3
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7ee      	b.n	800a8ac <__libc_init_array+0xc>
 800a8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d2:	4798      	blx	r3
 800a8d4:	3601      	adds	r6, #1
 800a8d6:	e7f2      	b.n	800a8be <__libc_init_array+0x1e>
 800a8d8:	0803645c 	.word	0x0803645c
 800a8dc:	0803645c 	.word	0x0803645c
 800a8e0:	0803645c 	.word	0x0803645c
 800a8e4:	08036460 	.word	0x08036460

0800a8e8 <__retarget_lock_init_recursive>:
 800a8e8:	4770      	bx	lr

0800a8ea <__retarget_lock_acquire_recursive>:
 800a8ea:	4770      	bx	lr

0800a8ec <__retarget_lock_release_recursive>:
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <_free_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	d041      	beq.n	800a97c <_free_r+0x8c>
 800a8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fc:	1f0c      	subs	r4, r1, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfb8      	it	lt
 800a902:	18e4      	addlt	r4, r4, r3
 800a904:	f000 f8e0 	bl	800aac8 <__malloc_lock>
 800a908:	4a1d      	ldr	r2, [pc, #116]	@ (800a980 <_free_r+0x90>)
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	b933      	cbnz	r3, 800a91c <_free_r+0x2c>
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	6014      	str	r4, [r2, #0]
 800a912:	4628      	mov	r0, r5
 800a914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a918:	f000 b8dc 	b.w	800aad4 <__malloc_unlock>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d908      	bls.n	800a932 <_free_r+0x42>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	1821      	adds	r1, r4, r0
 800a924:	428b      	cmp	r3, r1
 800a926:	bf01      	itttt	eq
 800a928:	6819      	ldreq	r1, [r3, #0]
 800a92a:	685b      	ldreq	r3, [r3, #4]
 800a92c:	1809      	addeq	r1, r1, r0
 800a92e:	6021      	streq	r1, [r4, #0]
 800a930:	e7ed      	b.n	800a90e <_free_r+0x1e>
 800a932:	461a      	mov	r2, r3
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b10b      	cbz	r3, 800a93c <_free_r+0x4c>
 800a938:	42a3      	cmp	r3, r4
 800a93a:	d9fa      	bls.n	800a932 <_free_r+0x42>
 800a93c:	6811      	ldr	r1, [r2, #0]
 800a93e:	1850      	adds	r0, r2, r1
 800a940:	42a0      	cmp	r0, r4
 800a942:	d10b      	bne.n	800a95c <_free_r+0x6c>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	4401      	add	r1, r0
 800a948:	1850      	adds	r0, r2, r1
 800a94a:	4283      	cmp	r3, r0
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	d1e0      	bne.n	800a912 <_free_r+0x22>
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	6053      	str	r3, [r2, #4]
 800a956:	4408      	add	r0, r1
 800a958:	6010      	str	r0, [r2, #0]
 800a95a:	e7da      	b.n	800a912 <_free_r+0x22>
 800a95c:	d902      	bls.n	800a964 <_free_r+0x74>
 800a95e:	230c      	movs	r3, #12
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	e7d6      	b.n	800a912 <_free_r+0x22>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	1821      	adds	r1, r4, r0
 800a968:	428b      	cmp	r3, r1
 800a96a:	bf04      	itt	eq
 800a96c:	6819      	ldreq	r1, [r3, #0]
 800a96e:	685b      	ldreq	r3, [r3, #4]
 800a970:	6063      	str	r3, [r4, #4]
 800a972:	bf04      	itt	eq
 800a974:	1809      	addeq	r1, r1, r0
 800a976:	6021      	streq	r1, [r4, #0]
 800a978:	6054      	str	r4, [r2, #4]
 800a97a:	e7ca      	b.n	800a912 <_free_r+0x22>
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	bf00      	nop
 800a980:	200018c0 	.word	0x200018c0

0800a984 <sbrk_aligned>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4e0f      	ldr	r6, [pc, #60]	@ (800a9c4 <sbrk_aligned+0x40>)
 800a988:	460c      	mov	r4, r1
 800a98a:	6831      	ldr	r1, [r6, #0]
 800a98c:	4605      	mov	r5, r0
 800a98e:	b911      	cbnz	r1, 800a996 <sbrk_aligned+0x12>
 800a990:	f000 fca4 	bl	800b2dc <_sbrk_r>
 800a994:	6030      	str	r0, [r6, #0]
 800a996:	4621      	mov	r1, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	f000 fc9f 	bl	800b2dc <_sbrk_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	d103      	bne.n	800a9aa <sbrk_aligned+0x26>
 800a9a2:	f04f 34ff 	mov.w	r4, #4294967295
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}
 800a9aa:	1cc4      	adds	r4, r0, #3
 800a9ac:	f024 0403 	bic.w	r4, r4, #3
 800a9b0:	42a0      	cmp	r0, r4
 800a9b2:	d0f8      	beq.n	800a9a6 <sbrk_aligned+0x22>
 800a9b4:	1a21      	subs	r1, r4, r0
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 fc90 	bl	800b2dc <_sbrk_r>
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d1f2      	bne.n	800a9a6 <sbrk_aligned+0x22>
 800a9c0:	e7ef      	b.n	800a9a2 <sbrk_aligned+0x1e>
 800a9c2:	bf00      	nop
 800a9c4:	200018bc 	.word	0x200018bc

0800a9c8 <_malloc_r>:
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	1ccd      	adds	r5, r1, #3
 800a9ce:	f025 0503 	bic.w	r5, r5, #3
 800a9d2:	3508      	adds	r5, #8
 800a9d4:	2d0c      	cmp	r5, #12
 800a9d6:	bf38      	it	cc
 800a9d8:	250c      	movcc	r5, #12
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	4606      	mov	r6, r0
 800a9de:	db01      	blt.n	800a9e4 <_malloc_r+0x1c>
 800a9e0:	42a9      	cmp	r1, r5
 800a9e2:	d904      	bls.n	800a9ee <_malloc_r+0x26>
 800a9e4:	230c      	movs	r3, #12
 800a9e6:	6033      	str	r3, [r6, #0]
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aac4 <_malloc_r+0xfc>
 800a9f2:	f000 f869 	bl	800aac8 <__malloc_lock>
 800a9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fa:	461c      	mov	r4, r3
 800a9fc:	bb44      	cbnz	r4, 800aa50 <_malloc_r+0x88>
 800a9fe:	4629      	mov	r1, r5
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff ffbf 	bl	800a984 <sbrk_aligned>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	4604      	mov	r4, r0
 800aa0a:	d158      	bne.n	800aabe <_malloc_r+0xf6>
 800aa0c:	f8d8 4000 	ldr.w	r4, [r8]
 800aa10:	4627      	mov	r7, r4
 800aa12:	2f00      	cmp	r7, #0
 800aa14:	d143      	bne.n	800aa9e <_malloc_r+0xd6>
 800aa16:	2c00      	cmp	r4, #0
 800aa18:	d04b      	beq.n	800aab2 <_malloc_r+0xea>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	4630      	mov	r0, r6
 800aa20:	eb04 0903 	add.w	r9, r4, r3
 800aa24:	f000 fc5a 	bl	800b2dc <_sbrk_r>
 800aa28:	4581      	cmp	r9, r0
 800aa2a:	d142      	bne.n	800aab2 <_malloc_r+0xea>
 800aa2c:	6821      	ldr	r1, [r4, #0]
 800aa2e:	1a6d      	subs	r5, r5, r1
 800aa30:	4629      	mov	r1, r5
 800aa32:	4630      	mov	r0, r6
 800aa34:	f7ff ffa6 	bl	800a984 <sbrk_aligned>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d03a      	beq.n	800aab2 <_malloc_r+0xea>
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	442b      	add	r3, r5
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	f8d8 3000 	ldr.w	r3, [r8]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	bb62      	cbnz	r2, 800aaa4 <_malloc_r+0xdc>
 800aa4a:	f8c8 7000 	str.w	r7, [r8]
 800aa4e:	e00f      	b.n	800aa70 <_malloc_r+0xa8>
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	1b52      	subs	r2, r2, r5
 800aa54:	d420      	bmi.n	800aa98 <_malloc_r+0xd0>
 800aa56:	2a0b      	cmp	r2, #11
 800aa58:	d917      	bls.n	800aa8a <_malloc_r+0xc2>
 800aa5a:	1961      	adds	r1, r4, r5
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	6025      	str	r5, [r4, #0]
 800aa60:	bf18      	it	ne
 800aa62:	6059      	strne	r1, [r3, #4]
 800aa64:	6863      	ldr	r3, [r4, #4]
 800aa66:	bf08      	it	eq
 800aa68:	f8c8 1000 	streq.w	r1, [r8]
 800aa6c:	5162      	str	r2, [r4, r5]
 800aa6e:	604b      	str	r3, [r1, #4]
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f82f 	bl	800aad4 <__malloc_unlock>
 800aa76:	f104 000b 	add.w	r0, r4, #11
 800aa7a:	1d23      	adds	r3, r4, #4
 800aa7c:	f020 0007 	bic.w	r0, r0, #7
 800aa80:	1ac2      	subs	r2, r0, r3
 800aa82:	bf1c      	itt	ne
 800aa84:	1a1b      	subne	r3, r3, r0
 800aa86:	50a3      	strne	r3, [r4, r2]
 800aa88:	e7af      	b.n	800a9ea <_malloc_r+0x22>
 800aa8a:	6862      	ldr	r2, [r4, #4]
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	bf0c      	ite	eq
 800aa90:	f8c8 2000 	streq.w	r2, [r8]
 800aa94:	605a      	strne	r2, [r3, #4]
 800aa96:	e7eb      	b.n	800aa70 <_malloc_r+0xa8>
 800aa98:	4623      	mov	r3, r4
 800aa9a:	6864      	ldr	r4, [r4, #4]
 800aa9c:	e7ae      	b.n	800a9fc <_malloc_r+0x34>
 800aa9e:	463c      	mov	r4, r7
 800aaa0:	687f      	ldr	r7, [r7, #4]
 800aaa2:	e7b6      	b.n	800aa12 <_malloc_r+0x4a>
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	42a3      	cmp	r3, r4
 800aaaa:	d1fb      	bne.n	800aaa4 <_malloc_r+0xdc>
 800aaac:	2300      	movs	r3, #0
 800aaae:	6053      	str	r3, [r2, #4]
 800aab0:	e7de      	b.n	800aa70 <_malloc_r+0xa8>
 800aab2:	230c      	movs	r3, #12
 800aab4:	6033      	str	r3, [r6, #0]
 800aab6:	4630      	mov	r0, r6
 800aab8:	f000 f80c 	bl	800aad4 <__malloc_unlock>
 800aabc:	e794      	b.n	800a9e8 <_malloc_r+0x20>
 800aabe:	6005      	str	r5, [r0, #0]
 800aac0:	e7d6      	b.n	800aa70 <_malloc_r+0xa8>
 800aac2:	bf00      	nop
 800aac4:	200018c0 	.word	0x200018c0

0800aac8 <__malloc_lock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	@ (800aad0 <__malloc_lock+0x8>)
 800aaca:	f7ff bf0e 	b.w	800a8ea <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	200018b8 	.word	0x200018b8

0800aad4 <__malloc_unlock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	@ (800aadc <__malloc_unlock+0x8>)
 800aad6:	f7ff bf09 	b.w	800a8ec <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	200018b8 	.word	0x200018b8

0800aae0 <__sfputc_r>:
 800aae0:	6893      	ldr	r3, [r2, #8]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	b410      	push	{r4}
 800aae8:	6093      	str	r3, [r2, #8]
 800aaea:	da08      	bge.n	800aafe <__sfputc_r+0x1e>
 800aaec:	6994      	ldr	r4, [r2, #24]
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	db01      	blt.n	800aaf6 <__sfputc_r+0x16>
 800aaf2:	290a      	cmp	r1, #10
 800aaf4:	d103      	bne.n	800aafe <__sfputc_r+0x1e>
 800aaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aafa:	f7ff bdd8 	b.w	800a6ae <__swbuf_r>
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	1c58      	adds	r0, r3, #1
 800ab02:	6010      	str	r0, [r2, #0]
 800ab04:	7019      	strb	r1, [r3, #0]
 800ab06:	4608      	mov	r0, r1
 800ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <__sfputs_r>:
 800ab0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	4614      	mov	r4, r2
 800ab16:	18d5      	adds	r5, r2, r3
 800ab18:	42ac      	cmp	r4, r5
 800ab1a:	d101      	bne.n	800ab20 <__sfputs_r+0x12>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e007      	b.n	800ab30 <__sfputs_r+0x22>
 800ab20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab24:	463a      	mov	r2, r7
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ffda 	bl	800aae0 <__sfputc_r>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d1f3      	bne.n	800ab18 <__sfputs_r+0xa>
 800ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab34 <_vfiprintf_r>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	460d      	mov	r5, r1
 800ab3a:	b09d      	sub	sp, #116	@ 0x74
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	4698      	mov	r8, r3
 800ab40:	4606      	mov	r6, r0
 800ab42:	b118      	cbz	r0, 800ab4c <_vfiprintf_r+0x18>
 800ab44:	6a03      	ldr	r3, [r0, #32]
 800ab46:	b90b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x18>
 800ab48:	f7ff fcc8 	bl	800a4dc <__sinit>
 800ab4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab4e:	07d9      	lsls	r1, r3, #31
 800ab50:	d405      	bmi.n	800ab5e <_vfiprintf_r+0x2a>
 800ab52:	89ab      	ldrh	r3, [r5, #12]
 800ab54:	059a      	lsls	r2, r3, #22
 800ab56:	d402      	bmi.n	800ab5e <_vfiprintf_r+0x2a>
 800ab58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab5a:	f7ff fec6 	bl	800a8ea <__retarget_lock_acquire_recursive>
 800ab5e:	89ab      	ldrh	r3, [r5, #12]
 800ab60:	071b      	lsls	r3, r3, #28
 800ab62:	d501      	bpl.n	800ab68 <_vfiprintf_r+0x34>
 800ab64:	692b      	ldr	r3, [r5, #16]
 800ab66:	b99b      	cbnz	r3, 800ab90 <_vfiprintf_r+0x5c>
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f7ff fdde 	bl	800a72c <__swsetup_r>
 800ab70:	b170      	cbz	r0, 800ab90 <_vfiprintf_r+0x5c>
 800ab72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab74:	07dc      	lsls	r4, r3, #31
 800ab76:	d504      	bpl.n	800ab82 <_vfiprintf_r+0x4e>
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	b01d      	add	sp, #116	@ 0x74
 800ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	0598      	lsls	r0, r3, #22
 800ab86:	d4f7      	bmi.n	800ab78 <_vfiprintf_r+0x44>
 800ab88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab8a:	f7ff feaf 	bl	800a8ec <__retarget_lock_release_recursive>
 800ab8e:	e7f3      	b.n	800ab78 <_vfiprintf_r+0x44>
 800ab90:	2300      	movs	r3, #0
 800ab92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab94:	2320      	movs	r3, #32
 800ab96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab9e:	2330      	movs	r3, #48	@ 0x30
 800aba0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad50 <_vfiprintf_r+0x21c>
 800aba4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aba8:	f04f 0901 	mov.w	r9, #1
 800abac:	4623      	mov	r3, r4
 800abae:	469a      	mov	sl, r3
 800abb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb4:	b10a      	cbz	r2, 800abba <_vfiprintf_r+0x86>
 800abb6:	2a25      	cmp	r2, #37	@ 0x25
 800abb8:	d1f9      	bne.n	800abae <_vfiprintf_r+0x7a>
 800abba:	ebba 0b04 	subs.w	fp, sl, r4
 800abbe:	d00b      	beq.n	800abd8 <_vfiprintf_r+0xa4>
 800abc0:	465b      	mov	r3, fp
 800abc2:	4622      	mov	r2, r4
 800abc4:	4629      	mov	r1, r5
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff ffa1 	bl	800ab0e <__sfputs_r>
 800abcc:	3001      	adds	r0, #1
 800abce:	f000 80a7 	beq.w	800ad20 <_vfiprintf_r+0x1ec>
 800abd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abd4:	445a      	add	r2, fp
 800abd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800abd8:	f89a 3000 	ldrb.w	r3, [sl]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 809f 	beq.w	800ad20 <_vfiprintf_r+0x1ec>
 800abe2:	2300      	movs	r3, #0
 800abe4:	f04f 32ff 	mov.w	r2, #4294967295
 800abe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abec:	f10a 0a01 	add.w	sl, sl, #1
 800abf0:	9304      	str	r3, [sp, #16]
 800abf2:	9307      	str	r3, [sp, #28]
 800abf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800abfa:	4654      	mov	r4, sl
 800abfc:	2205      	movs	r2, #5
 800abfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac02:	4853      	ldr	r0, [pc, #332]	@ (800ad50 <_vfiprintf_r+0x21c>)
 800ac04:	f7f5 fae4 	bl	80001d0 <memchr>
 800ac08:	9a04      	ldr	r2, [sp, #16]
 800ac0a:	b9d8      	cbnz	r0, 800ac44 <_vfiprintf_r+0x110>
 800ac0c:	06d1      	lsls	r1, r2, #27
 800ac0e:	bf44      	itt	mi
 800ac10:	2320      	movmi	r3, #32
 800ac12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac16:	0713      	lsls	r3, r2, #28
 800ac18:	bf44      	itt	mi
 800ac1a:	232b      	movmi	r3, #43	@ 0x2b
 800ac1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac20:	f89a 3000 	ldrb.w	r3, [sl]
 800ac24:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac26:	d015      	beq.n	800ac54 <_vfiprintf_r+0x120>
 800ac28:	9a07      	ldr	r2, [sp, #28]
 800ac2a:	4654      	mov	r4, sl
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f04f 0c0a 	mov.w	ip, #10
 800ac32:	4621      	mov	r1, r4
 800ac34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac38:	3b30      	subs	r3, #48	@ 0x30
 800ac3a:	2b09      	cmp	r3, #9
 800ac3c:	d94b      	bls.n	800acd6 <_vfiprintf_r+0x1a2>
 800ac3e:	b1b0      	cbz	r0, 800ac6e <_vfiprintf_r+0x13a>
 800ac40:	9207      	str	r2, [sp, #28]
 800ac42:	e014      	b.n	800ac6e <_vfiprintf_r+0x13a>
 800ac44:	eba0 0308 	sub.w	r3, r0, r8
 800ac48:	fa09 f303 	lsl.w	r3, r9, r3
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	9304      	str	r3, [sp, #16]
 800ac50:	46a2      	mov	sl, r4
 800ac52:	e7d2      	b.n	800abfa <_vfiprintf_r+0xc6>
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	1d19      	adds	r1, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	9103      	str	r1, [sp, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bfbb      	ittet	lt
 800ac60:	425b      	neglt	r3, r3
 800ac62:	f042 0202 	orrlt.w	r2, r2, #2
 800ac66:	9307      	strge	r3, [sp, #28]
 800ac68:	9307      	strlt	r3, [sp, #28]
 800ac6a:	bfb8      	it	lt
 800ac6c:	9204      	strlt	r2, [sp, #16]
 800ac6e:	7823      	ldrb	r3, [r4, #0]
 800ac70:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac72:	d10a      	bne.n	800ac8a <_vfiprintf_r+0x156>
 800ac74:	7863      	ldrb	r3, [r4, #1]
 800ac76:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac78:	d132      	bne.n	800ace0 <_vfiprintf_r+0x1ac>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	1d1a      	adds	r2, r3, #4
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	9203      	str	r2, [sp, #12]
 800ac82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac86:	3402      	adds	r4, #2
 800ac88:	9305      	str	r3, [sp, #20]
 800ac8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad60 <_vfiprintf_r+0x22c>
 800ac8e:	7821      	ldrb	r1, [r4, #0]
 800ac90:	2203      	movs	r2, #3
 800ac92:	4650      	mov	r0, sl
 800ac94:	f7f5 fa9c 	bl	80001d0 <memchr>
 800ac98:	b138      	cbz	r0, 800acaa <_vfiprintf_r+0x176>
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	eba0 000a 	sub.w	r0, r0, sl
 800aca0:	2240      	movs	r2, #64	@ 0x40
 800aca2:	4082      	lsls	r2, r0
 800aca4:	4313      	orrs	r3, r2
 800aca6:	3401      	adds	r4, #1
 800aca8:	9304      	str	r3, [sp, #16]
 800acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acae:	4829      	ldr	r0, [pc, #164]	@ (800ad54 <_vfiprintf_r+0x220>)
 800acb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acb4:	2206      	movs	r2, #6
 800acb6:	f7f5 fa8b 	bl	80001d0 <memchr>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d03f      	beq.n	800ad3e <_vfiprintf_r+0x20a>
 800acbe:	4b26      	ldr	r3, [pc, #152]	@ (800ad58 <_vfiprintf_r+0x224>)
 800acc0:	bb1b      	cbnz	r3, 800ad0a <_vfiprintf_r+0x1d6>
 800acc2:	9b03      	ldr	r3, [sp, #12]
 800acc4:	3307      	adds	r3, #7
 800acc6:	f023 0307 	bic.w	r3, r3, #7
 800acca:	3308      	adds	r3, #8
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd0:	443b      	add	r3, r7
 800acd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd4:	e76a      	b.n	800abac <_vfiprintf_r+0x78>
 800acd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acda:	460c      	mov	r4, r1
 800acdc:	2001      	movs	r0, #1
 800acde:	e7a8      	b.n	800ac32 <_vfiprintf_r+0xfe>
 800ace0:	2300      	movs	r3, #0
 800ace2:	3401      	adds	r4, #1
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	4619      	mov	r1, r3
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	4620      	mov	r0, r4
 800acee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf2:	3a30      	subs	r2, #48	@ 0x30
 800acf4:	2a09      	cmp	r2, #9
 800acf6:	d903      	bls.n	800ad00 <_vfiprintf_r+0x1cc>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0c6      	beq.n	800ac8a <_vfiprintf_r+0x156>
 800acfc:	9105      	str	r1, [sp, #20]
 800acfe:	e7c4      	b.n	800ac8a <_vfiprintf_r+0x156>
 800ad00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad04:	4604      	mov	r4, r0
 800ad06:	2301      	movs	r3, #1
 800ad08:	e7f0      	b.n	800acec <_vfiprintf_r+0x1b8>
 800ad0a:	ab03      	add	r3, sp, #12
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	462a      	mov	r2, r5
 800ad10:	4b12      	ldr	r3, [pc, #72]	@ (800ad5c <_vfiprintf_r+0x228>)
 800ad12:	a904      	add	r1, sp, #16
 800ad14:	4630      	mov	r0, r6
 800ad16:	f3af 8000 	nop.w
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	1c78      	adds	r0, r7, #1
 800ad1e:	d1d6      	bne.n	800acce <_vfiprintf_r+0x19a>
 800ad20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad22:	07d9      	lsls	r1, r3, #31
 800ad24:	d405      	bmi.n	800ad32 <_vfiprintf_r+0x1fe>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d402      	bmi.n	800ad32 <_vfiprintf_r+0x1fe>
 800ad2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad2e:	f7ff fddd 	bl	800a8ec <__retarget_lock_release_recursive>
 800ad32:	89ab      	ldrh	r3, [r5, #12]
 800ad34:	065b      	lsls	r3, r3, #25
 800ad36:	f53f af1f 	bmi.w	800ab78 <_vfiprintf_r+0x44>
 800ad3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad3c:	e71e      	b.n	800ab7c <_vfiprintf_r+0x48>
 800ad3e:	ab03      	add	r3, sp, #12
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	462a      	mov	r2, r5
 800ad44:	4b05      	ldr	r3, [pc, #20]	@ (800ad5c <_vfiprintf_r+0x228>)
 800ad46:	a904      	add	r1, sp, #16
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f000 f879 	bl	800ae40 <_printf_i>
 800ad4e:	e7e4      	b.n	800ad1a <_vfiprintf_r+0x1e6>
 800ad50:	08036420 	.word	0x08036420
 800ad54:	0803642a 	.word	0x0803642a
 800ad58:	00000000 	.word	0x00000000
 800ad5c:	0800ab0f 	.word	0x0800ab0f
 800ad60:	08036426 	.word	0x08036426

0800ad64 <_printf_common>:
 800ad64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad68:	4616      	mov	r6, r2
 800ad6a:	4698      	mov	r8, r3
 800ad6c:	688a      	ldr	r2, [r1, #8]
 800ad6e:	690b      	ldr	r3, [r1, #16]
 800ad70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad74:	4293      	cmp	r3, r2
 800ad76:	bfb8      	it	lt
 800ad78:	4613      	movlt	r3, r2
 800ad7a:	6033      	str	r3, [r6, #0]
 800ad7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad80:	4607      	mov	r7, r0
 800ad82:	460c      	mov	r4, r1
 800ad84:	b10a      	cbz	r2, 800ad8a <_printf_common+0x26>
 800ad86:	3301      	adds	r3, #1
 800ad88:	6033      	str	r3, [r6, #0]
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	0699      	lsls	r1, r3, #26
 800ad8e:	bf42      	ittt	mi
 800ad90:	6833      	ldrmi	r3, [r6, #0]
 800ad92:	3302      	addmi	r3, #2
 800ad94:	6033      	strmi	r3, [r6, #0]
 800ad96:	6825      	ldr	r5, [r4, #0]
 800ad98:	f015 0506 	ands.w	r5, r5, #6
 800ad9c:	d106      	bne.n	800adac <_printf_common+0x48>
 800ad9e:	f104 0a19 	add.w	sl, r4, #25
 800ada2:	68e3      	ldr	r3, [r4, #12]
 800ada4:	6832      	ldr	r2, [r6, #0]
 800ada6:	1a9b      	subs	r3, r3, r2
 800ada8:	42ab      	cmp	r3, r5
 800adaa:	dc26      	bgt.n	800adfa <_printf_common+0x96>
 800adac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800adb0:	6822      	ldr	r2, [r4, #0]
 800adb2:	3b00      	subs	r3, #0
 800adb4:	bf18      	it	ne
 800adb6:	2301      	movne	r3, #1
 800adb8:	0692      	lsls	r2, r2, #26
 800adba:	d42b      	bmi.n	800ae14 <_printf_common+0xb0>
 800adbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800adc0:	4641      	mov	r1, r8
 800adc2:	4638      	mov	r0, r7
 800adc4:	47c8      	blx	r9
 800adc6:	3001      	adds	r0, #1
 800adc8:	d01e      	beq.n	800ae08 <_printf_common+0xa4>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	6922      	ldr	r2, [r4, #16]
 800adce:	f003 0306 	and.w	r3, r3, #6
 800add2:	2b04      	cmp	r3, #4
 800add4:	bf02      	ittt	eq
 800add6:	68e5      	ldreq	r5, [r4, #12]
 800add8:	6833      	ldreq	r3, [r6, #0]
 800adda:	1aed      	subeq	r5, r5, r3
 800addc:	68a3      	ldr	r3, [r4, #8]
 800adde:	bf0c      	ite	eq
 800ade0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ade4:	2500      	movne	r5, #0
 800ade6:	4293      	cmp	r3, r2
 800ade8:	bfc4      	itt	gt
 800adea:	1a9b      	subgt	r3, r3, r2
 800adec:	18ed      	addgt	r5, r5, r3
 800adee:	2600      	movs	r6, #0
 800adf0:	341a      	adds	r4, #26
 800adf2:	42b5      	cmp	r5, r6
 800adf4:	d11a      	bne.n	800ae2c <_printf_common+0xc8>
 800adf6:	2000      	movs	r0, #0
 800adf8:	e008      	b.n	800ae0c <_printf_common+0xa8>
 800adfa:	2301      	movs	r3, #1
 800adfc:	4652      	mov	r2, sl
 800adfe:	4641      	mov	r1, r8
 800ae00:	4638      	mov	r0, r7
 800ae02:	47c8      	blx	r9
 800ae04:	3001      	adds	r0, #1
 800ae06:	d103      	bne.n	800ae10 <_printf_common+0xac>
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae10:	3501      	adds	r5, #1
 800ae12:	e7c6      	b.n	800ada2 <_printf_common+0x3e>
 800ae14:	18e1      	adds	r1, r4, r3
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	2030      	movs	r0, #48	@ 0x30
 800ae1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae1e:	4422      	add	r2, r4
 800ae20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae28:	3302      	adds	r3, #2
 800ae2a:	e7c7      	b.n	800adbc <_printf_common+0x58>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	4622      	mov	r2, r4
 800ae30:	4641      	mov	r1, r8
 800ae32:	4638      	mov	r0, r7
 800ae34:	47c8      	blx	r9
 800ae36:	3001      	adds	r0, #1
 800ae38:	d0e6      	beq.n	800ae08 <_printf_common+0xa4>
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	e7d9      	b.n	800adf2 <_printf_common+0x8e>
	...

0800ae40 <_printf_i>:
 800ae40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae44:	7e0f      	ldrb	r7, [r1, #24]
 800ae46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae48:	2f78      	cmp	r7, #120	@ 0x78
 800ae4a:	4691      	mov	r9, r2
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	469a      	mov	sl, r3
 800ae52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae56:	d807      	bhi.n	800ae68 <_printf_i+0x28>
 800ae58:	2f62      	cmp	r7, #98	@ 0x62
 800ae5a:	d80a      	bhi.n	800ae72 <_printf_i+0x32>
 800ae5c:	2f00      	cmp	r7, #0
 800ae5e:	f000 80d1 	beq.w	800b004 <_printf_i+0x1c4>
 800ae62:	2f58      	cmp	r7, #88	@ 0x58
 800ae64:	f000 80b8 	beq.w	800afd8 <_printf_i+0x198>
 800ae68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae70:	e03a      	b.n	800aee8 <_printf_i+0xa8>
 800ae72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae76:	2b15      	cmp	r3, #21
 800ae78:	d8f6      	bhi.n	800ae68 <_printf_i+0x28>
 800ae7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ae80 <_printf_i+0x40>)
 800ae7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae80:	0800aed9 	.word	0x0800aed9
 800ae84:	0800aeed 	.word	0x0800aeed
 800ae88:	0800ae69 	.word	0x0800ae69
 800ae8c:	0800ae69 	.word	0x0800ae69
 800ae90:	0800ae69 	.word	0x0800ae69
 800ae94:	0800ae69 	.word	0x0800ae69
 800ae98:	0800aeed 	.word	0x0800aeed
 800ae9c:	0800ae69 	.word	0x0800ae69
 800aea0:	0800ae69 	.word	0x0800ae69
 800aea4:	0800ae69 	.word	0x0800ae69
 800aea8:	0800ae69 	.word	0x0800ae69
 800aeac:	0800afeb 	.word	0x0800afeb
 800aeb0:	0800af17 	.word	0x0800af17
 800aeb4:	0800afa5 	.word	0x0800afa5
 800aeb8:	0800ae69 	.word	0x0800ae69
 800aebc:	0800ae69 	.word	0x0800ae69
 800aec0:	0800b00d 	.word	0x0800b00d
 800aec4:	0800ae69 	.word	0x0800ae69
 800aec8:	0800af17 	.word	0x0800af17
 800aecc:	0800ae69 	.word	0x0800ae69
 800aed0:	0800ae69 	.word	0x0800ae69
 800aed4:	0800afad 	.word	0x0800afad
 800aed8:	6833      	ldr	r3, [r6, #0]
 800aeda:	1d1a      	adds	r2, r3, #4
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6032      	str	r2, [r6, #0]
 800aee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aee8:	2301      	movs	r3, #1
 800aeea:	e09c      	b.n	800b026 <_printf_i+0x1e6>
 800aeec:	6833      	ldr	r3, [r6, #0]
 800aeee:	6820      	ldr	r0, [r4, #0]
 800aef0:	1d19      	adds	r1, r3, #4
 800aef2:	6031      	str	r1, [r6, #0]
 800aef4:	0606      	lsls	r6, r0, #24
 800aef6:	d501      	bpl.n	800aefc <_printf_i+0xbc>
 800aef8:	681d      	ldr	r5, [r3, #0]
 800aefa:	e003      	b.n	800af04 <_printf_i+0xc4>
 800aefc:	0645      	lsls	r5, r0, #25
 800aefe:	d5fb      	bpl.n	800aef8 <_printf_i+0xb8>
 800af00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af04:	2d00      	cmp	r5, #0
 800af06:	da03      	bge.n	800af10 <_printf_i+0xd0>
 800af08:	232d      	movs	r3, #45	@ 0x2d
 800af0a:	426d      	negs	r5, r5
 800af0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af10:	4858      	ldr	r0, [pc, #352]	@ (800b074 <_printf_i+0x234>)
 800af12:	230a      	movs	r3, #10
 800af14:	e011      	b.n	800af3a <_printf_i+0xfa>
 800af16:	6821      	ldr	r1, [r4, #0]
 800af18:	6833      	ldr	r3, [r6, #0]
 800af1a:	0608      	lsls	r0, r1, #24
 800af1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800af20:	d402      	bmi.n	800af28 <_printf_i+0xe8>
 800af22:	0649      	lsls	r1, r1, #25
 800af24:	bf48      	it	mi
 800af26:	b2ad      	uxthmi	r5, r5
 800af28:	2f6f      	cmp	r7, #111	@ 0x6f
 800af2a:	4852      	ldr	r0, [pc, #328]	@ (800b074 <_printf_i+0x234>)
 800af2c:	6033      	str	r3, [r6, #0]
 800af2e:	bf14      	ite	ne
 800af30:	230a      	movne	r3, #10
 800af32:	2308      	moveq	r3, #8
 800af34:	2100      	movs	r1, #0
 800af36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af3a:	6866      	ldr	r6, [r4, #4]
 800af3c:	60a6      	str	r6, [r4, #8]
 800af3e:	2e00      	cmp	r6, #0
 800af40:	db05      	blt.n	800af4e <_printf_i+0x10e>
 800af42:	6821      	ldr	r1, [r4, #0]
 800af44:	432e      	orrs	r6, r5
 800af46:	f021 0104 	bic.w	r1, r1, #4
 800af4a:	6021      	str	r1, [r4, #0]
 800af4c:	d04b      	beq.n	800afe6 <_printf_i+0x1a6>
 800af4e:	4616      	mov	r6, r2
 800af50:	fbb5 f1f3 	udiv	r1, r5, r3
 800af54:	fb03 5711 	mls	r7, r3, r1, r5
 800af58:	5dc7      	ldrb	r7, [r0, r7]
 800af5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af5e:	462f      	mov	r7, r5
 800af60:	42bb      	cmp	r3, r7
 800af62:	460d      	mov	r5, r1
 800af64:	d9f4      	bls.n	800af50 <_printf_i+0x110>
 800af66:	2b08      	cmp	r3, #8
 800af68:	d10b      	bne.n	800af82 <_printf_i+0x142>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	07df      	lsls	r7, r3, #31
 800af6e:	d508      	bpl.n	800af82 <_printf_i+0x142>
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	6861      	ldr	r1, [r4, #4]
 800af74:	4299      	cmp	r1, r3
 800af76:	bfde      	ittt	le
 800af78:	2330      	movle	r3, #48	@ 0x30
 800af7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af82:	1b92      	subs	r2, r2, r6
 800af84:	6122      	str	r2, [r4, #16]
 800af86:	f8cd a000 	str.w	sl, [sp]
 800af8a:	464b      	mov	r3, r9
 800af8c:	aa03      	add	r2, sp, #12
 800af8e:	4621      	mov	r1, r4
 800af90:	4640      	mov	r0, r8
 800af92:	f7ff fee7 	bl	800ad64 <_printf_common>
 800af96:	3001      	adds	r0, #1
 800af98:	d14a      	bne.n	800b030 <_printf_i+0x1f0>
 800af9a:	f04f 30ff 	mov.w	r0, #4294967295
 800af9e:	b004      	add	sp, #16
 800afa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	f043 0320 	orr.w	r3, r3, #32
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	4832      	ldr	r0, [pc, #200]	@ (800b078 <_printf_i+0x238>)
 800afae:	2778      	movs	r7, #120	@ 0x78
 800afb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	6831      	ldr	r1, [r6, #0]
 800afb8:	061f      	lsls	r7, r3, #24
 800afba:	f851 5b04 	ldr.w	r5, [r1], #4
 800afbe:	d402      	bmi.n	800afc6 <_printf_i+0x186>
 800afc0:	065f      	lsls	r7, r3, #25
 800afc2:	bf48      	it	mi
 800afc4:	b2ad      	uxthmi	r5, r5
 800afc6:	6031      	str	r1, [r6, #0]
 800afc8:	07d9      	lsls	r1, r3, #31
 800afca:	bf44      	itt	mi
 800afcc:	f043 0320 	orrmi.w	r3, r3, #32
 800afd0:	6023      	strmi	r3, [r4, #0]
 800afd2:	b11d      	cbz	r5, 800afdc <_printf_i+0x19c>
 800afd4:	2310      	movs	r3, #16
 800afd6:	e7ad      	b.n	800af34 <_printf_i+0xf4>
 800afd8:	4826      	ldr	r0, [pc, #152]	@ (800b074 <_printf_i+0x234>)
 800afda:	e7e9      	b.n	800afb0 <_printf_i+0x170>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	f023 0320 	bic.w	r3, r3, #32
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	e7f6      	b.n	800afd4 <_printf_i+0x194>
 800afe6:	4616      	mov	r6, r2
 800afe8:	e7bd      	b.n	800af66 <_printf_i+0x126>
 800afea:	6833      	ldr	r3, [r6, #0]
 800afec:	6825      	ldr	r5, [r4, #0]
 800afee:	6961      	ldr	r1, [r4, #20]
 800aff0:	1d18      	adds	r0, r3, #4
 800aff2:	6030      	str	r0, [r6, #0]
 800aff4:	062e      	lsls	r6, r5, #24
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	d501      	bpl.n	800affe <_printf_i+0x1be>
 800affa:	6019      	str	r1, [r3, #0]
 800affc:	e002      	b.n	800b004 <_printf_i+0x1c4>
 800affe:	0668      	lsls	r0, r5, #25
 800b000:	d5fb      	bpl.n	800affa <_printf_i+0x1ba>
 800b002:	8019      	strh	r1, [r3, #0]
 800b004:	2300      	movs	r3, #0
 800b006:	6123      	str	r3, [r4, #16]
 800b008:	4616      	mov	r6, r2
 800b00a:	e7bc      	b.n	800af86 <_printf_i+0x146>
 800b00c:	6833      	ldr	r3, [r6, #0]
 800b00e:	1d1a      	adds	r2, r3, #4
 800b010:	6032      	str	r2, [r6, #0]
 800b012:	681e      	ldr	r6, [r3, #0]
 800b014:	6862      	ldr	r2, [r4, #4]
 800b016:	2100      	movs	r1, #0
 800b018:	4630      	mov	r0, r6
 800b01a:	f7f5 f8d9 	bl	80001d0 <memchr>
 800b01e:	b108      	cbz	r0, 800b024 <_printf_i+0x1e4>
 800b020:	1b80      	subs	r0, r0, r6
 800b022:	6060      	str	r0, [r4, #4]
 800b024:	6863      	ldr	r3, [r4, #4]
 800b026:	6123      	str	r3, [r4, #16]
 800b028:	2300      	movs	r3, #0
 800b02a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b02e:	e7aa      	b.n	800af86 <_printf_i+0x146>
 800b030:	6923      	ldr	r3, [r4, #16]
 800b032:	4632      	mov	r2, r6
 800b034:	4649      	mov	r1, r9
 800b036:	4640      	mov	r0, r8
 800b038:	47d0      	blx	sl
 800b03a:	3001      	adds	r0, #1
 800b03c:	d0ad      	beq.n	800af9a <_printf_i+0x15a>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	079b      	lsls	r3, r3, #30
 800b042:	d413      	bmi.n	800b06c <_printf_i+0x22c>
 800b044:	68e0      	ldr	r0, [r4, #12]
 800b046:	9b03      	ldr	r3, [sp, #12]
 800b048:	4298      	cmp	r0, r3
 800b04a:	bfb8      	it	lt
 800b04c:	4618      	movlt	r0, r3
 800b04e:	e7a6      	b.n	800af9e <_printf_i+0x15e>
 800b050:	2301      	movs	r3, #1
 800b052:	4632      	mov	r2, r6
 800b054:	4649      	mov	r1, r9
 800b056:	4640      	mov	r0, r8
 800b058:	47d0      	blx	sl
 800b05a:	3001      	adds	r0, #1
 800b05c:	d09d      	beq.n	800af9a <_printf_i+0x15a>
 800b05e:	3501      	adds	r5, #1
 800b060:	68e3      	ldr	r3, [r4, #12]
 800b062:	9903      	ldr	r1, [sp, #12]
 800b064:	1a5b      	subs	r3, r3, r1
 800b066:	42ab      	cmp	r3, r5
 800b068:	dcf2      	bgt.n	800b050 <_printf_i+0x210>
 800b06a:	e7eb      	b.n	800b044 <_printf_i+0x204>
 800b06c:	2500      	movs	r5, #0
 800b06e:	f104 0619 	add.w	r6, r4, #25
 800b072:	e7f5      	b.n	800b060 <_printf_i+0x220>
 800b074:	08036431 	.word	0x08036431
 800b078:	08036442 	.word	0x08036442

0800b07c <__sflush_r>:
 800b07c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	0716      	lsls	r6, r2, #28
 800b086:	4605      	mov	r5, r0
 800b088:	460c      	mov	r4, r1
 800b08a:	d454      	bmi.n	800b136 <__sflush_r+0xba>
 800b08c:	684b      	ldr	r3, [r1, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dc02      	bgt.n	800b098 <__sflush_r+0x1c>
 800b092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	dd48      	ble.n	800b12a <__sflush_r+0xae>
 800b098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	d045      	beq.n	800b12a <__sflush_r+0xae>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0a4:	682f      	ldr	r7, [r5, #0]
 800b0a6:	6a21      	ldr	r1, [r4, #32]
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	d030      	beq.n	800b10e <__sflush_r+0x92>
 800b0ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	0759      	lsls	r1, r3, #29
 800b0b2:	d505      	bpl.n	800b0c0 <__sflush_r+0x44>
 800b0b4:	6863      	ldr	r3, [r4, #4]
 800b0b6:	1ad2      	subs	r2, r2, r3
 800b0b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0ba:	b10b      	cbz	r3, 800b0c0 <__sflush_r+0x44>
 800b0bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0be:	1ad2      	subs	r2, r2, r3
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0c4:	6a21      	ldr	r1, [r4, #32]
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	47b0      	blx	r6
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	d106      	bne.n	800b0de <__sflush_r+0x62>
 800b0d0:	6829      	ldr	r1, [r5, #0]
 800b0d2:	291d      	cmp	r1, #29
 800b0d4:	d82b      	bhi.n	800b12e <__sflush_r+0xb2>
 800b0d6:	4a2a      	ldr	r2, [pc, #168]	@ (800b180 <__sflush_r+0x104>)
 800b0d8:	40ca      	lsrs	r2, r1
 800b0da:	07d6      	lsls	r6, r2, #31
 800b0dc:	d527      	bpl.n	800b12e <__sflush_r+0xb2>
 800b0de:	2200      	movs	r2, #0
 800b0e0:	6062      	str	r2, [r4, #4]
 800b0e2:	04d9      	lsls	r1, r3, #19
 800b0e4:	6922      	ldr	r2, [r4, #16]
 800b0e6:	6022      	str	r2, [r4, #0]
 800b0e8:	d504      	bpl.n	800b0f4 <__sflush_r+0x78>
 800b0ea:	1c42      	adds	r2, r0, #1
 800b0ec:	d101      	bne.n	800b0f2 <__sflush_r+0x76>
 800b0ee:	682b      	ldr	r3, [r5, #0]
 800b0f0:	b903      	cbnz	r3, 800b0f4 <__sflush_r+0x78>
 800b0f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0f6:	602f      	str	r7, [r5, #0]
 800b0f8:	b1b9      	cbz	r1, 800b12a <__sflush_r+0xae>
 800b0fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0fe:	4299      	cmp	r1, r3
 800b100:	d002      	beq.n	800b108 <__sflush_r+0x8c>
 800b102:	4628      	mov	r0, r5
 800b104:	f7ff fbf4 	bl	800a8f0 <_free_r>
 800b108:	2300      	movs	r3, #0
 800b10a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b10c:	e00d      	b.n	800b12a <__sflush_r+0xae>
 800b10e:	2301      	movs	r3, #1
 800b110:	4628      	mov	r0, r5
 800b112:	47b0      	blx	r6
 800b114:	4602      	mov	r2, r0
 800b116:	1c50      	adds	r0, r2, #1
 800b118:	d1c9      	bne.n	800b0ae <__sflush_r+0x32>
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0c6      	beq.n	800b0ae <__sflush_r+0x32>
 800b120:	2b1d      	cmp	r3, #29
 800b122:	d001      	beq.n	800b128 <__sflush_r+0xac>
 800b124:	2b16      	cmp	r3, #22
 800b126:	d11e      	bne.n	800b166 <__sflush_r+0xea>
 800b128:	602f      	str	r7, [r5, #0]
 800b12a:	2000      	movs	r0, #0
 800b12c:	e022      	b.n	800b174 <__sflush_r+0xf8>
 800b12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b132:	b21b      	sxth	r3, r3
 800b134:	e01b      	b.n	800b16e <__sflush_r+0xf2>
 800b136:	690f      	ldr	r7, [r1, #16]
 800b138:	2f00      	cmp	r7, #0
 800b13a:	d0f6      	beq.n	800b12a <__sflush_r+0xae>
 800b13c:	0793      	lsls	r3, r2, #30
 800b13e:	680e      	ldr	r6, [r1, #0]
 800b140:	bf08      	it	eq
 800b142:	694b      	ldreq	r3, [r1, #20]
 800b144:	600f      	str	r7, [r1, #0]
 800b146:	bf18      	it	ne
 800b148:	2300      	movne	r3, #0
 800b14a:	eba6 0807 	sub.w	r8, r6, r7
 800b14e:	608b      	str	r3, [r1, #8]
 800b150:	f1b8 0f00 	cmp.w	r8, #0
 800b154:	dde9      	ble.n	800b12a <__sflush_r+0xae>
 800b156:	6a21      	ldr	r1, [r4, #32]
 800b158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b15a:	4643      	mov	r3, r8
 800b15c:	463a      	mov	r2, r7
 800b15e:	4628      	mov	r0, r5
 800b160:	47b0      	blx	r6
 800b162:	2800      	cmp	r0, #0
 800b164:	dc08      	bgt.n	800b178 <__sflush_r+0xfc>
 800b166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16e:	81a3      	strh	r3, [r4, #12]
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b178:	4407      	add	r7, r0
 800b17a:	eba8 0800 	sub.w	r8, r8, r0
 800b17e:	e7e7      	b.n	800b150 <__sflush_r+0xd4>
 800b180:	20400001 	.word	0x20400001

0800b184 <_fflush_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	690b      	ldr	r3, [r1, #16]
 800b188:	4605      	mov	r5, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	b913      	cbnz	r3, 800b194 <_fflush_r+0x10>
 800b18e:	2500      	movs	r5, #0
 800b190:	4628      	mov	r0, r5
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	b118      	cbz	r0, 800b19e <_fflush_r+0x1a>
 800b196:	6a03      	ldr	r3, [r0, #32]
 800b198:	b90b      	cbnz	r3, 800b19e <_fflush_r+0x1a>
 800b19a:	f7ff f99f 	bl	800a4dc <__sinit>
 800b19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0f3      	beq.n	800b18e <_fflush_r+0xa>
 800b1a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1a8:	07d0      	lsls	r0, r2, #31
 800b1aa:	d404      	bmi.n	800b1b6 <_fflush_r+0x32>
 800b1ac:	0599      	lsls	r1, r3, #22
 800b1ae:	d402      	bmi.n	800b1b6 <_fflush_r+0x32>
 800b1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1b2:	f7ff fb9a 	bl	800a8ea <__retarget_lock_acquire_recursive>
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	f7ff ff5f 	bl	800b07c <__sflush_r>
 800b1be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1c0:	07da      	lsls	r2, r3, #31
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	d4e4      	bmi.n	800b190 <_fflush_r+0xc>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	059b      	lsls	r3, r3, #22
 800b1ca:	d4e1      	bmi.n	800b190 <_fflush_r+0xc>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ce:	f7ff fb8d 	bl	800a8ec <__retarget_lock_release_recursive>
 800b1d2:	e7dd      	b.n	800b190 <_fflush_r+0xc>

0800b1d4 <__swhatbuf_r>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	b096      	sub	sp, #88	@ 0x58
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	461e      	mov	r6, r3
 800b1e4:	da0d      	bge.n	800b202 <__swhatbuf_r+0x2e>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1ec:	f04f 0100 	mov.w	r1, #0
 800b1f0:	bf14      	ite	ne
 800b1f2:	2340      	movne	r3, #64	@ 0x40
 800b1f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	6031      	str	r1, [r6, #0]
 800b1fc:	602b      	str	r3, [r5, #0]
 800b1fe:	b016      	add	sp, #88	@ 0x58
 800b200:	bd70      	pop	{r4, r5, r6, pc}
 800b202:	466a      	mov	r2, sp
 800b204:	f000 f848 	bl	800b298 <_fstat_r>
 800b208:	2800      	cmp	r0, #0
 800b20a:	dbec      	blt.n	800b1e6 <__swhatbuf_r+0x12>
 800b20c:	9901      	ldr	r1, [sp, #4]
 800b20e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b216:	4259      	negs	r1, r3
 800b218:	4159      	adcs	r1, r3
 800b21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b21e:	e7eb      	b.n	800b1f8 <__swhatbuf_r+0x24>

0800b220 <__smakebuf_r>:
 800b220:	898b      	ldrh	r3, [r1, #12]
 800b222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b224:	079d      	lsls	r5, r3, #30
 800b226:	4606      	mov	r6, r0
 800b228:	460c      	mov	r4, r1
 800b22a:	d507      	bpl.n	800b23c <__smakebuf_r+0x1c>
 800b22c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	6123      	str	r3, [r4, #16]
 800b234:	2301      	movs	r3, #1
 800b236:	6163      	str	r3, [r4, #20]
 800b238:	b003      	add	sp, #12
 800b23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23c:	ab01      	add	r3, sp, #4
 800b23e:	466a      	mov	r2, sp
 800b240:	f7ff ffc8 	bl	800b1d4 <__swhatbuf_r>
 800b244:	9f00      	ldr	r7, [sp, #0]
 800b246:	4605      	mov	r5, r0
 800b248:	4639      	mov	r1, r7
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7ff fbbc 	bl	800a9c8 <_malloc_r>
 800b250:	b948      	cbnz	r0, 800b266 <__smakebuf_r+0x46>
 800b252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b256:	059a      	lsls	r2, r3, #22
 800b258:	d4ee      	bmi.n	800b238 <__smakebuf_r+0x18>
 800b25a:	f023 0303 	bic.w	r3, r3, #3
 800b25e:	f043 0302 	orr.w	r3, r3, #2
 800b262:	81a3      	strh	r3, [r4, #12]
 800b264:	e7e2      	b.n	800b22c <__smakebuf_r+0xc>
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	6020      	str	r0, [r4, #0]
 800b26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b276:	b15b      	cbz	r3, 800b290 <__smakebuf_r+0x70>
 800b278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b27c:	4630      	mov	r0, r6
 800b27e:	f000 f81d 	bl	800b2bc <_isatty_r>
 800b282:	b128      	cbz	r0, 800b290 <__smakebuf_r+0x70>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	f023 0303 	bic.w	r3, r3, #3
 800b28a:	f043 0301 	orr.w	r3, r3, #1
 800b28e:	81a3      	strh	r3, [r4, #12]
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	431d      	orrs	r5, r3
 800b294:	81a5      	strh	r5, [r4, #12]
 800b296:	e7cf      	b.n	800b238 <__smakebuf_r+0x18>

0800b298 <_fstat_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d07      	ldr	r5, [pc, #28]	@ (800b2b8 <_fstat_r+0x20>)
 800b29c:	2300      	movs	r3, #0
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	602b      	str	r3, [r5, #0]
 800b2a6:	f7f6 f8b0 	bl	800140a <_fstat>
 800b2aa:	1c43      	adds	r3, r0, #1
 800b2ac:	d102      	bne.n	800b2b4 <_fstat_r+0x1c>
 800b2ae:	682b      	ldr	r3, [r5, #0]
 800b2b0:	b103      	cbz	r3, 800b2b4 <_fstat_r+0x1c>
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	bd38      	pop	{r3, r4, r5, pc}
 800b2b6:	bf00      	nop
 800b2b8:	200018b4 	.word	0x200018b4

0800b2bc <_isatty_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d06      	ldr	r5, [pc, #24]	@ (800b2d8 <_isatty_r+0x1c>)
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	f7f6 f8af 	bl	800142a <_isatty>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_isatty_r+0x1a>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_isatty_r+0x1a>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	200018b4 	.word	0x200018b4

0800b2dc <_sbrk_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4d06      	ldr	r5, [pc, #24]	@ (800b2f8 <_sbrk_r+0x1c>)
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	4608      	mov	r0, r1
 800b2e6:	602b      	str	r3, [r5, #0]
 800b2e8:	f7f6 f8b8 	bl	800145c <_sbrk>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_sbrk_r+0x1a>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_sbrk_r+0x1a>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	200018b4 	.word	0x200018b4

0800b2fc <_init>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	bf00      	nop
 800b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b302:	bc08      	pop	{r3}
 800b304:	469e      	mov	lr, r3
 800b306:	4770      	bx	lr

0800b308 <_fini>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	bf00      	nop
 800b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30e:	bc08      	pop	{r3}
 800b310:	469e      	mov	lr, r3
 800b312:	4770      	bx	lr
