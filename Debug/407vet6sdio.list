
407vet6sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ead0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b050  0800ec60  0800ec60  0000fc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039cb0  08039cb0  0003b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08039cb0  08039cb0  0003acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039cb8  08039cb8  0003b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039cb8  08039cb8  0003acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08039cbc  08039cbc  0003acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08039cc0  0003b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003b070  2**0
                  CONTENTS
 10 .bss          00005a84  20000070  20000070  0003b070  2**2
                  ALLOC
 11 ._user_heap_stack 0000a004  20005af4  20005af4  0003b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000261cf  00000000  00000000  0003b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cdf  00000000  00000000  0006126f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f90  00000000  00000000  00066f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001838  00000000  00000000  00068ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029529  00000000  00000000  0006a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b23b  00000000  00000000  00093c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e162f  00000000  00000000  000bee7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a04ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008978  00000000  00000000  001a04f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001a8e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec48 	.word	0x0800ec48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800ec48 	.word	0x0800ec48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <MX_DMA_Init+0x78>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_DMA_Init+0x78>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_DMA_Init+0x78>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2105      	movs	r1, #5
 80005de:	200f      	movs	r0, #15
 80005e0:	f001 f862 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e4:	200f      	movs	r0, #15
 80005e6:	f001 f87b 	bl	80016e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2106      	movs	r1, #6
 80005ee:	203b      	movs	r0, #59	@ 0x3b
 80005f0:	f001 f85a 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f4:	203b      	movs	r0, #59	@ 0x3b
 80005f6:	f001 f873 	bl	80016e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2106      	movs	r1, #6
 80005fe:	2045      	movs	r0, #69	@ 0x45
 8000600:	f001 f852 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000604:	2045      	movs	r0, #69	@ 0x45
 8000606:	f001 f86b 	bl	80016e0 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <initFileManager>:

#define BUFFER_SIZE 2048



uint8_t initFileManager() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

	FRESULT retSD = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	4911      	ldr	r1, [pc, #68]	@ (8000668 <initFileManager+0x50>)
 8000622:	4812      	ldr	r0, [pc, #72]	@ (800066c <initFileManager+0x54>)
 8000624:	f008 feb0 	bl	8009388 <f_mount>
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]
	printf("%u\r\n", retSD);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4619      	mov	r1, r3
 8000630:	480f      	ldr	r0, [pc, #60]	@ (8000670 <initFileManager+0x58>)
 8000632:	f00d fbd3 	bl	800dddc <iprintf>
	printf("Compilation Date: %s %s\n", __DATE__, __TIME__);
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <initFileManager+0x5c>)
 8000638:	490f      	ldr	r1, [pc, #60]	@ (8000678 <initFileManager+0x60>)
 800063a:	4810      	ldr	r0, [pc, #64]	@ (800067c <initFileManager+0x64>)
 800063c:	f00d fbce 	bl	800dddc <iprintf>
	// mount SD card
	//   int retSD = f_mount(&SDFatFS, (TCHAR const *)SDPath, 1);
	if (retSD == FR_OK) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d106      	bne.n	8000654 <initFileManager+0x3c>

		//
		SDCard_ShowInfo();
 8000646:	f000 f895 	bl	8000774 <SDCard_ShowInfo>
		ListFiles("/");
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <initFileManager+0x68>)
 800064c:	f000 f81c 	bl	8000688 <ListFiles>
		return 1;
 8000650:	2301      	movs	r3, #1
 8000652:	e005      	b.n	8000660 <initFileManager+0x48>

	} else {
		printf("!! SDcard mount filesystem error。(%d)\r\n", retSD);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <initFileManager+0x6c>)
 800065a:	f00d fbbf 	bl	800dddc <iprintf>
		return 0;
 800065e:	2300      	movs	r3, #0
	}
	// 不带fatfs调试函数

}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000d4c 	.word	0x20000d4c
 800066c:	20000d50 	.word	0x20000d50
 8000670:	0800ec60 	.word	0x0800ec60
 8000674:	0800ec68 	.word	0x0800ec68
 8000678:	0800ec74 	.word	0x0800ec74
 800067c:	0800ec80 	.word	0x0800ec80
 8000680:	0800ec9c 	.word	0x0800ec9c
 8000684:	0800eca0 	.word	0x0800eca0

08000688 <ListFiles>:
		}
	}
	printf("\r\n"); // 最后补一个换行
}

void ListFiles(const TCHAR *path) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b0d6      	sub	sp, #344	@ 0x158
 800068c:	af00      	add	r7, sp, #0
 800068e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000692:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000696:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;               // 目录对象
	FILINFO fno;           // 文件信息结构体

	// 打开目录
	res = f_opendir(&dir, path);
 8000698:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800069c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006a0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	4610      	mov	r0, r2
 80006a8:	f009 fafb 	bl	8009ca2 <f_opendir>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	if (res != FR_OK) {
 80006b2:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <ListFiles+0x40>
		printf("open dir failed err: %d\r\n", res);
 80006ba:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006be:	4619      	mov	r1, r3
 80006c0:	4826      	ldr	r0, [pc, #152]	@ (800075c <ListFiles+0xd4>)
 80006c2:	f00d fb8b 	bl	800dddc <iprintf>
 80006c6:	e045      	b.n	8000754 <ListFiles+0xcc>
		return;
	}

	printf("\r\ndir %s file list : \r\n", path);
 80006c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006cc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	4823      	ldr	r0, [pc, #140]	@ (8000760 <ListFiles+0xd8>)
 80006d4:	f00d fb82 	bl	800dddc <iprintf>
	printf("----------------------------------------\r\n");
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <ListFiles+0xdc>)
 80006da:	f00d fbe7 	bl	800deac <puts>

	// 循环读取目录项（f_readdir返回FR_OK且fno.fname不为空时继续）
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 80006de:	e01c      	b.n	800071a <ListFiles+0x92>
		// 判断是否为子目录（文件名以'/'结尾，或fno.fattrib包含AM_DIR属性）
		if (fno.fattrib & AM_DIR) {
 80006e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80006e8:	7a1b      	ldrb	r3, [r3, #8]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <ListFiles+0x7a>
			printf(" [dir]  %s\r\n", fno.fname);  // 子目录
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	3316      	adds	r3, #22
 80006f8:	4619      	mov	r1, r3
 80006fa:	481b      	ldr	r0, [pc, #108]	@ (8000768 <ListFiles+0xe0>)
 80006fc:	f00d fb6e 	bl	800dddc <iprintf>
 8000700:	e00b      	b.n	800071a <ListFiles+0x92>
		} else {
			// 普通文件：输出文件名和大小（单位：字节）
			printf(" [file]  %s  (size: %ld bytes)\r\n", fno.fname, fno.fsize);
 8000702:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000706:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	3316      	adds	r3, #22
 8000712:	4619      	mov	r1, r3
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <ListFiles+0xe4>)
 8000716:	f00d fb61 	bl	800dddc <iprintf>
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f009 fbac 	bl	8009e82 <f_readdir>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <ListFiles+0xb6>
 8000730:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000734:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000738:	7d9b      	ldrb	r3, [r3, #22]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1d0      	bne.n	80006e0 <ListFiles+0x58>
		}
	}

	printf("----------------------------------------\r\n");
 800073e:	4809      	ldr	r0, [pc, #36]	@ (8000764 <ListFiles+0xdc>)
 8000740:	f00d fbb4 	bl	800deac <puts>
	printf("dir search success\r\n");
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <ListFiles+0xe8>)
 8000746:	f00d fbb1 	bl	800deac <puts>

	// 关闭目录
	f_closedir(&dir);
 800074a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800074e:	4618      	mov	r0, r3
 8000750:	f009 fb6c 	bl	8009e2c <f_closedir>
}
 8000754:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	0800ecd8 	.word	0x0800ecd8
 8000760:	0800ecf4 	.word	0x0800ecf4
 8000764:	0800ed0c 	.word	0x0800ed0c
 8000768:	0800ed38 	.word	0x0800ed38
 800076c:	0800ed48 	.word	0x0800ed48
 8000770:	0800ed6c 	.word	0x0800ed6c

08000774 <SDCard_ShowInfo>:

void SDCard_ShowInfo(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
	// SD卡信息结构体变量
	HAL_SD_CardInfoTypeDef cardInfo;
	HAL_StatusTypeDef res = HAL_SD_GetCardInfo(&hsd, &cardInfo);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4821      	ldr	r0, [pc, #132]	@ (8000804 <SDCard_ShowInfo+0x90>)
 8000780:	f003 fe22 	bl	80043c8 <HAL_SD_GetCardInfo>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res != HAL_OK) {
 800078a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <SDCard_ShowInfo+0x26>
		printf("HAL_SD_GetCardInfo() error\r\n");
 8000792:	481d      	ldr	r0, [pc, #116]	@ (8000808 <SDCard_ShowInfo+0x94>)
 8000794:	f00d fb8a 	bl	800deac <puts>
 8000798:	e030      	b.n	80007fc <SDCard_ShowInfo+0x88>
		return;
	}
	printf("\r\n*** HAL_SD_GetCardInfo() info ***\r\n");
 800079a:	481c      	ldr	r0, [pc, #112]	@ (800080c <SDCard_ShowInfo+0x98>)
 800079c:	f00d fb86 	bl	800deac <puts>
	printf("Card Type= %ld\r\n", cardInfo.CardType);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	@ (8000810 <SDCard_ShowInfo+0x9c>)
 80007a6:	f00d fb19 	bl	800dddc <iprintf>
	printf("Card Version= %ld\r\n", cardInfo.CardVersion);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4819      	ldr	r0, [pc, #100]	@ (8000814 <SDCard_ShowInfo+0xa0>)
 80007b0:	f00d fb14 	bl	800dddc <iprintf>
	printf("Card Class= %ld\r\n", cardInfo.Class);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4817      	ldr	r0, [pc, #92]	@ (8000818 <SDCard_ShowInfo+0xa4>)
 80007ba:	f00d fb0f 	bl	800dddc <iprintf>
	printf("Relative Card Address= %ld\r\n", cardInfo.RelCardAdd);
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4816      	ldr	r0, [pc, #88]	@ (800081c <SDCard_ShowInfo+0xa8>)
 80007c4:	f00d fb0a 	bl	800dddc <iprintf>
	printf("Block Count= %ld\r\n", cardInfo.BlockNbr);
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	@ (8000820 <SDCard_ShowInfo+0xac>)
 80007ce:	f00d fb05 	bl	800dddc <iprintf>
	printf("Block Size(Bytes)= %ld\r\n", cardInfo.BlockSize);
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <SDCard_ShowInfo+0xb0>)
 80007d8:	f00d fb00 	bl	800dddc <iprintf>
	printf("LogiBlockCount= %ld\r\n", cardInfo.LogBlockNbr);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	4619      	mov	r1, r3
 80007e0:	4811      	ldr	r0, [pc, #68]	@ (8000828 <SDCard_ShowInfo+0xb4>)
 80007e2:	f00d fafb 	bl	800dddc <iprintf>
	printf("LogiBlockSize(Bytes)= %ld\r\n", cardInfo.LogBlockSize);
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <SDCard_ShowInfo+0xb8>)
 80007ec:	f00d faf6 	bl	800dddc <iprintf>
	printf("SD Card Capacity(MB)= %ld\r\n", cardInfo.BlockNbr >> 1 >> 10);
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	0adb      	lsrs	r3, r3, #11
 80007f4:	4619      	mov	r1, r3
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <SDCard_ShowInfo+0xbc>)
 80007f8:	f00d faf0 	bl	800dddc <iprintf>
}
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000b6c 	.word	0x20000b6c
 8000808:	0800ed80 	.word	0x0800ed80
 800080c:	0800ed9c 	.word	0x0800ed9c
 8000810:	0800edc4 	.word	0x0800edc4
 8000814:	0800edd8 	.word	0x0800edd8
 8000818:	0800edec 	.word	0x0800edec
 800081c:	0800ee00 	.word	0x0800ee00
 8000820:	0800ee20 	.word	0x0800ee20
 8000824:	0800ee34 	.word	0x0800ee34
 8000828:	0800ee50 	.word	0x0800ee50
 800082c:	0800ee68 	.word	0x0800ee68
 8000830:	0800ee84 	.word	0x0800ee84

08000834 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	 i2sDmaSemaphore = osSemaphoreNew(1, 0, &i2sDmaSemaphore_attr);
 8000838:	4a08      	ldr	r2, [pc, #32]	@ (800085c <MX_FREERTOS_Init+0x28>)
 800083a:	2100      	movs	r1, #0
 800083c:	2001      	movs	r0, #1
 800083e:	f009 fe99 	bl	800a574 <osSemaphoreNew>
 8000842:	4603      	mov	r3, r0
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <MX_FREERTOS_Init+0x2c>)
 8000846:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000848:	4a06      	ldr	r2, [pc, #24]	@ (8000864 <MX_FREERTOS_Init+0x30>)
 800084a:	2100      	movs	r1, #0
 800084c:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_FREERTOS_Init+0x34>)
 800084e:	f009 fde4 	bl	800a41a <osThreadNew>
 8000852:	4603      	mov	r3, r0
 8000854:	4a05      	ldr	r2, [pc, #20]	@ (800086c <MX_FREERTOS_Init+0x38>)
 8000856:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	0800f04c 	.word	0x0800f04c
 8000860:	2000008c 	.word	0x2000008c
 8000864:	0800f05c 	.word	0x0800f05c
 8000868:	08000871 	.word	0x08000871
 800086c:	20000090 	.word	0x20000090

08000870 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	 /* 初始化文件管理器 */
	  initFileManager();
 8000878:	f7ff fece 	bl	8000618 <initFileManager>
	  const char *filename = "1.wav";
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <StartDefaultTask+0x60>)
 800087e:	60fb      	str	r3, [r7, #12]
	  /* 打开WAV文件并解析头部 */
	 FRESULT res = f_open(&file, filename, FA_READ);
 8000880:	2201      	movs	r2, #1
 8000882:	68f9      	ldr	r1, [r7, #12]
 8000884:	4813      	ldr	r0, [pc, #76]	@ (80008d4 <StartDefaultTask+0x64>)
 8000886:	f008 fde3 	bl	8009450 <f_open>
 800088a:	4603      	mov	r3, r0
 800088c:	72fb      	strb	r3, [r7, #11]
	  if (res != FR_OK) {
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d007      	beq.n	80008a4 <StartDefaultTask+0x34>
	    printf("Failed to open WAV file\r\n");
 8000894:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <StartDefaultTask+0x68>)
 8000896:	f00d fb09 	bl	800deac <puts>
	    // 任务出错，进入休眠
	    for(;;) {
	      osDelay(1000);
 800089a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089e:	f009 fe4e 	bl	800a53e <osDelay>
 80008a2:	e7fa      	b.n	800089a <StartDefaultTask+0x2a>
	    }
	  }

	  /* 启动第一次DMA传输 */
	  readAndPlayNextBuffer();
 80008a4:	f000 f82e 	bl	8000904 <readAndPlayNextBuffer>

	  /* 任务主循环 */
	  for(;;) {
	    // 等待DMA传输完成信号
	    if (osSemaphoreAcquire(i2sDmaSemaphore, osWaitForever) == osOK) {
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <StartDefaultTask+0x6c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	4618      	mov	r0, r3
 80008b2:	f009 fee9 	bl	800a688 <osSemaphoreAcquire>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f5      	bne.n	80008a8 <StartDefaultTask+0x38>
	      // 读取并播放下一段音频数据
	      if (!readAndPlayNextBuffer()) {
 80008bc:	f000 f822 	bl	8000904 <readAndPlayNextBuffer>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f0      	bne.n	80008a8 <StartDefaultTask+0x38>
	        // 播放完成，这里可以处理循环播放或停止播放
	        printf("Audio playback completed\r\n");
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <StartDefaultTask+0x70>)
 80008c8:	f00d faf0 	bl	800deac <puts>
	    if (osSemaphoreAcquire(i2sDmaSemaphore, osWaitForever) == osOK) {
 80008cc:	e7ec      	b.n	80008a8 <StartDefaultTask+0x38>
 80008ce:	bf00      	nop
 80008d0:	0800ef7c 	.word	0x0800ef7c
 80008d4:	20000094 	.word	0x20000094
 80008d8:	0800ef84 	.word	0x0800ef84
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	0800efa0 	.word	0x0800efa0

080008e4 <HAL_I2S_TxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
/* I2S DMA传输完成回调函数 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  // 释放信号量，唤醒音频播放任务
  osSemaphoreRelease(i2sDmaSemaphore);
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <HAL_I2S_TxCpltCallback+0x1c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f009 ff1b 	bl	800a72c <osSemaphoreRelease>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000008c 	.word	0x2000008c

08000904 <readAndPlayNextBuffer>:

/* 读取并播放下一个缓冲区的数据 */
int readAndPlayNextBuffer() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  uint32_t bytesRead;
  FRESULT res;

  // 读取数据
  res = f_read(&file, buffer, BUFFER_SIZE, &bytesRead);
 800090a:	463b      	mov	r3, r7
 800090c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000910:	4911      	ldr	r1, [pc, #68]	@ (8000958 <readAndPlayNextBuffer+0x54>)
 8000912:	4812      	ldr	r0, [pc, #72]	@ (800095c <readAndPlayNextBuffer+0x58>)
 8000914:	f009 f857 	bl	80099c6 <f_read>
 8000918:	4603      	mov	r3, r0
 800091a:	71fb      	strb	r3, [r7, #7]
  if (res != FR_OK || bytesRead == 0) {
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <readAndPlayNextBuffer+0x24>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <readAndPlayNextBuffer+0x28>
    return 0;
 8000928:	2300      	movs	r3, #0
 800092a:	e010      	b.n	800094e <readAndPlayNextBuffer+0x4a>
  }

  // 启动I2S DMA传输
  if (HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)buffer, bytesRead / sample_bytes) != HAL_OK) {
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	4a0c      	ldr	r2, [pc, #48]	@ (8000960 <readAndPlayNextBuffer+0x5c>)
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	fbb3 f3f2 	udiv	r3, r3, r2
 8000936:	b29b      	uxth	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	4907      	ldr	r1, [pc, #28]	@ (8000958 <readAndPlayNextBuffer+0x54>)
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <readAndPlayNextBuffer+0x60>)
 800093e:	f001 fd6f 	bl	8002420 <HAL_I2S_Transmit_DMA>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <readAndPlayNextBuffer+0x48>
    return 0;
 8000948:	2300      	movs	r3, #0
 800094a:	e000      	b.n	800094e <readAndPlayNextBuffer+0x4a>
  }

  return 1;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200002c4 	.word	0x200002c4
 800095c:	20000094 	.word	0x20000094
 8000960:	20000000 	.word	0x20000000
 8000964:	20000ac4 	.word	0x20000ac4

08000968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a29      	ldr	r2, [pc, #164]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD15 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8000a0a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_GPIO_Init+0xc8>)
 8000a20:	f001 fa0a 	bl	8001e38 <HAL_GPIO_Init>

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a3a:	4a14      	ldr	r2, [pc, #80]	@ (8000a8c <MX_I2S2_Init+0x58>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a44:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a5a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000a5e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_I2S2_Init+0x54>)
 8000a74:	f001 fb94 	bl	80021a0 <HAL_I2S_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000a7e:	f000 f987 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000ac4 	.word	0x20000ac4
 8000a8c:	40003800 	.word	0x40003800

08000a90 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a4d      	ldr	r2, [pc, #308]	@ (8000bf0 <HAL_I2S_MspInit+0x160>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	f040 8092 	bne.w	8000be6 <HAL_I2S_MspInit+0x156>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ac6:	23c0      	movs	r3, #192	@ 0xc0
 8000ac8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fd92 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000ade:	f000 f957 	bl	8000d90 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b43      	ldr	r3, [pc, #268]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	4a42      	ldr	r2, [pc, #264]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af2:	4b40      	ldr	r3, [pc, #256]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a3b      	ldr	r2, [pc, #236]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b39      	ldr	r3, [pc, #228]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a34      	ldr	r2, [pc, #208]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b32      	ldr	r3, [pc, #200]	@ (8000bf4 <HAL_I2S_MspInit+0x164>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b36:	2308      	movs	r3, #8
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b46:	2305      	movs	r3, #5
 8000b48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4829      	ldr	r0, [pc, #164]	@ (8000bf8 <HAL_I2S_MspInit+0x168>)
 8000b52:	f001 f971 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4822      	ldr	r0, [pc, #136]	@ (8000bfc <HAL_I2S_MspInit+0x16c>)
 8000b74:	f001 f960 	bl	8001e38 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000b7a:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_I2S_MspInit+0x174>)
 8000b7c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000b86:	2240      	movs	r2, #64	@ 0x40
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000b9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000ba2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bba:	4811      	ldr	r0, [pc, #68]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000bbc:	f000 fd9e 	bl	80016fc <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_I2S_MspInit+0x13a>
    {
      Error_Handler();
 8000bc6:	f000 f8e3 	bl	8000d90 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000bce:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <HAL_I2S_MspInit+0x170>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2105      	movs	r1, #5
 8000bda:	2024      	movs	r0, #36	@ 0x24
 8000bdc:	f000 fd64 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000be0:	2024      	movs	r0, #36	@ 0x24
 8000be2:	f000 fd7d 	bl	80016e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3738      	adds	r7, #56	@ 0x38
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40003800 	.word	0x40003800
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	20000b0c 	.word	0x20000b0c
 8000c04:	40026070 	.word	0x40026070

08000c08 <__io_putchar>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// WAV文件头部结构


int __io_putchar(int ch) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFFFFFF);
 8000c10:	1d39      	adds	r1, r7, #4
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	2201      	movs	r2, #1
 8000c18:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <__io_putchar+0x20>)
 8000c1a:	f004 fc4f 	bl	80054bc <HAL_UART_Transmit>
	return ch;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000cfc 	.word	0x20000cfc

08000c2c <__io_getchar>:

int __io_getchar(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	char rxChar;
	while (HAL_UART_Receive(&huart1, (uint8_t*) &rxChar, 1, 0xFFFFFFFF)
 8000c32:	bf00      	nop
 8000c34:	1df9      	adds	r1, r7, #7
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <__io_getchar+0x28>)
 8000c3e:	f004 fcc8 	bl	80055d2 <HAL_UART_Receive>
 8000c42:	4603      	mov	r3, r0
			== HAL_TIMEOUT)
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d0f5      	beq.n	8000c34 <__io_getchar+0x8>
		;
	return rxChar;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000cfc 	.word	0x20000cfc

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 fc06 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f81a 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f7ff fe80 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c68:	f7ff fc98 	bl	800059c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000c6c:	f000 f896 	bl	8000d9c <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000c70:	f000 fb60 	bl	8001334 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000c74:	f005 fde8 	bl	8006848 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000c78:	f7ff fedc 	bl	8000a34 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
	printf("system init success，read play WAV file...\r\n");
 8000c7c:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <main+0x3c>)
 8000c7e:	f00d f915 	bl	800deac <puts>
//		printf("cant play WAV file \r\n");
//	}
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c82:	f009 fb49 	bl	800a318 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c86:	f7ff fdd5 	bl	8000834 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c8a:	f009 fb8b 	bl	800a3a4 <osKernelStart>
 8000c8e:	2300      	movs	r3, #0
//    /* USER CODE BEGIN 3 */
//		// 可以在这里添加其他处理逻辑
//		HAL_Delay(1000);
//	}
  /* USER CODE END 3 */
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0800efbc 	.word	0x0800efbc

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	@ 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2230      	movs	r2, #48	@ 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00d f9e0 	bl	800e06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <SystemClock_Config+0xcc>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	4a27      	ldr	r2, [pc, #156]	@ (8000d64 <SystemClock_Config+0xcc>)
 8000cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ccc:	4b25      	ldr	r3, [pc, #148]	@ (8000d64 <SystemClock_Config+0xcc>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d00:	2302      	movs	r3, #2
 8000d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d0c:	23a8      	movs	r3, #168	@ 0xa8
 8000d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d14:	2307      	movs	r3, #7
 8000d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 ffe3 	bl	8002ce8 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d28:	f000 f832 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2105      	movs	r1, #5
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fa44 	bl	80031d8 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d56:	f000 f81b 	bl	8000d90 <Error_Handler>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3750      	adds	r7, #80	@ 0x50
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000

08000d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d7e:	f000 fb97 	bl	80014b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40001000 	.word	0x40001000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000da2:	4a0f      	ldr	r2, [pc, #60]	@ (8000de0 <MX_SDIO_SD_Init+0x44>)
 8000da4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000da6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dbe:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000dc8:	2205      	movs	r2, #5
 8000dca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <MX_SDIO_SD_Init+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20000b6c 	.word	0x20000b6c
 8000de0:	40012c00 	.word	0x40012c00

08000de4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a69      	ldr	r2, [pc, #420]	@ (8000fa8 <HAL_SD_MspInit+0x1c4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	f040 80cb 	bne.w	8000f9e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	4b67      	ldr	r3, [pc, #412]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e10:	4a66      	ldr	r2, [pc, #408]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e16:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e18:	4b64      	ldr	r3, [pc, #400]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b60      	ldr	r3, [pc, #384]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a5f      	ldr	r2, [pc, #380]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b5d      	ldr	r3, [pc, #372]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b59      	ldr	r3, [pc, #356]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	4a58      	ldr	r2, [pc, #352]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e50:	4b56      	ldr	r3, [pc, #344]	@ (8000fac <HAL_SD_MspInit+0x1c8>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e5c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000e60:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	484d      	ldr	r0, [pc, #308]	@ (8000fb0 <HAL_SD_MspInit+0x1cc>)
 8000e7a:	f000 ffdd 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4846      	ldr	r0, [pc, #280]	@ (8000fb4 <HAL_SD_MspInit+0x1d0>)
 8000e9a:	f000 ffcd 	bl	8001e38 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000e9e:	4b46      	ldr	r3, [pc, #280]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ea0:	4a46      	ldr	r2, [pc, #280]	@ (8000fbc <HAL_SD_MspInit+0x1d8>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000ea4:	4b44      	ldr	r3, [pc, #272]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ea6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eaa:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eac:	4b42      	ldr	r3, [pc, #264]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb2:	4b41      	ldr	r3, [pc, #260]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ec2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ec6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ece:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ed0:	4b39      	ldr	r3, [pc, #228]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ed6:	4b38      	ldr	r3, [pc, #224]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ed8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000edc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ede:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ee4:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000eea:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000eec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ef2:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000ef4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000efa:	482f      	ldr	r0, [pc, #188]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000efc:	f000 fbfe 	bl	80016fc <HAL_DMA_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8000f06:	f7ff ff43 	bl	8000d90 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000f0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f10:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <HAL_SD_MspInit+0x1d4>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f18:	4a2a      	ldr	r2, [pc, #168]	@ (8000fc4 <HAL_SD_MspInit+0x1e0>)
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f22:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f24:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f26:	2240      	movs	r2, #64	@ 0x40
 8000f28:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f36:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f38:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f3e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f46:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f50:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f54:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f58:	2204      	movs	r2, #4
 8000f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f5e:	2203      	movs	r2, #3
 8000f60:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f6c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f70:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f72:	4813      	ldr	r0, [pc, #76]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f74:	f000 fbc2 	bl	80016fc <HAL_DMA_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8000f7e:	f7ff ff07 	bl	8000d90 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <HAL_SD_MspInit+0x1dc>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 6, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2106      	movs	r1, #6
 8000f92:	2031      	movs	r0, #49	@ 0x31
 8000f94:	f000 fb88 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000f98:	2031      	movs	r0, #49	@ 0x31
 8000f9a:	f000 fba1 	bl	80016e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	@ 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40012c00 	.word	0x40012c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	20000bf0 	.word	0x20000bf0
 8000fbc:	40026458 	.word	0x40026458
 8000fc0:	20000c50 	.word	0x20000c50
 8000fc4:	400264a0 	.word	0x400264a0

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_MspInit+0x54>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a11      	ldr	r2, [pc, #68]	@ (800101c <HAL_MspInit+0x54>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x54>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_MspInit+0x54>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_MspInit+0x54>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <HAL_MspInit+0x54>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	210f      	movs	r1, #15
 800100a:	f06f 0001 	mvn.w	r0, #1
 800100e:	f000 fb4b 	bl	80016a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	@ 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4b33      	ldr	r3, [pc, #204]	@ (8001104 <HAL_InitTick+0xe4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	4a32      	ldr	r2, [pc, #200]	@ (8001104 <HAL_InitTick+0xe4>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001040:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <HAL_InitTick+0xe4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104c:	f107 0210 	add.w	r2, r7, #16
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fa9e 	bl	8003598 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001066:	f002 fa6f 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 800106a:	6378      	str	r0, [r7, #52]	@ 0x34
 800106c:	e004      	b.n	8001078 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800106e:	f002 fa6b 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8001072:	4603      	mov	r3, r0
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800107a:	4a23      	ldr	r2, [pc, #140]	@ (8001108 <HAL_InitTick+0xe8>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	0c9b      	lsrs	r3, r3, #18
 8001082:	3b01      	subs	r3, #1
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <HAL_InitTick+0xec>)
 8001088:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <HAL_InitTick+0xf0>)
 800108a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <HAL_InitTick+0xec>)
 800108e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001092:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001094:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <HAL_InitTick+0xec>)
 8001096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001098:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <HAL_InitTick+0xec>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <HAL_InitTick+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_InitTick+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010ac:	4817      	ldr	r0, [pc, #92]	@ (800110c <HAL_InitTick+0xec>)
 80010ae:	f003 ff19 	bl	8004ee4 <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11b      	bne.n	80010f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <HAL_InitTick+0xec>)
 80010c2:	f003 ff69 	bl	8004f98 <HAL_TIM_Base_Start_IT>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d111      	bne.n	80010f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010d4:	2036      	movs	r0, #54	@ 0x36
 80010d6:	f000 fb03 	bl	80016e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d808      	bhi.n	80010f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2036      	movs	r0, #54	@ 0x36
 80010e6:	f000 fadf 	bl	80016a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_InitTick+0xf4>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e002      	b.n	80010f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3738      	adds	r7, #56	@ 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	431bde83 	.word	0x431bde83
 800110c:	20000cb0 	.word	0x20000cb0
 8001110:	40001000 	.word	0x40001000
 8001114:	20000008 	.word	0x20000008

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <NMI_Handler+0x4>

08001120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <MemManage_Handler+0x4>

08001130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <UsageFault_Handler+0x4>

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <DMA1_Stream4_IRQHandler+0x10>)
 8001156:	f000 fbf9 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000b0c 	.word	0x20000b0c

08001164 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <SPI2_IRQHandler+0x10>)
 800116a:	f001 f9fd 	bl	8002568 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000ac4 	.word	0x20000ac4

08001178 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <SDIO_IRQHandler+0x10>)
 800117e:	f002 fdef 	bl	8003d60 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000b6c 	.word	0x20000b6c

0800118c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <TIM6_DAC_IRQHandler+0x10>)
 8001192:	f003 ff71 	bl	8005078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000cb0 	.word	0x20000cb0

080011a0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <DMA2_Stream3_IRQHandler+0x10>)
 80011a6:	f000 fbd1 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000bf0 	.word	0x20000bf0

080011b4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <DMA2_Stream6_IRQHandler+0x10>)
 80011ba:	f000 fbc7 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000c50 	.word	0x20000c50

080011c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e00a      	b.n	80011f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011da:	f7ff fd27 	bl	8000c2c <__io_getchar>
 80011de:	4601      	mov	r1, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	b2ca      	uxtb	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf0      	blt.n	80011da <_read+0x12>
  }

  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e009      	b.n	8001228 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fcf3 	bl	8000c08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf1      	blt.n	8001214 <_write+0x12>
  }
  return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_close>:

int _close(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001262:	605a      	str	r2, [r3, #4]
  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_isatty>:

int _isatty(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	@ (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f00c ff76 	bl	800e1c4 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20020000 	.word	0x20020000
 8001304:	00006000 	.word	0x00006000
 8001308:	20000cf8 	.word	0x20000cf8
 800130c:	20005af8 	.word	0x20005af8

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_USART1_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800136c:	f004 f856 	bl	800541c <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f7ff fd0b 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000cfc 	.word	0x20000cfc
 8001384:	40011000 	.word	0x40011000

08001388 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_UART_MspInit+0x84>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12c      	bne.n	8001404 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a17      	ldr	r2, [pc, #92]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f4:	2307      	movs	r3, #7
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_UART_MspInit+0x8c>)
 8001400:	f000 fd1a 	bl	8001e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40011000 	.word	0x40011000
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001450 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800141c:	f7ff ff78 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001422:	490d      	ldr	r1, [pc, #52]	@ (8001458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001438:	4c0a      	ldr	r4, [pc, #40]	@ (8001464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f00c fec3 	bl	800e1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff fc05 	bl	8000c58 <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800145c:	08039cc0 	.word	0x08039cc0
  ldr r2, =_sbss
 8001460:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001464:	20005af4 	.word	0x20005af4

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>
	...

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <HAL_Init+0x40>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <HAL_Init+0x40>)
 8001482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <HAL_Init+0x40>)
 800148e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 f8fc 	bl	8001692 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	200f      	movs	r0, #15
 800149c:	f7ff fdc0 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a0:	f7ff fd92 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023c00 	.word	0x40023c00

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	20000d44 	.word	0x20000d44

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000d44 	.word	0x20000d44

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000000c 	.word	0x2000000c

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	@ (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	@ (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	@ 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff4c 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ba:	f7ff ff61 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	6978      	ldr	r0, [r7, #20]
 80016c6:	f7ff ffb1 	bl	800162c <NVIC_EncodePriority>
 80016ca:	4602      	mov	r2, r0
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff80 	bl	80015d8 <__NVIC_SetPriority>
}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff54 	bl	800159c <__NVIC_EnableIRQ>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff fee6 	bl	80014d8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e099      	b.n	800184c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001738:	e00f      	b.n	800175a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173a:	f7ff fecd 	bl	80014d8 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b05      	cmp	r3, #5
 8001746:	d908      	bls.n	800175a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e078      	b.n	800184c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1e8      	bne.n	800173a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <HAL_DMA_Init+0x158>)
 8001774:	4013      	ands	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	4313      	orrs	r3, r2
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f023 0307 	bic.w	r3, r3, #7
 80017da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d117      	bne.n	800181e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00e      	beq.n	800181e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fa9d 	bl	8001d40 <DMA_CheckFifoParam>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2240      	movs	r2, #64	@ 0x40
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800181a:	2301      	movs	r3, #1
 800181c:	e016      	b.n	800184c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fa54 	bl	8001cd4 <DMA_CalcBaseAndBitshift>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001834:	223f      	movs	r2, #63	@ 0x3f
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	f010803f 	.word	0xf010803f

08001858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_DMA_Start_IT+0x26>
 800187a:	2302      	movs	r3, #2
 800187c:	e040      	b.n	8001900 <HAL_DMA_Start_IT+0xa8>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d12f      	bne.n	80018f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f9e6 	bl	8001c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	223f      	movs	r2, #63	@ 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0216 	orr.w	r2, r2, #22
 80018c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0208 	orr.w	r2, r2, #8
 80018de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e005      	b.n	80018fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
 80018fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d004      	beq.n	8001926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2280      	movs	r2, #128	@ 0x80
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00c      	b.n	8001940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001958:	4b8e      	ldr	r3, [pc, #568]	@ (8001b94 <HAL_DMA_IRQHandler+0x248>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a8e      	ldr	r2, [pc, #568]	@ (8001b98 <HAL_DMA_IRQHandler+0x24c>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001976:	2208      	movs	r2, #8
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01a      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0204 	bic.w	r2, r2, #4
 800199e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	2208      	movs	r2, #8
 80019a6:	409a      	lsls	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	2201      	movs	r2, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d012      	beq.n	80019ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e6:	f043 0202 	orr.w	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f2:	2204      	movs	r2, #4
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d012      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00b      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	2204      	movs	r2, #4
 8001a12:	409a      	lsls	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	2210      	movs	r2, #16
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d043      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03c      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	2210      	movs	r2, #16
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d018      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d108      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d024      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
 8001a7a:	e01f      	b.n	8001abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01b      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0208 	bic.w	r2, r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 808f 	beq.w	8001bec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8087 	beq.w	8001bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d136      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0216 	bic.w	r2, r2, #22
 8001b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_DMA_IRQHandler+0x1da>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0208 	bic.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3a:	223f      	movs	r2, #63	@ 0x3f
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d07e      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
        }
        return;
 8001b62:	e079      	b.n	8001c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d031      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
 8001b90:	e02c      	b.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
 8001b92:	bf00      	nop
 8001b94:	20000004 	.word	0x20000004
 8001b98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d023      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
 8001bac:	e01e      	b.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10f      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0210 	bic.w	r2, r2, #16
 8001bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d032      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d022      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d307      	bcc.n	8001c34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f2      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x2cc>
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
 8001c56:	e000      	b.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c58:	bf00      	nop
    }
  }
}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b40      	cmp	r3, #64	@ 0x40
 8001ca4:	d108      	bne.n	8001cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cb6:	e007      	b.n	8001cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3b10      	subs	r3, #16
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <DMA_CalcBaseAndBitshift+0x68>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d909      	bls.n	8001d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d14:	e007      	b.n	8001d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	aaaaaaab 	.word	0xaaaaaaab
 8001d3c:	0800f098 	.word	0x0800f098

08001d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d856      	bhi.n	8001e0e <DMA_CheckFifoParam+0xce>
 8001d60:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <DMA_CheckFifoParam+0x28>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001d8b 	.word	0x08001d8b
 8001d70:	08001d79 	.word	0x08001d79
 8001d74:	08001e0f 	.word	0x08001e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d046      	beq.n	8001e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d88:	e043      	b.n	8001e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d92:	d140      	bne.n	8001e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e03d      	b.n	8001e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001da2:	d121      	bne.n	8001de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d837      	bhi.n	8001e1a <DMA_CheckFifoParam+0xda>
 8001daa:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <DMA_CheckFifoParam+0x70>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dc7 	.word	0x08001dc7
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001dd9 	.word	0x08001dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc4:	e030      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d025      	beq.n	8001e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd6:	e022      	b.n	8001e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001de0:	d11f      	bne.n	8001e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001de6:	e01c      	b.n	8001e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d903      	bls.n	8001df6 <DMA_CheckFifoParam+0xb6>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d003      	beq.n	8001dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001df4:	e018      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dfa:	e015      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00e      	beq.n	8001e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0c:	e00b      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e00a      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e008      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e16:	bf00      	nop
 8001e18:	e006      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e004      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e002      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e22:	bf00      	nop
 8001e24:	e000      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
    }
  } 
  
  return status; 
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e16b      	b.n	800212c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 815a 	bne.w	8002126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b4 	beq.w	8002126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b60      	ldr	r3, [pc, #384]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b5d      	ldr	r3, [pc, #372]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a5b      	ldr	r2, [pc, #364]	@ (8002148 <HAL_GPIO_Init+0x310>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	@ (800214c <HAL_GPIO_Init+0x314>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a51      	ldr	r2, [pc, #324]	@ (8002150 <HAL_GPIO_Init+0x318>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a50      	ldr	r2, [pc, #320]	@ (8002154 <HAL_GPIO_Init+0x31c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4f      	ldr	r2, [pc, #316]	@ (8002158 <HAL_GPIO_Init+0x320>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4e      	ldr	r2, [pc, #312]	@ (800215c <HAL_GPIO_Init+0x324>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4d      	ldr	r2, [pc, #308]	@ (8002160 <HAL_GPIO_Init+0x328>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4c      	ldr	r2, [pc, #304]	@ (8002164 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4b      	ldr	r2, [pc, #300]	@ (8002168 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x20a>
 800203e:	2307      	movs	r3, #7
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002042:	2308      	movs	r3, #8
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	@ (8002148 <HAL_GPIO_Init+0x310>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_GPIO_Init+0x334>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a32      	ldr	r2, [pc, #200]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b30      	ldr	r3, [pc, #192]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a27      	ldr	r2, [pc, #156]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a12      	ldr	r2, [pc, #72]	@ (800216c <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae90 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40021c00 	.word	0x40021c00
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e128      	b.n	8002404 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a90      	ldr	r2, [pc, #576]	@ (800240c <HAL_I2S_Init+0x26c>)
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7fe fc5f 	bl	8000a90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80021e8:	f023 030f 	bic.w	r3, r3, #15
 80021ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2202      	movs	r2, #2
 80021f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d060      	beq.n	80022c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002206:	2310      	movs	r3, #16
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e001      	b.n	8002210 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b20      	cmp	r3, #32
 8002216:	d802      	bhi.n	800221e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800221e:	2001      	movs	r0, #1
 8002220:	f001 face 	bl	80037c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002224:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800222e:	d125      	bne.n	800227c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	3305      	adds	r3, #5
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e01f      	b.n	800229a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	fbb2 f2f3 	udiv	r2, r2, r3
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	3305      	adds	r3, #5
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e00e      	b.n	800229a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fbb2 f2f3 	udiv	r2, r2, r3
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	3305      	adds	r3, #5
 8002298:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4a5c      	ldr	r2, [pc, #368]	@ (8002410 <HAL_I2S_Init+0x270>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	08db      	lsrs	r3, r3, #3
 80022a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	e003      	b.n	80022c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d902      	bls.n	80022d4 <HAL_I2S_Init+0x134>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	2bff      	cmp	r3, #255	@ 0xff
 80022d2:	d907      	bls.n	80022e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	f043 0210 	orr.w	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e08f      	b.n	8002404 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	ea42 0103 	orr.w	r1, r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002302:	f023 030f 	bic.w	r3, r3, #15
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6851      	ldr	r1, [r2, #4]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6892      	ldr	r2, [r2, #8]
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68d2      	ldr	r2, [r2, #12]
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6992      	ldr	r2, [r2, #24]
 800231a:	430a      	orrs	r2, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002326:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d161      	bne.n	80023f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a38      	ldr	r2, [pc, #224]	@ (8002414 <HAL_I2S_Init+0x274>)
 8002334:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a37      	ldr	r2, [pc, #220]	@ (8002418 <HAL_I2S_Init+0x278>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_I2S_Init+0x1a4>
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_I2S_Init+0x27c>)
 8002342:	e001      	b.n	8002348 <HAL_I2S_Init+0x1a8>
 8002344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4932      	ldr	r1, [pc, #200]	@ (8002418 <HAL_I2S_Init+0x278>)
 8002350:	428a      	cmp	r2, r1
 8002352:	d101      	bne.n	8002358 <HAL_I2S_Init+0x1b8>
 8002354:	4a31      	ldr	r2, [pc, #196]	@ (800241c <HAL_I2S_Init+0x27c>)
 8002356:	e001      	b.n	800235c <HAL_I2S_Init+0x1bc>
 8002358:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800235c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002360:	f023 030f 	bic.w	r3, r3, #15
 8002364:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2b      	ldr	r2, [pc, #172]	@ (8002418 <HAL_I2S_Init+0x278>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d101      	bne.n	8002374 <HAL_I2S_Init+0x1d4>
 8002370:	4b2a      	ldr	r3, [pc, #168]	@ (800241c <HAL_I2S_Init+0x27c>)
 8002372:	e001      	b.n	8002378 <HAL_I2S_Init+0x1d8>
 8002374:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002378:	2202      	movs	r2, #2
 800237a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a25      	ldr	r2, [pc, #148]	@ (8002418 <HAL_I2S_Init+0x278>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_I2S_Init+0x1ea>
 8002386:	4b25      	ldr	r3, [pc, #148]	@ (800241c <HAL_I2S_Init+0x27c>)
 8002388:	e001      	b.n	800238e <HAL_I2S_Init+0x1ee>
 800238a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800239a:	d003      	beq.n	80023a4 <HAL_I2S_Init+0x204>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80023a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e001      	b.n	80023b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	897b      	ldrh	r3, [r7, #10]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <HAL_I2S_Init+0x278>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_I2S_Init+0x24c>
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <HAL_I2S_Init+0x27c>)
 80023ea:	e001      	b.n	80023f0 <HAL_I2S_Init+0x250>
 80023ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023f0:	897a      	ldrh	r2, [r7, #10]
 80023f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	08002721 	.word	0x08002721
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	08002835 	.word	0x08002835
 8002418:	40003800 	.word	0x40003800
 800241c:	40003400 	.word	0x40003400

08002420 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_I2S_Transmit_DMA+0x1a>
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e08a      	b.n	8002554 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	e082      	b.n	8002554 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_I2S_Transmit_DMA+0x3e>
 800245a:	2302      	movs	r3, #2
 800245c:	e07a      	b.n	8002554 <HAL_I2S_Transmit_DMA+0x134>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2203      	movs	r2, #3
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d002      	beq.n	8002492 <HAL_I2S_Transmit_DMA+0x72>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10a      	bne.n	80024a8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024a6:	e005      	b.n	80024b4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	88fa      	ldrh	r2, [r7, #6]
 80024b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	4a28      	ldr	r2, [pc, #160]	@ (800255c <HAL_I2S_Transmit_DMA+0x13c>)
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c0:	4a27      	ldr	r2, [pc, #156]	@ (8002560 <HAL_I2S_Transmit_DMA+0x140>)
 80024c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c8:	4a26      	ldr	r2, [pc, #152]	@ (8002564 <HAL_I2S_Transmit_DMA+0x144>)
 80024ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024d4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024dc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80024e4:	f7ff f9b8 	bl	8001858 <HAL_DMA_Start_IT>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00f      	beq.n	800250e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f043 0208 	orr.w	r2, r3, #8
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e022      	b.n	8002554 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0202 	orr.w	r2, r2, #2
 8002532:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002550:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	080025ff 	.word	0x080025ff
 8002560:	080025bd 	.word	0x080025bd
 8002564:	0800261b 	.word	0x0800261b

08002568 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10e      	bne.n	80025f0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0202 	bic.w	r2, r2, #2
 80025e0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7fe f977 	bl	80008e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7ff ffb7 	bl	8002580 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002626:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0203 	bic.w	r2, r2, #3
 8002636:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	f043 0208 	orr.w	r2, r3, #8
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff ffa5 	bl	80025a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	1c9a      	adds	r2, r3, #2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10e      	bne.n	80026ba <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7fe f915 	bl	80008e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	b292      	uxth	r2, r2
 80026d6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026dc:	1c9a      	adds	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10e      	bne.n	8002718 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002708:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ff3e 	bl	8002594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b04      	cmp	r3, #4
 800273a:	d13a      	bne.n	80027b2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d109      	bne.n	800275a <I2S_IRQHandler+0x3a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002750:	2b40      	cmp	r3, #64	@ 0x40
 8002752:	d102      	bne.n	800275a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ffb4 	bl	80026c2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002760:	2b40      	cmp	r3, #64	@ 0x40
 8002762:	d126      	bne.n	80027b2 <I2S_IRQHandler+0x92>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b20      	cmp	r3, #32
 8002770:	d11f      	bne.n	80027b2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002780:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	f043 0202 	orr.w	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fefb 	bl	80025a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d136      	bne.n	800282c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d109      	bne.n	80027dc <I2S_IRQHandler+0xbc>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d102      	bne.n	80027dc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ff45 	bl	8002666 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d122      	bne.n	800282c <I2S_IRQHandler+0x10c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d11b      	bne.n	800282c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002802:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff febe 	bl	80025a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800282c:	bf00      	nop
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a92      	ldr	r2, [pc, #584]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800284e:	4b92      	ldr	r3, [pc, #584]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002850:	e001      	b.n	8002856 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002852:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a8b      	ldr	r2, [pc, #556]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800286c:	4b8a      	ldr	r3, [pc, #552]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800286e:	e001      	b.n	8002874 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002870:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002880:	d004      	beq.n	800288c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8099 	bne.w	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f925 	bl	8002af0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d107      	bne.n	80028c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9c8 	bl	8002c50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d13a      	bne.n	8002940 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d035      	beq.n	8002940 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80028de:	4b6e      	ldr	r3, [pc, #440]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028e0:	e001      	b.n	80028e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80028e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4969      	ldr	r1, [pc, #420]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028ee:	428b      	cmp	r3, r1
 80028f0:	d101      	bne.n	80028f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80028f2:	4b69      	ldr	r3, [pc, #420]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028f4:	e001      	b.n	80028fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80028f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800290e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f043 0202 	orr.w	r2, r3, #2
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fe34 	bl	80025a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	f040 80c3 	bne.w	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80bd 	beq.w	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002966:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a49      	ldr	r2, [pc, #292]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002972:	4b49      	ldr	r3, [pc, #292]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002974:	e001      	b.n	800297a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4944      	ldr	r1, [pc, #272]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002982:	428b      	cmp	r3, r1
 8002984:	d101      	bne.n	800298a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002986:	4b44      	ldr	r3, [pc, #272]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002988:	e001      	b.n	800298e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800298a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800298e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002992:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	f043 0204 	orr.w	r2, r3, #4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fdf6 	bl	80025a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029bc:	e089      	b.n	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d107      	bne.n	80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8be 	bl	8002b54 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8fd 	bl	8002bec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f8:	2b40      	cmp	r3, #64	@ 0x40
 80029fa:	d12f      	bne.n	8002a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02a      	beq.n	8002a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a22:	e001      	b.n	8002a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002a24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4919      	ldr	r1, [pc, #100]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d101      	bne.n	8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a36:	e001      	b.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002a38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f043 0202 	orr.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fda6 	bl	80025a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d136      	bne.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d031      	beq.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002a7a:	4b07      	ldr	r3, [pc, #28]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a7c:	e001      	b.n	8002a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002a7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4902      	ldr	r1, [pc, #8]	@ (8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d106      	bne.n	8002a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002a8e:	4b02      	ldr	r3, [pc, #8]	@ (8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a90:	e006      	b.n	8002aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002a92:	bf00      	nop
 8002a94:	40003800 	.word	0x40003800
 8002a98:	40003400 	.word	0x40003400
 8002a9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002aa4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ab4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fd6c 	bl	80025a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ad2:	bf00      	nop
}
 8002ad4:	bf00      	nop
 8002ad6:	3720      	adds	r7, #32
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	1c99      	adds	r1, r3, #2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6251      	str	r1, [r2, #36]	@ 0x24
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d113      	bne.n	8002b4a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ffc9 	bl	8002adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	1c99      	adds	r1, r3, #2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6251      	str	r1, [r2, #36]	@ 0x24
 8002b66:	8819      	ldrh	r1, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <I2SEx_TxISR_I2SExt+0x90>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <I2SEx_TxISR_I2SExt+0x22>
 8002b72:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <I2SEx_TxISR_I2SExt+0x94>)
 8002b74:	e001      	b.n	8002b7a <I2SEx_TxISR_I2SExt+0x26>
 8002b76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d121      	bne.n	8002bda <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a12      	ldr	r2, [pc, #72]	@ (8002be4 <I2SEx_TxISR_I2SExt+0x90>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <I2SEx_TxISR_I2SExt+0x50>
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <I2SEx_TxISR_I2SExt+0x94>)
 8002ba2:	e001      	b.n	8002ba8 <I2SEx_TxISR_I2SExt+0x54>
 8002ba4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	490d      	ldr	r1, [pc, #52]	@ (8002be4 <I2SEx_TxISR_I2SExt+0x90>)
 8002bb0:	428b      	cmp	r3, r1
 8002bb2:	d101      	bne.n	8002bb8 <I2SEx_TxISR_I2SExt+0x64>
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <I2SEx_TxISR_I2SExt+0x94>)
 8002bb6:	e001      	b.n	8002bbc <I2SEx_TxISR_I2SExt+0x68>
 8002bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bbc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff81 	bl	8002adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40003800 	.word	0x40003800
 8002be8:	40003400 	.word	0x40003400

08002bec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68d8      	ldr	r0, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	1c99      	adds	r1, r3, #2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002c04:	b282      	uxth	r2, r0
 8002c06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d113      	bne.n	8002c48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ff4a 	bl	8002adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ce0 <I2SEx_RxISR_I2SExt+0x90>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <I2SEx_RxISR_I2SExt+0x16>
 8002c62:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <I2SEx_RxISR_I2SExt+0x94>)
 8002c64:	e001      	b.n	8002c6a <I2SEx_RxISR_I2SExt+0x1a>
 8002c66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c6a:	68d8      	ldr	r0, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	1c99      	adds	r1, r3, #2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002c76:	b282      	uxth	r2, r0
 8002c78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d121      	bne.n	8002cd6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <I2SEx_RxISR_I2SExt+0x90>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d101      	bne.n	8002ca0 <I2SEx_RxISR_I2SExt+0x50>
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <I2SEx_RxISR_I2SExt+0x94>)
 8002c9e:	e001      	b.n	8002ca4 <I2SEx_RxISR_I2SExt+0x54>
 8002ca0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	490d      	ldr	r1, [pc, #52]	@ (8002ce0 <I2SEx_RxISR_I2SExt+0x90>)
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d101      	bne.n	8002cb4 <I2SEx_RxISR_I2SExt+0x64>
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <I2SEx_RxISR_I2SExt+0x94>)
 8002cb2:	e001      	b.n	8002cb8 <I2SEx_RxISR_I2SExt+0x68>
 8002cb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cb8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cbc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff03 	bl	8002adc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40003800 	.word	0x40003800
 8002ce4:	40003400 	.word	0x40003400

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e267      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d075      	beq.n	8002df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d06:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d00c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	4b85      	ldr	r3, [pc, #532]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d112      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1e:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05b      	beq.n	8002df0 <HAL_RCC_OscConfig+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d157      	bne.n	8002df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e242      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x74>
 8002d4e:	4b76      	ldr	r3, [pc, #472]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a75      	ldr	r2, [pc, #468]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x98>
 8002d66:	4b70      	ldr	r3, [pc, #448]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b6d      	ldr	r3, [pc, #436]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6c      	ldr	r2, [pc, #432]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d80:	4b69      	ldr	r3, [pc, #420]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a68      	ldr	r2, [pc, #416]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b66      	ldr	r3, [pc, #408]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a65      	ldr	r2, [pc, #404]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fb9a 	bl	80014d8 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe fb96 	bl	80014d8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	@ 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e207      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b5b      	ldr	r3, [pc, #364]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xc0>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fb86 	bl	80014d8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fb82 	bl	80014d8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	@ 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1f3      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xe8>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b47      	ldr	r3, [pc, #284]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e16:	4b44      	ldr	r3, [pc, #272]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b41      	ldr	r3, [pc, #260]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1c7      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4937      	ldr	r1, [pc, #220]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e03a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_OscConfig+0x244>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fb3b 	bl	80014d8 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fb37 	bl	80014d8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1a8      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4925      	ldr	r1, [pc, #148]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <HAL_RCC_OscConfig+0x244>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fb1a 	bl	80014d8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fb16 	bl	80014d8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e187      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d036      	beq.n	8002f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_RCC_OscConfig+0x248>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fafa 	bl	80014d8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fe faf6 	bl	80014d8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e167      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x200>
 8002f06:	e01b      	b.n	8002f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f08:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_RCC_OscConfig+0x248>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fae3 	bl	80014d8 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	e00e      	b.n	8002f34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe fadf 	bl	80014d8 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d907      	bls.n	8002f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e150      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	42470000 	.word	0x42470000
 8002f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ea      	bne.n	8002f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8097 	beq.w	800307c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b81      	ldr	r3, [pc, #516]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	4b7d      	ldr	r3, [pc, #500]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	4a7c      	ldr	r2, [pc, #496]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b77      	ldr	r3, [pc, #476]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8a:	4b74      	ldr	r3, [pc, #464]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a73      	ldr	r2, [pc, #460]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fa9f 	bl	80014d8 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe fa9b 	bl	80014d8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e10c      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2ea>
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a63      	ldr	r2, [pc, #396]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd0:	e01c      	b.n	800300c <HAL_RCC_OscConfig+0x324>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x30c>
 8002fda:	4b5f      	ldr	r3, [pc, #380]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	4a5e      	ldr	r2, [pc, #376]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	4a5b      	ldr	r2, [pc, #364]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0x324>
 8002ff4:	4b58      	ldr	r3, [pc, #352]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff8:	4a57      	ldr	r2, [pc, #348]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003000:	4b55      	ldr	r3, [pc, #340]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a54      	ldr	r2, [pc, #336]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003006:	f023 0304 	bic.w	r3, r3, #4
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fa60 	bl	80014d8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fa5c 	bl	80014d8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0cb      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	4b49      	ldr	r3, [pc, #292]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ee      	beq.n	800301c <HAL_RCC_OscConfig+0x334>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fe fa4a 	bl	80014d8 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe fa46 	bl	80014d8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0b5      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305e:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ee      	bne.n	8003048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003070:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	4a38      	ldr	r2, [pc, #224]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a1 	beq.w	80031c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003086:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b08      	cmp	r3, #8
 8003090:	d05c      	beq.n	800314c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d141      	bne.n	800311e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_RCC_OscConfig+0x478>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fa1a 	bl	80014d8 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fa16 	bl	80014d8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e087      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	4b27      	ldr	r3, [pc, #156]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	3b01      	subs	r3, #1
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	491b      	ldr	r1, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <HAL_RCC_OscConfig+0x478>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fe f9ef 	bl	80014d8 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe f9eb 	bl	80014d8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e05c      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x416>
 800311c:	e054      	b.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <HAL_RCC_OscConfig+0x478>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe f9d8 	bl	80014d8 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe f9d4 	bl	80014d8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e045      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x444>
 800314a:	e03d      	b.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e038      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
 8003158:	40023800 	.word	0x40023800
 800315c:	40007000 	.word	0x40007000
 8003160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003164:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_RCC_OscConfig+0x4ec>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d028      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d121      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d11a      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800319a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	4293      	cmp	r3, r2
 800319e:	d111      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0cc      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b68      	ldr	r3, [pc, #416]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d90c      	bls.n	8003214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b65      	ldr	r3, [pc, #404]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b63      	ldr	r3, [pc, #396]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b8      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800322c:	4b59      	ldr	r3, [pc, #356]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003244:	4b53      	ldr	r3, [pc, #332]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a52      	ldr	r2, [pc, #328]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800324e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b50      	ldr	r3, [pc, #320]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	494d      	ldr	r1, [pc, #308]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d044      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b47      	ldr	r3, [pc, #284]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d119      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d003      	beq.n	8003296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b3f      	ldr	r3, [pc, #252]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e067      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4934      	ldr	r1, [pc, #208]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fe f906 	bl	80014d8 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe f902 	bl	80014d8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e04f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b25      	ldr	r3, [pc, #148]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d20c      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b22      	ldr	r3, [pc, #136]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e032      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4916      	ldr	r1, [pc, #88]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334a:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	490e      	ldr	r1, [pc, #56]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335e:	f000 f821 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003362:	4602      	mov	r2, r0
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	490a      	ldr	r1, [pc, #40]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	5ccb      	ldrb	r3, [r1, r3]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fe4e 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023c00 	.word	0x40023c00
 8003394:	40023800 	.word	0x40023800
 8003398:	0800f080 	.word	0x0800f080
 800339c:	20000004 	.word	0x20000004
 80033a0:	20000008 	.word	0x20000008

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a8:	b090      	sub	sp, #64	@ 0x40
 80033aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033bc:	4b59      	ldr	r3, [pc, #356]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x180>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d00d      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x40>
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	f200 80a1 	bhi.w	8003510 <HAL_RCC_GetSysClockFreq+0x16c>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x3a>
 80033d6:	e09b      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x184>)
 80033da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033dc:	e09b      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033de:	4b53      	ldr	r3, [pc, #332]	@ (800352c <HAL_RCC_GetSysClockFreq+0x188>)
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033e2:	e098      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x180>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d028      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	099b      	lsrs	r3, r3, #6
 8003400:	2200      	movs	r2, #0
 8003402:	623b      	str	r3, [r7, #32]
 8003404:	627a      	str	r2, [r7, #36]	@ 0x24
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800340c:	2100      	movs	r1, #0
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_RCC_GetSysClockFreq+0x188>)
 8003410:	fb03 f201 	mul.w	r2, r3, r1
 8003414:	2300      	movs	r3, #0
 8003416:	fb00 f303 	mul.w	r3, r0, r3
 800341a:	4413      	add	r3, r2
 800341c:	4a43      	ldr	r2, [pc, #268]	@ (800352c <HAL_RCC_GetSysClockFreq+0x188>)
 800341e:	fba0 1202 	umull	r1, r2, r0, r2
 8003422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003424:	460a      	mov	r2, r1
 8003426:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800342a:	4413      	add	r3, r2
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800342e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003430:	2200      	movs	r2, #0
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	61fa      	str	r2, [r7, #28]
 8003436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800343e:	f7fc ff17 	bl	8000270 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4613      	mov	r3, r2
 8003448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800344a:	e053      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344c:	4b35      	ldr	r3, [pc, #212]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x180>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	099b      	lsrs	r3, r3, #6
 8003452:	2200      	movs	r2, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	617a      	str	r2, [r7, #20]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800345e:	f04f 0b00 	mov.w	fp, #0
 8003462:	4652      	mov	r2, sl
 8003464:	465b      	mov	r3, fp
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	0159      	lsls	r1, r3, #5
 8003470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003474:	0150      	lsls	r0, r2, #5
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	ebb2 080a 	subs.w	r8, r2, sl
 800347e:	eb63 090b 	sbc.w	r9, r3, fp
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800348e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003492:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003496:	ebb2 0408 	subs.w	r4, r2, r8
 800349a:	eb63 0509 	sbc.w	r5, r3, r9
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	00eb      	lsls	r3, r5, #3
 80034a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ac:	00e2      	lsls	r2, r4, #3
 80034ae:	4614      	mov	r4, r2
 80034b0:	461d      	mov	r5, r3
 80034b2:	eb14 030a 	adds.w	r3, r4, sl
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	eb45 030b 	adc.w	r3, r5, fp
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ca:	4629      	mov	r1, r5
 80034cc:	028b      	lsls	r3, r1, #10
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d4:	4621      	mov	r1, r4
 80034d6:	028a      	lsls	r2, r1, #10
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034de:	2200      	movs	r2, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034e8:	f7fc fec2 	bl	8000270 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x184>)
 8003512:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003518:	4618      	mov	r0, r3
 800351a:	3740      	adds	r7, #64	@ 0x40
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	00f42400 	.word	0x00f42400
 800352c:	017d7840 	.word	0x017d7840

08003530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <HAL_RCC_GetHCLKFreq+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800354c:	f7ff fff0 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0a9b      	lsrs	r3, r3, #10
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4903      	ldr	r1, [pc, #12]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	0800f090 	.word	0x0800f090

08003570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003574:	f7ff ffdc 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	0b5b      	lsrs	r3, r3, #13
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4903      	ldr	r1, [pc, #12]	@ (8003594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40023800 	.word	0x40023800
 8003594:	0800f090 	.word	0x0800f090

08003598 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	220f      	movs	r2, #15
 80035a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035a8:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0203 	and.w	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035cc:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_RCC_GetClockConfig+0x60>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0207 	and.w	r2, r3, #7
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40023c00 	.word	0x40023c00

080035fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003620:	2b00      	cmp	r3, #0
 8003622:	d035      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003624:	4b62      	ldr	r3, [pc, #392]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800362a:	f7fd ff55 	bl	80014d8 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003632:	f7fd ff51 	bl	80014d8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0b0      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003644:	4b5b      	ldr	r3, [pc, #364]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	019a      	lsls	r2, r3, #6
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	071b      	lsls	r3, r3, #28
 800365c:	4955      	ldr	r1, [pc, #340]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003664:	4b52      	ldr	r3, [pc, #328]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800366a:	f7fd ff35 	bl	80014d8 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003672:	f7fd ff31 	bl	80014d8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e090      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003684:	4b4b      	ldr	r3, [pc, #300]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8083 	beq.w	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b44      	ldr	r3, [pc, #272]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	4a43      	ldr	r2, [pc, #268]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ae:	4b41      	ldr	r3, [pc, #260]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036ba:	4b3f      	ldr	r3, [pc, #252]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3e      	ldr	r2, [pc, #248]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036c6:	f7fd ff07 	bl	80014d8 <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fd ff03 	bl	80014d8 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e062      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036e0:	4b35      	ldr	r3, [pc, #212]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ec:	4b31      	ldr	r3, [pc, #196]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	429a      	cmp	r2, r3
 8003708:	d028      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800370a:	4b2a      	ldr	r3, [pc, #168]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003712:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003714:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003720:	4a24      	ldr	r2, [pc, #144]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003726:	4b23      	ldr	r3, [pc, #140]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d114      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd fed1 	bl	80014d8 <HAL_GetTick>
 8003736:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd fecd 	bl	80014d8 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e02a      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003768:	d10d      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800376a:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	490d      	ldr	r1, [pc, #52]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]
 8003784:	e005      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003786:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800378c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003790:	6093      	str	r3, [r2, #8]
 8003792:	4b08      	ldr	r3, [pc, #32]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003794:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379e:	4905      	ldr	r1, [pc, #20]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	42470068 	.word	0x42470068
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40007000 	.word	0x40007000
 80037bc:	42470e40 	.word	0x42470e40

080037c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d13f      	bne.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80037de:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037f4:	d12f      	bne.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80037f8:	617b      	str	r3, [r7, #20]
          break;
 80037fa:	e02f      	b.n	800385c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003808:	d108      	bne.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003812:	4a19      	ldr	r2, [pc, #100]	@ (8003878 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e007      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800381c:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003824:	4a15      	ldr	r2, [pc, #84]	@ (800387c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800382c:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003846:	0f1b      	lsrs	r3, r3, #28
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	617b      	str	r3, [r7, #20]
          break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
          break;
 800385a:	bf00      	nop
        }
      }
      break;
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800385e:	bf00      	nop
    }
  }
  return frequency;
 8003860:	697b      	ldr	r3, [r7, #20]
}
 8003862:	4618      	mov	r0, r3
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	00bb8000 	.word	0x00bb8000
 8003878:	017d7840 	.word	0x017d7840
 800387c:	00f42400 	.word	0x00f42400

08003880 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e022      	b.n	80038d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d105      	bne.n	80038aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd fa9d 	bl	8000de4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2203      	movs	r2, #3
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f814 	bl	80038e0 <HAL_SD_InitCard>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e00a      	b.n	80038d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b08e      	sub	sp, #56	@ 0x38
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80038fc:	2376      	movs	r3, #118	@ 0x76
 80038fe:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681d      	ldr	r5, [r3, #0]
 8003904:	466c      	mov	r4, sp
 8003906:	f107 0318 	add.w	r3, r7, #24
 800390a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800390e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003918:	4628      	mov	r0, r5
 800391a:	f002 fa21 	bl	8005d60 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800391e:	4b2a      	ldr	r3, [pc, #168]	@ (80039c8 <HAL_SD_InitCard+0xe8>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f002 fa62 	bl	8005df2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800392e:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <HAL_SD_InitCard+0xe8>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003934:	2002      	movs	r0, #2
 8003936:	f7fd fddb 	bl	80014f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f001 f806 	bl	800494c <SD_PowerON>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e02e      	b.n	80039be <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 ff25 	bl	80047b0 <SD_InitCard>
 8003966:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e01b      	b.n	80039be <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800398e:	4618      	mov	r0, r3
 8003990:	f002 fac1 	bl	8005f16 <SDMMC_CmdBlockLength>
 8003994:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00f      	beq.n	80039bc <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <HAL_SD_InitCard+0xec>)
 80039a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3728      	adds	r7, #40	@ 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bdb0      	pop	{r4, r5, r7, pc}
 80039c6:	bf00      	nop
 80039c8:	422580a0 	.word	0x422580a0
 80039cc:	004005ff 	.word	0x004005ff

080039d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	@ 0x30
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0c0      	b.n	8003b7a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f040 80b9 	bne.w	8003b78 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	441a      	add	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d907      	bls.n	8003a2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0a7      	b.n	8003b7a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003a48:	f043 0302 	orr.w	r3, r3, #2
 8003a4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	4a4c      	ldr	r2, [pc, #304]	@ (8003b84 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003a5c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	2200      	movs	r2, #0
 8003a64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3380      	adds	r3, #128	@ 0x80
 8003a94:	4619      	mov	r1, r3
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	025b      	lsls	r3, r3, #9
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	f7fd fedb 	bl	8001858 <HAL_DMA_Start_IT>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a33      	ldr	r2, [pc, #204]	@ (8003b8c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e050      	b.n	8003b7a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d002      	beq.n	8003aec <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	025b      	lsls	r3, r3, #9
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	025b      	lsls	r3, r3, #9
 8003af6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003af8:	2390      	movs	r3, #144	@ 0x90
 8003afa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003afc:	2302      	movs	r3, #2
 8003afe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f107 0210 	add.w	r2, r7, #16
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 f9d3 	bl	8005ebe <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d90a      	bls.n	8003b34 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2282      	movs	r2, #130	@ 0x82
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 fa37 	bl	8005f9e <SDMMC_CmdReadMultiBlock>
 8003b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003b32:	e009      	b.n	8003b48 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2281      	movs	r2, #129	@ 0x81
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 fa0a 	bl	8005f5a <SDMMC_CmdReadSingleBlock>
 8003b46:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a0e      	ldr	r2, [pc, #56]	@ (8003b8c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003b54:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e002      	b.n	8003b7a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3730      	adds	r7, #48	@ 0x30
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	080045bf 	.word	0x080045bf
 8003b88:	08004631 	.word	0x08004631
 8003b8c:	004005ff 	.word	0x004005ff
 8003b90:	4225858c 	.word	0x4225858c

08003b94 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	@ 0x30
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0c5      	b.n	8003d48 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	f040 80be 	bne.w	8003d46 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	441a      	add	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d907      	bls.n	8003bee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0ac      	b.n	8003d48 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	4a4e      	ldr	r2, [pc, #312]	@ (8003d50 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003c18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8003d54 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003c20:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c26:	2200      	movs	r2, #0
 8003c28:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d002      	beq.n	8003c38 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	025b      	lsls	r3, r3, #9
 8003c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d90a      	bls.n	8003c54 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	22a0      	movs	r2, #160	@ 0xa0
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 f9eb 	bl	8006026 <SDMMC_CmdWriteMultiBlock>
 8003c50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003c52:	e009      	b.n	8003c68 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2290      	movs	r2, #144	@ 0x90
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c60:	4618      	mov	r0, r3
 8003c62:	f002 f9be 	bl	8005fe2 <SDMMC_CmdWriteSingleBlock>
 8003c66:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d012      	beq.n	8003c94 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a39      	ldr	r2, [pc, #228]	@ (8003d58 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003c74:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e059      	b.n	8003d48 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003c94:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9e:	2240      	movs	r2, #64	@ 0x40
 8003ca0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3380      	adds	r3, #128	@ 0x80
 8003cca:	461a      	mov	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	025b      	lsls	r3, r3, #9
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	f7fd fdc1 	bl	8001858 <HAL_DMA_Start_IT>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8003cea:	f023 0302 	bic.w	r3, r3, #2
 8003cee:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a18      	ldr	r2, [pc, #96]	@ (8003d58 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003cf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e018      	b.n	8003d48 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	025b      	lsls	r3, r3, #9
 8003d20:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d22:	2390      	movs	r3, #144	@ 0x90
 8003d24:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f107 0210 	add.w	r2, r7, #16
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f002 f8be 	bl	8005ebe <SDIO_ConfigData>

      return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3730      	adds	r7, #48	@ 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	08004595 	.word	0x08004595
 8003d54:	08004631 	.word	0x08004631
 8003d58:	004005ff 	.word	0x004005ff
 8003d5c:	4225858c 	.word	0x4225858c

08003d60 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_SD_IRQHandler+0x2e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 f806 	bl	8004d98 <SD_Read_IT>
 8003d8c:	e165      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 808f 	beq.w	8003ebc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003db6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003dba:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d039      	beq.n	8003e4a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <HAL_SD_IRQHandler+0x8a>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d011      	beq.n	8003e0e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 f93c 	bl	800606c <SDMMC_CmdStopTransfer>
 8003df4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f92f 	bl	800406c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e16:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_SD_IRQHandler+0xda>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f002 fdaa 	bl	8006994 <HAL_SD_RxCpltCallback>
 8003e40:	e10b      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f002 fd9c 	bl	8006980 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e48:	e107      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8102 	beq.w	800405a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d011      	beq.n	8003e84 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f002 f901 	bl	800606c <SDMMC_CmdStopTransfer>
 8003e6a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8f4 	bl	800406c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 80e5 	bne.w	800405a <HAL_SD_IRQHandler+0x2fa>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 80df 	bne.w	800405a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0208 	bic.w	r2, r2, #8
 8003eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f002 fd63 	bl	8006980 <HAL_SD_TxCpltCallback>
}
 8003eba:	e0ce      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_SD_IRQHandler+0x17c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 ffb0 	bl	8004e3a <SD_Write_IT>
 8003eda:	e0be      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee2:	f240 233a 	movw	r3, #570	@ 0x23a
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80b6 	beq.w	800405a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	f043 0202 	orr.w	r2, r3, #2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	f043 0208 	orr.w	r2, r3, #8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	f043 0208 	orr.w	r2, r3, #8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003f78:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003f88:	f023 0302 	bic.w	r3, r3, #2
 8003f8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 f86a 	bl	800606c <SDMMC_CmdStopTransfer>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f855 	bl	800406c <HAL_SD_ErrorCallback>
}
 8003fc2:	e04a      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d045      	beq.n	800405a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_SD_IRQHandler+0x282>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d011      	beq.n	8004006 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8004064 <HAL_SD_IRQHandler+0x304>)
 8003fe8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd fc8a 	bl	8001908 <HAL_DMA_Abort_IT>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02f      	beq.n	800405a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fb68 	bl	80046d4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004004:	e029      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_SD_IRQHandler+0x2ba>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d011      	beq.n	800403e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	4a12      	ldr	r2, [pc, #72]	@ (8004068 <HAL_SD_IRQHandler+0x308>)
 8004020:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fc6e 	bl	8001908 <HAL_DMA_Abort_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fb83 	bl	8004742 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800403c:	e00d      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f002 fc8a 	bl	800696c <HAL_SD_AbortCallback>
}
 8004058:	e7ff      	b.n	800405a <HAL_SD_IRQHandler+0x2fa>
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	080046d5 	.word	0x080046d5
 8004068:	08004743 	.word	0x08004743

0800406c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800408e:	0f9b      	lsrs	r3, r3, #30
 8004090:	b2da      	uxtb	r2, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800409a:	0e9b      	lsrs	r3, r3, #26
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ac:	0e1b      	lsrs	r3, r3, #24
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040e0:	0d1b      	lsrs	r3, r3, #20
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fe:	0bdb      	lsrs	r3, r3, #15
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004110:	0b9b      	lsrs	r3, r3, #14
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	b2da      	uxtb	r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004122:	0b5b      	lsrs	r3, r3, #13
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004134:	0b1b      	lsrs	r3, r3, #12
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	2b00      	cmp	r3, #0
 800414e:	d163      	bne.n	8004218 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004154:	009a      	lsls	r2, r3, #2
 8004156:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800415a:	4013      	ands	r3, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004160:	0f92      	lsrs	r2, r2, #30
 8004162:	431a      	orrs	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800416c:	0edb      	lsrs	r3, r3, #27
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	b2da      	uxtb	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800417e:	0e1b      	lsrs	r3, r3, #24
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	b2da      	uxtb	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004190:	0d5b      	lsrs	r3, r3, #21
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	b2da      	uxtb	r2, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a2:	0c9b      	lsrs	r3, r3, #18
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b4:	0bdb      	lsrs	r3, r3, #15
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	7e1b      	ldrb	r3, [r3, #24]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	3302      	adds	r3, #2
 80041d8:	2201      	movs	r2, #1
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80041e2:	fb03 f202 	mul.w	r2, r3, r2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	7a1b      	ldrb	r3, [r3, #8]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	2201      	movs	r2, #1
 80041f6:	409a      	lsls	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004204:	0a52      	lsrs	r2, r2, #9
 8004206:	fb03 f202 	mul.w	r2, r3, r2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004214:	661a      	str	r2, [r3, #96]	@ 0x60
 8004216:	e031      	b.n	800427c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421c:	2b01      	cmp	r3, #1
 800421e:	d11d      	bne.n	800425c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	431a      	orrs	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	3301      	adds	r3, #1
 800423c:	029a      	lsls	r2, r3, #10
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004250:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	661a      	str	r2, [r3, #96]	@ 0x60
 800425a:	e00f      	b.n	800427c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a58      	ldr	r2, [pc, #352]	@ (80043c4 <HAL_SD_GetCardCSD+0x344>)
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004268:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e09d      	b.n	80043b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004280:	0b9b      	lsrs	r3, r3, #14
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	b2da      	uxtb	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004292:	09db      	lsrs	r3, r3, #7
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800429a:	b2da      	uxtb	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b4:	0fdb      	lsrs	r3, r3, #31
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c0:	0f5b      	lsrs	r3, r3, #29
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	0e9b      	lsrs	r3, r3, #26
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	0d9b      	lsrs	r3, r3, #22
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	0d5b      	lsrs	r3, r3, #21
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	0bdb      	lsrs	r3, r3, #15
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	0b9b      	lsrs	r3, r3, #14
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	0b5b      	lsrs	r3, r3, #13
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	0b1b      	lsrs	r3, r3, #12
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	b2da      	uxtb	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	0a9b      	lsrs	r3, r3, #10
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	b2da      	uxtb	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	004005ff 	.word	0x004005ff

080043c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004420:	b5b0      	push	{r4, r5, r7, lr}
 8004422:	b08e      	sub	sp, #56	@ 0x38
 8004424:	af04      	add	r7, sp, #16
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	2b03      	cmp	r3, #3
 800443e:	d02e      	beq.n	800449e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004446:	d106      	bne.n	8004456 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	@ 0x38
 8004454:	e029      	b.n	80044aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800445c:	d10a      	bne.n	8004474 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fb2a 	bl	8004ab8 <SD_WideBus_Enable>
 8004464:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	639a      	str	r2, [r3, #56]	@ 0x38
 8004472:	e01a      	b.n	80044aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fb67 	bl	8004b4e <SD_WideBus_Disable>
 8004480:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	639a      	str	r2, [r3, #56]	@ 0x38
 800448e:	e00c      	b.n	80044aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	@ 0x38
 800449c:	e005      	b.n	80044aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a26      	ldr	r2, [pc, #152]	@ (8004550 <HAL_SD_ConfigWideBusOperation+0x130>)
 80044b8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044c8:	e01f      	b.n	800450a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681d      	ldr	r5, [r3, #0]
 80044f0:	466c      	mov	r4, sp
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004504:	4628      	mov	r0, r5
 8004506:	f001 fc2b 	bl	8005d60 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004512:	4618      	mov	r0, r3
 8004514:	f001 fcff 	bl	8005f16 <SDMMC_CmdBlockLength>
 8004518:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0a      	ldr	r2, [pc, #40]	@ (8004550 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004526:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004546:	4618      	mov	r0, r3
 8004548:	3728      	adds	r7, #40	@ 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bdb0      	pop	{r4, r5, r7, pc}
 800454e:	bf00      	nop
 8004550:	004005ff 	.word	0x004005ff

08004554 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	4619      	mov	r1, r3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fa7e 	bl	8004a68 <SD_SendStatus>
 800456c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	0a5b      	lsrs	r3, r3, #9
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800458a:	693b      	ldr	r3, [r7, #16]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	2b82      	cmp	r3, #130	@ 0x82
 80045d2:	d111      	bne.n	80045f8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 fd47 	bl	800606c <SDMMC_CmdStopTransfer>
 80045de:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fd3a 	bl	800406c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0208 	bic.w	r2, r2, #8
 8004606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004610:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f002 f9b7 	bl	8006994 <HAL_SD_RxCpltCallback>
#endif
}
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd fb0e 	bl	8001c60 <HAL_DMA_GetError>
 8004644:	4603      	mov	r3, r0
 8004646:	2b02      	cmp	r3, #2
 8004648:	d03e      	beq.n	80046c8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004650:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d002      	beq.n	8004666 <SD_DMAError+0x36>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d12d      	bne.n	80046c2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a19      	ldr	r2, [pc, #100]	@ (80046d0 <SD_DMAError+0xa0>)
 800466c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800467c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004682:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f7ff ff62 	bl	8004554 <HAL_SD_GetCardState>
 8004690:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b06      	cmp	r3, #6
 8004696:	d002      	beq.n	800469e <SD_DMAError+0x6e>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d10a      	bne.n	80046b4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fce2 	bl	800606c <SDMMC_CmdStopTransfer>
 80046a8:	4602      	mov	r2, r0
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	431a      	orrs	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7ff fcd2 	bl	800406c <HAL_SD_ErrorCallback>
#endif
  }
}
 80046c8:	bf00      	nop
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	004005ff 	.word	0x004005ff

080046d4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff ff31 	bl	8004554 <HAL_SD_GetCardState>
 80046f2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d002      	beq.n	800470e <SD_DMATxAbort+0x3a>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b05      	cmp	r3, #5
 800470c:	d10a      	bne.n	8004724 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f001 fcaa 	bl	800606c <SDMMC_CmdStopTransfer>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	431a      	orrs	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f002 f91d 	bl	800696c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004732:	e002      	b.n	800473a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff fc99 	bl	800406c <HAL_SD_ErrorCallback>
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004758:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fefa 	bl	8004554 <HAL_SD_GetCardState>
 8004760:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d002      	beq.n	800477c <SD_DMARxAbort+0x3a>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b05      	cmp	r3, #5
 800477a:	d10a      	bne.n	8004792 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fc73 	bl	800606c <SDMMC_CmdStopTransfer>
 8004786:	4602      	mov	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f002 f8e6 	bl	800696c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80047a0:	e002      	b.n	80047a8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff fc62 	bl	800406c <HAL_SD_ErrorCallback>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047b0:	b5b0      	push	{r4, r5, r7, lr}
 80047b2:	b094      	sub	sp, #80	@ 0x50
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80047b8:	2301      	movs	r3, #1
 80047ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fb24 	bl	8005e0e <SDIO_GetPowerState>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80047d0:	e0b8      	b.n	8004944 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d02f      	beq.n	800483a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fd4e 	bl	8006280 <SDMMC_CmdSendCID>
 80047e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80047ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ee:	e0a9      	b.n	8004944 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 fb4e 	bl	8005e98 <SDIO_GetResponse>
 80047fc:	4602      	mov	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2104      	movs	r1, #4
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fb45 	bl	8005e98 <SDIO_GetResponse>
 800480e:	4602      	mov	r2, r0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2108      	movs	r1, #8
 800481a:	4618      	mov	r0, r3
 800481c:	f001 fb3c 	bl	8005e98 <SDIO_GetResponse>
 8004820:	4602      	mov	r2, r0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	210c      	movs	r1, #12
 800482c:	4618      	mov	r0, r3
 800482e:	f001 fb33 	bl	8005e98 <SDIO_GetResponse>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	2b03      	cmp	r3, #3
 8004840:	d00d      	beq.n	800485e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f107 020e 	add.w	r2, r7, #14
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fd54 	bl	80062fa <SDMMC_CmdSetRelAdd>
 8004852:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <SD_InitCard+0xae>
    {
      return errorstate;
 800485a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800485c:	e072      	b.n	8004944 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	2b03      	cmp	r3, #3
 8004864:	d036      	beq.n	80048d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004876:	041b      	lsls	r3, r3, #16
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f001 fd1e 	bl	80062bc <SDMMC_CmdSendCSD>
 8004880:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488a:	e05b      	b.n	8004944 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f001 fb00 	bl	8005e98 <SDIO_GetResponse>
 8004898:	4602      	mov	r2, r0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2104      	movs	r1, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 faf7 	bl	8005e98 <SDIO_GetResponse>
 80048aa:	4602      	mov	r2, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2108      	movs	r1, #8
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 faee 	bl	8005e98 <SDIO_GetResponse>
 80048bc:	4602      	mov	r2, r0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	210c      	movs	r1, #12
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fae5 	bl	8005e98 <SDIO_GetResponse>
 80048ce:	4602      	mov	r2, r0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2104      	movs	r1, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 fadc 	bl	8005e98 <SDIO_GetResponse>
 80048e0:	4603      	mov	r3, r0
 80048e2:	0d1a      	lsrs	r2, r3, #20
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048e8:	f107 0310 	add.w	r3, r7, #16
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fbc6 	bl	8004080 <HAL_SD_GetCardCSD>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80048fe:	e021      	b.n	8004944 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	2200      	movs	r2, #0
 800490c:	461c      	mov	r4, r3
 800490e:	4615      	mov	r5, r2
 8004910:	4622      	mov	r2, r4
 8004912:	462b      	mov	r3, r5
 8004914:	4608      	mov	r0, r1
 8004916:	f001 fbcb 	bl	80060b0 <SDMMC_CmdSelDesel>
 800491a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800491c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <SD_InitCard+0x176>
  {
    return errorstate;
 8004922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004924:	e00e      	b.n	8004944 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	466c      	mov	r4, sp
 800492e:	f103 0210 	add.w	r2, r3, #16
 8004932:	ca07      	ldmia	r2, {r0, r1, r2}
 8004934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004938:	3304      	adds	r3, #4
 800493a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800493c:	4628      	mov	r0, r5
 800493e:	f001 fa0f 	bl	8005d60 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3740      	adds	r7, #64	@ 0x40
 8004948:	46bd      	mov	sp, r7
 800494a:	bdb0      	pop	{r4, r5, r7, pc}

0800494c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f001 fbc6 	bl	80060f6 <SDMMC_CmdGoIdleState>
 800496a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	e072      	b.n	8004a5c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f001 fbd9 	bl	8006132 <SDMMC_CmdOperCond>
 8004980:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fbaf 	bl	80060f6 <SDMMC_CmdGoIdleState>
 8004998:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	e05b      	b.n	8004a5c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d137      	bne.n	8004a22 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 fbd9 	bl	8006170 <SDMMC_CmdAppCommand>
 80049be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d02d      	beq.n	8004a22 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80049ca:	e047      	b.n	8004a5c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2100      	movs	r1, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 fbcc 	bl	8006170 <SDMMC_CmdAppCommand>
 80049d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	e03b      	b.n	8004a5c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	491e      	ldr	r1, [pc, #120]	@ (8004a64 <SD_PowerON+0x118>)
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 fbe2 	bl	80061b4 <SDMMC_CmdAppOperCommand>
 80049f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80049fc:	e02e      	b.n	8004a5c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 fa47 	bl	8005e98 <SDIO_GetResponse>
 8004a0a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	0fdb      	lsrs	r3, r3, #31
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <SD_PowerON+0xcc>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <SD_PowerON+0xce>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]

    count++;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d802      	bhi.n	8004a32 <SD_PowerON+0xe6>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0cc      	beq.n	80049cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d902      	bls.n	8004a42 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a40:	e00c      	b.n	8004a5c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a52:	e002      	b.n	8004a5a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	c1100000 	.word	0xc1100000

08004a68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004a78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a7c:	e018      	b.n	8004ab0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f001 fc56 	bl	800633c <SDMMC_CmdSendStatus>
 8004a90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	e009      	b.n	8004ab0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f9f8 	bl	8005e98 <SDIO_GetResponse>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f9e2 	bl	8005e98 <SDIO_GetResponse>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ade:	d102      	bne.n	8004ae6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ae4:	e02f      	b.n	8004b46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f879 	bl	8004be4 <SD_FindSCR>
 8004af2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	e023      	b.n	8004b46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01c      	beq.n	8004b42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f001 fb2b 	bl	8006170 <SDMMC_CmdAppCommand>
 8004b1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	e00f      	b.n	8004b46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fb64 	bl	80061fa <SDMMC_CmdBusWidth>
 8004b32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	e003      	b.n	8004b46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e001      	b.n	8004b46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 f997 	bl	8005e98 <SDIO_GetResponse>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b74:	d102      	bne.n	8004b7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b7a:	e02f      	b.n	8004bdc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b7c:	f107 030c 	add.w	r3, r7, #12
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f82e 	bl	8004be4 <SD_FindSCR>
 8004b88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	e023      	b.n	8004bdc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01c      	beq.n	8004bd8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f001 fae0 	bl	8006170 <SDMMC_CmdAppCommand>
 8004bb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	e00f      	b.n	8004bdc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 fb19 	bl	80061fa <SDMMC_CmdBusWidth>
 8004bc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	e003      	b.n	8004bdc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e001      	b.n	8004bdc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b08f      	sub	sp, #60	@ 0x3c
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004bee:	f7fc fc73 	bl	80014d8 <HAL_GetTick>
 8004bf2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2108      	movs	r1, #8
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f983 	bl	8005f16 <SDMMC_CmdBlockLength>
 8004c10:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	e0b9      	b.n	8004d90 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f001 faa1 	bl	8006170 <SDMMC_CmdAppCommand>
 8004c2e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	e0aa      	b.n	8004d90 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c40:	2308      	movs	r3, #8
 8004c42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c44:	2330      	movs	r3, #48	@ 0x30
 8004c46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f107 0210 	add.w	r2, r7, #16
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f92d 	bl	8005ebe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fae8 	bl	800623e <SDMMC_CmdSendSCR>
 8004c6e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d02a      	beq.n	8004ccc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	e08a      	b.n	8004d90 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6819      	ldr	r1, [r3, #0]
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	f107 0208 	add.w	r2, r7, #8
 8004c94:	18d4      	adds	r4, r2, r3
 8004c96:	4608      	mov	r0, r1
 8004c98:	f001 f88d 	bl	8005db6 <SDIO_ReadFIFO>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	6023      	str	r3, [r4, #0]
      index++;
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca6:	e006      	b.n	8004cb6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d012      	beq.n	8004cdc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004cb6:	f7fc fc0f 	bl	80014d8 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d102      	bne.n	8004ccc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004cc6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004cca:	e061      	b.n	8004d90 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0cf      	beq.n	8004c7a <SD_FindSCR+0x96>
 8004cda:	e000      	b.n	8004cde <SD_FindSCR+0xfa>
      break;
 8004cdc:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <SD_FindSCR+0x116>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d02:	2308      	movs	r3, #8
 8004d04:	e044      	b.n	8004d90 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e037      	b.n	8004d90 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2220      	movs	r2, #32
 8004d34:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e02a      	b.n	8004d90 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	061a      	lsls	r2, r3, #24
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d5a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	0e1b      	lsrs	r3, r3, #24
 8004d60:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d64:	601a      	str	r2, [r3, #0]
    scr++;
 8004d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d68:	3304      	adds	r3, #4
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	061a      	lsls	r2, r3, #24
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d82:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	0e1b      	lsrs	r3, r3, #24
 8004d88:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	373c      	adds	r7, #60	@ 0x3c
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}

08004d98 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03f      	beq.n	8004e32 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e033      	b.n	8004e20 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fffa 	bl	8005db6 <SDIO_ReadFIFO>
 8004dc2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3301      	adds	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	0e1b      	lsrs	r3, r3, #24
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b07      	cmp	r3, #7
 8004e24:	d9c8      	bls.n	8004db8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b086      	sub	sp, #24
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d043      	beq.n	8004edc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e037      	b.n	8004eca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	021a      	lsls	r2, r3, #8
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	041a      	lsls	r2, r3, #16
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	061a      	lsls	r2, r3, #24
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f107 0208 	add.w	r2, r7, #8
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 ff86 	bl	8005dd0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b07      	cmp	r3, #7
 8004ece:	d9c4      	bls.n	8004e5a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004edc:	bf00      	nop
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e041      	b.n	8004f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f839 	bl	8004f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 f9c0 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d001      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04e      	b.n	800504e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a23      	ldr	r2, [pc, #140]	@ (800505c <HAL_TIM_Base_Start_IT+0xc4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d022      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fda:	d01d      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d018      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	@ (8005064 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8005068 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00e      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800506c <HAL_TIM_Base_Start_IT+0xd4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d009      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <HAL_TIM_Base_Start_IT+0xd8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a18      	ldr	r2, [pc, #96]	@ (8005074 <HAL_TIM_Base_Start_IT+0xdc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d111      	bne.n	800503c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b06      	cmp	r3, #6
 8005028:	d010      	beq.n	800504c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	e007      	b.n	800504c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40010400 	.word	0x40010400
 8005070:	40014000 	.word	0x40014000
 8005074:	40001800 	.word	0x40001800

08005078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0202 	mvn.w	r2, #2
 80050ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8d2 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8c4 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8d5 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d020      	beq.n	8005128 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0204 	mvn.w	r2, #4
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8ac 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f89e 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8af 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d020      	beq.n	8005174 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01b      	beq.n	8005174 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0208 	mvn.w	r2, #8
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f886 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f878 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f889 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	d020      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01b      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0210 	mvn.w	r2, #16
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2208      	movs	r2, #8
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f860 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f852 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f863 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00c      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0201 	mvn.w	r2, #1
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fb fdc4 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f900 	bl	8005408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00c      	beq.n	800522c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f834 	bl	8005294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0220 	mvn.w	r2, #32
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8d2 	bl	80053f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a43      	ldr	r2, [pc, #268]	@ (80053c8 <TIM_Base_SetConfig+0x120>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c6:	d00f      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a40      	ldr	r2, [pc, #256]	@ (80053cc <TIM_Base_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a3f      	ldr	r2, [pc, #252]	@ (80053d0 <TIM_Base_SetConfig+0x128>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3e      	ldr	r2, [pc, #248]	@ (80053d4 <TIM_Base_SetConfig+0x12c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3d      	ldr	r2, [pc, #244]	@ (80053d8 <TIM_Base_SetConfig+0x130>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a32      	ldr	r2, [pc, #200]	@ (80053c8 <TIM_Base_SetConfig+0x120>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d027      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <TIM_Base_SetConfig+0x124>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d023      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2e      	ldr	r2, [pc, #184]	@ (80053d0 <TIM_Base_SetConfig+0x128>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01f      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2d      	ldr	r2, [pc, #180]	@ (80053d4 <TIM_Base_SetConfig+0x12c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2c      	ldr	r2, [pc, #176]	@ (80053d8 <TIM_Base_SetConfig+0x130>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d017      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2b      	ldr	r2, [pc, #172]	@ (80053dc <TIM_Base_SetConfig+0x134>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2a      	ldr	r2, [pc, #168]	@ (80053e0 <TIM_Base_SetConfig+0x138>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a29      	ldr	r2, [pc, #164]	@ (80053e4 <TIM_Base_SetConfig+0x13c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a28      	ldr	r2, [pc, #160]	@ (80053e8 <TIM_Base_SetConfig+0x140>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a27      	ldr	r2, [pc, #156]	@ (80053ec <TIM_Base_SetConfig+0x144>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <TIM_Base_SetConfig+0x148>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a0e      	ldr	r2, [pc, #56]	@ (80053c8 <TIM_Base_SetConfig+0x120>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_Base_SetConfig+0xf2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a10      	ldr	r2, [pc, #64]	@ (80053d8 <TIM_Base_SetConfig+0x130>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d103      	bne.n	80053a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	40001800 	.word	0x40001800
 80053ec:	40001c00 	.word	0x40001c00
 80053f0:	40002000 	.word	0x40002000

080053f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e042      	b.n	80054b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb ffa0 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	@ 0x24
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800545e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa09 	bl	8005878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	@ 0x28
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d175      	bne.n	80055c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_UART_Transmit+0x2c>
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e06e      	b.n	80055ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2221      	movs	r2, #33	@ 0x21
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054fa:	f7fb ffed 	bl	80014d8 <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005514:	d108      	bne.n	8005528 <HAL_UART_Transmit+0x6c>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e003      	b.n	8005530 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005530:	e02e      	b.n	8005590 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	2180      	movs	r1, #128	@ 0x80
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f8df 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e03a      	b.n	80055ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3302      	adds	r3, #2
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e007      	b.n	8005582 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1cb      	bne.n	8005532 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2140      	movs	r1, #64	@ 0x40
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f8ab 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e006      	b.n	80055ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b08a      	sub	sp, #40	@ 0x28
 80055d6:	af02      	add	r7, sp, #8
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	f040 8081 	bne.w	80056f6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Receive+0x2e>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e079      	b.n	80056f8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2222      	movs	r2, #34	@ 0x22
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005618:	f7fb ff5e 	bl	80014d8 <HAL_GetTick>
 800561c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	d108      	bne.n	8005646 <HAL_UART_Receive+0x74>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	e003      	b.n	800564e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800564e:	e047      	b.n	80056e0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	2120      	movs	r1, #32
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f850 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e042      	b.n	80056f8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10c      	bne.n	8005692 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005684:	b29a      	uxth	r2, r3
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	3302      	adds	r3, #2
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	e01f      	b.n	80056d2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569a:	d007      	beq.n	80056ac <HAL_UART_Receive+0xda>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <HAL_UART_Receive+0xe8>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e008      	b.n	80056cc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1b2      	bne.n	8005650 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	e03b      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d037      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571a:	f7fb fedd 	bl	80014d8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <UART_WaitOnFlagUntilTimeout+0x30>
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e03a      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d023      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b80      	cmp	r3, #128	@ 0x80
 8005746:	d020      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b40      	cmp	r3, #64	@ 0x40
 800574c:	d01d      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b08      	cmp	r3, #8
 800575a:	d116      	bne.n	800578a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f81d 	bl	80057b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2208      	movs	r2, #8
 800577c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e00f      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d0b4      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b095      	sub	sp, #84	@ 0x54
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057da:	643a      	str	r2, [r7, #64]	@ 0x40
 80057dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800580e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	2b01      	cmp	r3, #1
 8005828:	d119      	bne.n	800585e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	60bb      	str	r3, [r7, #8]
   return(result);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0310 	bic.w	r3, r3, #16
 8005840:	647b      	str	r3, [r7, #68]	@ 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800584a:	61ba      	str	r2, [r7, #24]
 800584c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6979      	ldr	r1, [r7, #20]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	613b      	str	r3, [r7, #16]
   return(result);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e5      	bne.n	800582a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800586c:	bf00      	nop
 800586e:	3754      	adds	r7, #84	@ 0x54
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800587c:	b0c0      	sub	sp, #256	@ 0x100
 800587e:	af00      	add	r7, sp, #0
 8005880:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	ea40 0301 	orr.w	r3, r0, r1
 80058a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058d0:	f021 010c 	bic.w	r1, r1, #12
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058de:	430b      	orrs	r3, r1
 80058e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f2:	6999      	ldr	r1, [r3, #24]
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	ea40 0301 	orr.w	r3, r0, r1
 80058fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b8f      	ldr	r3, [pc, #572]	@ (8005b44 <UART_SetConfig+0x2cc>)
 8005908:	429a      	cmp	r2, r3
 800590a:	d005      	beq.n	8005918 <UART_SetConfig+0xa0>
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b8d      	ldr	r3, [pc, #564]	@ (8005b48 <UART_SetConfig+0x2d0>)
 8005914:	429a      	cmp	r2, r3
 8005916:	d104      	bne.n	8005922 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005918:	f7fd fe2a 	bl	8003570 <HAL_RCC_GetPCLK2Freq>
 800591c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005920:	e003      	b.n	800592a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005922:	f7fd fe11 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8005926:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005934:	f040 810c 	bne.w	8005b50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005942:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005946:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800594a:	4622      	mov	r2, r4
 800594c:	462b      	mov	r3, r5
 800594e:	1891      	adds	r1, r2, r2
 8005950:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005952:	415b      	adcs	r3, r3
 8005954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800595a:	4621      	mov	r1, r4
 800595c:	eb12 0801 	adds.w	r8, r2, r1
 8005960:	4629      	mov	r1, r5
 8005962:	eb43 0901 	adc.w	r9, r3, r1
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800597a:	4690      	mov	r8, r2
 800597c:	4699      	mov	r9, r3
 800597e:	4623      	mov	r3, r4
 8005980:	eb18 0303 	adds.w	r3, r8, r3
 8005984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005988:	462b      	mov	r3, r5
 800598a:	eb49 0303 	adc.w	r3, r9, r3
 800598e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800599e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a6:	460b      	mov	r3, r1
 80059a8:	18db      	adds	r3, r3, r3
 80059aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ac:	4613      	mov	r3, r2
 80059ae:	eb42 0303 	adc.w	r3, r2, r3
 80059b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059bc:	f7fa fc58 	bl	8000270 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4b61      	ldr	r3, [pc, #388]	@ (8005b4c <UART_SetConfig+0x2d4>)
 80059c6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	011c      	lsls	r4, r3, #4
 80059ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059e0:	4642      	mov	r2, r8
 80059e2:	464b      	mov	r3, r9
 80059e4:	1891      	adds	r1, r2, r2
 80059e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e8:	415b      	adcs	r3, r3
 80059ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059f0:	4641      	mov	r1, r8
 80059f2:	eb12 0a01 	adds.w	sl, r2, r1
 80059f6:	4649      	mov	r1, r9
 80059f8:	eb43 0b01 	adc.w	fp, r3, r1
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a10:	4692      	mov	sl, r2
 8005a12:	469b      	mov	fp, r3
 8005a14:	4643      	mov	r3, r8
 8005a16:	eb1a 0303 	adds.w	r3, sl, r3
 8005a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	eb4b 0303 	adc.w	r3, fp, r3
 8005a24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a52:	f7fa fc0d 	bl	8000270 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	2264      	movs	r2, #100	@ 0x64
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	1acb      	subs	r3, r1, r3
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a72:	4b36      	ldr	r3, [pc, #216]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005a74:	fba3 2302 	umull	r2, r3, r3, r2
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a80:	441c      	add	r4, r3
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a94:	4642      	mov	r2, r8
 8005a96:	464b      	mov	r3, r9
 8005a98:	1891      	adds	r1, r2, r2
 8005a9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a9c:	415b      	adcs	r3, r3
 8005a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	1851      	adds	r1, r2, r1
 8005aa8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aaa:	4649      	mov	r1, r9
 8005aac:	414b      	adcs	r3, r1
 8005aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005abc:	4659      	mov	r1, fp
 8005abe:	00cb      	lsls	r3, r1, #3
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac6:	4651      	mov	r1, sl
 8005ac8:	00ca      	lsls	r2, r1, #3
 8005aca:	4610      	mov	r0, r2
 8005acc:	4619      	mov	r1, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad8:	464b      	mov	r3, r9
 8005ada:	460a      	mov	r2, r1
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005af0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af8:	460b      	mov	r3, r1
 8005afa:	18db      	adds	r3, r3, r3
 8005afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afe:	4613      	mov	r3, r2
 8005b00:	eb42 0303 	adc.w	r3, r2, r3
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b0e:	f7fa fbaf 	bl	8000270 <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005b18:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	2164      	movs	r1, #100	@ 0x64
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	3332      	adds	r3, #50	@ 0x32
 8005b2a:	4a08      	ldr	r2, [pc, #32]	@ (8005b4c <UART_SetConfig+0x2d4>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f003 0207 	and.w	r2, r3, #7
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4422      	add	r2, r4
 8005b3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b40:	e106      	b.n	8005d50 <UART_SetConfig+0x4d8>
 8005b42:	bf00      	nop
 8005b44:	40011000 	.word	0x40011000
 8005b48:	40011400 	.word	0x40011400
 8005b4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b62:	4642      	mov	r2, r8
 8005b64:	464b      	mov	r3, r9
 8005b66:	1891      	adds	r1, r2, r2
 8005b68:	6239      	str	r1, [r7, #32]
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b72:	4641      	mov	r1, r8
 8005b74:	1854      	adds	r4, r2, r1
 8005b76:	4649      	mov	r1, r9
 8005b78:	eb43 0501 	adc.w	r5, r3, r1
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	00eb      	lsls	r3, r5, #3
 8005b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b8a:	00e2      	lsls	r2, r4, #3
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	461d      	mov	r5, r3
 8005b90:	4643      	mov	r3, r8
 8005b92:	18e3      	adds	r3, r4, r3
 8005b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b98:	464b      	mov	r3, r9
 8005b9a:	eb45 0303 	adc.w	r3, r5, r3
 8005b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	008b      	lsls	r3, r1, #2
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc8:	4621      	mov	r1, r4
 8005bca:	008a      	lsls	r2, r1, #2
 8005bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bd0:	f7fa fb4e 	bl	8000270 <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4b60      	ldr	r3, [pc, #384]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005bda:	fba3 2302 	umull	r2, r3, r3, r2
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	011c      	lsls	r4, r3, #4
 8005be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	1891      	adds	r1, r2, r2
 8005bfa:	61b9      	str	r1, [r7, #24]
 8005bfc:	415b      	adcs	r3, r3
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c04:	4641      	mov	r1, r8
 8005c06:	1851      	adds	r1, r2, r1
 8005c08:	6139      	str	r1, [r7, #16]
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	414b      	adcs	r3, r1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	00cb      	lsls	r3, r1, #3
 8005c20:	4651      	mov	r1, sl
 8005c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c26:	4651      	mov	r1, sl
 8005c28:	00ca      	lsls	r2, r1, #3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4642      	mov	r2, r8
 8005c32:	189b      	adds	r3, r3, r2
 8005c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c38:	464b      	mov	r3, r9
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	eb42 0303 	adc.w	r3, r2, r3
 8005c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	008b      	lsls	r3, r1, #2
 8005c60:	4641      	mov	r1, r8
 8005c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c66:	4641      	mov	r1, r8
 8005c68:	008a      	lsls	r2, r1, #2
 8005c6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c6e:	f7fa faff 	bl	8000270 <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	4b38      	ldr	r3, [pc, #224]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2264      	movs	r2, #100	@ 0x64
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	1acb      	subs	r3, r1, r3
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	3332      	adds	r3, #50	@ 0x32
 8005c8c:	4a33      	ldr	r2, [pc, #204]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c98:	441c      	add	r4, r3
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ca2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ca4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	1891      	adds	r1, r2, r2
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	415b      	adcs	r3, r3
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb8:	4641      	mov	r1, r8
 8005cba:	1851      	adds	r1, r2, r1
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	414b      	adcs	r3, r1
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	00cb      	lsls	r3, r1, #3
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cda:	4651      	mov	r1, sl
 8005cdc:	00ca      	lsls	r2, r1, #3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	189b      	adds	r3, r3, r2
 8005ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cea:	464b      	mov	r3, r9
 8005cec:	460a      	mov	r2, r1
 8005cee:	eb42 0303 	adc.w	r3, r2, r3
 8005cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	008b      	lsls	r3, r1, #2
 8005d10:	4641      	mov	r1, r8
 8005d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d16:	4641      	mov	r1, r8
 8005d18:	008a      	lsls	r2, r1, #2
 8005d1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d1e:	f7fa faa7 	bl	8000270 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	@ 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	3332      	adds	r3, #50	@ 0x32
 8005d3a:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <UART_SetConfig+0x4e4>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4422      	add	r2, r4
 8005d4e:	609a      	str	r2, [r3, #8]
}
 8005d50:	bf00      	nop
 8005d52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d56:	46bd      	mov	sp, r7
 8005d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d5c:	51eb851f 	.word	0x51eb851f

08005d60 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005d60:	b084      	sub	sp, #16
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	f107 001c 	add.w	r0, r7, #28
 8005d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005d76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005d78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005d7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005d7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005d82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005d86:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005d8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005d9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	b004      	add	sp, #16
 8005db4:	4770      	bx	lr

08005db6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e48:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005e4e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005e54:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005e64:	f023 030f 	bic.w	r3, r3, #15
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	b2db      	uxtb	r3, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	4413      	add	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
}  
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ee4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005eea:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ef0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efc:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0

}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b088      	sub	sp, #32
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f24:	2310      	movs	r3, #16
 8005f26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f28:	2340      	movs	r3, #64	@ 0x40
 8005f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f36:	f107 0308 	add.w	r3, r7, #8
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ff74 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f46:	2110      	movs	r1, #16
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa19 	bl	8006380 <SDMMC_GetCmdResp1>
 8005f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f50:	69fb      	ldr	r3, [r7, #28]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b088      	sub	sp, #32
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005f68:	2311      	movs	r3, #17
 8005f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f6c:	2340      	movs	r3, #64	@ 0x40
 8005f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f7a:	f107 0308 	add.w	r3, r7, #8
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff ff52 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8a:	2111      	movs	r1, #17
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f9f7 	bl	8006380 <SDMMC_GetCmdResp1>
 8005f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f94:	69fb      	ldr	r3, [r7, #28]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b088      	sub	sp, #32
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005fac:	2312      	movs	r3, #18
 8005fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fb0:	2340      	movs	r3, #64	@ 0x40
 8005fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fbe:	f107 0308 	add.w	r3, r7, #8
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff ff30 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fce:	2112      	movs	r1, #18
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f9d5 	bl	8006380 <SDMMC_GetCmdResp1>
 8005fd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b088      	sub	sp, #32
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005ff0:	2318      	movs	r3, #24
 8005ff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ff4:	2340      	movs	r3, #64	@ 0x40
 8005ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006000:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006002:	f107 0308 	add.w	r3, r7, #8
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ff0e 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800600e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006012:	2118      	movs	r1, #24
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9b3 	bl	8006380 <SDMMC_GetCmdResp1>
 800601a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800601c:	69fb      	ldr	r3, [r7, #28]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b088      	sub	sp, #32
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006034:	2319      	movs	r3, #25
 8006036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006038:	2340      	movs	r3, #64	@ 0x40
 800603a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006044:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006046:	f107 0308 	add.w	r3, r7, #8
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff feec 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006056:	2119      	movs	r1, #25
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f991 	bl	8006380 <SDMMC_GetCmdResp1>
 800605e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006060:	69fb      	ldr	r3, [r7, #28]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006078:	230c      	movs	r3, #12
 800607a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800607c:	2340      	movs	r3, #64	@ 0x40
 800607e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006088:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff feca 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006096:	4a05      	ldr	r2, [pc, #20]	@ (80060ac <SDMMC_CmdStopTransfer+0x40>)
 8006098:	210c      	movs	r1, #12
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f970 	bl	8006380 <SDMMC_GetCmdResp1>
 80060a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060a2:	69fb      	ldr	r3, [r7, #28]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	05f5e100 	.word	0x05f5e100

080060b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	@ 0x28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80060c0:	2307      	movs	r3, #7
 80060c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060c4:	2340      	movs	r3, #64	@ 0x40
 80060c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060d2:	f107 0310 	add.w	r3, r7, #16
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fea6 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80060de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e2:	2107      	movs	r1, #7
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f94b 	bl	8006380 <SDMMC_GetCmdResp1>
 80060ea:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3728      	adds	r7, #40	@ 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b088      	sub	sp, #32
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800610e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006112:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006114:	f107 0308 	add.w	r3, r7, #8
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fe85 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fb65 	bl	80067f0 <SDMMC_GetCmdError>
 8006126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006128:	69fb      	ldr	r3, [r7, #28]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3720      	adds	r7, #32
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b088      	sub	sp, #32
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800613a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800613e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006140:	2308      	movs	r3, #8
 8006142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006144:	2340      	movs	r3, #64	@ 0x40
 8006146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800614c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff fe66 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 faf8 	bl	8006754 <SDMMC_GetCmdResp7>
 8006164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006166:	69fb      	ldr	r3, [r7, #28]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800617e:	2337      	movs	r3, #55	@ 0x37
 8006180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006182:	2340      	movs	r3, #64	@ 0x40
 8006184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800618a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800618e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fe47 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800619c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a0:	2137      	movs	r1, #55	@ 0x37
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8ec 	bl	8006380 <SDMMC_GetCmdResp1>
 80061a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061aa:	69fb      	ldr	r3, [r7, #28]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80061ca:	2329      	movs	r3, #41	@ 0x29
 80061cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061ce:	2340      	movs	r3, #64	@ 0x40
 80061d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe21 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f9ff 	bl	80065ec <SDMMC_GetCmdResp3>
 80061ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061f0:	69fb      	ldr	r3, [r7, #28]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b088      	sub	sp, #32
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006208:	2306      	movs	r3, #6
 800620a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800620c:	2340      	movs	r3, #64	@ 0x40
 800620e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006218:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800621a:	f107 0308 	add.w	r3, r7, #8
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fe02 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800622a:	2106      	movs	r1, #6
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8a7 	bl	8006380 <SDMMC_GetCmdResp1>
 8006232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006234:	69fb      	ldr	r3, [r7, #28]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800624a:	2333      	movs	r3, #51	@ 0x33
 800624c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800624e:	2340      	movs	r3, #64	@ 0x40
 8006250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800625a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800625c:	f107 0308 	add.w	r3, r7, #8
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff fde1 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626c:	2133      	movs	r1, #51	@ 0x33
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f886 	bl	8006380 <SDMMC_GetCmdResp1>
 8006274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006276:	69fb      	ldr	r3, [r7, #28]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800628c:	2302      	movs	r3, #2
 800628e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006290:	23c0      	movs	r3, #192	@ 0xc0
 8006292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800629c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800629e:	f107 0308 	add.w	r3, r7, #8
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fdc0 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f956 	bl	800655c <SDMMC_GetCmdResp2>
 80062b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062b2:	69fb      	ldr	r3, [r7, #28]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80062ca:	2309      	movs	r3, #9
 80062cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80062ce:	23c0      	movs	r3, #192	@ 0xc0
 80062d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fda1 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f937 	bl	800655c <SDMMC_GetCmdResp2>
 80062ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062f0:	69fb      	ldr	r3, [r7, #28]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b088      	sub	sp, #32
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006308:	2303      	movs	r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800630c:	2340      	movs	r3, #64	@ 0x40
 800630e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006318:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800631a:	f107 0308 	add.w	r3, r7, #8
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff fd82 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	2103      	movs	r1, #3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f99c 	bl	8006668 <SDMMC_GetCmdResp6>
 8006330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006332:	69fb      	ldr	r3, [r7, #28]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800634a:	230d      	movs	r3, #13
 800634c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800634e:	2340      	movs	r3, #64	@ 0x40
 8006350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800635a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800635c:	f107 0308 	add.w	r3, r7, #8
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fd61 	bl	8005e2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636c:	210d      	movs	r1, #13
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f806 	bl	8006380 <SDMMC_GetCmdResp1>
 8006374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006376:	69fb      	ldr	r3, [r7, #28]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	460b      	mov	r3, r1
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800638e:	4b70      	ldr	r3, [pc, #448]	@ (8006550 <SDMMC_GetCmdResp1+0x1d0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a70      	ldr	r2, [pc, #448]	@ (8006554 <SDMMC_GetCmdResp1+0x1d4>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	0a5a      	lsrs	r2, r3, #9
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	1e5a      	subs	r2, r3, #1
 80063a6:	61fa      	str	r2, [r7, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80063b0:	e0c9      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0ef      	beq.n	80063a2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1ea      	bne.n	80063a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2204      	movs	r2, #4
 80063dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063de:	2304      	movs	r3, #4
 80063e0:	e0b1      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0a6      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	22c5      	movs	r2, #197	@ 0xc5
 80063fc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7ff fd3d 	bl	8005e7e <SDIO_GetCommandResponse>
 8006404:	4603      	mov	r3, r0
 8006406:	461a      	mov	r2, r3
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	4293      	cmp	r3, r2
 800640c:	d001      	beq.n	8006412 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800640e:	2301      	movs	r3, #1
 8006410:	e099      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006412:	2100      	movs	r1, #0
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7ff fd3f 	bl	8005e98 <SDIO_GetResponse>
 800641a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4b4e      	ldr	r3, [pc, #312]	@ (8006558 <SDMMC_GetCmdResp1+0x1d8>)
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006426:	2300      	movs	r3, #0
 8006428:	e08d      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da02      	bge.n	8006436 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006430:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006434:	e087      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006440:	2340      	movs	r3, #64	@ 0x40
 8006442:	e080      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800644e:	2380      	movs	r3, #128	@ 0x80
 8006450:	e079      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800645c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006460:	e071      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800646c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006470:	e069      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800647c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006480:	e061      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800648c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006490:	e059      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800649c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064a0:	e051      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80064ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064b0:	e049      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80064bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80064c0:	e041      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80064cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064d0:	e039      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80064dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80064e0:	e031      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80064ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80064f0:	e029      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80064fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006500:	e021      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800650c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006510:	e019      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800651c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006520:	e011      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800652c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006530:	e009      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800653c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006540:	e001      	b.n	8006546 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000004 	.word	0x20000004
 8006554:	10624dd3 	.word	0x10624dd3
 8006558:	fdffe008 	.word	0xfdffe008

0800655c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006564:	4b1f      	ldr	r3, [pc, #124]	@ (80065e4 <SDMMC_GetCmdResp2+0x88>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1f      	ldr	r2, [pc, #124]	@ (80065e8 <SDMMC_GetCmdResp2+0x8c>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0a5b      	lsrs	r3, r3, #9
 8006570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006574:	fb02 f303 	mul.w	r3, r2, r3
 8006578:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1e5a      	subs	r2, r3, #1
 800657e:	60fa      	str	r2, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006584:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006588:	e026      	b.n	80065d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0ef      	beq.n	800657a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1ea      	bne.n	800657a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2204      	movs	r2, #4
 80065b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065b6:	2304      	movs	r3, #4
 80065b8:	e00e      	b.n	80065d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e003      	b.n	80065d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	22c5      	movs	r2, #197	@ 0xc5
 80065d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	20000004 	.word	0x20000004
 80065e8:	10624dd3 	.word	0x10624dd3

080065ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006660 <SDMMC_GetCmdResp3+0x74>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006664 <SDMMC_GetCmdResp3+0x78>)
 80065fa:	fba2 2303 	umull	r2, r3, r2, r3
 80065fe:	0a5b      	lsrs	r3, r3, #9
 8006600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1e5a      	subs	r2, r3, #1
 800660e:	60fa      	str	r2, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006614:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006618:	e01b      	b.n	8006652 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0ef      	beq.n	800660a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ea      	bne.n	800660a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006646:	2304      	movs	r3, #4
 8006648:	e003      	b.n	8006652 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	22c5      	movs	r2, #197	@ 0xc5
 800664e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000004 	.word	0x20000004
 8006664:	10624dd3 	.word	0x10624dd3

08006668 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	460b      	mov	r3, r1
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006676:	4b35      	ldr	r3, [pc, #212]	@ (800674c <SDMMC_GetCmdResp6+0xe4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a35      	ldr	r2, [pc, #212]	@ (8006750 <SDMMC_GetCmdResp6+0xe8>)
 800667c:	fba2 2303 	umull	r2, r3, r2, r3
 8006680:	0a5b      	lsrs	r3, r3, #9
 8006682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006686:	fb02 f303 	mul.w	r3, r2, r3
 800668a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	61fa      	str	r2, [r7, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006696:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800669a:	e052      	b.n	8006742 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0ef      	beq.n	800668c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ea      	bne.n	800668c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2204      	movs	r2, #4
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066c8:	2304      	movs	r3, #4
 80066ca:	e03a      	b.n	8006742 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066de:	2301      	movs	r3, #1
 80066e0:	e02f      	b.n	8006742 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fbcb 	bl	8005e7e <SDIO_GetCommandResponse>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d001      	beq.n	80066f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e025      	b.n	8006742 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	22c5      	movs	r2, #197	@ 0xc5
 80066fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066fc:	2100      	movs	r1, #0
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff fbca 	bl	8005e98 <SDIO_GetResponse>
 8006704:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	b29a      	uxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800671a:	2300      	movs	r3, #0
 800671c:	e011      	b.n	8006742 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800672c:	e009      	b.n	8006742 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800673c:	e001      	b.n	8006742 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800673e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000004 	.word	0x20000004
 8006750:	10624dd3 	.word	0x10624dd3

08006754 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800675c:	4b22      	ldr	r3, [pc, #136]	@ (80067e8 <SDMMC_GetCmdResp7+0x94>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <SDMMC_GetCmdResp7+0x98>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	0a5b      	lsrs	r3, r3, #9
 8006768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676c:	fb02 f303 	mul.w	r3, r2, r3
 8006770:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1e5a      	subs	r2, r3, #1
 8006776:	60fa      	str	r2, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800677c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006780:	e02c      	b.n	80067dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006786:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0ef      	beq.n	8006772 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1ea      	bne.n	8006772 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2204      	movs	r2, #4
 80067ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067ae:	2304      	movs	r3, #4
 80067b0:	e014      	b.n	80067dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e009      	b.n	80067dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2240      	movs	r2, #64	@ 0x40
 80067d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80067da:	2300      	movs	r3, #0
  
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	20000004 	.word	0x20000004
 80067ec:	10624dd3 	.word	0x10624dd3

080067f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067f8:	4b11      	ldr	r3, [pc, #68]	@ (8006840 <SDMMC_GetCmdError+0x50>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a11      	ldr	r2, [pc, #68]	@ (8006844 <SDMMC_GetCmdError+0x54>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	0a5b      	lsrs	r3, r3, #9
 8006804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006808:	fb02 f303 	mul.w	r3, r2, r3
 800680c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1e5a      	subs	r2, r3, #1
 8006812:	60fa      	str	r2, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006818:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800681c:	e009      	b.n	8006832 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f1      	beq.n	800680e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	22c5      	movs	r2, #197	@ 0xc5
 800682e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000004 	.word	0x20000004
 8006844:	10624dd3 	.word	0x10624dd3

08006848 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800684c:	4904      	ldr	r1, [pc, #16]	@ (8006860 <MX_FATFS_Init+0x18>)
 800684e:	4805      	ldr	r0, [pc, #20]	@ (8006864 <MX_FATFS_Init+0x1c>)
 8006850:	f003 fbde 	bl	800a010 <FATFS_LinkDriver>
 8006854:	4603      	mov	r3, r0
 8006856:	461a      	mov	r2, r3
 8006858:	4b03      	ldr	r3, [pc, #12]	@ (8006868 <MX_FATFS_Init+0x20>)
 800685a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800685c:	bf00      	nop
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20000d4c 	.word	0x20000d4c
 8006864:	0800f0a0 	.word	0x0800f0a0
 8006868:	20000d48 	.word	0x20000d48

0800686c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006870:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006872:	4618      	mov	r0, r3
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006886:	f000 f896 	bl	80069b6 <BSP_SD_IsDetected>
 800688a:	4603      	mov	r3, r0
 800688c:	2b01      	cmp	r3, #1
 800688e:	d001      	beq.n	8006894 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e012      	b.n	80068ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006894:	480b      	ldr	r0, [pc, #44]	@ (80068c4 <BSP_SD_Init+0x48>)
 8006896:	f7fc fff3 	bl	8003880 <HAL_SD_Init>
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80068a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80068a8:	4806      	ldr	r0, [pc, #24]	@ (80068c4 <BSP_SD_Init+0x48>)
 80068aa:	f7fd fdb9 	bl	8004420 <HAL_SD_ConfigWideBusOperation>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80068b8:	79fb      	ldrb	r3, [r7, #7]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000b6c 	.word	0x20000b6c

080068c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	68f9      	ldr	r1, [r7, #12]
 80068de:	4806      	ldr	r0, [pc, #24]	@ (80068f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80068e0:	f7fd f876 	bl	80039d0 <HAL_SD_ReadBlocks_DMA>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000b6c 	.word	0x20000b6c

080068fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	4806      	ldr	r0, [pc, #24]	@ (800692c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006914:	f7fd f93e 	bl	8003b94 <HAL_SD_WriteBlocks_DMA>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000b6c 	.word	0x20000b6c

08006930 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006934:	4805      	ldr	r0, [pc, #20]	@ (800694c <BSP_SD_GetCardState+0x1c>)
 8006936:	f7fd fe0d 	bl	8004554 <HAL_SD_GetCardState>
 800693a:	4603      	mov	r3, r0
 800693c:	2b04      	cmp	r3, #4
 800693e:	bf14      	ite	ne
 8006940:	2301      	movne	r3, #1
 8006942:	2300      	moveq	r3, #0
 8006944:	b2db      	uxtb	r3, r3
}
 8006946:	4618      	mov	r0, r3
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000b6c 	.word	0x20000b6c

08006950 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4803      	ldr	r0, [pc, #12]	@ (8006968 <BSP_SD_GetCardInfo+0x18>)
 800695c:	f7fd fd34 	bl	80043c8 <HAL_SD_GetCardInfo>
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000b6c 	.word	0x20000b6c

0800696c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006974:	f000 f818 	bl	80069a8 <BSP_SD_AbortCallback>
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006988:	f000 f9b4 	bl	8006cf4 <BSP_SD_WriteCpltCallback>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800699c:	f000 f9bc 	bl	8006d18 <BSP_SD_ReadCpltCallback>
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0

}
 80069ac:	bf00      	nop
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80069bc:	2301      	movs	r3, #1
 80069be:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80069c0:	f000 f80c 	bl	80069dc <BSP_PlatformIsDetected>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80069ca:	2300      	movs	r3, #0
 80069cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	b2db      	uxtb	r3, r3
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80069e2:	2301      	movs	r3, #1
 80069e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80069e6:	2108      	movs	r1, #8
 80069e8:	4806      	ldr	r0, [pc, #24]	@ (8006a04 <BSP_PlatformIsDetected+0x28>)
 80069ea:	f7fb fbc1 	bl	8002170 <HAL_GPIO_ReadPin>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80069f4:	2300      	movs	r3, #0
 80069f6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80069f8:	79fb      	ldrb	r3, [r7, #7]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	40020c00 	.word	0x40020c00

08006a08 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8006a10:	f003 fcee 	bl	800a3f0 <osKernelGetTickCount>
 8006a14:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8006a16:	e006      	b.n	8006a26 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a18:	f7ff ff8a 	bl	8006930 <BSP_SD_GetCardState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e009      	b.n	8006a3a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8006a26:	f003 fce3 	bl	800a3f0 <osKernelGetTickCount>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d8f0      	bhi.n	8006a18 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <SD_CheckStatus+0x38>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a54:	f7ff ff6c 	bl	8006930 <BSP_SD_GetCardState>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006a5e:	4b07      	ldr	r3, [pc, #28]	@ (8006a7c <SD_CheckStatus+0x38>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	4b04      	ldr	r3, [pc, #16]	@ (8006a7c <SD_CheckStatus+0x38>)
 8006a6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006a6e:	4b03      	ldr	r3, [pc, #12]	@ (8006a7c <SD_CheckStatus+0x38>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b2db      	uxtb	r3, r3
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	2000000d 	.word	0x2000000d

08006a80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006afc <SD_initialize+0x7c>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006a90:	f003 fc66 	bl	800a360 <osKernelGetState>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d129      	bne.n	8006aee <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006a9a:	f7ff feef 	bl	800687c <BSP_SD_Init>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d107      	bne.n	8006ab4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff ffcc 	bl	8006a44 <SD_CheckStatus>
 8006aac:	4603      	mov	r3, r0
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b12      	ldr	r3, [pc, #72]	@ (8006afc <SD_initialize+0x7c>)
 8006ab2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006ab4:	4b11      	ldr	r3, [pc, #68]	@ (8006afc <SD_initialize+0x7c>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d017      	beq.n	8006aee <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8006abe:	4b10      	ldr	r3, [pc, #64]	@ (8006b00 <SD_initialize+0x80>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d107      	bne.n	8006ad6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2102      	movs	r1, #2
 8006aca:	200a      	movs	r0, #10
 8006acc:	f003 fe96 	bl	800a7fc <osMessageQueueNew>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8006b00 <SD_initialize+0x80>)
 8006ad4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <SD_initialize+0x80>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d107      	bne.n	8006aee <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006ade:	4b07      	ldr	r3, [pc, #28]	@ (8006afc <SD_initialize+0x7c>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4b04      	ldr	r3, [pc, #16]	@ (8006afc <SD_initialize+0x7c>)
 8006aec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006aee:	4b03      	ldr	r3, [pc, #12]	@ (8006afc <SD_initialize+0x7c>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	b2db      	uxtb	r3, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	2000000d 	.word	0x2000000d
 8006b00:	20000f88 	.word	0x20000f88

08006b04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff ff97 	bl	8006a44 <SD_CheckStatus>
 8006b16:	4603      	mov	r3, r0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006b34:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006b38:	f7ff ff66 	bl	8006a08 <SD_CheckStatusWithTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	da01      	bge.n	8006b46 <SD_read+0x26>
  {
    return res;
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
 8006b44:	e02f      	b.n	8006ba6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	68b8      	ldr	r0, [r7, #8]
 8006b4c:	f7ff febc 	bl	80068c8 <BSP_SD_ReadBlocks_DMA>
 8006b50:	4603      	mov	r3, r0
 8006b52:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8006b54:	7fbb      	ldrb	r3, [r7, #30]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d124      	bne.n	8006ba4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006b5a:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <SD_read+0x90>)
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	f107 0112 	add.w	r1, r7, #18
 8006b62:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006b66:	2200      	movs	r2, #0
 8006b68:	f003 ff1c 	bl	800a9a4 <osMessageQueueGet>
 8006b6c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d117      	bne.n	8006ba4 <SD_read+0x84>
 8006b74:	8a7b      	ldrh	r3, [r7, #18]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d114      	bne.n	8006ba4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8006b7a:	f003 fc39 	bl	800a3f0 <osKernelGetTickCount>
 8006b7e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006b80:	e007      	b.n	8006b92 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b82:	f7ff fed5 	bl	8006930 <BSP_SD_GetCardState>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <SD_read+0x72>
              {
                res = RES_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006b90:	e008      	b.n	8006ba4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006b92:	f003 fc2d 	bl	800a3f0 <osKernelGetTickCount>
 8006b96:	4602      	mov	r2, r0
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d9ee      	bls.n	8006b82 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006ba4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000f88 	.word	0x20000f88

08006bb4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006bc8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006bcc:	f7ff ff1c 	bl	8006a08 <SD_CheckStatusWithTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da01      	bge.n	8006bda <SD_write+0x26>
  {
    return res;
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	e02d      	b.n	8006c36 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	68b8      	ldr	r0, [r7, #8]
 8006be0:	f7ff fe8c 	bl	80068fc <BSP_SD_WriteBlocks_DMA>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d124      	bne.n	8006c34 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006bea:	4b15      	ldr	r3, [pc, #84]	@ (8006c40 <SD_write+0x8c>)
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	f107 0112 	add.w	r1, r7, #18
 8006bf2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f003 fed4 	bl	800a9a4 <osMessageQueueGet>
 8006bfc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d117      	bne.n	8006c34 <SD_write+0x80>
 8006c04:	8a7b      	ldrh	r3, [r7, #18]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d114      	bne.n	8006c34 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8006c0a:	f003 fbf1 	bl	800a3f0 <osKernelGetTickCount>
 8006c0e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006c10:	e007      	b.n	8006c22 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c12:	f7ff fe8d 	bl	8006930 <BSP_SD_GetCardState>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d102      	bne.n	8006c22 <SD_write+0x6e>
          {
            res = RES_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	77fb      	strb	r3, [r7, #31]
            break;
 8006c20:	e008      	b.n	8006c34 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006c22:	f003 fbe5 	bl	800a3f0 <osKernelGetTickCount>
 8006c26:	4602      	mov	r2, r0
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d9ee      	bls.n	8006c12 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8006c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000f88 	.word	0x20000f88

08006c44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08c      	sub	sp, #48	@ 0x30
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	603a      	str	r2, [r7, #0]
 8006c4e:	71fb      	strb	r3, [r7, #7]
 8006c50:	460b      	mov	r3, r1
 8006c52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c5a:	4b25      	ldr	r3, [pc, #148]	@ (8006cf0 <SD_ioctl+0xac>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <SD_ioctl+0x28>
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e03c      	b.n	8006ce6 <SD_ioctl+0xa2>

  switch (cmd)
 8006c6c:	79bb      	ldrb	r3, [r7, #6]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d834      	bhi.n	8006cdc <SD_ioctl+0x98>
 8006c72:	a201      	add	r2, pc, #4	@ (adr r2, 8006c78 <SD_ioctl+0x34>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c91 	.word	0x08006c91
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006cc3 	.word	0x08006cc3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006c8e:	e028      	b.n	8006ce2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c90:	f107 030c 	add.w	r3, r7, #12
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fe5b 	bl	8006950 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006ca6:	e01c      	b.n	8006ce2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ca8:	f107 030c 	add.w	r3, r7, #12
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fe4f 	bl	8006950 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006cc0:	e00f      	b.n	8006ce2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006cc2:	f107 030c 	add.w	r3, r7, #12
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fe42 	bl	8006950 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	0a5a      	lsrs	r2, r3, #9
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006cda:	e002      	b.n	8006ce2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006cdc:	2304      	movs	r3, #4
 8006cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3730      	adds	r7, #48	@ 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000000d 	.word	0x2000000d

08006cf4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8006cfe:	4b05      	ldr	r3, [pc, #20]	@ (8006d14 <BSP_SD_WriteCpltCallback+0x20>)
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	1db9      	adds	r1, r7, #6
 8006d04:	2300      	movs	r3, #0
 8006d06:	2200      	movs	r2, #0
 8006d08:	f003 fdec 	bl	800a8e4 <osMessageQueuePut>
#endif
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000f88 	.word	0x20000f88

08006d18 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8006d22:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <BSP_SD_ReadCpltCallback+0x20>)
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	1db9      	adds	r1, r7, #6
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f003 fdda 	bl	800a8e4 <osMessageQueuePut>
#endif
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000f88 	.word	0x20000f88

08006d3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	4a08      	ldr	r2, [pc, #32]	@ (8006d6c <disk_status+0x30>)
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	79fa      	ldrb	r2, [r7, #7]
 8006d54:	4905      	ldr	r1, [pc, #20]	@ (8006d6c <disk_status+0x30>)
 8006d56:	440a      	add	r2, r1
 8006d58:	7a12      	ldrb	r2, [r2, #8]
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4798      	blx	r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20000fb4 	.word	0x20000fb4

08006d70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	4a0e      	ldr	r2, [pc, #56]	@ (8006dbc <disk_initialize+0x4c>)
 8006d82:	5cd3      	ldrb	r3, [r2, r3]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d114      	bne.n	8006db2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006dbc <disk_initialize+0x4c>)
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	4909      	ldr	r1, [pc, #36]	@ (8006dbc <disk_initialize+0x4c>)
 8006d98:	440a      	add	r2, r1
 8006d9a:	7a12      	ldrb	r2, [r2, #8]
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	4a03      	ldr	r2, [pc, #12]	@ (8006dbc <disk_initialize+0x4c>)
 8006dae:	2101      	movs	r1, #1
 8006db0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20000fb4 	.word	0x20000fb4

08006dc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006dc0:	b590      	push	{r4, r7, lr}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006dfc <disk_read+0x3c>)
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	689c      	ldr	r4, [r3, #8]
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	4a07      	ldr	r2, [pc, #28]	@ (8006dfc <disk_read+0x3c>)
 8006de0:	4413      	add	r3, r2
 8006de2:	7a18      	ldrb	r0, [r3, #8]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	47a0      	blx	r4
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]
  return res;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd90      	pop	{r4, r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000fb4 	.word	0x20000fb4

08006e00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <disk_write+0x3c>)
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68dc      	ldr	r4, [r3, #12]
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	4a07      	ldr	r2, [pc, #28]	@ (8006e3c <disk_write+0x3c>)
 8006e20:	4413      	add	r3, r2
 8006e22:	7a18      	ldrb	r0, [r3, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	47a0      	blx	r4
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd90      	pop	{r4, r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000fb4 	.word	0x20000fb4

08006e40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	b21a      	sxth	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b21b      	sxth	r3, r3
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	b21b      	sxth	r3, r3
 8006e62:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006e64:	89fb      	ldrh	r3, [r7, #14]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3303      	adds	r3, #3
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	3202      	adds	r2, #2
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	3201      	adds	r2, #1
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	7812      	ldrb	r2, [r2, #0]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
	return rv;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	887a      	ldrh	r2, [r7, #2]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	887b      	ldrh	r3, [r7, #2]
 8006ed2:	0a1b      	lsrs	r3, r3, #8
 8006ed4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	887a      	ldrh	r2, [r7, #2]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	0a1b      	lsrs	r3, r3, #8
 8006f1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006f46:	b480      	push	{r7}
 8006f48:	b087      	sub	sp, #28
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00d      	beq.n	8006f7c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	1c53      	adds	r3, r2, #1
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	1c59      	adds	r1, r3, #1
 8006f6a:	6179      	str	r1, [r7, #20]
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	607b      	str	r3, [r7, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f1      	bne.n	8006f60 <mem_cpy+0x1a>
	}
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	617a      	str	r2, [r7, #20]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f3      	bne.n	8006f98 <mem_set+0x10>
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006fbe:	b480      	push	{r7}
 8006fc0:	b089      	sub	sp, #36	@ 0x24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	61fa      	str	r2, [r7, #28]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	61ba      	str	r2, [r7, #24]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	1acb      	subs	r3, r1, r3
 8006fea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <mem_cmp+0x40>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0eb      	beq.n	8006fd6 <mem_cmp+0x18>

	return r;
 8006ffe:	697b      	ldr	r3, [r7, #20]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3724      	adds	r7, #36	@ 0x24
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007016:	e002      	b.n	800701e <chk_chr+0x12>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3301      	adds	r3, #1
 800701c:	607b      	str	r3, [r7, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <chk_chr+0x26>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	4293      	cmp	r3, r2
 8007030:	d1f2      	bne.n	8007018 <chk_chr+0xc>
	return *str;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	781b      	ldrb	r3, [r3, #0]
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <lock_fs+0x22>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	4618      	mov	r0, r3
 8007056:	f003 f8fa 	bl	800a24e <ff_req_grant>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <lock_fs+0x22>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <lock_fs+0x24>
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00d      	beq.n	800709c <unlock_fs+0x2e>
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	2b0c      	cmp	r3, #12
 8007084:	d00a      	beq.n	800709c <unlock_fs+0x2e>
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	2b0b      	cmp	r3, #11
 800708a:	d007      	beq.n	800709c <unlock_fs+0x2e>
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	2b0f      	cmp	r3, #15
 8007090:	d004      	beq.n	800709c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	4618      	mov	r0, r3
 8007098:	f003 f8ee 	bl	800a278 <ff_rel_grant>
	}
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e029      	b.n	800710c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80070b8:	4a27      	ldr	r2, [pc, #156]	@ (8007158 <chk_lock+0xb4>)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	4413      	add	r3, r2
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01d      	beq.n	8007102 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070c6:	4a24      	ldr	r2, [pc, #144]	@ (8007158 <chk_lock+0xb4>)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	4413      	add	r3, r2
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d116      	bne.n	8007106 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80070d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007158 <chk_lock+0xb4>)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d10c      	bne.n	8007106 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80070ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007158 <chk_lock+0xb4>)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	4413      	add	r3, r2
 80070f4:	3308      	adds	r3, #8
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d102      	bne.n	8007106 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007100:	e007      	b.n	8007112 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007102:	2301      	movs	r3, #1
 8007104:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3301      	adds	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d9d2      	bls.n	80070b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d109      	bne.n	800712c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <chk_lock+0x80>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d101      	bne.n	8007128 <chk_lock+0x84>
 8007124:	2300      	movs	r3, #0
 8007126:	e010      	b.n	800714a <chk_lock+0xa6>
 8007128:	2312      	movs	r3, #18
 800712a:	e00e      	b.n	800714a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d108      	bne.n	8007144 <chk_lock+0xa0>
 8007132:	4a09      	ldr	r2, [pc, #36]	@ (8007158 <chk_lock+0xb4>)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	4413      	add	r3, r2
 800713a:	330c      	adds	r3, #12
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007142:	d101      	bne.n	8007148 <chk_lock+0xa4>
 8007144:	2310      	movs	r3, #16
 8007146:	e000      	b.n	800714a <chk_lock+0xa6>
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000f94 	.word	0x20000f94

0800715c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e002      	b.n	800716e <enq_lock+0x12>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3301      	adds	r3, #1
 800716c:	607b      	str	r3, [r7, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d806      	bhi.n	8007182 <enq_lock+0x26>
 8007174:	4a09      	ldr	r2, [pc, #36]	@ (800719c <enq_lock+0x40>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	4413      	add	r3, r2
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f2      	bne.n	8007168 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b02      	cmp	r3, #2
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20000f94 	.word	0x20000f94

080071a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	e01f      	b.n	80071f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80071b0:	4a41      	ldr	r2, [pc, #260]	@ (80072b8 <inc_lock+0x118>)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	4413      	add	r3, r2
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d113      	bne.n	80071ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80071c2:	4a3d      	ldr	r2, [pc, #244]	@ (80072b8 <inc_lock+0x118>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	4413      	add	r3, r2
 80071ca:	3304      	adds	r3, #4
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d109      	bne.n	80071ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80071d6:	4a38      	ldr	r2, [pc, #224]	@ (80072b8 <inc_lock+0x118>)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	3308      	adds	r3, #8
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d006      	beq.n	80071f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3301      	adds	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d9dc      	bls.n	80071b0 <inc_lock+0x10>
 80071f6:	e000      	b.n	80071fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80071f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d132      	bne.n	8007266 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e002      	b.n	800720c <inc_lock+0x6c>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d806      	bhi.n	8007220 <inc_lock+0x80>
 8007212:	4a29      	ldr	r2, [pc, #164]	@ (80072b8 <inc_lock+0x118>)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	4413      	add	r3, r2
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1f2      	bne.n	8007206 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d101      	bne.n	800722a <inc_lock+0x8a>
 8007226:	2300      	movs	r3, #0
 8007228:	e040      	b.n	80072ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4922      	ldr	r1, [pc, #136]	@ (80072b8 <inc_lock+0x118>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	440b      	add	r3, r1
 8007236:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	491e      	ldr	r1, [pc, #120]	@ (80072b8 <inc_lock+0x118>)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	440b      	add	r3, r1
 8007244:	3304      	adds	r3, #4
 8007246:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695a      	ldr	r2, [r3, #20]
 800724c:	491a      	ldr	r1, [pc, #104]	@ (80072b8 <inc_lock+0x118>)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	440b      	add	r3, r1
 8007254:	3308      	adds	r3, #8
 8007256:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007258:	4a17      	ldr	r2, [pc, #92]	@ (80072b8 <inc_lock+0x118>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	011b      	lsls	r3, r3, #4
 800725e:	4413      	add	r3, r2
 8007260:	330c      	adds	r3, #12
 8007262:	2200      	movs	r2, #0
 8007264:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d009      	beq.n	8007280 <inc_lock+0xe0>
 800726c:	4a12      	ldr	r2, [pc, #72]	@ (80072b8 <inc_lock+0x118>)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	4413      	add	r3, r2
 8007274:	330c      	adds	r3, #12
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <inc_lock+0xe0>
 800727c:	2300      	movs	r3, #0
 800727e:	e015      	b.n	80072ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d108      	bne.n	8007298 <inc_lock+0xf8>
 8007286:	4a0c      	ldr	r2, [pc, #48]	@ (80072b8 <inc_lock+0x118>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	4413      	add	r3, r2
 800728e:	330c      	adds	r3, #12
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	3301      	adds	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	e001      	b.n	800729c <inc_lock+0xfc>
 8007298:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800729c:	4906      	ldr	r1, [pc, #24]	@ (80072b8 <inc_lock+0x118>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	440b      	add	r3, r1
 80072a4:	330c      	adds	r3, #12
 80072a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	20000f94 	.word	0x20000f94

080072bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d825      	bhi.n	800731c <dec_lock+0x60>
		n = Files[i].ctr;
 80072d0:	4a17      	ldr	r2, [pc, #92]	@ (8007330 <dec_lock+0x74>)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	4413      	add	r3, r2
 80072d8:	330c      	adds	r3, #12
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80072de:	89fb      	ldrh	r3, [r7, #14]
 80072e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e4:	d101      	bne.n	80072ea <dec_lock+0x2e>
 80072e6:	2300      	movs	r3, #0
 80072e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80072ea:	89fb      	ldrh	r3, [r7, #14]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <dec_lock+0x3a>
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80072f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007330 <dec_lock+0x74>)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	4413      	add	r3, r2
 80072fe:	330c      	adds	r3, #12
 8007300:	89fa      	ldrh	r2, [r7, #14]
 8007302:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007304:	89fb      	ldrh	r3, [r7, #14]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d105      	bne.n	8007316 <dec_lock+0x5a>
 800730a:	4a09      	ldr	r2, [pc, #36]	@ (8007330 <dec_lock+0x74>)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	4413      	add	r3, r2
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	737b      	strb	r3, [r7, #13]
 800731a:	e001      	b.n	8007320 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800731c:	2302      	movs	r3, #2
 800731e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007320:	7b7b      	ldrb	r3, [r7, #13]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000f94 	.word	0x20000f94

08007334 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e010      	b.n	8007364 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007342:	4a0d      	ldr	r2, [pc, #52]	@ (8007378 <clear_lock+0x44>)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	4413      	add	r3, r2
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	429a      	cmp	r2, r3
 8007350:	d105      	bne.n	800735e <clear_lock+0x2a>
 8007352:	4a09      	ldr	r2, [pc, #36]	@ (8007378 <clear_lock+0x44>)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	4413      	add	r3, r2
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3301      	adds	r3, #1
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d9eb      	bls.n	8007342 <clear_lock+0xe>
	}
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	20000f94 	.word	0x20000f94

0800737c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	78db      	ldrb	r3, [r3, #3]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d034      	beq.n	80073fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007394:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7858      	ldrb	r0, [r3, #1]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80073a0:	2301      	movs	r3, #1
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	f7ff fd2c 	bl	8006e00 <disk_write>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	73fb      	strb	r3, [r7, #15]
 80073b2:	e022      	b.n	80073fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d217      	bcs.n	80073fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	789b      	ldrb	r3, [r3, #2]
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	e010      	b.n	80073f4 <sync_window+0x78>
					wsect += fs->fsize;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4413      	add	r3, r2
 80073da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7858      	ldrb	r0, [r3, #1]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80073e6:	2301      	movs	r3, #1
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	f7ff fd09 	bl	8006e00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d8eb      	bhi.n	80073d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d01b      	beq.n	8007454 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff ffad 	bl	800737c <sync_window>
 8007422:	4603      	mov	r3, r0
 8007424:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d113      	bne.n	8007454 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7858      	ldrb	r0, [r3, #1]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007436:	2301      	movs	r3, #1
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	f7ff fcc1 	bl	8006dc0 <disk_read>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
 8007448:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800744a:	2301      	movs	r3, #1
 800744c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	3b02      	subs	r3, #2
 800746c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	3b02      	subs	r3, #2
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d301      	bcc.n	800747e <clust2sect+0x20>
 800747a:	2300      	movs	r3, #0
 800747c:	e008      	b.n	8007490 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	895b      	ldrh	r3, [r3, #10]
 8007482:	461a      	mov	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	fb03 f202 	mul.w	r2, r3, r2
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	4413      	add	r3, r2
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d904      	bls.n	80074bc <get_fat+0x20>
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d302      	bcc.n	80074c2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80074bc:	2301      	movs	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e08e      	b.n	80075e0 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295
 80074c6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d061      	beq.n	8007594 <get_fat+0xf8>
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	dc7b      	bgt.n	80075cc <get_fat+0x130>
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d002      	beq.n	80074de <get_fat+0x42>
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d041      	beq.n	8007560 <get_fat+0xc4>
 80074dc:	e076      	b.n	80075cc <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	0a5b      	lsrs	r3, r3, #9
 80074f4:	4413      	add	r3, r2
 80074f6:	4619      	mov	r1, r3
 80074f8:	6938      	ldr	r0, [r7, #16]
 80074fa:	f7ff ff83 	bl	8007404 <move_window>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d166      	bne.n	80075d2 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	60fa      	str	r2, [r7, #12]
 800750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4413      	add	r3, r2
 8007512:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007516:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	0a5b      	lsrs	r3, r3, #9
 8007520:	4413      	add	r3, r2
 8007522:	4619      	mov	r1, r3
 8007524:	6938      	ldr	r0, [r7, #16]
 8007526:	f7ff ff6d 	bl	8007404 <move_window>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d152      	bne.n	80075d6 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4413      	add	r3, r2
 800753a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	4313      	orrs	r3, r2
 8007544:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <get_fat+0xba>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	091b      	lsrs	r3, r3, #4
 8007554:	e002      	b.n	800755c <get_fat+0xc0>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800755c:	617b      	str	r3, [r7, #20]
			break;
 800755e:	e03f      	b.n	80075e0 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	0a1b      	lsrs	r3, r3, #8
 8007568:	4413      	add	r3, r2
 800756a:	4619      	mov	r1, r3
 800756c:	6938      	ldr	r0, [r7, #16]
 800756e:	f7ff ff49 	bl	8007404 <move_window>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d130      	bne.n	80075da <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007586:	4413      	add	r3, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fc59 	bl	8006e40 <ld_word>
 800758e:	4603      	mov	r3, r0
 8007590:	617b      	str	r3, [r7, #20]
			break;
 8007592:	e025      	b.n	80075e0 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	09db      	lsrs	r3, r3, #7
 800759c:	4413      	add	r3, r2
 800759e:	4619      	mov	r1, r3
 80075a0:	6938      	ldr	r0, [r7, #16]
 80075a2:	f7ff ff2f 	bl	8007404 <move_window>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d118      	bne.n	80075de <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80075ba:	4413      	add	r3, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff fc58 	bl	8006e72 <ld_dword>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80075c8:	617b      	str	r3, [r7, #20]
			break;
 80075ca:	e009      	b.n	80075e0 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80075cc:	2301      	movs	r3, #1
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	e006      	b.n	80075e0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075d2:	bf00      	nop
 80075d4:	e004      	b.n	80075e0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075d6:	bf00      	nop
 80075d8:	e002      	b.n	80075e0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075da:	bf00      	nop
 80075dc:	e000      	b.n	80075e0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075de:	bf00      	nop
		}
	}

	return val;
 80075e0:	697b      	ldr	r3, [r7, #20]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075ea:	b590      	push	{r4, r7, lr}
 80075ec:	b089      	sub	sp, #36	@ 0x24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80075f6:	2302      	movs	r3, #2
 80075f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	f240 80d9 	bls.w	80077b4 <put_fat+0x1ca>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	f080 80d3 	bcs.w	80077b4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b03      	cmp	r3, #3
 8007614:	f000 8096 	beq.w	8007744 <put_fat+0x15a>
 8007618:	2b03      	cmp	r3, #3
 800761a:	f300 80cb 	bgt.w	80077b4 <put_fat+0x1ca>
 800761e:	2b01      	cmp	r3, #1
 8007620:	d002      	beq.n	8007628 <put_fat+0x3e>
 8007622:	2b02      	cmp	r3, #2
 8007624:	d06e      	beq.n	8007704 <put_fat+0x11a>
 8007626:	e0c5      	b.n	80077b4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	4413      	add	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	0a5b      	lsrs	r3, r3, #9
 800763e:	4413      	add	r3, r2
 8007640:	4619      	mov	r1, r3
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fede 	bl	8007404 <move_window>
 8007648:	4603      	mov	r3, r0
 800764a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800764c:	7ffb      	ldrb	r3, [r7, #31]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 80a9 	bne.w	80077a6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	61b9      	str	r1, [r7, #24]
 8007660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007664:	4413      	add	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00d      	beq.n	800768e <put_fat+0xa4>
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b25b      	sxtb	r3, r3
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	b25a      	sxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	b25b      	sxtb	r3, r3
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	b25b      	sxtb	r3, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	b25b      	sxtb	r3, r3
 800768a:	b2db      	uxtb	r3, r3
 800768c:	e001      	b.n	8007692 <put_fat+0xa8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2201      	movs	r2, #1
 800769a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	0a5b      	lsrs	r3, r3, #9
 80076a4:	4413      	add	r3, r2
 80076a6:	4619      	mov	r1, r3
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff feab 	bl	8007404 <move_window>
 80076ae:	4603      	mov	r3, r0
 80076b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076b2:	7ffb      	ldrb	r3, [r7, #31]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d178      	bne.n	80077aa <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c4:	4413      	add	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <put_fat+0xf0>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	091b      	lsrs	r3, r3, #4
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	e00e      	b.n	80076f8 <put_fat+0x10e>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b25b      	sxtb	r3, r3
 80076e0:	f023 030f 	bic.w	r3, r3, #15
 80076e4:	b25a      	sxtb	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	b25b      	sxtb	r3, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b25b      	sxtb	r3, r3
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	70da      	strb	r2, [r3, #3]
			break;
 8007702:	e057      	b.n	80077b4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	0a1b      	lsrs	r3, r3, #8
 800770c:	4413      	add	r3, r2
 800770e:	4619      	mov	r1, r3
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff fe77 	bl	8007404 <move_window>
 8007716:	4603      	mov	r3, r0
 8007718:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800771a:	7ffb      	ldrb	r3, [r7, #31]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d146      	bne.n	80077ae <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800772e:	4413      	add	r3, r2
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	b292      	uxth	r2, r2
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff fbbe 	bl	8006eb8 <st_word>
			fs->wflag = 1;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	70da      	strb	r2, [r3, #3]
			break;
 8007742:	e037      	b.n	80077b4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	09db      	lsrs	r3, r3, #7
 800774c:	4413      	add	r3, r2
 800774e:	4619      	mov	r1, r3
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fe57 	bl	8007404 <move_window>
 8007756:	4603      	mov	r3, r0
 8007758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800775a:	7ffb      	ldrb	r3, [r7, #31]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d128      	bne.n	80077b2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007774:	4413      	add	r3, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fb7b 	bl	8006e72 <ld_dword>
 800777c:	4603      	mov	r3, r0
 800777e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007782:	4323      	orrs	r3, r4
 8007784:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007794:	4413      	add	r3, r2
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fba8 	bl	8006eee <st_dword>
			fs->wflag = 1;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	70da      	strb	r2, [r3, #3]
			break;
 80077a4:	e006      	b.n	80077b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80077b2:	bf00      	nop
		}
	}
	return res;
 80077b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3724      	adds	r7, #36	@ 0x24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd90      	pop	{r4, r7, pc}

080077be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b088      	sub	sp, #32
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d904      	bls.n	80077e4 <remove_chain+0x26>
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d301      	bcc.n	80077e8 <remove_chain+0x2a>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e04b      	b.n	8007880 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00c      	beq.n	8007808 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80077ee:	f04f 32ff 	mov.w	r2, #4294967295
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	69b8      	ldr	r0, [r7, #24]
 80077f6:	f7ff fef8 	bl	80075ea <put_fat>
 80077fa:	4603      	mov	r3, r0
 80077fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <remove_chain+0x4a>
 8007804:	7ffb      	ldrb	r3, [r7, #31]
 8007806:	e03b      	b.n	8007880 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007808:	68b9      	ldr	r1, [r7, #8]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff fe46 	bl	800749c <get_fat>
 8007810:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d031      	beq.n	800787c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <remove_chain+0x64>
 800781e:	2302      	movs	r3, #2
 8007820:	e02e      	b.n	8007880 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007828:	d101      	bne.n	800782e <remove_chain+0x70>
 800782a:	2301      	movs	r3, #1
 800782c:	e028      	b.n	8007880 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800782e:	2200      	movs	r2, #0
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	69b8      	ldr	r0, [r7, #24]
 8007834:	f7ff fed9 	bl	80075ea <put_fat>
 8007838:	4603      	mov	r3, r0
 800783a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800783c:	7ffb      	ldrb	r3, [r7, #31]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <remove_chain+0x88>
 8007842:	7ffb      	ldrb	r3, [r7, #31]
 8007844:	e01c      	b.n	8007880 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	3b02      	subs	r3, #2
 8007850:	429a      	cmp	r2, r3
 8007852:	d20b      	bcs.n	800786c <remove_chain+0xae>
			fs->free_clst++;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	791b      	ldrb	r3, [r3, #4]
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	b2da      	uxtb	r2, r3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	d3c6      	bcc.n	8007808 <remove_chain+0x4a>
 800787a:	e000      	b.n	800787e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800787c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10d      	bne.n	80078ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <create_chain+0x2c>
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d31b      	bcc.n	80078ec <create_chain+0x64>
 80078b4:	2301      	movs	r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	e018      	b.n	80078ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fded 	bl	800749c <get_fat>
 80078c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d801      	bhi.n	80078ce <create_chain+0x46>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e070      	b.n	80079b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d4:	d101      	bne.n	80078da <create_chain+0x52>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	e06a      	b.n	80079b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d201      	bcs.n	80078e8 <create_chain+0x60>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e063      	b.n	80079b0 <create_chain+0x128>
		scl = clst;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	3301      	adds	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d307      	bcc.n	8007910 <create_chain+0x88>
				ncl = 2;
 8007900:	2302      	movs	r3, #2
 8007902:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	429a      	cmp	r2, r3
 800790a:	d901      	bls.n	8007910 <create_chain+0x88>
 800790c:	2300      	movs	r3, #0
 800790e:	e04f      	b.n	80079b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff fdc2 	bl	800749c <get_fat>
 8007918:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00e      	beq.n	800793e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d003      	beq.n	800792e <create_chain+0xa6>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d101      	bne.n	8007932 <create_chain+0xaa>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	e03e      	b.n	80079b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	429a      	cmp	r2, r3
 8007938:	d1da      	bne.n	80078f0 <create_chain+0x68>
 800793a:	2300      	movs	r3, #0
 800793c:	e038      	b.n	80079b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800793e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007940:	f04f 32ff 	mov.w	r2, #4294967295
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	6938      	ldr	r0, [r7, #16]
 8007948:	f7ff fe4f 	bl	80075ea <put_fat>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <create_chain+0xe2>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6938      	ldr	r0, [r7, #16]
 8007962:	f7ff fe42 	bl	80075ea <put_fat>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d116      	bne.n	800799e <create_chain+0x116>
		fs->last_clst = ncl;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	3b02      	subs	r3, #2
 8007980:	429a      	cmp	r2, r3
 8007982:	d804      	bhi.n	800798e <create_chain+0x106>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	711a      	strb	r2, [r3, #4]
 800799c:	e007      	b.n	80079ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d102      	bne.n	80079aa <create_chain+0x122>
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	e000      	b.n	80079ac <create_chain+0x124>
 80079aa:	2301      	movs	r3, #1
 80079ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079ae:	69fb      	ldr	r3, [r7, #28]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3720      	adds	r7, #32
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079cc:	3304      	adds	r3, #4
 80079ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	0a5b      	lsrs	r3, r3, #9
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	8952      	ldrh	r2, [r2, #10]
 80079d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1d1a      	adds	r2, r3, #4
 80079e2:	613a      	str	r2, [r7, #16]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <clmt_clust+0x3a>
 80079ee:	2300      	movs	r3, #0
 80079f0:	e010      	b.n	8007a14 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d307      	bcc.n	8007a0a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3304      	adds	r3, #4
 8007a06:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a08:	e7e9      	b.n	80079de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007a0a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a36:	d204      	bcs.n	8007a42 <dir_sdi+0x22>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a42:	2302      	movs	r3, #2
 8007a44:	e063      	b.n	8007b0e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <dir_sdi+0x46>
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d902      	bls.n	8007a66 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10c      	bne.n	8007a86 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	8912      	ldrh	r2, [r2, #8]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d301      	bcc.n	8007a7c <dir_sdi+0x5c>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e048      	b.n	8007b0e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	61da      	str	r2, [r3, #28]
 8007a84:	e029      	b.n	8007ada <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	895b      	ldrh	r3, [r3, #10]
 8007a8a:	025b      	lsls	r3, r3, #9
 8007a8c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a8e:	e019      	b.n	8007ac4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6979      	ldr	r1, [r7, #20]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff fd01 	bl	800749c <get_fat>
 8007a9a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa2:	d101      	bne.n	8007aa8 <dir_sdi+0x88>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e032      	b.n	8007b0e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d904      	bls.n	8007ab8 <dir_sdi+0x98>
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d301      	bcc.n	8007abc <dir_sdi+0x9c>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e028      	b.n	8007b0e <dir_sdi+0xee>
			ofs -= csz;
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d2e1      	bcs.n	8007a90 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007acc:	6979      	ldr	r1, [r7, #20]
 8007ace:	6938      	ldr	r0, [r7, #16]
 8007ad0:	f7ff fcc5 	bl	800745e <clust2sect>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <dir_sdi+0xcc>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e010      	b.n	8007b0e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	0a5b      	lsrs	r3, r3, #9
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b06:	441a      	add	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b086      	sub	sp, #24
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	3320      	adds	r3, #32
 8007b2c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <dir_next+0x28>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b3c:	d301      	bcc.n	8007b42 <dir_next+0x2c>
 8007b3e:	2304      	movs	r3, #4
 8007b40:	e0aa      	b.n	8007c98 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f040 8098 	bne.w	8007c7e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10b      	bne.n	8007b78 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	8912      	ldrh	r2, [r2, #8]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	f0c0 8088 	bcc.w	8007c7e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	61da      	str	r2, [r3, #28]
 8007b74:	2304      	movs	r3, #4
 8007b76:	e08f      	b.n	8007c98 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	0a5b      	lsrs	r3, r3, #9
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	8952      	ldrh	r2, [r2, #10]
 8007b80:	3a01      	subs	r2, #1
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d17a      	bne.n	8007c7e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f7ff fc83 	bl	800749c <get_fat>
 8007b96:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d801      	bhi.n	8007ba2 <dir_next+0x8c>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e07a      	b.n	8007c98 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d101      	bne.n	8007bae <dir_next+0x98>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e074      	b.n	8007c98 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d358      	bcc.n	8007c6a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d104      	bne.n	8007bc8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	61da      	str	r2, [r3, #28]
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	e067      	b.n	8007c98 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7ff fe59 	bl	8007888 <create_chain>
 8007bd6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <dir_next+0xcc>
 8007bde:	2307      	movs	r3, #7
 8007be0:	e05a      	b.n	8007c98 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <dir_next+0xd6>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e055      	b.n	8007c98 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf2:	d101      	bne.n	8007bf8 <dir_next+0xe2>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e04f      	b.n	8007c98 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff fbbf 	bl	800737c <sync_window>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <dir_next+0xf2>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e047      	b.n	8007c98 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3338      	adds	r3, #56	@ 0x38
 8007c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff f9b8 	bl	8006f88 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c18:	2300      	movs	r3, #0
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	6979      	ldr	r1, [r7, #20]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fc1d 	bl	800745e <clust2sect>
 8007c24:	4602      	mov	r2, r0
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8007c2a:	e012      	b.n	8007c52 <dir_next+0x13c>
						fs->wflag = 1;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f7ff fba2 	bl	800737c <sync_window>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <dir_next+0x12c>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e02a      	b.n	8007c98 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	3301      	adds	r3, #1
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	895b      	ldrh	r3, [r3, #10]
 8007c56:	461a      	mov	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d3e6      	bcc.n	8007c2c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad2      	subs	r2, r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c70:	6979      	ldr	r1, [r7, #20]
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff fbf3 	bl	800745e <clust2sect>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff feb4 	bl	8007a20 <dir_sdi>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d12b      	bne.n	8007d1a <dir_alloc+0x7a>
		n = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff fb99 	bl	8007404 <move_window>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11d      	bne.n	8007d18 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2be5      	cmp	r3, #229	@ 0xe5
 8007ce4:	d004      	beq.n	8007cf0 <dir_alloc+0x50>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d107      	bne.n	8007d00 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d102      	bne.n	8007d04 <dir_alloc+0x64>
 8007cfe:	e00c      	b.n	8007d1a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d00:	2300      	movs	r3, #0
 8007d02:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d04:	2101      	movs	r1, #1
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff05 	bl	8007b16 <dir_next>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0d7      	beq.n	8007cc6 <dir_alloc+0x26>
 8007d16:	e000      	b.n	8007d1a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d18:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d101      	bne.n	8007d24 <dir_alloc+0x84>
 8007d20:	2307      	movs	r3, #7
 8007d22:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	331a      	adds	r3, #26
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff f87f 	bl	8006e40 <ld_word>
 8007d42:	4603      	mov	r3, r0
 8007d44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d109      	bne.n	8007d62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	3314      	adds	r3, #20
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff f874 	bl	8006e40 <ld_word>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d62:	68fb      	ldr	r3, [r7, #12]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	331a      	adds	r3, #26
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	b292      	uxth	r2, r2
 8007d80:	4611      	mov	r1, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff f898 	bl	8006eb8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d109      	bne.n	8007da4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f103 0214 	add.w	r2, r3, #20
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7ff f88a 	bl	8006eb8 <st_word>
	}
}
 8007da4:	bf00      	nop
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007dac:	b590      	push	{r4, r7, lr}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	331a      	adds	r3, #26
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff f840 	bl	8006e40 <ld_word>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <cmp_lfn+0x1e>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e059      	b.n	8007e7e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dd2:	1e5a      	subs	r2, r3, #1
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007de0:	2301      	movs	r3, #1
 8007de2:	81fb      	strh	r3, [r7, #14]
 8007de4:	2300      	movs	r3, #0
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	e033      	b.n	8007e52 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007dea:	4a27      	ldr	r2, [pc, #156]	@ (8007e88 <cmp_lfn+0xdc>)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	4413      	add	r3, r2
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	4413      	add	r3, r2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7ff f821 	bl	8006e40 <ld_word>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007e02:	89fb      	ldrh	r3, [r7, #14]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01a      	beq.n	8007e3e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8007e0c:	d812      	bhi.n	8007e34 <cmp_lfn+0x88>
 8007e0e:	89bb      	ldrh	r3, [r7, #12]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f002 f96b 	bl	800a0ec <ff_wtoupper>
 8007e16:	4603      	mov	r3, r0
 8007e18:	461c      	mov	r4, r3
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	617a      	str	r2, [r7, #20]
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	4413      	add	r3, r2
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f002 f95f 	bl	800a0ec <ff_wtoupper>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	429c      	cmp	r4, r3
 8007e32:	d001      	beq.n	8007e38 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007e34:	2300      	movs	r3, #0
 8007e36:	e022      	b.n	8007e7e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007e38:	89bb      	ldrh	r3, [r7, #12]
 8007e3a:	81fb      	strh	r3, [r7, #14]
 8007e3c:	e006      	b.n	8007e4c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007e3e:	89bb      	ldrh	r3, [r7, #12]
 8007e40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d001      	beq.n	8007e4c <cmp_lfn+0xa0>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e018      	b.n	8007e7e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b0c      	cmp	r3, #12
 8007e56:	d9c8      	bls.n	8007dea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <cmp_lfn+0xd0>
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d008      	beq.n	8007e7c <cmp_lfn+0xd0>
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <cmp_lfn+0xd0>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	e000      	b.n	8007e7e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007e7c:	2301      	movs	r3, #1
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd90      	pop	{r4, r7, pc}
 8007e86:	bf00      	nop
 8007e88:	0800f0b4 	.word	0x0800f0b4

08007e8c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	331a      	adds	r3, #26
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe ffd0 	bl	8006e40 <ld_word>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <pick_lfn+0x1e>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e04d      	b.n	8007f46 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eb2:	1e5a      	subs	r2, r3, #1
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	81fb      	strh	r3, [r7, #14]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	e028      	b.n	8007f1c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007eca:	4a21      	ldr	r2, [pc, #132]	@ (8007f50 <pick_lfn+0xc4>)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe ffb1 	bl	8006e40 <ld_word>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007ee2:	89fb      	ldrh	r3, [r7, #14]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00f      	beq.n	8007f08 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2bfe      	cmp	r3, #254	@ 0xfe
 8007eec:	d901      	bls.n	8007ef2 <pick_lfn+0x66>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e029      	b.n	8007f46 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007ef2:	89bb      	ldrh	r3, [r7, #12]
 8007ef4:	81fb      	strh	r3, [r7, #14]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	617a      	str	r2, [r7, #20]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	89fa      	ldrh	r2, [r7, #14]
 8007f04:	801a      	strh	r2, [r3, #0]
 8007f06:	e006      	b.n	8007f16 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007f08:	89bb      	ldrh	r3, [r7, #12]
 8007f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d001      	beq.n	8007f16 <pick_lfn+0x8a>
 8007f12:	2300      	movs	r3, #0
 8007f14:	e017      	b.n	8007f46 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b0c      	cmp	r3, #12
 8007f20:	d9d3      	bls.n	8007eca <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2bfe      	cmp	r3, #254	@ 0xfe
 8007f32:	d901      	bls.n	8007f38 <pick_lfn+0xac>
 8007f34:	2300      	movs	r3, #0
 8007f36:	e006      	b.n	8007f46 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4413      	add	r3, r2
 8007f40:	2200      	movs	r2, #0
 8007f42:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007f44:	2301      	movs	r3, #1
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	0800f0b4 	.word	0x0800f0b4

08007f54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	460b      	mov	r3, r1
 8007f64:	71fb      	strb	r3, [r7, #7]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	330d      	adds	r3, #13
 8007f6e:	79ba      	ldrb	r2, [r7, #6]
 8007f70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	330b      	adds	r3, #11
 8007f76:	220f      	movs	r2, #15
 8007f78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	330c      	adds	r3, #12
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	331a      	adds	r3, #26
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe ff95 	bl	8006eb8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	1e5a      	subs	r2, r3, #1
 8007f92:	4613      	mov	r3, r2
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	82fb      	strh	r3, [r7, #22]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007fa6:	8afb      	ldrh	r3, [r7, #22]
 8007fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d007      	beq.n	8007fc0 <put_lfn+0x6c>
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	61fa      	str	r2, [r7, #28]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007fc0:	4a17      	ldr	r2, [pc, #92]	@ (8008020 <put_lfn+0xcc>)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	4413      	add	r3, r2
 8007fce:	8afa      	ldrh	r2, [r7, #22]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe ff70 	bl	8006eb8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007fd8:	8afb      	ldrh	r3, [r7, #22]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d102      	bne.n	8007fe4 <put_lfn+0x90>
 8007fde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fe2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b0c      	cmp	r3, #12
 8007fee:	d9da      	bls.n	8007fa6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007ff0:	8afb      	ldrh	r3, [r7, #22]
 8007ff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d006      	beq.n	8008008 <put_lfn+0xb4>
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d103      	bne.n	8008010 <put_lfn+0xbc>
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800800e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	79fa      	ldrb	r2, [r7, #7]
 8008014:	701a      	strb	r2, [r3, #0]
}
 8008016:	bf00      	nop
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	0800f0b4 	.word	0x0800f0b4

08008024 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08c      	sub	sp, #48	@ 0x30
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008032:	220b      	movs	r2, #11
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7fe ff85 	bl	8006f46 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b05      	cmp	r3, #5
 8008040:	d92b      	bls.n	800809a <gen_numname+0x76>
		sr = seq;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008046:	e022      	b.n	800808e <gen_numname+0x6a>
			wc = *lfn++;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	1c9a      	adds	r2, r3, #2
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008052:	2300      	movs	r3, #0
 8008054:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008056:	e017      	b.n	8008088 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	005a      	lsls	r2, r3, #1
 800805c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	4413      	add	r3, r2
 8008064:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008066:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <gen_numname+0x5e>
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800807c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008080:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008084:	3301      	adds	r3, #1
 8008086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	2b0f      	cmp	r3, #15
 800808c:	d9e4      	bls.n	8008058 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1d8      	bne.n	8008048 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800809a:	2307      	movs	r3, #7
 800809c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	3330      	adds	r3, #48	@ 0x30
 80080aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80080ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080b2:	2b39      	cmp	r3, #57	@ 0x39
 80080b4:	d904      	bls.n	80080c0 <gen_numname+0x9c>
 80080b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080ba:	3307      	adds	r3, #7
 80080bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080c6:	3330      	adds	r3, #48	@ 0x30
 80080c8:	443b      	add	r3, r7
 80080ca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80080ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1df      	bne.n	800809e <gen_numname+0x7a>
	ns[i] = '~';
 80080de:	f107 0214 	add.w	r2, r7, #20
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	4413      	add	r3, r2
 80080e6:	227e      	movs	r2, #126	@ 0x7e
 80080e8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80080ea:	2300      	movs	r3, #0
 80080ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ee:	e016      	b.n	800811e <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	4413      	add	r3, r2
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b80      	cmp	r3, #128	@ 0x80
 80080fa:	d90d      	bls.n	8008118 <gen_numname+0xf4>
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	4413      	add	r3, r2
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2bff      	cmp	r3, #255	@ 0xff
 8008106:	d007      	beq.n	8008118 <gen_numname+0xf4>
			if (j == i - 1) break;
 8008108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810a:	3b01      	subs	r3, #1
 800810c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800810e:	429a      	cmp	r2, r3
 8008110:	d010      	beq.n	8008134 <gen_numname+0x110>
			j++;
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	3301      	adds	r3, #1
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	3301      	adds	r3, #1
 800811c:	627b      	str	r3, [r7, #36]	@ 0x24
 800811e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	429a      	cmp	r2, r3
 8008124:	d207      	bcs.n	8008136 <gen_numname+0x112>
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	4413      	add	r3, r2
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b20      	cmp	r3, #32
 8008130:	d1de      	bne.n	80080f0 <gen_numname+0xcc>
 8008132:	e000      	b.n	8008136 <gen_numname+0x112>
			if (j == i - 1) break;
 8008134:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	2b07      	cmp	r3, #7
 800813a:	d807      	bhi.n	800814c <gen_numname+0x128>
 800813c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008142:	3330      	adds	r3, #48	@ 0x30
 8008144:	443b      	add	r3, r7
 8008146:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800814a:	e000      	b.n	800814e <gen_numname+0x12a>
 800814c:	2120      	movs	r1, #32
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	627a      	str	r2, [r7, #36]	@ 0x24
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	460a      	mov	r2, r1
 800815a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	2b07      	cmp	r3, #7
 8008160:	d9e9      	bls.n	8008136 <gen_numname+0x112>
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	3730      	adds	r7, #48	@ 0x30
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008178:	230b      	movs	r3, #11
 800817a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	b2da      	uxtb	r2, r3
 8008180:	0852      	lsrs	r2, r2, #1
 8008182:	01db      	lsls	r3, r3, #7
 8008184:	4313      	orrs	r3, r2
 8008186:	b2da      	uxtb	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	1c59      	adds	r1, r3, #1
 800818c:	6079      	str	r1, [r7, #4]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	4413      	add	r3, r2
 8008192:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	3b01      	subs	r3, #1
 8008198:	60bb      	str	r3, [r7, #8]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1ed      	bne.n	800817c <sum_sfn+0x10>
	return sum;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b086      	sub	sp, #24
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80081b8:	2304      	movs	r3, #4
 80081ba:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80081c2:	23ff      	movs	r3, #255	@ 0xff
 80081c4:	757b      	strb	r3, [r7, #21]
 80081c6:	23ff      	movs	r3, #255	@ 0xff
 80081c8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80081ca:	e081      	b.n	80082d0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6938      	ldr	r0, [r7, #16]
 80081d4:	f7ff f916 	bl	8007404 <move_window>
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d17c      	bne.n	80082dc <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80081ea:	7dbb      	ldrb	r3, [r7, #22]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80081f0:	2304      	movs	r3, #4
 80081f2:	75fb      	strb	r3, [r7, #23]
 80081f4:	e077      	b.n	80082e6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	330b      	adds	r3, #11
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008202:	73fb      	strb	r3, [r7, #15]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	7bfa      	ldrb	r2, [r7, #15]
 8008208:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800820a:	7dbb      	ldrb	r3, [r7, #22]
 800820c:	2be5      	cmp	r3, #229	@ 0xe5
 800820e:	d00e      	beq.n	800822e <dir_read+0x80>
 8008210:	7dbb      	ldrb	r3, [r7, #22]
 8008212:	2b2e      	cmp	r3, #46	@ 0x2e
 8008214:	d00b      	beq.n	800822e <dir_read+0x80>
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	f023 0320 	bic.w	r3, r3, #32
 800821c:	2b08      	cmp	r3, #8
 800821e:	bf0c      	ite	eq
 8008220:	2301      	moveq	r3, #1
 8008222:	2300      	movne	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	4293      	cmp	r3, r2
 800822c:	d002      	beq.n	8008234 <dir_read+0x86>
				ord = 0xFF;
 800822e:	23ff      	movs	r3, #255	@ 0xff
 8008230:	757b      	strb	r3, [r7, #21]
 8008232:	e044      	b.n	80082be <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	2b0f      	cmp	r3, #15
 8008238:	d12f      	bne.n	800829a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800823a:	7dbb      	ldrb	r3, [r7, #22]
 800823c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	7b5b      	ldrb	r3, [r3, #13]
 800824a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800824c:	7dbb      	ldrb	r3, [r7, #22]
 800824e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008252:	75bb      	strb	r3, [r7, #22]
 8008254:	7dbb      	ldrb	r3, [r7, #22]
 8008256:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008260:	7dba      	ldrb	r2, [r7, #22]
 8008262:	7d7b      	ldrb	r3, [r7, #21]
 8008264:	429a      	cmp	r2, r3
 8008266:	d115      	bne.n	8008294 <dir_read+0xe6>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	330d      	adds	r3, #13
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	7d3a      	ldrb	r2, [r7, #20]
 8008272:	429a      	cmp	r2, r3
 8008274:	d10e      	bne.n	8008294 <dir_read+0xe6>
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	4619      	mov	r1, r3
 8008280:	4610      	mov	r0, r2
 8008282:	f7ff fe03 	bl	8007e8c <pick_lfn>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <dir_read+0xe6>
 800828c:	7d7b      	ldrb	r3, [r7, #21]
 800828e:	3b01      	subs	r3, #1
 8008290:	b2db      	uxtb	r3, r3
 8008292:	e000      	b.n	8008296 <dir_read+0xe8>
 8008294:	23ff      	movs	r3, #255	@ 0xff
 8008296:	757b      	strb	r3, [r7, #21]
 8008298:	e011      	b.n	80082be <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800829a:	7d7b      	ldrb	r3, [r7, #21]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <dir_read+0x106>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ff61 	bl	800816c <sum_sfn>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461a      	mov	r2, r3
 80082ae:	7d3b      	ldrb	r3, [r7, #20]
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d015      	beq.n	80082e0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ba:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80082bc:	e010      	b.n	80082e0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80082be:	2100      	movs	r1, #0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff fc28 	bl	8007b16 <dir_next>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d109      	bne.n	80082e4 <dir_read+0x136>
	while (dp->sect) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f af79 	bne.w	80081cc <dir_read+0x1e>
 80082da:	e004      	b.n	80082e6 <dir_read+0x138>
		if (res != FR_OK) break;
 80082dc:	bf00      	nop
 80082de:	e002      	b.n	80082e6 <dir_read+0x138>
					break;
 80082e0:	bf00      	nop
 80082e2:	e000      	b.n	80082e6 <dir_read+0x138>
		if (res != FR_OK) break;
 80082e4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <dir_read+0x144>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	61da      	str	r2, [r3, #28]
	return res;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800830a:	2100      	movs	r1, #0
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fb87 	bl	8007a20 <dir_sdi>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <dir_find+0x24>
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	e0a9      	b.n	8008474 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008320:	23ff      	movs	r3, #255	@ 0xff
 8008322:	753b      	strb	r3, [r7, #20]
 8008324:	7d3b      	ldrb	r3, [r7, #20]
 8008326:	757b      	strb	r3, [r7, #21]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f04f 32ff 	mov.w	r2, #4294967295
 800832e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	4619      	mov	r1, r3
 8008336:	6938      	ldr	r0, [r7, #16]
 8008338:	f7ff f864 	bl	8007404 <move_window>
 800833c:	4603      	mov	r3, r0
 800833e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f040 8090 	bne.w	8008468 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008350:	7dbb      	ldrb	r3, [r7, #22]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <dir_find+0x60>
 8008356:	2304      	movs	r3, #4
 8008358:	75fb      	strb	r3, [r7, #23]
 800835a:	e08a      	b.n	8008472 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	330b      	adds	r3, #11
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008368:	73fb      	strb	r3, [r7, #15]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	7bfa      	ldrb	r2, [r7, #15]
 800836e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008370:	7dbb      	ldrb	r3, [r7, #22]
 8008372:	2be5      	cmp	r3, #229	@ 0xe5
 8008374:	d007      	beq.n	8008386 <dir_find+0x8a>
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	f003 0308 	and.w	r3, r3, #8
 800837c:	2b00      	cmp	r3, #0
 800837e:	d009      	beq.n	8008394 <dir_find+0x98>
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b0f      	cmp	r3, #15
 8008384:	d006      	beq.n	8008394 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008386:	23ff      	movs	r3, #255	@ 0xff
 8008388:	757b      	strb	r3, [r7, #21]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	631a      	str	r2, [r3, #48]	@ 0x30
 8008392:	e05e      	b.n	8008452 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	2b0f      	cmp	r3, #15
 8008398:	d136      	bne.n	8008408 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80083a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d154      	bne.n	8008452 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80083a8:	7dbb      	ldrb	r3, [r7, #22]
 80083aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00d      	beq.n	80083ce <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	7b5b      	ldrb	r3, [r3, #13]
 80083b8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80083ba:	7dbb      	ldrb	r3, [r7, #22]
 80083bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083c0:	75bb      	strb	r3, [r7, #22]
 80083c2:	7dbb      	ldrb	r3, [r7, #22]
 80083c4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695a      	ldr	r2, [r3, #20]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80083ce:	7dba      	ldrb	r2, [r7, #22]
 80083d0:	7d7b      	ldrb	r3, [r7, #21]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d115      	bne.n	8008402 <dir_find+0x106>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	330d      	adds	r3, #13
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	7d3a      	ldrb	r2, [r7, #20]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d10e      	bne.n	8008402 <dir_find+0x106>
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7ff fcdc 	bl	8007dac <cmp_lfn>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <dir_find+0x106>
 80083fa:	7d7b      	ldrb	r3, [r7, #21]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e000      	b.n	8008404 <dir_find+0x108>
 8008402:	23ff      	movs	r3, #255	@ 0xff
 8008404:	757b      	strb	r3, [r7, #21]
 8008406:	e024      	b.n	8008452 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008408:	7d7b      	ldrb	r3, [r7, #21]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d109      	bne.n	8008422 <dir_find+0x126>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff feaa 	bl	800816c <sum_sfn>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	7d3b      	ldrb	r3, [r7, #20]
 800841e:	4293      	cmp	r3, r2
 8008420:	d024      	beq.n	800846c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <dir_find+0x14a>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a18      	ldr	r0, [r3, #32]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3324      	adds	r3, #36	@ 0x24
 8008438:	220b      	movs	r2, #11
 800843a:	4619      	mov	r1, r3
 800843c:	f7fe fdbf 	bl	8006fbe <mem_cmp>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d014      	beq.n	8008470 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008446:	23ff      	movs	r3, #255	@ 0xff
 8008448:	757b      	strb	r3, [r7, #21]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f04f 32ff 	mov.w	r2, #4294967295
 8008450:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008452:	2100      	movs	r1, #0
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff fb5e 	bl	8007b16 <dir_next>
 800845a:	4603      	mov	r3, r0
 800845c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f43f af65 	beq.w	8008330 <dir_find+0x34>
 8008466:	e004      	b.n	8008472 <dir_find+0x176>
		if (res != FR_OK) break;
 8008468:	bf00      	nop
 800846a:	e002      	b.n	8008472 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008470:	bf00      	nop

	return res;
 8008472:	7dfb      	ldrb	r3, [r7, #23]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08c      	sub	sp, #48	@ 0x30
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008490:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <dir_register+0x20>
 8008498:	2306      	movs	r3, #6
 800849a:	e0e0      	b.n	800865e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800849c:	2300      	movs	r3, #0
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a0:	e002      	b.n	80084a8 <dir_register+0x2c>
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	3301      	adds	r3, #1
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1f4      	bne.n	80084a2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80084be:	f107 030c 	add.w	r3, r7, #12
 80084c2:	220c      	movs	r2, #12
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fd3e 	bl	8006f46 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d032      	beq.n	800853a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2240      	movs	r2, #64	@ 0x40
 80084d8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80084dc:	2301      	movs	r3, #1
 80084de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084e0:	e016      	b.n	8008510 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	f107 010c 	add.w	r1, r7, #12
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	f7ff fd97 	bl	8008024 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff ff00 	bl	80082fc <dir_find>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	3301      	adds	r3, #1
 800850e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	2b63      	cmp	r3, #99	@ 0x63
 8008514:	d9e5      	bls.n	80084e2 <dir_register+0x66>
 8008516:	e000      	b.n	800851a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008518:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	2b64      	cmp	r3, #100	@ 0x64
 800851e:	d101      	bne.n	8008524 <dir_register+0xa8>
 8008520:	2307      	movs	r3, #7
 8008522:	e09c      	b.n	800865e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008524:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008528:	2b04      	cmp	r3, #4
 800852a:	d002      	beq.n	8008532 <dir_register+0xb6>
 800852c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008530:	e095      	b.n	800865e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008532:	7dfa      	ldrb	r2, [r7, #23]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <dir_register+0xd8>
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	330c      	adds	r3, #12
 8008548:	4a47      	ldr	r2, [pc, #284]	@ (8008668 <dir_register+0x1ec>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	089b      	lsrs	r3, r3, #2
 8008550:	3301      	adds	r3, #1
 8008552:	e000      	b.n	8008556 <dir_register+0xda>
 8008554:	2301      	movs	r3, #1
 8008556:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008558:	6a39      	ldr	r1, [r7, #32]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fba0 	bl	8007ca0 <dir_alloc>
 8008560:	4603      	mov	r3, r0
 8008562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800856a:	2b00      	cmp	r3, #0
 800856c:	d148      	bne.n	8008600 <dir_register+0x184>
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	3b01      	subs	r3, #1
 8008572:	623b      	str	r3, [r7, #32]
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d042      	beq.n	8008600 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	695a      	ldr	r2, [r3, #20]
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	015b      	lsls	r3, r3, #5
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fa4a 	bl	8007a20 <dir_sdi>
 800858c:	4603      	mov	r3, r0
 800858e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008592:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008596:	2b00      	cmp	r3, #0
 8008598:	d132      	bne.n	8008600 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3324      	adds	r3, #36	@ 0x24
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff fde4 	bl	800816c <sum_sfn>
 80085a4:	4603      	mov	r3, r0
 80085a6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	4619      	mov	r1, r3
 80085ae:	69f8      	ldr	r0, [r7, #28]
 80085b0:	f7fe ff28 	bl	8007404 <move_window>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80085ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d11d      	bne.n	80085fe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	68d8      	ldr	r0, [r3, #12]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a19      	ldr	r1, [r3, #32]
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	7efb      	ldrb	r3, [r7, #27]
 80085d0:	f7ff fcc0 	bl	8007f54 <put_lfn>
				fs->wflag = 1;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2201      	movs	r2, #1
 80085d8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80085da:	2100      	movs	r1, #0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fa9a 	bl	8007b16 <dir_next>
 80085e2:	4603      	mov	r3, r0
 80085e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80085e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d107      	bne.n	8008600 <dir_register+0x184>
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	623b      	str	r3, [r7, #32]
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1d5      	bne.n	80085a8 <dir_register+0x12c>
 80085fc:	e000      	b.n	8008600 <dir_register+0x184>
				if (res != FR_OK) break;
 80085fe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008600:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008604:	2b00      	cmp	r3, #0
 8008606:	d128      	bne.n	800865a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	4619      	mov	r1, r3
 800860e:	69f8      	ldr	r0, [r7, #28]
 8008610:	f7fe fef8 	bl	8007404 <move_window>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800861a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800861e:	2b00      	cmp	r3, #0
 8008620:	d11b      	bne.n	800865a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	2220      	movs	r2, #32
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fcac 	bl	8006f88 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a18      	ldr	r0, [r3, #32]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3324      	adds	r3, #36	@ 0x24
 8008638:	220b      	movs	r2, #11
 800863a:	4619      	mov	r1, r3
 800863c:	f7fe fc83 	bl	8006f46 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	330c      	adds	r3, #12
 800864c:	f002 0218 	and.w	r2, r2, #24
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	2201      	movs	r2, #1
 8008658:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800865a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800865e:	4618      	mov	r0, r3
 8008660:	3730      	adds	r7, #48	@ 0x30
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	4ec4ec4f 	.word	0x4ec4ec4f

0800866c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80d8 	beq.w	800883c <get_fileinfo+0x1d0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008694:	d040      	beq.n	8008718 <get_fileinfo+0xac>
			i = j = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800869e:	e029      	b.n	80086f4 <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80086a0:	89fb      	ldrh	r3, [r7, #14]
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fcc3 	bl	800a030 <ff_convert>
 80086aa:	4603      	mov	r3, r0
 80086ac:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80086ae:	89fb      	ldrh	r3, [r7, #14]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <get_fileinfo+0x4e>
 80086b4:	2300      	movs	r3, #0
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	e028      	b.n	800870c <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 80086ba:	89fb      	ldrh	r3, [r7, #14]
 80086bc:	2bff      	cmp	r3, #255	@ 0xff
 80086be:	d90a      	bls.n	80086d6 <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 80086c0:	89fb      	ldrh	r3, [r7, #14]
 80086c2:	0a1b      	lsrs	r3, r3, #8
 80086c4:	b299      	uxth	r1, r3
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	61fa      	str	r2, [r7, #28]
 80086cc:	b2c9      	uxtb	r1, r1
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4413      	add	r3, r2
 80086d2:	460a      	mov	r2, r1
 80086d4:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80086da:	d902      	bls.n	80086e2 <get_fileinfo+0x76>
 80086dc:	2300      	movs	r3, #0
 80086de:	61fb      	str	r3, [r7, #28]
 80086e0:	e014      	b.n	800870c <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	61fa      	str	r2, [r7, #28]
 80086e8:	89fa      	ldrh	r2, [r7, #14]
 80086ea:	b2d1      	uxtb	r1, r2
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	4413      	add	r3, r2
 80086f0:	460a      	mov	r2, r1
 80086f2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	1c59      	adds	r1, r3, #1
 80086fc:	61b9      	str	r1, [r7, #24]
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	4413      	add	r3, r2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	81fb      	strh	r3, [r7, #14]
 8008706:	89fb      	ldrh	r3, [r7, #14]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1c9      	bne.n	80086a0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	3316      	adds	r3, #22
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	61bb      	str	r3, [r7, #24]
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	3316      	adds	r3, #22
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800872c:	e04d      	b.n	80087ca <get_fileinfo+0x15e>
		c = (TCHAR)dp->dir[i++];
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1a      	ldr	r2, [r3, #32]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	1c59      	adds	r1, r3, #1
 8008736:	61f9      	str	r1, [r7, #28]
 8008738:	4413      	add	r3, r2
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b20      	cmp	r3, #32
 8008742:	d041      	beq.n	80087c8 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008744:	7dfb      	ldrb	r3, [r7, #23]
 8008746:	2b05      	cmp	r3, #5
 8008748:	d101      	bne.n	800874e <get_fileinfo+0xe2>
 800874a:	23e5      	movs	r3, #229	@ 0xe5
 800874c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	2b09      	cmp	r3, #9
 8008752:	d10f      	bne.n	8008774 <get_fileinfo+0x108>
			if (!lfv) fno->fname[j] = '.';
 8008754:	89bb      	ldrh	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <get_fileinfo+0xfa>
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	4413      	add	r3, r2
 8008760:	3316      	adds	r3, #22
 8008762:	222e      	movs	r2, #46	@ 0x2e
 8008764:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	61ba      	str	r2, [r7, #24]
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	4413      	add	r3, r2
 8008770:	222e      	movs	r2, #46	@ 0x2e
 8008772:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	4413      	add	r3, r2
 800877a:	3309      	adds	r3, #9
 800877c:	7dfa      	ldrb	r2, [r7, #23]
 800877e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008780:	89bb      	ldrh	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d11c      	bne.n	80087c0 <get_fileinfo+0x154>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	2b40      	cmp	r3, #64	@ 0x40
 800878a:	d913      	bls.n	80087b4 <get_fileinfo+0x148>
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008790:	d810      	bhi.n	80087b4 <get_fileinfo+0x148>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	330c      	adds	r3, #12
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d901      	bls.n	80087a6 <get_fileinfo+0x13a>
 80087a2:	2310      	movs	r3, #16
 80087a4:	e000      	b.n	80087a8 <get_fileinfo+0x13c>
 80087a6:	2308      	movs	r3, #8
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <get_fileinfo+0x148>
				c += 0x20;			/* To lower */
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	3320      	adds	r3, #32
 80087b2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	4413      	add	r3, r2
 80087ba:	3316      	adds	r3, #22
 80087bc:	7dfa      	ldrb	r2, [r7, #23]
 80087be:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	3301      	adds	r3, #1
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	e000      	b.n	80087ca <get_fileinfo+0x15e>
		if (c == ' ') continue;				/* Skip padding spaces */
 80087c8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	2b0a      	cmp	r3, #10
 80087ce:	d9ae      	bls.n	800872e <get_fileinfo+0xc2>
	}
	if (!lfv) {
 80087d0:	89bb      	ldrh	r3, [r7, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10d      	bne.n	80087f2 <get_fileinfo+0x186>
		fno->fname[j] = 0;
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	4413      	add	r3, r2
 80087dc:	3316      	adds	r3, #22
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	330c      	adds	r3, #12
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <get_fileinfo+0x186>
 80087ee:	2300      	movs	r3, #0
 80087f0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	4413      	add	r3, r2
 80087f8:	3309      	adds	r3, #9
 80087fa:	2200      	movs	r2, #0
 80087fc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	7ada      	ldrb	r2, [r3, #11]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	331c      	adds	r3, #28
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fb2f 	bl	8006e72 <ld_dword>
 8008814:	4602      	mov	r2, r0
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	3316      	adds	r3, #22
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fb26 	bl	8006e72 <ld_dword>
 8008826:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	b29a      	uxth	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	80da      	strh	r2, [r3, #6]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	0c1b      	lsrs	r3, r3, #16
 8008834:	b29a      	uxth	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	809a      	strh	r2, [r3, #4]
 800883a:	e000      	b.n	800883e <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800883c:	bf00      	nop
}
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08a      	sub	sp, #40	@ 0x28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	613b      	str	r3, [r7, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	61ba      	str	r2, [r7, #24]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	4413      	add	r3, r2
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008874:	2b1f      	cmp	r3, #31
 8008876:	d96a      	bls.n	800894e <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800887a:	2b2f      	cmp	r3, #47	@ 0x2f
 800887c:	d006      	beq.n	800888c <create_name+0x48>
 800887e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008880:	2b5c      	cmp	r3, #92	@ 0x5c
 8008882:	d110      	bne.n	80088a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008884:	e002      	b.n	800888c <create_name+0x48>
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	3301      	adds	r3, #1
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	4413      	add	r3, r2
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b2f      	cmp	r3, #47	@ 0x2f
 8008896:	d0f6      	beq.n	8008886 <create_name+0x42>
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	4413      	add	r3, r2
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80088a2:	d0f0      	beq.n	8008886 <create_name+0x42>
			break;
 80088a4:	e054      	b.n	8008950 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80088aa:	d901      	bls.n	80088b0 <create_name+0x6c>
 80088ac:	2306      	movs	r3, #6
 80088ae:	e1bf      	b.n	8008c30 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 80088b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 80088b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b80      	cmp	r3, #128	@ 0x80
 80088bc:	d925      	bls.n	800890a <create_name+0xc6>
 80088be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2bff      	cmp	r3, #255	@ 0xff
 80088c4:	d021      	beq.n	800890a <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	61ba      	str	r2, [r7, #24]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4413      	add	r3, r2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 80088d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	b29a      	uxth	r2, r3
 80088dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4413      	add	r3, r2
 80088e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 80088e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80088ec:	d903      	bls.n	80088f6 <create_name+0xb2>
 80088ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80088f4:	d909      	bls.n	800890a <create_name+0xc6>
 80088f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da03      	bge.n	8008906 <create_name+0xc2>
 80088fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008902:	2bff      	cmp	r3, #255	@ 0xff
 8008904:	d101      	bne.n	800890a <create_name+0xc6>
 8008906:	2306      	movs	r3, #6
 8008908:	e192      	b.n	8008c30 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800890a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800890c:	2101      	movs	r1, #1
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fb8e 	bl	800a030 <ff_convert>
 8008914:	4603      	mov	r3, r0
 8008916:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <create_name+0xde>
 800891e:	2306      	movs	r3, #6
 8008920:	e186      	b.n	8008c30 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008924:	2b7f      	cmp	r3, #127	@ 0x7f
 8008926:	d809      	bhi.n	800893c <create_name+0xf8>
 8008928:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800892a:	4619      	mov	r1, r3
 800892c:	489a      	ldr	r0, [pc, #616]	@ (8008b98 <create_name+0x354>)
 800892e:	f7fe fb6d 	bl	800700c <chk_chr>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <create_name+0xf8>
 8008938:	2306      	movs	r3, #6
 800893a:	e179      	b.n	8008c30 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	617a      	str	r2, [r7, #20]
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800894a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800894c:	e78a      	b.n	8008864 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800894e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	441a      	add	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800895a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800895c:	2b1f      	cmp	r3, #31
 800895e:	d801      	bhi.n	8008964 <create_name+0x120>
 8008960:	2304      	movs	r3, #4
 8008962:	e000      	b.n	8008966 <create_name+0x122>
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800896a:	e011      	b.n	8008990 <create_name+0x14c>
		w = lfn[di - 1];
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008972:	3b01      	subs	r3, #1
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4413      	add	r3, r2
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800897e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008980:	2b20      	cmp	r3, #32
 8008982:	d002      	beq.n	800898a <create_name+0x146>
 8008984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008986:	2b2e      	cmp	r3, #46	@ 0x2e
 8008988:	d106      	bne.n	8008998 <create_name+0x154>
		di--;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	3b01      	subs	r3, #1
 800898e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1ea      	bne.n	800896c <create_name+0x128>
 8008996:	e000      	b.n	800899a <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8008998:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <create_name+0x16c>
 80089ac:	2306      	movs	r3, #6
 80089ae:	e13f      	b.n	8008c30 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3324      	adds	r3, #36	@ 0x24
 80089b4:	220b      	movs	r2, #11
 80089b6:	2120      	movs	r1, #32
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fae5 	bl	8006f88 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80089be:	2300      	movs	r3, #0
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	e002      	b.n	80089ca <create_name+0x186>
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	3301      	adds	r3, #1
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d0f5      	beq.n	80089c4 <create_name+0x180>
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e4:	d0ee      	beq.n	80089c4 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <create_name+0x1bc>
 80089ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089f0:	f043 0303 	orr.w	r3, r3, #3
 80089f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80089f8:	e002      	b.n	8008a00 <create_name+0x1bc>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <create_name+0x1d6>
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a18:	d1ef      	bne.n	80089fa <create_name+0x1b6>

	i = b = 0; ni = 8;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a20:	2300      	movs	r3, #0
 8008a22:	623b      	str	r3, [r7, #32]
 8008a24:	2308      	movs	r3, #8
 8008a26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	61ba      	str	r2, [r7, #24]
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4413      	add	r3, r2
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008a38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80aa 	beq.w	8008b94 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d006      	beq.n	8008a54 <create_name+0x210>
 8008a46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a4a:	d10a      	bne.n	8008a62 <create_name+0x21e>
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d006      	beq.n	8008a62 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8008a54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a58:	f043 0303 	orr.w	r3, r3, #3
 8008a5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008a60:	e097      	b.n	8008b92 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008a62:	6a3a      	ldr	r2, [r7, #32]
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d203      	bcs.n	8008a72 <create_name+0x22e>
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d123      	bne.n	8008aba <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b0b      	cmp	r3, #11
 8008a76:	d106      	bne.n	8008a86 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8008a78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a7c:	f043 0303 	orr.w	r3, r3, #3
 8008a80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008a84:	e08d      	b.n	8008ba2 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d005      	beq.n	8008a9a <create_name+0x256>
 8008a8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a92:	f043 0303 	orr.w	r3, r3, #3
 8008a96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d87e      	bhi.n	8008ba0 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	623b      	str	r3, [r7, #32]
 8008aaa:	230b      	movs	r3, #11
 8008aac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008aae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ab8:	e06b      	b.n	8008b92 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008aba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008abc:	2b7f      	cmp	r3, #127	@ 0x7f
 8008abe:	d910      	bls.n	8008ae2 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8008ac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 fb12 	bl	800a0ec <ff_wtoupper>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 faaf 	bl	800a030 <ff_convert>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008ad6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ada:	f043 0302 	orr.w	r3, r3, #2
 8008ade:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8008ae2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ae4:	2bff      	cmp	r3, #255	@ 0xff
 8008ae6:	d91a      	bls.n	8008b1e <create_name+0x2da>
			if (i >= ni - 1) {
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	6a3a      	ldr	r2, [r7, #32]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d308      	bcc.n	8008b04 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8008af2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008af6:	f043 0303 	orr.w	r3, r3, #3
 8008afa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	623b      	str	r3, [r7, #32]
 8008b02:	e046      	b.n	8008b92 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8008b04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b06:	0a1b      	lsrs	r3, r3, #8
 8008b08:	b299      	uxth	r1, r3
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	623a      	str	r2, [r7, #32]
 8008b10:	b2c9      	uxtb	r1, r1
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	4413      	add	r3, r2
 8008b16:	460a      	mov	r2, r1
 8008b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008b1c:	e02f      	b.n	8008b7e <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008b1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d007      	beq.n	8008b34 <create_name+0x2f0>
 8008b24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b26:	4619      	mov	r1, r3
 8008b28:	481c      	ldr	r0, [pc, #112]	@ (8008b9c <create_name+0x358>)
 8008b2a:	f7fe fa6f 	bl	800700c <chk_chr>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d008      	beq.n	8008b46 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008b34:	235f      	movs	r3, #95	@ 0x5f
 8008b36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008b38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b3c:	f043 0303 	orr.w	r3, r3, #3
 8008b40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b44:	e01b      	b.n	8008b7e <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008b46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b48:	2b40      	cmp	r3, #64	@ 0x40
 8008b4a:	d909      	bls.n	8008b60 <create_name+0x31c>
 8008b4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b4e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008b50:	d806      	bhi.n	8008b60 <create_name+0x31c>
					b |= 2;
 8008b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b56:	f043 0302 	orr.w	r3, r3, #2
 8008b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b5e:	e00e      	b.n	8008b7e <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008b60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b62:	2b60      	cmp	r3, #96	@ 0x60
 8008b64:	d90b      	bls.n	8008b7e <create_name+0x33a>
 8008b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b68:	2b7a      	cmp	r3, #122	@ 0x7a
 8008b6a:	d808      	bhi.n	8008b7e <create_name+0x33a>
						b |= 1; w -= 0x20;
 8008b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b70:	f043 0301 	orr.w	r3, r3, #1
 8008b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b7a:	3b20      	subs	r3, #32
 8008b7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	623a      	str	r2, [r7, #32]
 8008b84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b86:	b2d1      	uxtb	r1, r2
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008b92:	e749      	b.n	8008a28 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8008b94:	bf00      	nop
 8008b96:	e004      	b.n	8008ba2 <create_name+0x35e>
 8008b98:	0800efec 	.word	0x0800efec
 8008b9c:	0800eff8 	.word	0x0800eff8
			if (si > di) break;			/* No extension */
 8008ba0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ba8:	2be5      	cmp	r3, #229	@ 0xe5
 8008baa:	d103      	bne.n	8008bb4 <create_name+0x370>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2205      	movs	r2, #5
 8008bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d104      	bne.n	8008bc4 <create_name+0x380>
 8008bba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc8:	f003 030c 	and.w	r3, r3, #12
 8008bcc:	2b0c      	cmp	r3, #12
 8008bce:	d005      	beq.n	8008bdc <create_name+0x398>
 8008bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d105      	bne.n	8008be8 <create_name+0x3a4>
 8008bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008be0:	f043 0302 	orr.w	r3, r3, #2
 8008be4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008be8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d117      	bne.n	8008c24 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d105      	bne.n	8008c0c <create_name+0x3c8>
 8008c00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c04:	f043 0310 	orr.w	r3, r3, #16
 8008c08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c10:	f003 030c 	and.w	r3, r3, #12
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d105      	bne.n	8008c24 <create_name+0x3e0>
 8008c18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c1c:	f043 0308 	orr.w	r3, r3, #8
 8008c20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008c2e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3728      	adds	r7, #40	@ 0x28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008c4c:	e002      	b.n	8008c54 <follow_path+0x1c>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c5a:	d0f8      	beq.n	8008c4e <follow_path+0x16>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c62:	d0f4      	beq.n	8008c4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2200      	movs	r2, #0
 8008c68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b1f      	cmp	r3, #31
 8008c70:	d80a      	bhi.n	8008c88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2280      	movs	r2, #128	@ 0x80
 8008c76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fe fecf 	bl	8007a20 <dir_sdi>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75fb      	strb	r3, [r7, #23]
 8008c86:	e043      	b.n	8008d10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c88:	463b      	mov	r3, r7
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff fdd9 	bl	8008844 <create_name>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d134      	bne.n	8008d06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff fb2d 	bl	80082fc <dir_find>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008cac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d127      	bne.n	8008d0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d122      	bne.n	8008d0a <follow_path+0xd2>
 8008cc4:	2305      	movs	r3, #5
 8008cc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008cc8:	e01f      	b.n	8008d0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d11c      	bne.n	8008d0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	799b      	ldrb	r3, [r3, #6]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ce0:	2305      	movs	r3, #5
 8008ce2:	75fb      	strb	r3, [r7, #23]
 8008ce4:	e014      	b.n	8008d10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	4413      	add	r3, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff f818 	bl	8007d2e <ld_clust>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d04:	e7c0      	b.n	8008c88 <follow_path+0x50>
			if (res != FR_OK) break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <follow_path+0xd8>
				break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008d0e:	bf00      	nop
			}
		}
	}

	return res;
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b087      	sub	sp, #28
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d031      	beq.n	8008d94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e002      	b.n	8008d3e <get_ldnumber+0x24>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b1f      	cmp	r3, #31
 8008d44:	d903      	bls.n	8008d4e <get_ldnumber+0x34>
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d4c:	d1f4      	bne.n	8008d38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d54:	d11c      	bne.n	8008d90 <get_ldnumber+0x76>
			tp = *path;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	60fa      	str	r2, [r7, #12]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	3b30      	subs	r3, #48	@ 0x30
 8008d66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d80e      	bhi.n	8008d8c <get_ldnumber+0x72>
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d10a      	bne.n	8008d8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d107      	bne.n	8008d8c <get_ldnumber+0x72>
					vol = (int)i;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3301      	adds	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	e002      	b.n	8008d96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d94:	693b      	ldr	r3, [r7, #16]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	70da      	strb	r2, [r3, #3]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fe fb20 	bl	8007404 <move_window>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <check_fs+0x2a>
 8008dca:	2304      	movs	r3, #4
 8008dcc:	e038      	b.n	8008e40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3338      	adds	r3, #56	@ 0x38
 8008dd2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe f832 	bl	8006e40 <ld_word>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	461a      	mov	r2, r3
 8008de0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d001      	beq.n	8008dec <check_fs+0x48>
 8008de8:	2303      	movs	r3, #3
 8008dea:	e029      	b.n	8008e40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008df2:	2be9      	cmp	r3, #233	@ 0xe9
 8008df4:	d009      	beq.n	8008e0a <check_fs+0x66>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008dfc:	2beb      	cmp	r3, #235	@ 0xeb
 8008dfe:	d11e      	bne.n	8008e3e <check_fs+0x9a>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008e06:	2b90      	cmp	r3, #144	@ 0x90
 8008e08:	d119      	bne.n	8008e3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3338      	adds	r3, #56	@ 0x38
 8008e0e:	3336      	adds	r3, #54	@ 0x36
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe f82e 	bl	8006e72 <ld_dword>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008e48 <check_fs+0xa4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d101      	bne.n	8008e26 <check_fs+0x82>
 8008e22:	2300      	movs	r3, #0
 8008e24:	e00c      	b.n	8008e40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3338      	adds	r3, #56	@ 0x38
 8008e2a:	3352      	adds	r3, #82	@ 0x52
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe f820 	bl	8006e72 <ld_dword>
 8008e32:	4603      	mov	r3, r0
 8008e34:	4a05      	ldr	r2, [pc, #20]	@ (8008e4c <check_fs+0xa8>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d101      	bne.n	8008e3e <check_fs+0x9a>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e000      	b.n	8008e40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008e3e:	2302      	movs	r3, #2
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	00544146 	.word	0x00544146
 8008e4c:	33544146 	.word	0x33544146

08008e50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b096      	sub	sp, #88	@ 0x58
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2200      	movs	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff ff58 	bl	8008d1a <get_ldnumber>
 8008e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	da01      	bge.n	8008e76 <find_volume+0x26>
 8008e72:	230b      	movs	r3, #11
 8008e74:	e235      	b.n	80092e2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e76:	4aa5      	ldr	r2, [pc, #660]	@ (800910c <find_volume+0x2bc>)
 8008e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <find_volume+0x3a>
 8008e86:	230c      	movs	r3, #12
 8008e88:	e22b      	b.n	80092e2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8008e8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e8c:	f7fe f8d9 	bl	8007042 <lock_fs>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <find_volume+0x4a>
 8008e96:	230f      	movs	r3, #15
 8008e98:	e223      	b.n	80092e2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	f023 0301 	bic.w	r3, r3, #1
 8008ea6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d01a      	beq.n	8008ee6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd ff41 	bl	8006d3c <disk_status>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10c      	bne.n	8008ee6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <find_volume+0x92>
 8008ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ed6:	f003 0304 	and.w	r3, r3, #4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008ede:	230a      	movs	r3, #10
 8008ee0:	e1ff      	b.n	80092e2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e1fd      	b.n	80092e2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fd ff39 	bl	8006d70 <disk_initialize>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008f04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008f10:	2303      	movs	r3, #3
 8008f12:	e1e6      	b.n	80092e2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d007      	beq.n	8008f2a <find_volume+0xda>
 8008f1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008f1e:	f003 0304 	and.w	r3, r3, #4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008f26:	230a      	movs	r3, #10
 8008f28:	e1db      	b.n	80092e2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008f2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f32:	f7ff ff37 	bl	8008da4 <check_fs>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d149      	bne.n	8008fd8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f44:	2300      	movs	r3, #0
 8008f46:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f48:	e01e      	b.n	8008f88 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f52:	011b      	lsls	r3, r3, #4
 8008f54:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008f58:	4413      	add	r3, r2
 8008f5a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	3304      	adds	r3, #4
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d006      	beq.n	8008f74 <find_volume+0x124>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	3308      	adds	r3, #8
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd ff81 	bl	8006e72 <ld_dword>
 8008f70:	4602      	mov	r2, r0
 8008f72:	e000      	b.n	8008f76 <find_volume+0x126>
 8008f74:	2200      	movs	r2, #0
 8008f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	3358      	adds	r3, #88	@ 0x58
 8008f7c:	443b      	add	r3, r7
 8008f7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f84:	3301      	adds	r3, #1
 8008f86:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d9dd      	bls.n	8008f4a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f8e:	2300      	movs	r3, #0
 8008f90:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <find_volume+0x14e>
 8008f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	3358      	adds	r3, #88	@ 0x58
 8008fa4:	443b      	add	r3, r7
 8008fa6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008faa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <find_volume+0x16e>
 8008fb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fb4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008fb6:	f7ff fef5 	bl	8008da4 <check_fs>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	e000      	b.n	8008fc0 <find_volume+0x170>
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d905      	bls.n	8008fd8 <find_volume+0x188>
 8008fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fce:	3301      	adds	r3, #1
 8008fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d9e2      	bls.n	8008f9e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d101      	bne.n	8008fe4 <find_volume+0x194>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e17e      	b.n	80092e2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d901      	bls.n	8008ff0 <find_volume+0x1a0>
 8008fec:	230d      	movs	r3, #13
 8008fee:	e178      	b.n	80092e2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	3338      	adds	r3, #56	@ 0x38
 8008ff4:	330b      	adds	r3, #11
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd ff22 	bl	8006e40 <ld_word>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009002:	d001      	beq.n	8009008 <find_volume+0x1b8>
 8009004:	230d      	movs	r3, #13
 8009006:	e16c      	b.n	80092e2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	3338      	adds	r3, #56	@ 0x38
 800900c:	3316      	adds	r3, #22
 800900e:	4618      	mov	r0, r3
 8009010:	f7fd ff16 	bl	8006e40 <ld_word>
 8009014:	4603      	mov	r3, r0
 8009016:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <find_volume+0x1dc>
 800901e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009020:	3338      	adds	r3, #56	@ 0x38
 8009022:	3324      	adds	r3, #36	@ 0x24
 8009024:	4618      	mov	r0, r3
 8009026:	f7fd ff24 	bl	8006e72 <ld_dword>
 800902a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009030:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800903c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903e:	789b      	ldrb	r3, [r3, #2]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d005      	beq.n	8009050 <find_volume+0x200>
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	789b      	ldrb	r3, [r3, #2]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d001      	beq.n	8009050 <find_volume+0x200>
 800904c:	230d      	movs	r3, #13
 800904e:	e148      	b.n	80092e2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009052:	789b      	ldrb	r3, [r3, #2]
 8009054:	461a      	mov	r2, r3
 8009056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009058:	fb02 f303 	mul.w	r3, r2, r3
 800905c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009064:	461a      	mov	r2, r3
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800906a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906c:	895b      	ldrh	r3, [r3, #10]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <find_volume+0x234>
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	895b      	ldrh	r3, [r3, #10]
 8009076:	461a      	mov	r2, r3
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	895b      	ldrh	r3, [r3, #10]
 800907c:	3b01      	subs	r3, #1
 800907e:	4013      	ands	r3, r2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <find_volume+0x238>
 8009084:	230d      	movs	r3, #13
 8009086:	e12c      	b.n	80092e2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	3338      	adds	r3, #56	@ 0x38
 800908c:	3311      	adds	r3, #17
 800908e:	4618      	mov	r0, r3
 8009090:	f7fd fed6 	bl	8006e40 <ld_word>
 8009094:	4603      	mov	r3, r0
 8009096:	461a      	mov	r2, r3
 8009098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	891b      	ldrh	r3, [r3, #8]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <find_volume+0x25e>
 80090aa:	230d      	movs	r3, #13
 80090ac:	e119      	b.n	80092e2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	3338      	adds	r3, #56	@ 0x38
 80090b2:	3313      	adds	r3, #19
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fd fec3 	bl	8006e40 <ld_word>
 80090ba:	4603      	mov	r3, r0
 80090bc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80090be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d106      	bne.n	80090d2 <find_volume+0x282>
 80090c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c6:	3338      	adds	r3, #56	@ 0x38
 80090c8:	3320      	adds	r3, #32
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fd fed1 	bl	8006e72 <ld_dword>
 80090d0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	3338      	adds	r3, #56	@ 0x38
 80090d6:	330e      	adds	r3, #14
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd feb1 	bl	8006e40 <ld_word>
 80090de:	4603      	mov	r3, r0
 80090e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80090e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <find_volume+0x29c>
 80090e8:	230d      	movs	r3, #13
 80090ea:	e0fa      	b.n	80092e2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80090ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80090ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090f0:	4413      	add	r3, r2
 80090f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090f4:	8912      	ldrh	r2, [r2, #8]
 80090f6:	0912      	lsrs	r2, r2, #4
 80090f8:	b292      	uxth	r2, r2
 80090fa:	4413      	add	r3, r2
 80090fc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80090fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009102:	429a      	cmp	r2, r3
 8009104:	d204      	bcs.n	8009110 <find_volume+0x2c0>
 8009106:	230d      	movs	r3, #13
 8009108:	e0eb      	b.n	80092e2 <find_volume+0x492>
 800910a:	bf00      	nop
 800910c:	20000f8c 	.word	0x20000f8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009118:	8952      	ldrh	r2, [r2, #10]
 800911a:	fbb3 f3f2 	udiv	r3, r3, r2
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <find_volume+0x2da>
 8009126:	230d      	movs	r3, #13
 8009128:	e0db      	b.n	80092e2 <find_volume+0x492>
		fmt = FS_FAT32;
 800912a:	2303      	movs	r3, #3
 800912c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009136:	4293      	cmp	r3, r2
 8009138:	d802      	bhi.n	8009140 <find_volume+0x2f0>
 800913a:	2302      	movs	r3, #2
 800913c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009146:	4293      	cmp	r3, r2
 8009148:	d802      	bhi.n	8009150 <find_volume+0x300>
 800914a:	2301      	movs	r3, #1
 800914c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	1c9a      	adds	r2, r3, #2
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800915c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800915e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009162:	441a      	add	r2, r3
 8009164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009166:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009168:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800916a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916c:	441a      	add	r2, r3
 800916e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009170:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8009172:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009176:	2b03      	cmp	r3, #3
 8009178:	d11e      	bne.n	80091b8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	3338      	adds	r3, #56	@ 0x38
 800917e:	332a      	adds	r3, #42	@ 0x2a
 8009180:	4618      	mov	r0, r3
 8009182:	f7fd fe5d 	bl	8006e40 <ld_word>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <find_volume+0x340>
 800918c:	230d      	movs	r3, #13
 800918e:	e0a8      	b.n	80092e2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	891b      	ldrh	r3, [r3, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <find_volume+0x34c>
 8009198:	230d      	movs	r3, #13
 800919a:	e0a2      	b.n	80092e2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	3338      	adds	r3, #56	@ 0x38
 80091a0:	332c      	adds	r3, #44	@ 0x2c
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fd fe65 	bl	8006e72 <ld_dword>
 80091a8:	4602      	mov	r2, r0
 80091aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ac:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091b6:	e01f      	b.n	80091f8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80091b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ba:	891b      	ldrh	r3, [r3, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <find_volume+0x374>
 80091c0:	230d      	movs	r3, #13
 80091c2:	e08e      	b.n	80092e2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ca:	441a      	add	r2, r3
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80091d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d103      	bne.n	80091e0 <find_volume+0x390>
 80091d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	e00a      	b.n	80091f6 <find_volume+0x3a6>
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	4613      	mov	r3, r2
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	4413      	add	r3, r2
 80091ea:	085a      	lsrs	r2, r3, #1
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80091f6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80091f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091fe:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009202:	0a5b      	lsrs	r3, r3, #9
 8009204:	429a      	cmp	r2, r3
 8009206:	d201      	bcs.n	800920c <find_volume+0x3bc>
 8009208:	230d      	movs	r3, #13
 800920a:	e06a      	b.n	80092e2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800920c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920e:	f04f 32ff 	mov.w	r2, #4294967295
 8009212:	619a      	str	r2, [r3, #24]
 8009214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	2280      	movs	r2, #128	@ 0x80
 8009220:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009222:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009226:	2b03      	cmp	r3, #3
 8009228:	d149      	bne.n	80092be <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	3338      	adds	r3, #56	@ 0x38
 800922e:	3330      	adds	r3, #48	@ 0x30
 8009230:	4618      	mov	r0, r3
 8009232:	f7fd fe05 	bl	8006e40 <ld_word>
 8009236:	4603      	mov	r3, r0
 8009238:	2b01      	cmp	r3, #1
 800923a:	d140      	bne.n	80092be <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800923c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800923e:	3301      	adds	r3, #1
 8009240:	4619      	mov	r1, r3
 8009242:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009244:	f7fe f8de 	bl	8007404 <move_window>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d137      	bne.n	80092be <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800924e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009250:	2200      	movs	r2, #0
 8009252:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	3338      	adds	r3, #56	@ 0x38
 8009258:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800925c:	4618      	mov	r0, r3
 800925e:	f7fd fdef 	bl	8006e40 <ld_word>
 8009262:	4603      	mov	r3, r0
 8009264:	461a      	mov	r2, r3
 8009266:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800926a:	429a      	cmp	r2, r3
 800926c:	d127      	bne.n	80092be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	3338      	adds	r3, #56	@ 0x38
 8009272:	4618      	mov	r0, r3
 8009274:	f7fd fdfd 	bl	8006e72 <ld_dword>
 8009278:	4603      	mov	r3, r0
 800927a:	4a1c      	ldr	r2, [pc, #112]	@ (80092ec <find_volume+0x49c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d11e      	bne.n	80092be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009282:	3338      	adds	r3, #56	@ 0x38
 8009284:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009288:	4618      	mov	r0, r3
 800928a:	f7fd fdf2 	bl	8006e72 <ld_dword>
 800928e:	4603      	mov	r3, r0
 8009290:	4a17      	ldr	r2, [pc, #92]	@ (80092f0 <find_volume+0x4a0>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d113      	bne.n	80092be <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	3338      	adds	r3, #56	@ 0x38
 800929a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fd fde7 	bl	8006e72 <ld_dword>
 80092a4:	4602      	mov	r2, r0
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	3338      	adds	r3, #56	@ 0x38
 80092ae:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fd fddd 	bl	8006e72 <ld_dword>
 80092b8:	4602      	mov	r2, r0
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80092be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80092c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80092c6:	4b0b      	ldr	r3, [pc, #44]	@ (80092f4 <find_volume+0x4a4>)
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	3301      	adds	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	4b09      	ldr	r3, [pc, #36]	@ (80092f4 <find_volume+0x4a4>)
 80092d0:	801a      	strh	r2, [r3, #0]
 80092d2:	4b08      	ldr	r3, [pc, #32]	@ (80092f4 <find_volume+0x4a4>)
 80092d4:	881a      	ldrh	r2, [r3, #0]
 80092d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80092da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092dc:	f7fe f82a 	bl	8007334 <clear_lock>
#endif
	return FR_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3758      	adds	r7, #88	@ 0x58
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	41615252 	.word	0x41615252
 80092f0:	61417272 	.word	0x61417272
 80092f4:	20000f90 	.word	0x20000f90

080092f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009302:	2309      	movs	r3, #9
 8009304:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d02e      	beq.n	800936a <validate+0x72>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d02a      	beq.n	800936a <validate+0x72>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d025      	beq.n	800936a <validate+0x72>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	889a      	ldrh	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	88db      	ldrh	r3, [r3, #6]
 8009328:	429a      	cmp	r2, r3
 800932a:	d11e      	bne.n	800936a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f7fd fe86 	bl	8007042 <lock_fs>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d014      	beq.n	8009366 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	785b      	ldrb	r3, [r3, #1]
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fcfa 	bl	8006d3c <disk_status>
 8009348:	4603      	mov	r3, r0
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <validate+0x60>
				res = FR_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
 8009356:	e008      	b.n	800936a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f7fd fe85 	bl	800706e <unlock_fs>
 8009364:	e001      	b.n	800936a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009366:	230f      	movs	r3, #15
 8009368:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <validate+0x7e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	e000      	b.n	8009378 <validate+0x80>
 8009376:	2300      	movs	r3, #0
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	6013      	str	r3, [r2, #0]
	return res;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800939a:	f107 0310 	add.w	r3, r7, #16
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff fcbb 	bl	8008d1a <get_ldnumber>
 80093a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	da01      	bge.n	80093b0 <f_mount+0x28>
 80093ac:	230b      	movs	r3, #11
 80093ae:	e048      	b.n	8009442 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80093b0:	4a26      	ldr	r2, [pc, #152]	@ (800944c <f_mount+0xc4>)
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00f      	beq.n	80093e0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80093c0:	69b8      	ldr	r0, [r7, #24]
 80093c2:	f7fd ffb7 	bl	8007334 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 ff33 	bl	800a236 <ff_del_syncobj>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <f_mount+0x52>
 80093d6:	2302      	movs	r3, #2
 80093d8:	e033      	b.n	8009442 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00f      	beq.n	8009406 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3310      	adds	r3, #16
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f000 ff02 	bl	800a200 <ff_cre_syncobj>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <f_mount+0x7e>
 8009402:	2302      	movs	r3, #2
 8009404:	e01d      	b.n	8009442 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4910      	ldr	r1, [pc, #64]	@ (800944c <f_mount+0xc4>)
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <f_mount+0x94>
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d001      	beq.n	8009420 <f_mount+0x98>
 800941c:	2300      	movs	r3, #0
 800941e:	e010      	b.n	8009442 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009420:	f107 010c 	add.w	r1, r7, #12
 8009424:	f107 0308 	add.w	r3, r7, #8
 8009428:	2200      	movs	r2, #0
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff fd10 	bl	8008e50 <find_volume>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	7dfa      	ldrb	r2, [r7, #23]
 8009438:	4611      	mov	r1, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f7fd fe17 	bl	800706e <unlock_fs>
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000f8c 	.word	0x20000f8c

08009450 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8009456:	af00      	add	r7, sp, #0
 8009458:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800945c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009460:	6018      	str	r0, [r3, #0]
 8009462:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009466:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800946a:	6019      	str	r1, [r3, #0]
 800946c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009470:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009474:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009476:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800947a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <f_open+0x38>
 8009484:	2309      	movs	r3, #9
 8009486:	e299      	b.n	80099bc <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009488:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800948c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009490:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009494:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009498:	7812      	ldrb	r2, [r2, #0]
 800949a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800949e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80094a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094a4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80094ae:	f107 0308 	add.w	r3, r7, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fccc 	bl	8008e50 <find_volume>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 80094be:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f040 8265 	bne.w	8009992 <f_open+0x542>
		dj.obj.fs = fs;
 80094c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80094cc:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 80094d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80094d4:	f107 0214 	add.w	r2, r7, #20
 80094d8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80094da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094de:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fba4 	bl	8008c38 <follow_path>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80094f6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d11c      	bne.n	8009538 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80094fe:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8009502:	b25b      	sxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	da03      	bge.n	8009510 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8009508:	2306      	movs	r3, #6
 800950a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800950e:	e013      	b.n	8009538 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009510:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009514:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b01      	cmp	r3, #1
 800951c:	bf8c      	ite	hi
 800951e:	2301      	movhi	r3, #1
 8009520:	2300      	movls	r3, #0
 8009522:	b2db      	uxtb	r3, r3
 8009524:	461a      	mov	r2, r3
 8009526:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f7fd fdb9 	bl	80070a4 <chk_lock>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009538:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800953c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 031c 	and.w	r3, r3, #28
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 80a7 	beq.w	800969a <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800954c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01f      	beq.n	8009594 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009554:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009558:	2b04      	cmp	r3, #4
 800955a:	d10e      	bne.n	800957a <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800955c:	f7fd fdfe 	bl	800715c <enq_lock>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d006      	beq.n	8009574 <f_open+0x124>
 8009566:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe ff86 	bl	800847c <dir_register>
 8009570:	4603      	mov	r3, r0
 8009572:	e000      	b.n	8009576 <f_open+0x126>
 8009574:	2312      	movs	r3, #18
 8009576:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800957a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800957e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009582:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009586:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	f042 0208 	orr.w	r2, r2, #8
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e015      	b.n	80095c0 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009594:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009598:	f003 0311 	and.w	r3, r3, #17
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <f_open+0x158>
					res = FR_DENIED;
 80095a0:	2307      	movs	r3, #7
 80095a2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80095a6:	e00b      	b.n	80095c0 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80095a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095ac:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	f003 0304 	and.w	r3, r3, #4
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <f_open+0x170>
 80095ba:	2308      	movs	r3, #8
 80095bc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80095c0:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f040 8088 	bne.w	80096da <f_open+0x28a>
 80095ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095ce:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f003 0308 	and.w	r3, r3, #8
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d07e      	beq.n	80096da <f_open+0x28a>
				dw = GET_FATTIME();
 80095dc:	f7fd f946 	bl	800686c <get_fattime>
 80095e0:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80095e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80095e8:	330e      	adds	r3, #14
 80095ea:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd fc7d 	bl	8006eee <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80095f4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80095f8:	3316      	adds	r3, #22
 80095fa:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fd fc75 	bl	8006eee <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009604:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009608:	330b      	adds	r3, #11
 800960a:	2220      	movs	r2, #32
 800960c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800960e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009612:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009616:	4611      	mov	r1, r2
 8009618:	4618      	mov	r0, r3
 800961a:	f7fe fb88 	bl	8007d2e <ld_clust>
 800961e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009622:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009626:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800962a:	2200      	movs	r2, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe fb9d 	bl	8007d6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009632:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009636:	331c      	adds	r3, #28
 8009638:	2100      	movs	r1, #0
 800963a:	4618      	mov	r0, r3
 800963c:	f7fd fc57 	bl	8006eee <st_dword>
					fs->wflag = 1;
 8009640:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009644:	2201      	movs	r2, #1
 8009646:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009648:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800964c:	2b00      	cmp	r3, #0
 800964e:	d044      	beq.n	80096da <f_open+0x28a>
						dw = fs->winsect;
 8009650:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009656:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800965a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800965e:	2200      	movs	r2, #0
 8009660:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe f8aa 	bl	80077be <remove_chain>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8009670:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009674:	2b00      	cmp	r3, #0
 8009676:	d130      	bne.n	80096da <f_open+0x28a>
							res = move_window(fs, dw);
 8009678:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800967c:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009680:	4618      	mov	r0, r3
 8009682:	f7fd febf 	bl	8007404 <move_window>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800968c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009690:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8009694:	3a01      	subs	r2, #1
 8009696:	615a      	str	r2, [r3, #20]
 8009698:	e01f      	b.n	80096da <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800969a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d11b      	bne.n	80096da <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80096a2:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80096a6:	f003 0310 	and.w	r3, r3, #16
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <f_open+0x266>
					res = FR_NO_FILE;
 80096ae:	2304      	movs	r3, #4
 80096b0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80096b4:	e011      	b.n	80096da <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80096b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096ba:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d008      	beq.n	80096da <f_open+0x28a>
 80096c8:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <f_open+0x28a>
						res = FR_DENIED;
 80096d4:	2307      	movs	r3, #7
 80096d6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80096da:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d148      	bne.n	8009774 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80096e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096e6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	f003 0308 	and.w	r3, r3, #8
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <f_open+0x2bc>
				mode |= FA_MODIFIED;
 80096f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096f8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096fc:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009700:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009704:	7812      	ldrb	r2, [r2, #0]
 8009706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800970a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800970c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009712:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009716:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800971e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009722:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009726:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800972e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009732:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b01      	cmp	r3, #1
 800973a:	bf8c      	ite	hi
 800973c:	2301      	movhi	r3, #1
 800973e:	2300      	movls	r3, #0
 8009740:	b2db      	uxtb	r3, r3
 8009742:	461a      	mov	r2, r3
 8009744:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7fd fd28 	bl	80071a0 <inc_lock>
 8009750:	4602      	mov	r2, r0
 8009752:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009756:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800975e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009762:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d102      	bne.n	8009774 <f_open+0x324>
 800976e:	2302      	movs	r3, #2
 8009770:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009774:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 810a 	bne.w	8009992 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800977e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009782:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f7fe fad0 	bl	8007d2e <ld_clust>
 800978e:	4602      	mov	r2, r0
 8009790:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009794:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800979c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80097a0:	331c      	adds	r3, #28
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fd fb65 	bl	8006e72 <ld_dword>
 80097a8:	4602      	mov	r2, r0
 80097aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80097b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2200      	movs	r2, #0
 80097c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80097c4:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80097c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097cc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80097d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80097d8:	88da      	ldrh	r2, [r3, #6]
 80097da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097de:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80097e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80097f4:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80097f8:	7812      	ldrb	r2, [r2, #0]
 80097fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80097fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009800:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2200      	movs	r2, #0
 8009808:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800980a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800980e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2200      	movs	r2, #0
 8009816:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009818:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800981c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009826:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800982a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3330      	adds	r3, #48	@ 0x30
 8009832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009836:	2100      	movs	r1, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f7fd fba5 	bl	8006f88 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800983e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009842:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	f003 0320 	and.w	r3, r3, #32
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80a0 	beq.w	8009992 <f_open+0x542>
 8009852:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009856:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 8097 	beq.w	8009992 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009864:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009868:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009874:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800987c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009880:	895b      	ldrh	r3, [r3, #10]
 8009882:	025b      	lsls	r3, r3, #9
 8009884:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009888:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800988c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009898:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800989c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80098a8:	e021      	b.n	80098ee <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 80098aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fd fdef 	bl	800749c <get_fat>
 80098be:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80098c2:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d802      	bhi.n	80098d0 <f_open+0x480>
 80098ca:	2302      	movs	r3, #2
 80098cc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80098d0:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d8:	d102      	bne.n	80098e0 <f_open+0x490>
 80098da:	2301      	movs	r3, #1
 80098dc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098e0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80098e4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80098ee:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d105      	bne.n	8009902 <f_open+0x4b2>
 80098f6:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80098fa:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80098fe:	429a      	cmp	r2, r3
 8009900:	d8d3      	bhi.n	80098aa <f_open+0x45a>
				}
				fp->clust = clst;
 8009902:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009906:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009910:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009912:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009916:	2b00      	cmp	r3, #0
 8009918:	d13b      	bne.n	8009992 <f_open+0x542>
 800991a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800991e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009922:	2b00      	cmp	r3, #0
 8009924:	d035      	beq.n	8009992 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009926:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800992a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd fd95 	bl	800745e <clust2sect>
 8009934:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8009938:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d103      	bne.n	8009948 <f_open+0x4f8>
						res = FR_INT_ERR;
 8009940:	2302      	movs	r3, #2
 8009942:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009946:	e024      	b.n	8009992 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009948:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800994c:	0a5a      	lsrs	r2, r3, #9
 800994e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009952:	441a      	add	r2, r3
 8009954:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009958:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009960:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009964:	7858      	ldrb	r0, [r3, #1]
 8009966:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800996a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009974:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009978:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6a1a      	ldr	r2, [r3, #32]
 8009980:	2301      	movs	r3, #1
 8009982:	f7fd fa1d 	bl	8006dc0 <disk_read>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <f_open+0x542>
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009992:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009996:	2b00      	cmp	r3, #0
 8009998:	d006      	beq.n	80099a8 <f_open+0x558>
 800999a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800999e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80099ac:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fd fb5b 	bl	800706e <unlock_fs>
 80099b8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 80099bc:	4618      	mov	r0, r3
 80099be:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b08e      	sub	sp, #56	@ 0x38
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2200      	movs	r2, #0
 80099dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f107 0214 	add.w	r2, r7, #20
 80099e4:	4611      	mov	r1, r2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff fc86 	bl	80092f8 <validate>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80099f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d107      	bne.n	8009a0a <f_read+0x44>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	7d5b      	ldrb	r3, [r3, #21]
 80099fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009a02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d009      	beq.n	8009a1e <f_read+0x58>
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd fb2b 	bl	800706e <unlock_fs>
 8009a18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a1c:	e13d      	b.n	8009c9a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	7d1b      	ldrb	r3, [r3, #20]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d106      	bne.n	8009a38 <f_read+0x72>
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2107      	movs	r1, #7
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fd fb1d 	bl	800706e <unlock_fs>
 8009a34:	2307      	movs	r3, #7
 8009a36:	e130      	b.n	8009c9a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	f240 811c 	bls.w	8009c86 <f_read+0x2c0>
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009a52:	e118      	b.n	8009c86 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 80e4 	bne.w	8009c2a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	0a5b      	lsrs	r3, r3, #9
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	8952      	ldrh	r2, [r2, #10]
 8009a6c:	3a01      	subs	r2, #1
 8009a6e:	4013      	ands	r3, r2
 8009a70:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d139      	bne.n	8009aec <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a86:	e013      	b.n	8009ab0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d007      	beq.n	8009aa0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	4619      	mov	r1, r3
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7fd ff8e 	bl	80079b8 <clmt_clust>
 8009a9c:	6338      	str	r0, [r7, #48]	@ 0x30
 8009a9e:	e007      	b.n	8009ab0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f7fd fcf7 	bl	800749c <get_fat>
 8009aae:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d809      	bhi.n	8009aca <f_read+0x104>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	755a      	strb	r2, [r3, #21]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2102      	movs	r1, #2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fd fad4 	bl	800706e <unlock_fs>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e0e7      	b.n	8009c9a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d109      	bne.n	8009ae6 <f_read+0x120>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	755a      	strb	r2, [r3, #21]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2101      	movs	r1, #1
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fd fac6 	bl	800706e <unlock_fs>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e0d9      	b.n	8009c9a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aea:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7fd fcb2 	bl	800745e <clust2sect>
 8009afa:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d109      	bne.n	8009b16 <f_read+0x150>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2202      	movs	r2, #2
 8009b06:	755a      	strb	r2, [r3, #21]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2102      	movs	r1, #2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fd faae 	bl	800706e <unlock_fs>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e0c1      	b.n	8009c9a <f_read+0x2d4>
			sect += csect;
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0a5b      	lsrs	r3, r3, #9
 8009b22:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d03e      	beq.n	8009ba8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b2a:	69fa      	ldr	r2, [r7, #28]
 8009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2e:	4413      	add	r3, r2
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	8952      	ldrh	r2, [r2, #10]
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d905      	bls.n	8009b44 <f_read+0x17e>
					cc = fs->csize - csect;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	895b      	ldrh	r3, [r3, #10]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	7858      	ldrb	r0, [r3, #1]
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b4e:	f7fd f937 	bl	8006dc0 <disk_read>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d009      	beq.n	8009b6c <f_read+0x1a6>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	755a      	strb	r2, [r3, #21]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2101      	movs	r1, #1
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fd fa83 	bl	800706e <unlock_fs>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e096      	b.n	8009c9a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
 8009b70:	b25b      	sxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	da14      	bge.n	8009ba0 <f_read+0x1da>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1a      	ldr	r2, [r3, #32]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d90d      	bls.n	8009ba0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6a1a      	ldr	r2, [r3, #32]
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	025b      	lsls	r3, r3, #9
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b90:	18d0      	adds	r0, r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3330      	adds	r3, #48	@ 0x30
 8009b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	f7fd f9d3 	bl	8006f46 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	025b      	lsls	r3, r3, #9
 8009ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009ba6:	e05a      	b.n	8009c5e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d038      	beq.n	8009c24 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	7d1b      	ldrb	r3, [r3, #20]
 8009bb6:	b25b      	sxtb	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	da1d      	bge.n	8009bf8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	7858      	ldrb	r0, [r3, #1]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a1a      	ldr	r2, [r3, #32]
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f7fd f918 	bl	8006e00 <disk_write>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d009      	beq.n	8009bea <f_read+0x224>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	755a      	strb	r2, [r3, #21]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2101      	movs	r1, #1
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fd fa44 	bl	800706e <unlock_fs>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e057      	b.n	8009c9a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	7d1b      	ldrb	r3, [r3, #20]
 8009bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	7858      	ldrb	r0, [r3, #1]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c02:	2301      	movs	r3, #1
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	f7fd f8db 	bl	8006dc0 <disk_read>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <f_read+0x25e>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	755a      	strb	r2, [r3, #21]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2101      	movs	r1, #1
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fd fa27 	bl	800706e <unlock_fs>
 8009c20:	2301      	movs	r3, #1
 8009c22:	e03a      	b.n	8009c9a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c32:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d901      	bls.n	8009c44 <f_read+0x27e>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c52:	4413      	add	r3, r2
 8009c54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c56:	4619      	mov	r1, r3
 8009c58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c5a:	f7fd f974 	bl	8006f46 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	4413      	add	r3, r2
 8009c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	699a      	ldr	r2, [r3, #24]
 8009c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6c:	441a      	add	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	619a      	str	r2, [r3, #24]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c78:	441a      	add	r2, r3
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f47f aee3 	bne.w	8009a54 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2100      	movs	r1, #0
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fd f9eb 	bl	800706e <unlock_fs>
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3738      	adds	r7, #56	@ 0x38
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009cb2:	6018      	str	r0, [r3, #0]
 8009cb4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cb8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009cbc:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009cbe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cc2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <f_opendir+0x2e>
 8009ccc:	2309      	movs	r3, #9
 8009cce:	e0a8      	b.n	8009e22 <f_opendir+0x180>

	/* Get logical drive */
	obj = &dp->obj;
 8009cd0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cd4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8009cde:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8009ce2:	463b      	mov	r3, r7
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff f8b2 	bl	8008e50 <find_volume>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8009cf2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f040 8081 	bne.w	8009dfe <f_opendir+0x15c>
		obj->fs = fs;
 8009cfc:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009d00:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d04:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8009d06:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009d0a:	f107 020c 	add.w	r2, r7, #12
 8009d0e:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009d10:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d14:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d1e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009d22:	4611      	mov	r1, r2
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f7fe ff87 	bl	8008c38 <follow_path>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8009d30:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d15b      	bne.n	8009df0 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009d38:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d3c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009d46:	b25b      	sxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	db1a      	blt.n	8009d82 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009d4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d50:	799b      	ldrb	r3, [r3, #6]
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d010      	beq.n	8009d7c <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009d5a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009d5e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d62:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f7fd ffde 	bl	8007d2e <ld_clust>
 8009d72:	4602      	mov	r2, r0
 8009d74:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d78:	609a      	str	r2, [r3, #8]
 8009d7a:	e002      	b.n	8009d82 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009d7c:	2305      	movs	r3, #5
 8009d7e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8009d82:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d132      	bne.n	8009df0 <f_opendir+0x14e>
				obj->id = fs->id;
 8009d8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009d8e:	88da      	ldrh	r2, [r3, #6]
 8009d90:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d94:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009d96:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d9a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	f7fd fe3d 	bl	8007a20 <dir_sdi>
 8009da6:	4603      	mov	r3, r0
 8009da8:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009dac:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d11d      	bne.n	8009df0 <f_opendir+0x14e>
					if (obj->sclust) {
 8009db4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d014      	beq.n	8009de8 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009dbe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009dc2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	f7fd f9e9 	bl	80071a0 <inc_lock>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009dd4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009dd6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d107      	bne.n	8009df0 <f_opendir+0x14e>
 8009de0:	2312      	movs	r3, #18
 8009de2:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8009de6:	e003      	b.n	8009df0 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009de8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009dec:	2200      	movs	r2, #0
 8009dee:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009df0:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d102      	bne.n	8009dfe <f_opendir+0x15c>
 8009df8:	2305      	movs	r3, #5
 8009dfa:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009dfe:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <f_opendir+0x16c>
 8009e06:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009e12:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8009e16:	4611      	mov	r1, r2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fd f928 	bl	800706e <unlock_fs>
 8009e1e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f107 0208 	add.w	r2, r7, #8
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff fa5b 	bl	80092f8 <validate>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d115      	bne.n	8009e78 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d006      	beq.n	8009e62 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fd fa2f 	bl	80072bc <dec_lock>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2100      	movs	r1, #0
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fd f8fb 	bl	800706e <unlock_fs>
#endif
	}
	return res;
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009e8e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009e92:	6018      	str	r0, [r3, #0]
 8009e94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009e98:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8009e9c:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009e9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009ea2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009eac:	4611      	mov	r1, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff fa22 	bl	80092f8 <validate>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 8009eba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d14b      	bne.n	8009f5a <f_readdir+0xd8>
		if (!fno) {
 8009ec2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009ec6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10b      	bne.n	8009ee8 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009ed0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009ed4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	f7fd fda0 	bl	8007a20 <dir_sdi>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8009ee6:	e038      	b.n	8009f5a <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8009ee8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8009eec:	f107 0208 	add.w	r2, r7, #8
 8009ef0:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8009ef2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009ef6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009efa:	2100      	movs	r1, #0
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	f7fe f956 	bl	80081ae <dir_read>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009f08:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d102      	bne.n	8009f16 <f_readdir+0x94>
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8009f16:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d11d      	bne.n	8009f5a <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009f1e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009f22:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8009f26:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009f2a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009f2e:	6811      	ldr	r1, [r2, #0]
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	f7fe fb9b 	bl	800866c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009f36:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009f3a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009f3e:	2100      	movs	r1, #0
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	f7fd fde8 	bl	8007b16 <dir_next>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009f4c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009f50:	2b04      	cmp	r3, #4
 8009f52:	d102      	bne.n	8009f5a <f_readdir+0xd8>
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009f5a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8009f5e:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fd f882 	bl	800706e <unlock_fs>
 8009f6a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b087      	sub	sp, #28
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	4613      	mov	r3, r2
 8009f84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f86:	2301      	movs	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009f90:	7a5b      	ldrb	r3, [r3, #9]
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d131      	bne.n	8009ffc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f98:	4b1c      	ldr	r3, [pc, #112]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009f9a:	7a5b      	ldrb	r3, [r3, #9]
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009fa6:	4b19      	ldr	r3, [pc, #100]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009fa8:	7a5b      	ldrb	r3, [r3, #9]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	4a17      	ldr	r2, [pc, #92]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009fb6:	4b15      	ldr	r3, [pc, #84]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009fb8:	7a5b      	ldrb	r3, [r3, #9]
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4b13      	ldr	r3, [pc, #76]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009fc0:	4413      	add	r3, r2
 8009fc2:	79fa      	ldrb	r2, [r7, #7]
 8009fc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009fc6:	4b11      	ldr	r3, [pc, #68]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009fc8:	7a5b      	ldrb	r3, [r3, #9]
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	b2d1      	uxtb	r1, r2
 8009fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800a00c <FATFS_LinkDriverEx+0x94>)
 8009fd2:	7251      	strb	r1, [r2, #9]
 8009fd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009fd6:	7dbb      	ldrb	r3, [r7, #22]
 8009fd8:	3330      	adds	r3, #48	@ 0x30
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	223a      	movs	r2, #58	@ 0x3a
 8009fe6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	3302      	adds	r3, #2
 8009fec:	222f      	movs	r2, #47	@ 0x2f
 8009fee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	3303      	adds	r3, #3
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20000fb4 	.word	0x20000fb4

0800a010 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a01a:	2200      	movs	r2, #0
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff ffaa 	bl	8009f78 <FATFS_LinkDriverEx>
 800a024:	4603      	mov	r3, r0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a030:	b480      	push	{r7}
 800a032:	b089      	sub	sp, #36	@ 0x24
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a040:	d802      	bhi.n	800a048 <ff_convert+0x18>
		c = chr;
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	837b      	strh	r3, [r7, #26]
 800a046:	e045      	b.n	800a0d4 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d005      	beq.n	800a05a <ff_convert+0x2a>
			p = oem2uni;
 800a04e:	4b25      	ldr	r3, [pc, #148]	@ (800a0e4 <ff_convert+0xb4>)
 800a050:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800a052:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a056:	60bb      	str	r3, [r7, #8]
 800a058:	e004      	b.n	800a064 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800a05a:	4b23      	ldr	r3, [pc, #140]	@ (800a0e8 <ff_convert+0xb8>)
 800a05c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800a05e:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a062:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800a068:	2310      	movs	r3, #16
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	e021      	b.n	800a0b2 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	0fda      	lsrs	r2, r3, #31
 800a076:	4413      	add	r3, r2
 800a078:	105b      	asrs	r3, r3, #1
 800a07a:	461a      	mov	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	4413      	add	r3, r2
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	88fa      	ldrh	r2, [r7, #6]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d013      	beq.n	800a0ba <ff_convert+0x8a>
			if (chr > p[i * 2])
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	4413      	add	r3, r2
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	88fa      	ldrh	r2, [r7, #6]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d902      	bls.n	800a0a8 <ff_convert+0x78>
				li = i;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	e001      	b.n	800a0ac <ff_convert+0x7c>
			else
				hi = i;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	613b      	str	r3, [r7, #16]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1da      	bne.n	800a06e <ff_convert+0x3e>
 800a0b8:	e000      	b.n	800a0bc <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800a0ba:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d006      	beq.n	800a0d0 <ff_convert+0xa0>
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	3302      	adds	r3, #2
 800a0c8:	69fa      	ldr	r2, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	e000      	b.n	800a0d2 <ff_convert+0xa2>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800a0d4:	8b7b      	ldrh	r3, [r7, #26]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3724      	adds	r7, #36	@ 0x24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	08024548 	.word	0x08024548
 800a0e8:	0800f0c4 	.word	0x0800f0c4

0800a0ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0fc:	d201      	bcs.n	800a102 <ff_wtoupper+0x16>
 800a0fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a1f8 <ff_wtoupper+0x10c>)
 800a100:	e000      	b.n	800a104 <ff_wtoupper+0x18>
 800a102:	4b3e      	ldr	r3, [pc, #248]	@ (800a1fc <ff_wtoupper+0x110>)
 800a104:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	1c9a      	adds	r2, r3, #2
 800a10a:	617a      	str	r2, [r7, #20]
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a110:	8a7b      	ldrh	r3, [r7, #18]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d068      	beq.n	800a1e8 <ff_wtoupper+0xfc>
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	8a7b      	ldrh	r3, [r7, #18]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d364      	bcc.n	800a1e8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	1c9a      	adds	r2, r3, #2
 800a122:	617a      	str	r2, [r7, #20]
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	823b      	strh	r3, [r7, #16]
 800a128:	8a3b      	ldrh	r3, [r7, #16]
 800a12a:	0a1b      	lsrs	r3, r3, #8
 800a12c:	81fb      	strh	r3, [r7, #14]
 800a12e:	8a3b      	ldrh	r3, [r7, #16]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a134:	88fa      	ldrh	r2, [r7, #6]
 800a136:	8a79      	ldrh	r1, [r7, #18]
 800a138:	8a3b      	ldrh	r3, [r7, #16]
 800a13a:	440b      	add	r3, r1
 800a13c:	429a      	cmp	r2, r3
 800a13e:	da49      	bge.n	800a1d4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a140:	89fb      	ldrh	r3, [r7, #14]
 800a142:	2b08      	cmp	r3, #8
 800a144:	d84f      	bhi.n	800a1e6 <ff_wtoupper+0xfa>
 800a146:	a201      	add	r2, pc, #4	@ (adr r2, 800a14c <ff_wtoupper+0x60>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a183 	.word	0x0800a183
 800a154:	0800a199 	.word	0x0800a199
 800a158:	0800a1a1 	.word	0x0800a1a1
 800a15c:	0800a1a9 	.word	0x0800a1a9
 800a160:	0800a1b1 	.word	0x0800a1b1
 800a164:	0800a1b9 	.word	0x0800a1b9
 800a168:	0800a1c1 	.word	0x0800a1c1
 800a16c:	0800a1c9 	.word	0x0800a1c9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a170:	88fa      	ldrh	r2, [r7, #6]
 800a172:	8a7b      	ldrh	r3, [r7, #18]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	4413      	add	r3, r2
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	80fb      	strh	r3, [r7, #6]
 800a180:	e027      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a182:	88fa      	ldrh	r2, [r7, #6]
 800a184:	8a7b      	ldrh	r3, [r7, #18]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	b29b      	uxth	r3, r3
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	b29b      	uxth	r3, r3
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	80fb      	strh	r3, [r7, #6]
 800a196:	e01c      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	3b10      	subs	r3, #16
 800a19c:	80fb      	strh	r3, [r7, #6]
 800a19e:	e018      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a1a0:	88fb      	ldrh	r3, [r7, #6]
 800a1a2:	3b20      	subs	r3, #32
 800a1a4:	80fb      	strh	r3, [r7, #6]
 800a1a6:	e014      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a1a8:	88fb      	ldrh	r3, [r7, #6]
 800a1aa:	3b30      	subs	r3, #48	@ 0x30
 800a1ac:	80fb      	strh	r3, [r7, #6]
 800a1ae:	e010      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	3b1a      	subs	r3, #26
 800a1b4:	80fb      	strh	r3, [r7, #6]
 800a1b6:	e00c      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a1b8:	88fb      	ldrh	r3, [r7, #6]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	80fb      	strh	r3, [r7, #6]
 800a1be:	e008      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	3b50      	subs	r3, #80	@ 0x50
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	e004      	b.n	800a1d2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a1c8:	88fb      	ldrh	r3, [r7, #6]
 800a1ca:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a1ce:	80fb      	strh	r3, [r7, #6]
 800a1d0:	bf00      	nop
			}
			break;
 800a1d2:	e008      	b.n	800a1e6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a1d4:	89fb      	ldrh	r3, [r7, #14]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d195      	bne.n	800a106 <ff_wtoupper+0x1a>
 800a1da:	8a3b      	ldrh	r3, [r7, #16]
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a1e4:	e78f      	b.n	800a106 <ff_wtoupper+0x1a>
			break;
 800a1e6:	bf00      	nop
	}

	return chr;
 800a1e8:	88fb      	ldrh	r3, [r7, #6]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	080399cc 	.word	0x080399cc
 800a1fc:	08039bc0 	.word	0x08039bc0

0800a200 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	6039      	str	r1, [r7, #0]
 800a20a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a20c:	2200      	movs	r2, #0
 800a20e:	2101      	movs	r1, #1
 800a210:	2001      	movs	r0, #1
 800a212:	f000 f9af 	bl	800a574 <osSemaphoreNew>
 800a216:	4602      	mov	r2, r0
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	bf14      	ite	ne
 800a224:	2301      	movne	r3, #1
 800a226:	2300      	moveq	r3, #0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	60fb      	str	r3, [r7, #12]

    return ret;
 800a22c:	68fb      	ldr	r3, [r7, #12]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b082      	sub	sp, #8
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fab8 	bl	800a7b4 <osSemaphoreDelete>
#endif
    return 1;
 800a244:	2301      	movs	r3, #1
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a25a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fa12 	bl	800a688 <osSemaphoreAcquire>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a26a:	2301      	movs	r3, #1
 800a26c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a26e:	68fb      	ldr	r3, [r7, #12]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fa53 	bl	800a72c <osSemaphoreRelease>
#endif
}
 800a286:	bf00      	nop
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <__NVIC_SetPriority>:
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	6039      	str	r1, [r7, #0]
 800a29a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a29c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	db0a      	blt.n	800a2ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	490c      	ldr	r1, [pc, #48]	@ (800a2dc <__NVIC_SetPriority+0x4c>)
 800a2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2ae:	0112      	lsls	r2, r2, #4
 800a2b0:	b2d2      	uxtb	r2, r2
 800a2b2:	440b      	add	r3, r1
 800a2b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a2b8:	e00a      	b.n	800a2d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	4908      	ldr	r1, [pc, #32]	@ (800a2e0 <__NVIC_SetPriority+0x50>)
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
 800a2c2:	f003 030f 	and.w	r3, r3, #15
 800a2c6:	3b04      	subs	r3, #4
 800a2c8:	0112      	lsls	r2, r2, #4
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	440b      	add	r3, r1
 800a2ce:	761a      	strb	r2, [r3, #24]
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	e000e100 	.word	0xe000e100
 800a2e0:	e000ed00 	.word	0xe000ed00

0800a2e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a2e8:	4b05      	ldr	r3, [pc, #20]	@ (800a300 <SysTick_Handler+0x1c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a2ec:	f002 fb36 	bl	800c95c <xTaskGetSchedulerState>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d001      	beq.n	800a2fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a2f6:	f003 fa2f 	bl	800d758 <xPortSysTickHandler>
  }
}
 800a2fa:	bf00      	nop
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	e000e010 	.word	0xe000e010

0800a304 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a308:	2100      	movs	r1, #0
 800a30a:	f06f 0004 	mvn.w	r0, #4
 800a30e:	f7ff ffbf 	bl	800a290 <__NVIC_SetPriority>
#endif
}
 800a312:	bf00      	nop
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a31e:	f3ef 8305 	mrs	r3, IPSR
 800a322:	603b      	str	r3, [r7, #0]
  return(result);
 800a324:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a32a:	f06f 0305 	mvn.w	r3, #5
 800a32e:	607b      	str	r3, [r7, #4]
 800a330:	e00c      	b.n	800a34c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a332:	4b0a      	ldr	r3, [pc, #40]	@ (800a35c <osKernelInitialize+0x44>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d105      	bne.n	800a346 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a33a:	4b08      	ldr	r3, [pc, #32]	@ (800a35c <osKernelInitialize+0x44>)
 800a33c:	2201      	movs	r2, #1
 800a33e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a340:	2300      	movs	r3, #0
 800a342:	607b      	str	r3, [r7, #4]
 800a344:	e002      	b.n	800a34c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a346:	f04f 33ff 	mov.w	r3, #4294967295
 800a34a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a34c:	687b      	ldr	r3, [r7, #4]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	20000fc0 	.word	0x20000fc0

0800a360 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800a366:	f002 faf9 	bl	800c95c <xTaskGetSchedulerState>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d004      	beq.n	800a37a <osKernelGetState+0x1a>
 800a370:	2b02      	cmp	r3, #2
 800a372:	d105      	bne.n	800a380 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800a374:	2302      	movs	r3, #2
 800a376:	607b      	str	r3, [r7, #4]
      break;
 800a378:	e00c      	b.n	800a394 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800a37a:	2303      	movs	r3, #3
 800a37c:	607b      	str	r3, [r7, #4]
      break;
 800a37e:	e009      	b.n	800a394 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800a380:	4b07      	ldr	r3, [pc, #28]	@ (800a3a0 <osKernelGetState+0x40>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d102      	bne.n	800a38e <osKernelGetState+0x2e>
        state = osKernelReady;
 800a388:	2301      	movs	r3, #1
 800a38a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800a38c:	e001      	b.n	800a392 <osKernelGetState+0x32>
        state = osKernelInactive;
 800a38e:	2300      	movs	r3, #0
 800a390:	607b      	str	r3, [r7, #4]
      break;
 800a392:	bf00      	nop
  }

  return (state);
 800a394:	687b      	ldr	r3, [r7, #4]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20000fc0 	.word	0x20000fc0

0800a3a4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3aa:	f3ef 8305 	mrs	r3, IPSR
 800a3ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a3b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <osKernelStart+0x1a>
    stat = osErrorISR;
 800a3b6:	f06f 0305 	mvn.w	r3, #5
 800a3ba:	607b      	str	r3, [r7, #4]
 800a3bc:	e010      	b.n	800a3e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3be:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <osKernelStart+0x48>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d109      	bne.n	800a3da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3c6:	f7ff ff9d 	bl	800a304 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3ca:	4b08      	ldr	r3, [pc, #32]	@ (800a3ec <osKernelStart+0x48>)
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3d0:	f001 fe4e 	bl	800c070 <vTaskStartScheduler>
      stat = osOK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	607b      	str	r3, [r7, #4]
 800a3d8:	e002      	b.n	800a3e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3da:	f04f 33ff 	mov.w	r3, #4294967295
 800a3de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3e0:	687b      	ldr	r3, [r7, #4]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000fc0 	.word	0x20000fc0

0800a3f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f6:	f3ef 8305 	mrs	r3, IPSR
 800a3fa:	603b      	str	r3, [r7, #0]
  return(result);
 800a3fc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a402:	f001 ff61 	bl	800c2c8 <xTaskGetTickCountFromISR>
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	e002      	b.n	800a410 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a40a:	f001 ff4d 	bl	800c2a8 <xTaskGetTickCount>
 800a40e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a410:	687b      	ldr	r3, [r7, #4]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b08e      	sub	sp, #56	@ 0x38
 800a41e:	af04      	add	r7, sp, #16
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a426:	2300      	movs	r3, #0
 800a428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a42a:	f3ef 8305 	mrs	r3, IPSR
 800a42e:	617b      	str	r3, [r7, #20]
  return(result);
 800a430:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a432:	2b00      	cmp	r3, #0
 800a434:	d17e      	bne.n	800a534 <osThreadNew+0x11a>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d07b      	beq.n	800a534 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a43c:	2380      	movs	r3, #128	@ 0x80
 800a43e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a440:	2318      	movs	r3, #24
 800a442:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a448:	f04f 33ff 	mov.w	r3, #4294967295
 800a44c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d045      	beq.n	800a4e0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <osThreadNew+0x48>
        name = attr->name;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <osThreadNew+0x6e>
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	2b38      	cmp	r3, #56	@ 0x38
 800a47a:	d805      	bhi.n	800a488 <osThreadNew+0x6e>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <osThreadNew+0x72>
        return (NULL);
 800a488:	2300      	movs	r3, #0
 800a48a:	e054      	b.n	800a536 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	089b      	lsrs	r3, r3, #2
 800a49a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00e      	beq.n	800a4c2 <osThreadNew+0xa8>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	2ba7      	cmp	r3, #167	@ 0xa7
 800a4aa:	d90a      	bls.n	800a4c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <osThreadNew+0xa8>
        mem = 1;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	61bb      	str	r3, [r7, #24]
 800a4c0:	e010      	b.n	800a4e4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10c      	bne.n	800a4e4 <osThreadNew+0xca>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d108      	bne.n	800a4e4 <osThreadNew+0xca>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <osThreadNew+0xca>
          mem = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61bb      	str	r3, [r7, #24]
 800a4de:	e001      	b.n	800a4e4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d110      	bne.n	800a50c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4f2:	9202      	str	r2, [sp, #8]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6a3a      	ldr	r2, [r7, #32]
 800a4fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f001 fbc1 	bl	800bc88 <xTaskCreateStatic>
 800a506:	4603      	mov	r3, r0
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	e013      	b.n	800a534 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d110      	bne.n	800a534 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	b29a      	uxth	r2, r3
 800a516:	f107 0310 	add.w	r3, r7, #16
 800a51a:	9301      	str	r3, [sp, #4]
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f001 fc0f 	bl	800bd48 <xTaskCreate>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d001      	beq.n	800a534 <osThreadNew+0x11a>
            hTask = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a534:	693b      	ldr	r3, [r7, #16]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3728      	adds	r7, #40	@ 0x28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a546:	f3ef 8305 	mrs	r3, IPSR
 800a54a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a54c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <osDelay+0x1c>
    stat = osErrorISR;
 800a552:	f06f 0305 	mvn.w	r3, #5
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e007      	b.n	800a56a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <osDelay+0x2c>
      vTaskDelay(ticks);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 fd4d 	bl	800c004 <vTaskDelay>
    }
  }

  return (stat);
 800a56a:	68fb      	ldr	r3, [r7, #12]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a574:	b580      	push	{r7, lr}
 800a576:	b08a      	sub	sp, #40	@ 0x28
 800a578:	af02      	add	r7, sp, #8
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a584:	f3ef 8305 	mrs	r3, IPSR
 800a588:	613b      	str	r3, [r7, #16]
  return(result);
 800a58a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d175      	bne.n	800a67c <osSemaphoreNew+0x108>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d072      	beq.n	800a67c <osSemaphoreNew+0x108>
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d86e      	bhi.n	800a67c <osSemaphoreNew+0x108>
    mem = -1;
 800a59e:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d015      	beq.n	800a5d6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d006      	beq.n	800a5c0 <osSemaphoreNew+0x4c>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	2b4f      	cmp	r3, #79	@ 0x4f
 800a5b8:	d902      	bls.n	800a5c0 <osSemaphoreNew+0x4c>
        mem = 1;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	61bb      	str	r3, [r7, #24]
 800a5be:	e00c      	b.n	800a5da <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d108      	bne.n	800a5da <osSemaphoreNew+0x66>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d104      	bne.n	800a5da <osSemaphoreNew+0x66>
          mem = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61bb      	str	r3, [r7, #24]
 800a5d4:	e001      	b.n	800a5da <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d04c      	beq.n	800a67c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d128      	bne.n	800a63a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d10a      	bne.n	800a604 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	2203      	movs	r2, #3
 800a5f4:	9200      	str	r2, [sp, #0]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	f000 fb82 	bl	800ad04 <xQueueGenericCreateStatic>
 800a600:	61f8      	str	r0, [r7, #28]
 800a602:	e005      	b.n	800a610 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a604:	2203      	movs	r2, #3
 800a606:	2100      	movs	r1, #0
 800a608:	2001      	movs	r0, #1
 800a60a:	f000 fbf8 	bl	800adfe <xQueueGenericCreate>
 800a60e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d022      	beq.n	800a65c <osSemaphoreNew+0xe8>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01f      	beq.n	800a65c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a61c:	2300      	movs	r3, #0
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	69f8      	ldr	r0, [r7, #28]
 800a624:	f000 fcb8 	bl	800af98 <xQueueGenericSend>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d016      	beq.n	800a65c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a62e:	69f8      	ldr	r0, [r7, #28]
 800a630:	f001 f956 	bl	800b8e0 <vQueueDelete>
            hSemaphore = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	61fb      	str	r3, [r7, #28]
 800a638:	e010      	b.n	800a65c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d108      	bne.n	800a652 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	461a      	mov	r2, r3
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fc36 	bl	800aeba <xQueueCreateCountingSemaphoreStatic>
 800a64e:	61f8      	str	r0, [r7, #28]
 800a650:	e004      	b.n	800a65c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a652:	68b9      	ldr	r1, [r7, #8]
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fc69 	bl	800af2c <xQueueCreateCountingSemaphore>
 800a65a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00c      	beq.n	800a67c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	617b      	str	r3, [r7, #20]
 800a66e:	e001      	b.n	800a674 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a670:	2300      	movs	r3, #0
 800a672:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a674:	6979      	ldr	r1, [r7, #20]
 800a676:	69f8      	ldr	r0, [r7, #28]
 800a678:	f001 fa7e 	bl	800bb78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a67c:	69fb      	ldr	r3, [r7, #28]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3720      	adds	r7, #32
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
	...

0800a688 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a696:	2300      	movs	r3, #0
 800a698:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d103      	bne.n	800a6a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a6a0:	f06f 0303 	mvn.w	r3, #3
 800a6a4:	617b      	str	r3, [r7, #20]
 800a6a6:	e039      	b.n	800a71c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6a8:	f3ef 8305 	mrs	r3, IPSR
 800a6ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d022      	beq.n	800a6fa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a6ba:	f06f 0303 	mvn.w	r3, #3
 800a6be:	617b      	str	r3, [r7, #20]
 800a6c0:	e02c      	b.n	800a71c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a6c6:	f107 0308 	add.w	r3, r7, #8
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	6938      	ldr	r0, [r7, #16]
 800a6d0:	f001 f884 	bl	800b7dc <xQueueReceiveFromISR>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d003      	beq.n	800a6e2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a6da:	f06f 0302 	mvn.w	r3, #2
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	e01c      	b.n	800a71c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d019      	beq.n	800a71c <osSemaphoreAcquire+0x94>
 800a6e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a728 <osSemaphoreAcquire+0xa0>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	e010      	b.n	800a71c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6938      	ldr	r0, [r7, #16]
 800a6fe:	f000 ff5d 	bl	800b5bc <xQueueSemaphoreTake>
 800a702:	4603      	mov	r3, r0
 800a704:	2b01      	cmp	r3, #1
 800a706:	d009      	beq.n	800a71c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a70e:	f06f 0301 	mvn.w	r3, #1
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	e002      	b.n	800a71c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a716:	f06f 0302 	mvn.w	r3, #2
 800a71a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a71c:	697b      	ldr	r3, [r7, #20]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	e000ed04 	.word	0xe000ed04

0800a72c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d103      	bne.n	800a74a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a742:	f06f 0303 	mvn.w	r3, #3
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	e02c      	b.n	800a7a4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a74a:	f3ef 8305 	mrs	r3, IPSR
 800a74e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a750:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a752:	2b00      	cmp	r3, #0
 800a754:	d01a      	beq.n	800a78c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a756:	2300      	movs	r3, #0
 800a758:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a75a:	f107 0308 	add.w	r3, r7, #8
 800a75e:	4619      	mov	r1, r3
 800a760:	6938      	ldr	r0, [r7, #16]
 800a762:	f000 fdb9 	bl	800b2d8 <xQueueGiveFromISR>
 800a766:	4603      	mov	r3, r0
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d003      	beq.n	800a774 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a76c:	f06f 0302 	mvn.w	r3, #2
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	e017      	b.n	800a7a4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d014      	beq.n	800a7a4 <osSemaphoreRelease+0x78>
 800a77a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b0 <osSemaphoreRelease+0x84>)
 800a77c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	e00b      	b.n	800a7a4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a78c:	2300      	movs	r3, #0
 800a78e:	2200      	movs	r2, #0
 800a790:	2100      	movs	r1, #0
 800a792:	6938      	ldr	r0, [r7, #16]
 800a794:	f000 fc00 	bl	800af98 <xQueueGenericSend>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d002      	beq.n	800a7a4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a79e:	f06f 0302 	mvn.w	r3, #2
 800a7a2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a7a4:	697b      	ldr	r3, [r7, #20]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7c0:	f3ef 8305 	mrs	r3, IPSR
 800a7c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a7cc:	f06f 0305 	mvn.w	r3, #5
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	e00e      	b.n	800a7f2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a7da:	f06f 0303 	mvn.w	r3, #3
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	e007      	b.n	800a7f2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a7e2:	6938      	ldr	r0, [r7, #16]
 800a7e4:	f001 f9f2 	bl	800bbcc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a7ec:	6938      	ldr	r0, [r7, #16]
 800a7ee:	f001 f877 	bl	800b8e0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a7f2:	697b      	ldr	r3, [r7, #20]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08a      	sub	sp, #40	@ 0x28
 800a800:	af02      	add	r7, sp, #8
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a80c:	f3ef 8305 	mrs	r3, IPSR
 800a810:	613b      	str	r3, [r7, #16]
  return(result);
 800a812:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a814:	2b00      	cmp	r3, #0
 800a816:	d15f      	bne.n	800a8d8 <osMessageQueueNew+0xdc>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d05c      	beq.n	800a8d8 <osMessageQueueNew+0xdc>
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d059      	beq.n	800a8d8 <osMessageQueueNew+0xdc>
    mem = -1;
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d029      	beq.n	800a884 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d012      	beq.n	800a85e <osMessageQueueNew+0x62>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	2b4f      	cmp	r3, #79	@ 0x4f
 800a83e:	d90e      	bls.n	800a85e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00a      	beq.n	800a85e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695a      	ldr	r2, [r3, #20]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	68b9      	ldr	r1, [r7, #8]
 800a850:	fb01 f303 	mul.w	r3, r1, r3
 800a854:	429a      	cmp	r2, r3
 800a856:	d302      	bcc.n	800a85e <osMessageQueueNew+0x62>
        mem = 1;
 800a858:	2301      	movs	r3, #1
 800a85a:	61bb      	str	r3, [r7, #24]
 800a85c:	e014      	b.n	800a888 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d110      	bne.n	800a888 <osMessageQueueNew+0x8c>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10c      	bne.n	800a888 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a872:	2b00      	cmp	r3, #0
 800a874:	d108      	bne.n	800a888 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d104      	bne.n	800a888 <osMessageQueueNew+0x8c>
          mem = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	61bb      	str	r3, [r7, #24]
 800a882:	e001      	b.n	800a888 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d10b      	bne.n	800a8a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	2100      	movs	r1, #0
 800a898:	9100      	str	r1, [sp, #0]
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 fa31 	bl	800ad04 <xQueueGenericCreateStatic>
 800a8a2:	61f8      	str	r0, [r7, #28]
 800a8a4:	e008      	b.n	800a8b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d105      	bne.n	800a8b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	68b9      	ldr	r1, [r7, #8]
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 faa4 	bl	800adfe <xQueueGenericCreate>
 800a8b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00c      	beq.n	800a8d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <osMessageQueueNew+0xd0>
        name = attr->name;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	617b      	str	r3, [r7, #20]
 800a8ca:	e001      	b.n	800a8d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a8d0:	6979      	ldr	r1, [r7, #20]
 800a8d2:	69f8      	ldr	r0, [r7, #28]
 800a8d4:	f001 f950 	bl	800bb78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3720      	adds	r7, #32
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fc:	f3ef 8305 	mrs	r3, IPSR
 800a900:	617b      	str	r3, [r7, #20]
  return(result);
 800a902:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a904:	2b00      	cmp	r3, #0
 800a906:	d028      	beq.n	800a95a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d005      	beq.n	800a91a <osMessageQueuePut+0x36>
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <osMessageQueuePut+0x36>
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a91a:	f06f 0303 	mvn.w	r3, #3
 800a91e:	61fb      	str	r3, [r7, #28]
 800a920:	e038      	b.n	800a994 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a926:	f107 0210 	add.w	r2, r7, #16
 800a92a:	2300      	movs	r3, #0
 800a92c:	68b9      	ldr	r1, [r7, #8]
 800a92e:	69b8      	ldr	r0, [r7, #24]
 800a930:	f000 fc34 	bl	800b19c <xQueueGenericSendFromISR>
 800a934:	4603      	mov	r3, r0
 800a936:	2b01      	cmp	r3, #1
 800a938:	d003      	beq.n	800a942 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a93a:	f06f 0302 	mvn.w	r3, #2
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	e028      	b.n	800a994 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d025      	beq.n	800a994 <osMessageQueuePut+0xb0>
 800a948:	4b15      	ldr	r3, [pc, #84]	@ (800a9a0 <osMessageQueuePut+0xbc>)
 800a94a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	e01c      	b.n	800a994 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <osMessageQueuePut+0x82>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d103      	bne.n	800a96e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a966:	f06f 0303 	mvn.w	r3, #3
 800a96a:	61fb      	str	r3, [r7, #28]
 800a96c:	e012      	b.n	800a994 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a96e:	2300      	movs	r3, #0
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	68b9      	ldr	r1, [r7, #8]
 800a974:	69b8      	ldr	r0, [r7, #24]
 800a976:	f000 fb0f 	bl	800af98 <xQueueGenericSend>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d009      	beq.n	800a994 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a986:	f06f 0301 	mvn.w	r3, #1
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	e002      	b.n	800a994 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a98e:	f06f 0302 	mvn.w	r3, #2
 800a992:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a994:	69fb      	ldr	r3, [r7, #28]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3720      	adds	r7, #32
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9ba:	f3ef 8305 	mrs	r3, IPSR
 800a9be:	617b      	str	r3, [r7, #20]
  return(result);
 800a9c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d028      	beq.n	800aa18 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d005      	beq.n	800a9d8 <osMessageQueueGet+0x34>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <osMessageQueueGet+0x34>
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a9d8:	f06f 0303 	mvn.w	r3, #3
 800a9dc:	61fb      	str	r3, [r7, #28]
 800a9de:	e037      	b.n	800aa50 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a9e4:	f107 0310 	add.w	r3, r7, #16
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	68b9      	ldr	r1, [r7, #8]
 800a9ec:	69b8      	ldr	r0, [r7, #24]
 800a9ee:	f000 fef5 	bl	800b7dc <xQueueReceiveFromISR>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d003      	beq.n	800aa00 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a9f8:	f06f 0302 	mvn.w	r3, #2
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	e027      	b.n	800aa50 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d024      	beq.n	800aa50 <osMessageQueueGet+0xac>
 800aa06:	4b15      	ldr	r3, [pc, #84]	@ (800aa5c <osMessageQueueGet+0xb8>)
 800aa08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	e01b      	b.n	800aa50 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <osMessageQueueGet+0x80>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d103      	bne.n	800aa2c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aa24:	f06f 0303 	mvn.w	r3, #3
 800aa28:	61fb      	str	r3, [r7, #28]
 800aa2a:	e011      	b.n	800aa50 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	68b9      	ldr	r1, [r7, #8]
 800aa30:	69b8      	ldr	r0, [r7, #24]
 800aa32:	f000 fce1 	bl	800b3f8 <xQueueReceive>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d009      	beq.n	800aa50 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aa42:	f06f 0301 	mvn.w	r3, #1
 800aa46:	61fb      	str	r3, [r7, #28]
 800aa48:	e002      	b.n	800aa50 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aa4a:	f06f 0302 	mvn.w	r3, #2
 800aa4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa50:	69fb      	ldr	r3, [r7, #28]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3720      	adds	r7, #32
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	e000ed04 	.word	0xe000ed04

0800aa60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a07      	ldr	r2, [pc, #28]	@ (800aa8c <vApplicationGetIdleTaskMemory+0x2c>)
 800aa70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	4a06      	ldr	r2, [pc, #24]	@ (800aa90 <vApplicationGetIdleTaskMemory+0x30>)
 800aa76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2280      	movs	r2, #128	@ 0x80
 800aa7c:	601a      	str	r2, [r3, #0]
}
 800aa7e:	bf00      	nop
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20000fc4 	.word	0x20000fc4
 800aa90:	2000106c 	.word	0x2000106c

0800aa94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4a07      	ldr	r2, [pc, #28]	@ (800aac0 <vApplicationGetTimerTaskMemory+0x2c>)
 800aaa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	4a06      	ldr	r2, [pc, #24]	@ (800aac4 <vApplicationGetTimerTaskMemory+0x30>)
 800aaaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	bf00      	nop
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	2000126c 	.word	0x2000126c
 800aac4:	20001314 	.word	0x20001314

0800aac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f103 0208 	add.w	r2, r3, #8
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f103 0208 	add.w	r2, r3, #8
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f103 0208 	add.w	r2, r3, #8
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	689a      	ldr	r2, [r3, #8]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	601a      	str	r2, [r3, #0]
}
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b085      	sub	sp, #20
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d103      	bne.n	800ab8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	e00c      	b.n	800aba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	e002      	b.n	800ab98 <vListInsert+0x2e>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d2f6      	bcs.n	800ab92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	601a      	str	r2, [r3, #0]
}
 800abd0:	bf00      	nop
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6892      	ldr	r2, [r2, #8]
 800abf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	6852      	ldr	r2, [r2, #4]
 800abfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d103      	bne.n	800ac10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	1e5a      	subs	r2, r3, #1
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10b      	bne.n	800ac5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac56:	bf00      	nop
 800ac58:	bf00      	nop
 800ac5a:	e7fd      	b.n	800ac58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac5c:	f002 fcec 	bl	800d638 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac68:	68f9      	ldr	r1, [r7, #12]
 800ac6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac6c:	fb01 f303 	mul.w	r3, r1, r3
 800ac70:	441a      	add	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	68f9      	ldr	r1, [r7, #12]
 800ac90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac92:	fb01 f303 	mul.w	r3, r1, r3
 800ac96:	441a      	add	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	22ff      	movs	r2, #255	@ 0xff
 800aca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	22ff      	movs	r2, #255	@ 0xff
 800aca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d114      	bne.n	800acdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d01a      	beq.n	800acf0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3310      	adds	r3, #16
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 fc86 	bl	800c5d0 <xTaskRemoveFromEventList>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d012      	beq.n	800acf0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <xQueueGenericReset+0xd0>)
 800accc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	e009      	b.n	800acf0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3310      	adds	r3, #16
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff fef1 	bl	800aac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3324      	adds	r3, #36	@ 0x24
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff feec 	bl	800aac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acf0:	f002 fcd4 	bl	800d69c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acf4:	2301      	movs	r3, #1
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	e000ed04 	.word	0xe000ed04

0800ad04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b08e      	sub	sp, #56	@ 0x38
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10b      	bne.n	800ad30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad2a:	bf00      	nop
 800ad2c:	bf00      	nop
 800ad2e:	e7fd      	b.n	800ad2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10b      	bne.n	800ad4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	e7fd      	b.n	800ad4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <xQueueGenericCreateStatic+0x56>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <xQueueGenericCreateStatic+0x5a>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <xQueueGenericCreateStatic+0x5c>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	623b      	str	r3, [r7, #32]
}
 800ad76:	bf00      	nop
 800ad78:	bf00      	nop
 800ad7a:	e7fd      	b.n	800ad78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d102      	bne.n	800ad88 <xQueueGenericCreateStatic+0x84>
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <xQueueGenericCreateStatic+0x88>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e000      	b.n	800ad8e <xQueueGenericCreateStatic+0x8a>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10b      	bne.n	800adaa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	61fb      	str	r3, [r7, #28]
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop
 800ada8:	e7fd      	b.n	800ada6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800adaa:	2350      	movs	r3, #80	@ 0x50
 800adac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2b50      	cmp	r3, #80	@ 0x50
 800adb2:	d00b      	beq.n	800adcc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	61bb      	str	r3, [r7, #24]
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	e7fd      	b.n	800adc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800adcc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00d      	beq.n	800adf4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ade0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ade4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	4613      	mov	r3, r2
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	68b9      	ldr	r1, [r7, #8]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 f840 	bl	800ae74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3730      	adds	r7, #48	@ 0x30
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b08a      	sub	sp, #40	@ 0x28
 800ae02:	af02      	add	r7, sp, #8
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	60b9      	str	r1, [r7, #8]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10b      	bne.n	800ae2a <xQueueGenericCreate+0x2c>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	613b      	str	r3, [r7, #16]
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	e7fd      	b.n	800ae26 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	fb02 f303 	mul.w	r3, r2, r3
 800ae32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	3350      	adds	r3, #80	@ 0x50
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f002 fd1f 	bl	800d87c <pvPortMalloc>
 800ae3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d011      	beq.n	800ae6a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	3350      	adds	r3, #80	@ 0x50
 800ae4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae58:	79fa      	ldrb	r2, [r7, #7]
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	697a      	ldr	r2, [r7, #20]
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 f805 	bl	800ae74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3720      	adds	r7, #32
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d103      	bne.n	800ae90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	69ba      	ldr	r2, [r7, #24]
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	e002      	b.n	800ae96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aea2:	2101      	movs	r1, #1
 800aea4:	69b8      	ldr	r0, [r7, #24]
 800aea6:	f7ff fec3 	bl	800ac30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	78fa      	ldrb	r2, [r7, #3]
 800aeae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b08a      	sub	sp, #40	@ 0x28
 800aebe:	af02      	add	r7, sp, #8
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10b      	bne.n	800aee4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	61bb      	str	r3, [r7, #24]
}
 800aede:	bf00      	nop
 800aee0:	bf00      	nop
 800aee2:	e7fd      	b.n	800aee0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d90b      	bls.n	800af04 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	617b      	str	r3, [r7, #20]
}
 800aefe:	bf00      	nop
 800af00:	bf00      	nop
 800af02:	e7fd      	b.n	800af00 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800af04:	2302      	movs	r3, #2
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	2100      	movs	r1, #0
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f7ff fef8 	bl	800ad04 <xQueueGenericCreateStatic>
 800af14:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800af22:	69fb      	ldr	r3, [r7, #28]
	}
 800af24:	4618      	mov	r0, r3
 800af26:	3720      	adds	r7, #32
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10b      	bne.n	800af54 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	613b      	str	r3, [r7, #16]
}
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	e7fd      	b.n	800af50 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d90b      	bls.n	800af74 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	60fb      	str	r3, [r7, #12]
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	e7fd      	b.n	800af70 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800af74:	2202      	movs	r2, #2
 800af76:	2100      	movs	r1, #0
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff ff40 	bl	800adfe <xQueueGenericCreate>
 800af7e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d002      	beq.n	800af8c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800af8c:	697b      	ldr	r3, [r7, #20]
	}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08e      	sub	sp, #56	@ 0x38
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afa6:	2300      	movs	r3, #0
 800afa8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10b      	bne.n	800afcc <xQueueGenericSend+0x34>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afc6:	bf00      	nop
 800afc8:	bf00      	nop
 800afca:	e7fd      	b.n	800afc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d103      	bne.n	800afda <xQueueGenericSend+0x42>
 800afd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <xQueueGenericSend+0x46>
 800afda:	2301      	movs	r3, #1
 800afdc:	e000      	b.n	800afe0 <xQueueGenericSend+0x48>
 800afde:	2300      	movs	r3, #0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10b      	bne.n	800affc <xQueueGenericSend+0x64>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aff6:	bf00      	nop
 800aff8:	bf00      	nop
 800affa:	e7fd      	b.n	800aff8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2b02      	cmp	r3, #2
 800b000:	d103      	bne.n	800b00a <xQueueGenericSend+0x72>
 800b002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b006:	2b01      	cmp	r3, #1
 800b008:	d101      	bne.n	800b00e <xQueueGenericSend+0x76>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e000      	b.n	800b010 <xQueueGenericSend+0x78>
 800b00e:	2300      	movs	r3, #0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10b      	bne.n	800b02c <xQueueGenericSend+0x94>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	623b      	str	r3, [r7, #32]
}
 800b026:	bf00      	nop
 800b028:	bf00      	nop
 800b02a:	e7fd      	b.n	800b028 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b02c:	f001 fc96 	bl	800c95c <xTaskGetSchedulerState>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <xQueueGenericSend+0xa4>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <xQueueGenericSend+0xa8>
 800b03c:	2301      	movs	r3, #1
 800b03e:	e000      	b.n	800b042 <xQueueGenericSend+0xaa>
 800b040:	2300      	movs	r3, #0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10b      	bne.n	800b05e <xQueueGenericSend+0xc6>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	61fb      	str	r3, [r7, #28]
}
 800b058:	bf00      	nop
 800b05a:	bf00      	nop
 800b05c:	e7fd      	b.n	800b05a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b05e:	f002 faeb 	bl	800d638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d302      	bcc.n	800b074 <xQueueGenericSend+0xdc>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b02      	cmp	r3, #2
 800b072:	d129      	bne.n	800b0c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b07a:	f000 fc6d 	bl	800b958 <prvCopyDataToQueue>
 800b07e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b084:	2b00      	cmp	r3, #0
 800b086:	d010      	beq.n	800b0aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08a:	3324      	adds	r3, #36	@ 0x24
 800b08c:	4618      	mov	r0, r3
 800b08e:	f001 fa9f 	bl	800c5d0 <xTaskRemoveFromEventList>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d013      	beq.n	800b0c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b098:	4b3f      	ldr	r3, [pc, #252]	@ (800b198 <xQueueGenericSend+0x200>)
 800b09a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	e00a      	b.n	800b0c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d007      	beq.n	800b0c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0b0:	4b39      	ldr	r3, [pc, #228]	@ (800b198 <xQueueGenericSend+0x200>)
 800b0b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0c0:	f002 faec 	bl	800d69c <vPortExitCritical>
				return pdPASS;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e063      	b.n	800b190 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d103      	bne.n	800b0d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0ce:	f002 fae5 	bl	800d69c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e05c      	b.n	800b190 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d106      	bne.n	800b0ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f001 fad9 	bl	800c698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0ea:	f002 fad7 	bl	800d69c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0ee:	f001 f82f 	bl	800c150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0f2:	f002 faa1 	bl	800d638 <vPortEnterCritical>
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0fc:	b25b      	sxtb	r3, r3
 800b0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b102:	d103      	bne.n	800b10c <xQueueGenericSend+0x174>
 800b104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b112:	b25b      	sxtb	r3, r3
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d103      	bne.n	800b122 <xQueueGenericSend+0x18a>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b122:	f002 fabb 	bl	800d69c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b126:	1d3a      	adds	r2, r7, #4
 800b128:	f107 0314 	add.w	r3, r7, #20
 800b12c:	4611      	mov	r1, r2
 800b12e:	4618      	mov	r0, r3
 800b130:	f001 fac8 	bl	800c6c4 <xTaskCheckForTimeOut>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d124      	bne.n	800b184 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b13a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b13c:	f000 fd04 	bl	800bb48 <prvIsQueueFull>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d018      	beq.n	800b178 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	3310      	adds	r3, #16
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	4611      	mov	r1, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 f9ec 	bl	800c52c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b156:	f000 fc8f 	bl	800ba78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b15a:	f001 f807 	bl	800c16c <xTaskResumeAll>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	f47f af7c 	bne.w	800b05e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b166:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <xQueueGenericSend+0x200>)
 800b168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	e772      	b.n	800b05e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b17a:	f000 fc7d 	bl	800ba78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b17e:	f000 fff5 	bl	800c16c <xTaskResumeAll>
 800b182:	e76c      	b.n	800b05e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b186:	f000 fc77 	bl	800ba78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b18a:	f000 ffef 	bl	800c16c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b18e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b190:	4618      	mov	r0, r3
 800b192:	3738      	adds	r7, #56	@ 0x38
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b090      	sub	sp, #64	@ 0x40
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10b      	bne.n	800b1cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1c6:	bf00      	nop
 800b1c8:	bf00      	nop
 800b1ca:	e7fd      	b.n	800b1c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d103      	bne.n	800b1da <xQueueGenericSendFromISR+0x3e>
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <xQueueGenericSendFromISR+0x42>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e000      	b.n	800b1e0 <xQueueGenericSendFromISR+0x44>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10b      	bne.n	800b1fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	e7fd      	b.n	800b1f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d103      	bne.n	800b20a <xQueueGenericSendFromISR+0x6e>
 800b202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b206:	2b01      	cmp	r3, #1
 800b208:	d101      	bne.n	800b20e <xQueueGenericSendFromISR+0x72>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e000      	b.n	800b210 <xQueueGenericSendFromISR+0x74>
 800b20e:	2300      	movs	r3, #0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10b      	bne.n	800b22c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	623b      	str	r3, [r7, #32]
}
 800b226:	bf00      	nop
 800b228:	bf00      	nop
 800b22a:	e7fd      	b.n	800b228 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b22c:	f002 fae4 	bl	800d7f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b230:	f3ef 8211 	mrs	r2, BASEPRI
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	61fa      	str	r2, [r7, #28]
 800b246:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b248:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b254:	429a      	cmp	r2, r3
 800b256:	d302      	bcc.n	800b25e <xQueueGenericSendFromISR+0xc2>
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d12f      	bne.n	800b2be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b264:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b274:	f000 fb70 	bl	800b958 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b278:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b280:	d112      	bne.n	800b2a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b286:	2b00      	cmp	r3, #0
 800b288:	d016      	beq.n	800b2b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28c:	3324      	adds	r3, #36	@ 0x24
 800b28e:	4618      	mov	r0, r3
 800b290:	f001 f99e 	bl	800c5d0 <xTaskRemoveFromEventList>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00e      	beq.n	800b2b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	e007      	b.n	800b2b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	b25a      	sxtb	r2, r3
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b2bc:	e001      	b.n	800b2c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b2cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3740      	adds	r7, #64	@ 0x40
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08e      	sub	sp, #56	@ 0x38
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	623b      	str	r3, [r7, #32]
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	e7fd      	b.n	800b300 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00b      	beq.n	800b324 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	61fb      	str	r3, [r7, #28]
}
 800b31e:	bf00      	nop
 800b320:	bf00      	nop
 800b322:	e7fd      	b.n	800b320 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d103      	bne.n	800b334 <xQueueGiveFromISR+0x5c>
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <xQueueGiveFromISR+0x60>
 800b334:	2301      	movs	r3, #1
 800b336:	e000      	b.n	800b33a <xQueueGiveFromISR+0x62>
 800b338:	2300      	movs	r3, #0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10b      	bne.n	800b356 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	61bb      	str	r3, [r7, #24]
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	e7fd      	b.n	800b352 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b356:	f002 fa4f 	bl	800d7f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b35a:	f3ef 8211 	mrs	r2, BASEPRI
 800b35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	617a      	str	r2, [r7, #20]
 800b370:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b372:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b374:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b37a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b382:	429a      	cmp	r2, r3
 800b384:	d22b      	bcs.n	800b3de <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b38c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b392:	1c5a      	adds	r2, r3, #1
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b398:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a0:	d112      	bne.n	800b3c8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d016      	beq.n	800b3d8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	3324      	adds	r3, #36	@ 0x24
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 f90e 	bl	800c5d0 <xTaskRemoveFromEventList>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00e      	beq.n	800b3d8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	e007      	b.n	800b3d8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	b25a      	sxtb	r2, r3
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3dc:	e001      	b.n	800b3e2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f383 8811 	msr	BASEPRI, r3
}
 800b3ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3738      	adds	r7, #56	@ 0x38
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08c      	sub	sp, #48	@ 0x30
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b404:	2300      	movs	r3, #0
 800b406:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10b      	bne.n	800b42a <xQueueReceive+0x32>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	623b      	str	r3, [r7, #32]
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop
 800b428:	e7fd      	b.n	800b426 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d103      	bne.n	800b438 <xQueueReceive+0x40>
 800b430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <xQueueReceive+0x44>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <xQueueReceive+0x46>
 800b43c:	2300      	movs	r3, #0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10b      	bne.n	800b45a <xQueueReceive+0x62>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	61fb      	str	r3, [r7, #28]
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	e7fd      	b.n	800b456 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b45a:	f001 fa7f 	bl	800c95c <xTaskGetSchedulerState>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <xQueueReceive+0x72>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <xQueueReceive+0x76>
 800b46a:	2301      	movs	r3, #1
 800b46c:	e000      	b.n	800b470 <xQueueReceive+0x78>
 800b46e:	2300      	movs	r3, #0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10b      	bne.n	800b48c <xQueueReceive+0x94>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	61bb      	str	r3, [r7, #24]
}
 800b486:	bf00      	nop
 800b488:	bf00      	nop
 800b48a:	e7fd      	b.n	800b488 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b48c:	f002 f8d4 	bl	800d638 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b494:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01f      	beq.n	800b4dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4a0:	f000 fac4 	bl	800ba2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a6:	1e5a      	subs	r2, r3, #1
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00f      	beq.n	800b4d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b6:	3310      	adds	r3, #16
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f001 f889 	bl	800c5d0 <xTaskRemoveFromEventList>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d007      	beq.n	800b4d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4c4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5b8 <xQueueReceive+0x1c0>)
 800b4c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4d4:	f002 f8e2 	bl	800d69c <vPortExitCritical>
				return pdPASS;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e069      	b.n	800b5b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d103      	bne.n	800b4ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4e2:	f002 f8db 	bl	800d69c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e062      	b.n	800b5b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4f0:	f107 0310 	add.w	r3, r7, #16
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f001 f8cf 	bl	800c698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4fe:	f002 f8cd 	bl	800d69c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b502:	f000 fe25 	bl	800c150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b506:	f002 f897 	bl	800d638 <vPortEnterCritical>
 800b50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b510:	b25b      	sxtb	r3, r3
 800b512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b516:	d103      	bne.n	800b520 <xQueueReceive+0x128>
 800b518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b526:	b25b      	sxtb	r3, r3
 800b528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52c:	d103      	bne.n	800b536 <xQueueReceive+0x13e>
 800b52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b536:	f002 f8b1 	bl	800d69c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b53a:	1d3a      	adds	r2, r7, #4
 800b53c:	f107 0310 	add.w	r3, r7, #16
 800b540:	4611      	mov	r1, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f001 f8be 	bl	800c6c4 <xTaskCheckForTimeOut>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d123      	bne.n	800b596 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b54e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b550:	f000 fae4 	bl	800bb1c <prvIsQueueEmpty>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d017      	beq.n	800b58a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55c:	3324      	adds	r3, #36	@ 0x24
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	4611      	mov	r1, r2
 800b562:	4618      	mov	r0, r3
 800b564:	f000 ffe2 	bl	800c52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b56a:	f000 fa85 	bl	800ba78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b56e:	f000 fdfd 	bl	800c16c <xTaskResumeAll>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d189      	bne.n	800b48c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b578:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b8 <xQueueReceive+0x1c0>)
 800b57a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	e780      	b.n	800b48c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b58a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b58c:	f000 fa74 	bl	800ba78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b590:	f000 fdec 	bl	800c16c <xTaskResumeAll>
 800b594:	e77a      	b.n	800b48c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b598:	f000 fa6e 	bl	800ba78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b59c:	f000 fde6 	bl	800c16c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5a2:	f000 fabb 	bl	800bb1c <prvIsQueueEmpty>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f43f af6f 	beq.w	800b48c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3730      	adds	r7, #48	@ 0x30
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	e000ed04 	.word	0xe000ed04

0800b5bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08e      	sub	sp, #56	@ 0x38
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10b      	bne.n	800b5f0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	623b      	str	r3, [r7, #32]
}
 800b5ea:	bf00      	nop
 800b5ec:	bf00      	nop
 800b5ee:	e7fd      	b.n	800b5ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00b      	beq.n	800b610 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	61fb      	str	r3, [r7, #28]
}
 800b60a:	bf00      	nop
 800b60c:	bf00      	nop
 800b60e:	e7fd      	b.n	800b60c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b610:	f001 f9a4 	bl	800c95c <xTaskGetSchedulerState>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d102      	bne.n	800b620 <xQueueSemaphoreTake+0x64>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <xQueueSemaphoreTake+0x68>
 800b620:	2301      	movs	r3, #1
 800b622:	e000      	b.n	800b626 <xQueueSemaphoreTake+0x6a>
 800b624:	2300      	movs	r3, #0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10b      	bne.n	800b642 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	61bb      	str	r3, [r7, #24]
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b642:	f001 fff9 	bl	800d638 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d024      	beq.n	800b69c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b654:	1e5a      	subs	r2, r3, #1
 800b656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b658:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d104      	bne.n	800b66c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b662:	f001 faf5 	bl	800cc50 <pvTaskIncrementMutexHeldCount>
 800b666:	4602      	mov	r2, r0
 800b668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b66a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00f      	beq.n	800b694 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b676:	3310      	adds	r3, #16
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 ffa9 	bl	800c5d0 <xTaskRemoveFromEventList>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d007      	beq.n	800b694 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b684:	4b54      	ldr	r3, [pc, #336]	@ (800b7d8 <xQueueSemaphoreTake+0x21c>)
 800b686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b694:	f002 f802 	bl	800d69c <vPortExitCritical>
				return pdPASS;
 800b698:	2301      	movs	r3, #1
 800b69a:	e098      	b.n	800b7ce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d112      	bne.n	800b6c8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	617b      	str	r3, [r7, #20]
}
 800b6ba:	bf00      	nop
 800b6bc:	bf00      	nop
 800b6be:	e7fd      	b.n	800b6bc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b6c0:	f001 ffec 	bl	800d69c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	e082      	b.n	800b7ce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6ce:	f107 030c 	add.w	r3, r7, #12
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 ffe0 	bl	800c698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6dc:	f001 ffde 	bl	800d69c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6e0:	f000 fd36 	bl	800c150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6e4:	f001 ffa8 	bl	800d638 <vPortEnterCritical>
 800b6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6ee:	b25b      	sxtb	r3, r3
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d103      	bne.n	800b6fe <xQueueSemaphoreTake+0x142>
 800b6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b700:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b704:	b25b      	sxtb	r3, r3
 800b706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70a:	d103      	bne.n	800b714 <xQueueSemaphoreTake+0x158>
 800b70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b714:	f001 ffc2 	bl	800d69c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b718:	463a      	mov	r2, r7
 800b71a:	f107 030c 	add.w	r3, r7, #12
 800b71e:	4611      	mov	r1, r2
 800b720:	4618      	mov	r0, r3
 800b722:	f000 ffcf 	bl	800c6c4 <xTaskCheckForTimeOut>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d132      	bne.n	800b792 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b72c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b72e:	f000 f9f5 	bl	800bb1c <prvIsQueueEmpty>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d026      	beq.n	800b786 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d109      	bne.n	800b754 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b740:	f001 ff7a 	bl	800d638 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	4618      	mov	r0, r3
 800b74a:	f001 f925 	bl	800c998 <xTaskPriorityInherit>
 800b74e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b750:	f001 ffa4 	bl	800d69c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b756:	3324      	adds	r3, #36	@ 0x24
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	4611      	mov	r1, r2
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 fee5 	bl	800c52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b764:	f000 f988 	bl	800ba78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b768:	f000 fd00 	bl	800c16c <xTaskResumeAll>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f47f af67 	bne.w	800b642 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b774:	4b18      	ldr	r3, [pc, #96]	@ (800b7d8 <xQueueSemaphoreTake+0x21c>)
 800b776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	e75d      	b.n	800b642 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b788:	f000 f976 	bl	800ba78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b78c:	f000 fcee 	bl	800c16c <xTaskResumeAll>
 800b790:	e757      	b.n	800b642 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b792:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b794:	f000 f970 	bl	800ba78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b798:	f000 fce8 	bl	800c16c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b79c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b79e:	f000 f9bd 	bl	800bb1c <prvIsQueueEmpty>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f43f af4c 	beq.w	800b642 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00d      	beq.n	800b7cc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b7b0:	f001 ff42 	bl	800d638 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b7b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7b6:	f000 f8b7 	bl	800b928 <prvGetDisinheritPriorityAfterTimeout>
 800b7ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f001 f9c0 	bl	800cb48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b7c8:	f001 ff68 	bl	800d69c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3738      	adds	r7, #56	@ 0x38
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	e000ed04 	.word	0xe000ed04

0800b7dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08e      	sub	sp, #56	@ 0x38
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10b      	bne.n	800b80a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	623b      	str	r3, [r7, #32]
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop
 800b808:	e7fd      	b.n	800b806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <xQueueReceiveFromISR+0x3c>
 800b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <xQueueReceiveFromISR+0x40>
 800b818:	2301      	movs	r3, #1
 800b81a:	e000      	b.n	800b81e <xQueueReceiveFromISR+0x42>
 800b81c:	2300      	movs	r3, #0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10b      	bne.n	800b83a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	61fb      	str	r3, [r7, #28]
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	e7fd      	b.n	800b836 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b83a:	f001 ffdd 	bl	800d7f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b83e:	f3ef 8211 	mrs	r2, BASEPRI
 800b842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	61ba      	str	r2, [r7, #24]
 800b854:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b856:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b858:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b85e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b862:	2b00      	cmp	r3, #0
 800b864:	d02f      	beq.n	800b8c6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b86c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b874:	f000 f8da 	bl	800ba2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87a:	1e5a      	subs	r2, r3, #1
 800b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b880:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b888:	d112      	bne.n	800b8b0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d016      	beq.n	800b8c0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b894:	3310      	adds	r3, #16
 800b896:	4618      	mov	r0, r3
 800b898:	f000 fe9a 	bl	800c5d0 <xTaskRemoveFromEventList>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00e      	beq.n	800b8c0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	e007      	b.n	800b8c0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	b25a      	sxtb	r2, r3
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c4:	e001      	b.n	800b8ca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f383 8811 	msr	BASEPRI, r3
}
 800b8d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3738      	adds	r7, #56	@ 0x38
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10b      	bne.n	800b90a <vQueueDelete+0x2a>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	60bb      	str	r3, [r7, #8]
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop
 800b908:	e7fd      	b.n	800b906 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f000 f95e 	bl	800bbcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f002 f87c 	bl	800da18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b920:	bf00      	nop
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b934:	2b00      	cmp	r3, #0
 800b936:	d006      	beq.n	800b946 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	e001      	b.n	800b94a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b946:	2300      	movs	r3, #0
 800b948:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b94a:	68fb      	ldr	r3, [r7, #12]
	}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b964:	2300      	movs	r3, #0
 800b966:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b96c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10d      	bne.n	800b992 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d14d      	bne.n	800ba1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	4618      	mov	r0, r3
 800b984:	f001 f870 	bl	800ca68 <xTaskPriorityDisinherit>
 800b988:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	609a      	str	r2, [r3, #8]
 800b990:	e043      	b.n	800ba1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d119      	bne.n	800b9cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6858      	ldr	r0, [r3, #4]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	68b9      	ldr	r1, [r7, #8]
 800b9a4:	f002 fc3b 	bl	800e21e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d32b      	bcc.n	800ba1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	605a      	str	r2, [r3, #4]
 800b9ca:	e026      	b.n	800ba1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68d8      	ldr	r0, [r3, #12]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	68b9      	ldr	r1, [r7, #8]
 800b9d8:	f002 fc21 	bl	800e21e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	68da      	ldr	r2, [r3, #12]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e4:	425b      	negs	r3, r3
 800b9e6:	441a      	add	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d207      	bcs.n	800ba08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	689a      	ldr	r2, [r3, #8]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba00:	425b      	negs	r3, r3
 800ba02:	441a      	add	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d105      	bne.n	800ba1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	1c5a      	adds	r2, r3, #1
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ba22:	697b      	ldr	r3, [r7, #20]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d018      	beq.n	800ba70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68da      	ldr	r2, [r3, #12]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba46:	441a      	add	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d303      	bcc.n	800ba60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68d9      	ldr	r1, [r3, #12]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba68:	461a      	mov	r2, r3
 800ba6a:	6838      	ldr	r0, [r7, #0]
 800ba6c:	f002 fbd7 	bl	800e21e <memcpy>
	}
}
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba80:	f001 fdda 	bl	800d638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba8c:	e011      	b.n	800bab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d012      	beq.n	800babc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	3324      	adds	r3, #36	@ 0x24
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 fd98 	bl	800c5d0 <xTaskRemoveFromEventList>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800baa6:	f000 fe71 	bl	800c78c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	3b01      	subs	r3, #1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dce9      	bgt.n	800ba8e <prvUnlockQueue+0x16>
 800baba:	e000      	b.n	800babe <prvUnlockQueue+0x46>
					break;
 800babc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	22ff      	movs	r2, #255	@ 0xff
 800bac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bac6:	f001 fde9 	bl	800d69c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800baca:	f001 fdb5 	bl	800d638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bad6:	e011      	b.n	800bafc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d012      	beq.n	800bb06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	3310      	adds	r3, #16
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 fd73 	bl	800c5d0 <xTaskRemoveFromEventList>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800baf0:	f000 fe4c 	bl	800c78c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bafc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dce9      	bgt.n	800bad8 <prvUnlockQueue+0x60>
 800bb04:	e000      	b.n	800bb08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	22ff      	movs	r2, #255	@ 0xff
 800bb0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bb10:	f001 fdc4 	bl	800d69c <vPortExitCritical>
}
 800bb14:	bf00      	nop
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb24:	f001 fd88 	bl	800d638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb30:	2301      	movs	r3, #1
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	e001      	b.n	800bb3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb3a:	f001 fdaf 	bl	800d69c <vPortExitCritical>

	return xReturn;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb50:	f001 fd72 	bl	800d638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d102      	bne.n	800bb66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb60:	2301      	movs	r3, #1
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	e001      	b.n	800bb6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb6a:	f001 fd97 	bl	800d69c <vPortExitCritical>

	return xReturn;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb82:	2300      	movs	r3, #0
 800bb84:	60fb      	str	r3, [r7, #12]
 800bb86:	e014      	b.n	800bbb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb88:	4a0f      	ldr	r2, [pc, #60]	@ (800bbc8 <vQueueAddToRegistry+0x50>)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10b      	bne.n	800bbac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb94:	490c      	ldr	r1, [pc, #48]	@ (800bbc8 <vQueueAddToRegistry+0x50>)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb9e:	4a0a      	ldr	r2, [pc, #40]	@ (800bbc8 <vQueueAddToRegistry+0x50>)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	4413      	add	r3, r2
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bbaa:	e006      	b.n	800bbba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b07      	cmp	r3, #7
 800bbb6:	d9e7      	bls.n	800bb88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bbb8:	bf00      	nop
 800bbba:	bf00      	nop
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	20001714 	.word	0x20001714

0800bbcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	e016      	b.n	800bc08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bbda:	4a10      	ldr	r2, [pc, #64]	@ (800bc1c <vQueueUnregisterQueue+0x50>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	4413      	add	r3, r2
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d10b      	bne.n	800bc02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bbea:	4a0c      	ldr	r2, [pc, #48]	@ (800bc1c <vQueueUnregisterQueue+0x50>)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2100      	movs	r1, #0
 800bbf0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bbf4:	4a09      	ldr	r2, [pc, #36]	@ (800bc1c <vQueueUnregisterQueue+0x50>)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	4413      	add	r3, r2
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	605a      	str	r2, [r3, #4]
				break;
 800bc00:	e006      	b.n	800bc10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b07      	cmp	r3, #7
 800bc0c:	d9e5      	bls.n	800bbda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bc0e:	bf00      	nop
 800bc10:	bf00      	nop
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20001714 	.word	0x20001714

0800bc20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc30:	f001 fd02 	bl	800d638 <vPortEnterCritical>
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc3a:	b25b      	sxtb	r3, r3
 800bc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc40:	d103      	bne.n	800bc4a <vQueueWaitForMessageRestricted+0x2a>
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc50:	b25b      	sxtb	r3, r3
 800bc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc56:	d103      	bne.n	800bc60 <vQueueWaitForMessageRestricted+0x40>
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc60:	f001 fd1c 	bl	800d69c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d106      	bne.n	800bc7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	3324      	adds	r3, #36	@ 0x24
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	68b9      	ldr	r1, [r7, #8]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 fc7f 	bl	800c578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc7a:	6978      	ldr	r0, [r7, #20]
 800bc7c:	f7ff fefc 	bl	800ba78 <prvUnlockQueue>
	}
 800bc80:	bf00      	nop
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08e      	sub	sp, #56	@ 0x38
 800bc8c:	af04      	add	r7, sp, #16
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
 800bc94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10b      	bne.n	800bcb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	623b      	str	r3, [r7, #32]
}
 800bcae:	bf00      	nop
 800bcb0:	bf00      	nop
 800bcb2:	e7fd      	b.n	800bcb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10b      	bne.n	800bcd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	61fb      	str	r3, [r7, #28]
}
 800bccc:	bf00      	nop
 800bcce:	bf00      	nop
 800bcd0:	e7fd      	b.n	800bcce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcd2:	23a8      	movs	r3, #168	@ 0xa8
 800bcd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	2ba8      	cmp	r3, #168	@ 0xa8
 800bcda:	d00b      	beq.n	800bcf4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	61bb      	str	r3, [r7, #24]
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	e7fd      	b.n	800bcf0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d01e      	beq.n	800bd3a <xTaskCreateStatic+0xb2>
 800bcfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01b      	beq.n	800bd3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd14:	2300      	movs	r3, #0
 800bd16:	9303      	str	r3, [sp, #12]
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	9302      	str	r3, [sp, #8]
 800bd1c:	f107 0314 	add.w	r3, r7, #20
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 f851 	bl	800bdd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd34:	f000 f8f6 	bl	800bf24 <prvAddNewTaskToReadyList>
 800bd38:	e001      	b.n	800bd3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd3e:	697b      	ldr	r3, [r7, #20]
	}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3728      	adds	r7, #40	@ 0x28
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08c      	sub	sp, #48	@ 0x30
 800bd4c:	af04      	add	r7, sp, #16
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	4613      	mov	r3, r2
 800bd56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd58:	88fb      	ldrh	r3, [r7, #6]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f001 fd8d 	bl	800d87c <pvPortMalloc>
 800bd62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00e      	beq.n	800bd88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd6a:	20a8      	movs	r0, #168	@ 0xa8
 800bd6c:	f001 fd86 	bl	800d87c <pvPortMalloc>
 800bd70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd7e:	e005      	b.n	800bd8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd80:	6978      	ldr	r0, [r7, #20]
 800bd82:	f001 fe49 	bl	800da18 <vPortFree>
 800bd86:	e001      	b.n	800bd8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d017      	beq.n	800bdc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd9a:	88fa      	ldrh	r2, [r7, #6]
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9303      	str	r3, [sp, #12]
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	9302      	str	r3, [sp, #8]
 800bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	68b9      	ldr	r1, [r7, #8]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 f80f 	bl	800bdd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdb6:	69f8      	ldr	r0, [r7, #28]
 800bdb8:	f000 f8b4 	bl	800bf24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	61bb      	str	r3, [r7, #24]
 800bdc0:	e002      	b.n	800bdc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
	}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3720      	adds	r7, #32
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
	...

0800bdd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	461a      	mov	r2, r3
 800bdec:	21a5      	movs	r1, #165	@ 0xa5
 800bdee:	f002 f93d 	bl	800e06c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	f023 0307 	bic.w	r3, r3, #7
 800be0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	f003 0307 	and.w	r3, r3, #7
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00b      	beq.n	800be2e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800be16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	617b      	str	r3, [r7, #20]
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	e7fd      	b.n	800be2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d01f      	beq.n	800be74 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be34:	2300      	movs	r3, #0
 800be36:	61fb      	str	r3, [r7, #28]
 800be38:	e012      	b.n	800be60 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	4413      	add	r3, r2
 800be40:	7819      	ldrb	r1, [r3, #0]
 800be42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	4413      	add	r3, r2
 800be48:	3334      	adds	r3, #52	@ 0x34
 800be4a:	460a      	mov	r2, r1
 800be4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	4413      	add	r3, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d006      	beq.n	800be68 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	3301      	adds	r3, #1
 800be5e:	61fb      	str	r3, [r7, #28]
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	2b0f      	cmp	r3, #15
 800be64:	d9e9      	bls.n	800be3a <prvInitialiseNewTask+0x66>
 800be66:	e000      	b.n	800be6a <prvInitialiseNewTask+0x96>
			{
				break;
 800be68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be72:	e003      	b.n	800be7c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be76:	2200      	movs	r2, #0
 800be78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7e:	2b37      	cmp	r3, #55	@ 0x37
 800be80:	d901      	bls.n	800be86 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be82:	2337      	movs	r3, #55	@ 0x37
 800be84:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	2200      	movs	r2, #0
 800be96:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	3304      	adds	r3, #4
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fe33 	bl	800ab08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	3318      	adds	r3, #24
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fe2e 	bl	800ab08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800beac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800beb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec4:	2200      	movs	r2, #0
 800bec6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800beca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800becc:	2200      	movs	r2, #0
 800bece:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed4:	3354      	adds	r3, #84	@ 0x54
 800bed6:	224c      	movs	r2, #76	@ 0x4c
 800bed8:	2100      	movs	r1, #0
 800beda:	4618      	mov	r0, r3
 800bedc:	f002 f8c6 	bl	800e06c <memset>
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	4a0d      	ldr	r2, [pc, #52]	@ (800bf18 <prvInitialiseNewTask+0x144>)
 800bee4:	659a      	str	r2, [r3, #88]	@ 0x58
 800bee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee8:	4a0c      	ldr	r2, [pc, #48]	@ (800bf1c <prvInitialiseNewTask+0x148>)
 800beea:	65da      	str	r2, [r3, #92]	@ 0x5c
 800beec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beee:	4a0c      	ldr	r2, [pc, #48]	@ (800bf20 <prvInitialiseNewTask+0x14c>)
 800bef0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	68f9      	ldr	r1, [r7, #12]
 800bef6:	69b8      	ldr	r0, [r7, #24]
 800bef8:	f001 fa6c 	bl	800d3d4 <pxPortInitialiseStack>
 800befc:	4602      	mov	r2, r0
 800befe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf0e:	bf00      	nop
 800bf10:	3720      	adds	r7, #32
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	200059a8 	.word	0x200059a8
 800bf1c:	20005a10 	.word	0x20005a10
 800bf20:	20005a78 	.word	0x20005a78

0800bf24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf2c:	f001 fb84 	bl	800d638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf30:	4b2d      	ldr	r3, [pc, #180]	@ (800bfe8 <prvAddNewTaskToReadyList+0xc4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3301      	adds	r3, #1
 800bf36:	4a2c      	ldr	r2, [pc, #176]	@ (800bfe8 <prvAddNewTaskToReadyList+0xc4>)
 800bf38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf3a:	4b2c      	ldr	r3, [pc, #176]	@ (800bfec <prvAddNewTaskToReadyList+0xc8>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d109      	bne.n	800bf56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf42:	4a2a      	ldr	r2, [pc, #168]	@ (800bfec <prvAddNewTaskToReadyList+0xc8>)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf48:	4b27      	ldr	r3, [pc, #156]	@ (800bfe8 <prvAddNewTaskToReadyList+0xc4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d110      	bne.n	800bf72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf50:	f000 fc40 	bl	800c7d4 <prvInitialiseTaskLists>
 800bf54:	e00d      	b.n	800bf72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf56:	4b26      	ldr	r3, [pc, #152]	@ (800bff0 <prvAddNewTaskToReadyList+0xcc>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d109      	bne.n	800bf72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf5e:	4b23      	ldr	r3, [pc, #140]	@ (800bfec <prvAddNewTaskToReadyList+0xc8>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d802      	bhi.n	800bf72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf6c:	4a1f      	ldr	r2, [pc, #124]	@ (800bfec <prvAddNewTaskToReadyList+0xc8>)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf72:	4b20      	ldr	r3, [pc, #128]	@ (800bff4 <prvAddNewTaskToReadyList+0xd0>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3301      	adds	r3, #1
 800bf78:	4a1e      	ldr	r2, [pc, #120]	@ (800bff4 <prvAddNewTaskToReadyList+0xd0>)
 800bf7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf7c:	4b1d      	ldr	r3, [pc, #116]	@ (800bff4 <prvAddNewTaskToReadyList+0xd0>)
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf88:	4b1b      	ldr	r3, [pc, #108]	@ (800bff8 <prvAddNewTaskToReadyList+0xd4>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d903      	bls.n	800bf98 <prvAddNewTaskToReadyList+0x74>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf94:	4a18      	ldr	r2, [pc, #96]	@ (800bff8 <prvAddNewTaskToReadyList+0xd4>)
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4a15      	ldr	r2, [pc, #84]	@ (800bffc <prvAddNewTaskToReadyList+0xd8>)
 800bfa6:	441a      	add	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f7fe fdb7 	bl	800ab22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bfb4:	f001 fb72 	bl	800d69c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bfb8:	4b0d      	ldr	r3, [pc, #52]	@ (800bff0 <prvAddNewTaskToReadyList+0xcc>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00e      	beq.n	800bfde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfec <prvAddNewTaskToReadyList+0xc8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d207      	bcs.n	800bfde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bfce:	4b0c      	ldr	r3, [pc, #48]	@ (800c000 <prvAddNewTaskToReadyList+0xdc>)
 800bfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20001c28 	.word	0x20001c28
 800bfec:	20001754 	.word	0x20001754
 800bff0:	20001c34 	.word	0x20001c34
 800bff4:	20001c44 	.word	0x20001c44
 800bff8:	20001c30 	.word	0x20001c30
 800bffc:	20001758 	.word	0x20001758
 800c000:	e000ed04 	.word	0xe000ed04

0800c004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d018      	beq.n	800c048 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c016:	4b14      	ldr	r3, [pc, #80]	@ (800c068 <vTaskDelay+0x64>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <vTaskDelay+0x32>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	60bb      	str	r3, [r7, #8]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c036:	f000 f88b 	bl	800c150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c03a:	2100      	movs	r1, #0
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fe1b 	bl	800cc78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c042:	f000 f893 	bl	800c16c <xTaskResumeAll>
 800c046:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d107      	bne.n	800c05e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c04e:	4b07      	ldr	r3, [pc, #28]	@ (800c06c <vTaskDelay+0x68>)
 800c050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c05e:	bf00      	nop
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20001c50 	.word	0x20001c50
 800c06c:	e000ed04 	.word	0xe000ed04

0800c070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b08a      	sub	sp, #40	@ 0x28
 800c074:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c07e:	463a      	mov	r2, r7
 800c080:	1d39      	adds	r1, r7, #4
 800c082:	f107 0308 	add.w	r3, r7, #8
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe fcea 	bl	800aa60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	9202      	str	r2, [sp, #8]
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	2300      	movs	r3, #0
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	2300      	movs	r3, #0
 800c09c:	460a      	mov	r2, r1
 800c09e:	4924      	ldr	r1, [pc, #144]	@ (800c130 <vTaskStartScheduler+0xc0>)
 800c0a0:	4824      	ldr	r0, [pc, #144]	@ (800c134 <vTaskStartScheduler+0xc4>)
 800c0a2:	f7ff fdf1 	bl	800bc88 <xTaskCreateStatic>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	4a23      	ldr	r2, [pc, #140]	@ (800c138 <vTaskStartScheduler+0xc8>)
 800c0aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c0ac:	4b22      	ldr	r3, [pc, #136]	@ (800c138 <vTaskStartScheduler+0xc8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e001      	b.n	800c0be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d102      	bne.n	800c0ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c0c4:	f000 fe2c 	bl	800cd20 <xTimerCreateTimerTask>
 800c0c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d11b      	bne.n	800c108 <vTaskStartScheduler+0x98>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	613b      	str	r3, [r7, #16]
}
 800c0e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c0e4:	4b15      	ldr	r3, [pc, #84]	@ (800c13c <vTaskStartScheduler+0xcc>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3354      	adds	r3, #84	@ 0x54
 800c0ea:	4a15      	ldr	r2, [pc, #84]	@ (800c140 <vTaskStartScheduler+0xd0>)
 800c0ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c0ee:	4b15      	ldr	r3, [pc, #84]	@ (800c144 <vTaskStartScheduler+0xd4>)
 800c0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0f6:	4b14      	ldr	r3, [pc, #80]	@ (800c148 <vTaskStartScheduler+0xd8>)
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c0fc:	4b13      	ldr	r3, [pc, #76]	@ (800c14c <vTaskStartScheduler+0xdc>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c102:	f001 f9f5 	bl	800d4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c106:	e00f      	b.n	800c128 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d10b      	bne.n	800c128 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	60fb      	str	r3, [r7, #12]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <vTaskStartScheduler+0xb4>
}
 800c128:	bf00      	nop
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	0800f034 	.word	0x0800f034
 800c134:	0800c7a5 	.word	0x0800c7a5
 800c138:	20001c4c 	.word	0x20001c4c
 800c13c:	20001754 	.word	0x20001754
 800c140:	20000020 	.word	0x20000020
 800c144:	20001c48 	.word	0x20001c48
 800c148:	20001c34 	.word	0x20001c34
 800c14c:	20001c2c 	.word	0x20001c2c

0800c150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c154:	4b04      	ldr	r3, [pc, #16]	@ (800c168 <vTaskSuspendAll+0x18>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3301      	adds	r3, #1
 800c15a:	4a03      	ldr	r2, [pc, #12]	@ (800c168 <vTaskSuspendAll+0x18>)
 800c15c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c15e:	bf00      	nop
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	20001c50 	.word	0x20001c50

0800c16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c176:	2300      	movs	r3, #0
 800c178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c17a:	4b42      	ldr	r3, [pc, #264]	@ (800c284 <xTaskResumeAll+0x118>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <xTaskResumeAll+0x2e>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	603b      	str	r3, [r7, #0]
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop
 800c198:	e7fd      	b.n	800c196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c19a:	f001 fa4d 	bl	800d638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c19e:	4b39      	ldr	r3, [pc, #228]	@ (800c284 <xTaskResumeAll+0x118>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	4a37      	ldr	r2, [pc, #220]	@ (800c284 <xTaskResumeAll+0x118>)
 800c1a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1a8:	4b36      	ldr	r3, [pc, #216]	@ (800c284 <xTaskResumeAll+0x118>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d162      	bne.n	800c276 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c1b0:	4b35      	ldr	r3, [pc, #212]	@ (800c288 <xTaskResumeAll+0x11c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d05e      	beq.n	800c276 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1b8:	e02f      	b.n	800c21a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ba:	4b34      	ldr	r3, [pc, #208]	@ (800c28c <xTaskResumeAll+0x120>)
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3318      	adds	r3, #24
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fe fd08 	bl	800abdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe fd03 	bl	800abdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1da:	4b2d      	ldr	r3, [pc, #180]	@ (800c290 <xTaskResumeAll+0x124>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d903      	bls.n	800c1ea <xTaskResumeAll+0x7e>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c290 <xTaskResumeAll+0x124>)
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4a27      	ldr	r2, [pc, #156]	@ (800c294 <xTaskResumeAll+0x128>)
 800c1f8:	441a      	add	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f7fe fc8e 	bl	800ab22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c20a:	4b23      	ldr	r3, [pc, #140]	@ (800c298 <xTaskResumeAll+0x12c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c210:	429a      	cmp	r2, r3
 800c212:	d302      	bcc.n	800c21a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c214:	4b21      	ldr	r3, [pc, #132]	@ (800c29c <xTaskResumeAll+0x130>)
 800c216:	2201      	movs	r2, #1
 800c218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c21a:	4b1c      	ldr	r3, [pc, #112]	@ (800c28c <xTaskResumeAll+0x120>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1cb      	bne.n	800c1ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c228:	f000 fb78 	bl	800c91c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c22c:	4b1c      	ldr	r3, [pc, #112]	@ (800c2a0 <xTaskResumeAll+0x134>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d010      	beq.n	800c25a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c238:	f000 f858 	bl	800c2ec <xTaskIncrementTick>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d002      	beq.n	800c248 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c242:	4b16      	ldr	r3, [pc, #88]	@ (800c29c <xTaskResumeAll+0x130>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1f1      	bne.n	800c238 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c254:	4b12      	ldr	r3, [pc, #72]	@ (800c2a0 <xTaskResumeAll+0x134>)
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c25a:	4b10      	ldr	r3, [pc, #64]	@ (800c29c <xTaskResumeAll+0x130>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d009      	beq.n	800c276 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c262:	2301      	movs	r3, #1
 800c264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c266:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a4 <xTaskResumeAll+0x138>)
 800c268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c276:	f001 fa11 	bl	800d69c <vPortExitCritical>

	return xAlreadyYielded;
 800c27a:	68bb      	ldr	r3, [r7, #8]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20001c50 	.word	0x20001c50
 800c288:	20001c28 	.word	0x20001c28
 800c28c:	20001be8 	.word	0x20001be8
 800c290:	20001c30 	.word	0x20001c30
 800c294:	20001758 	.word	0x20001758
 800c298:	20001754 	.word	0x20001754
 800c29c:	20001c3c 	.word	0x20001c3c
 800c2a0:	20001c38 	.word	0x20001c38
 800c2a4:	e000ed04 	.word	0xe000ed04

0800c2a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c2ae:	4b05      	ldr	r3, [pc, #20]	@ (800c2c4 <xTaskGetTickCount+0x1c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c2b4:	687b      	ldr	r3, [r7, #4]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	20001c2c 	.word	0x20001c2c

0800c2c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2ce:	f001 fa93 	bl	800d7f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c2d6:	4b04      	ldr	r3, [pc, #16]	@ (800c2e8 <xTaskGetTickCountFromISR+0x20>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2dc:	683b      	ldr	r3, [r7, #0]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20001c2c 	.word	0x20001c2c

0800c2ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2f6:	4b4f      	ldr	r3, [pc, #316]	@ (800c434 <xTaskIncrementTick+0x148>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f040 8090 	bne.w	800c420 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c300:	4b4d      	ldr	r3, [pc, #308]	@ (800c438 <xTaskIncrementTick+0x14c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3301      	adds	r3, #1
 800c306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c308:	4a4b      	ldr	r2, [pc, #300]	@ (800c438 <xTaskIncrementTick+0x14c>)
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d121      	bne.n	800c358 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c314:	4b49      	ldr	r3, [pc, #292]	@ (800c43c <xTaskIncrementTick+0x150>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00b      	beq.n	800c336 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	603b      	str	r3, [r7, #0]
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	e7fd      	b.n	800c332 <xTaskIncrementTick+0x46>
 800c336:	4b41      	ldr	r3, [pc, #260]	@ (800c43c <xTaskIncrementTick+0x150>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	4b40      	ldr	r3, [pc, #256]	@ (800c440 <xTaskIncrementTick+0x154>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a3e      	ldr	r2, [pc, #248]	@ (800c43c <xTaskIncrementTick+0x150>)
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	4a3e      	ldr	r2, [pc, #248]	@ (800c440 <xTaskIncrementTick+0x154>)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6013      	str	r3, [r2, #0]
 800c34a:	4b3e      	ldr	r3, [pc, #248]	@ (800c444 <xTaskIncrementTick+0x158>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3301      	adds	r3, #1
 800c350:	4a3c      	ldr	r2, [pc, #240]	@ (800c444 <xTaskIncrementTick+0x158>)
 800c352:	6013      	str	r3, [r2, #0]
 800c354:	f000 fae2 	bl	800c91c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c358:	4b3b      	ldr	r3, [pc, #236]	@ (800c448 <xTaskIncrementTick+0x15c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d349      	bcc.n	800c3f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c362:	4b36      	ldr	r3, [pc, #216]	@ (800c43c <xTaskIncrementTick+0x150>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d104      	bne.n	800c376 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c36c:	4b36      	ldr	r3, [pc, #216]	@ (800c448 <xTaskIncrementTick+0x15c>)
 800c36e:	f04f 32ff 	mov.w	r2, #4294967295
 800c372:	601a      	str	r2, [r3, #0]
					break;
 800c374:	e03f      	b.n	800c3f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c376:	4b31      	ldr	r3, [pc, #196]	@ (800c43c <xTaskIncrementTick+0x150>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d203      	bcs.n	800c396 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c38e:	4a2e      	ldr	r2, [pc, #184]	@ (800c448 <xTaskIncrementTick+0x15c>)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c394:	e02f      	b.n	800c3f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	3304      	adds	r3, #4
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe fc1e 	bl	800abdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	3318      	adds	r3, #24
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fe fc15 	bl	800abdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b6:	4b25      	ldr	r3, [pc, #148]	@ (800c44c <xTaskIncrementTick+0x160>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d903      	bls.n	800c3c6 <xTaskIncrementTick+0xda>
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c2:	4a22      	ldr	r2, [pc, #136]	@ (800c44c <xTaskIncrementTick+0x160>)
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4a1f      	ldr	r2, [pc, #124]	@ (800c450 <xTaskIncrementTick+0x164>)
 800c3d4:	441a      	add	r2, r3
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7fe fba0 	bl	800ab22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e6:	4b1b      	ldr	r3, [pc, #108]	@ (800c454 <xTaskIncrementTick+0x168>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d3b8      	bcc.n	800c362 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3f4:	e7b5      	b.n	800c362 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c3f6:	4b17      	ldr	r3, [pc, #92]	@ (800c454 <xTaskIncrementTick+0x168>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3fc:	4914      	ldr	r1, [pc, #80]	@ (800c450 <xTaskIncrementTick+0x164>)
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	440b      	add	r3, r1
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d901      	bls.n	800c412 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c40e:	2301      	movs	r3, #1
 800c410:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c412:	4b11      	ldr	r3, [pc, #68]	@ (800c458 <xTaskIncrementTick+0x16c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d007      	beq.n	800c42a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c41a:	2301      	movs	r3, #1
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e004      	b.n	800c42a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c420:	4b0e      	ldr	r3, [pc, #56]	@ (800c45c <xTaskIncrementTick+0x170>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3301      	adds	r3, #1
 800c426:	4a0d      	ldr	r2, [pc, #52]	@ (800c45c <xTaskIncrementTick+0x170>)
 800c428:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c42a:	697b      	ldr	r3, [r7, #20]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20001c50 	.word	0x20001c50
 800c438:	20001c2c 	.word	0x20001c2c
 800c43c:	20001be0 	.word	0x20001be0
 800c440:	20001be4 	.word	0x20001be4
 800c444:	20001c40 	.word	0x20001c40
 800c448:	20001c48 	.word	0x20001c48
 800c44c:	20001c30 	.word	0x20001c30
 800c450:	20001758 	.word	0x20001758
 800c454:	20001754 	.word	0x20001754
 800c458:	20001c3c 	.word	0x20001c3c
 800c45c:	20001c38 	.word	0x20001c38

0800c460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c466:	4b2b      	ldr	r3, [pc, #172]	@ (800c514 <vTaskSwitchContext+0xb4>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c46e:	4b2a      	ldr	r3, [pc, #168]	@ (800c518 <vTaskSwitchContext+0xb8>)
 800c470:	2201      	movs	r2, #1
 800c472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c474:	e047      	b.n	800c506 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c476:	4b28      	ldr	r3, [pc, #160]	@ (800c518 <vTaskSwitchContext+0xb8>)
 800c478:	2200      	movs	r2, #0
 800c47a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c47c:	4b27      	ldr	r3, [pc, #156]	@ (800c51c <vTaskSwitchContext+0xbc>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	e011      	b.n	800c4a8 <vTaskSwitchContext+0x48>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10b      	bne.n	800c4a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	607b      	str	r3, [r7, #4]
}
 800c49c:	bf00      	nop
 800c49e:	bf00      	nop
 800c4a0:	e7fd      	b.n	800c49e <vTaskSwitchContext+0x3e>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	491d      	ldr	r1, [pc, #116]	@ (800c520 <vTaskSwitchContext+0xc0>)
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	440b      	add	r3, r1
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d0e3      	beq.n	800c484 <vTaskSwitchContext+0x24>
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4a16      	ldr	r2, [pc, #88]	@ (800c520 <vTaskSwitchContext+0xc0>)
 800c4c8:	4413      	add	r3, r2
 800c4ca:	60bb      	str	r3, [r7, #8]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	605a      	str	r2, [r3, #4]
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	3308      	adds	r3, #8
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d104      	bne.n	800c4ec <vTaskSwitchContext+0x8c>
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	605a      	str	r2, [r3, #4]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	4a0c      	ldr	r2, [pc, #48]	@ (800c524 <vTaskSwitchContext+0xc4>)
 800c4f4:	6013      	str	r3, [r2, #0]
 800c4f6:	4a09      	ldr	r2, [pc, #36]	@ (800c51c <vTaskSwitchContext+0xbc>)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c4fc:	4b09      	ldr	r3, [pc, #36]	@ (800c524 <vTaskSwitchContext+0xc4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3354      	adds	r3, #84	@ 0x54
 800c502:	4a09      	ldr	r2, [pc, #36]	@ (800c528 <vTaskSwitchContext+0xc8>)
 800c504:	6013      	str	r3, [r2, #0]
}
 800c506:	bf00      	nop
 800c508:	3714      	adds	r7, #20
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	20001c50 	.word	0x20001c50
 800c518:	20001c3c 	.word	0x20001c3c
 800c51c:	20001c30 	.word	0x20001c30
 800c520:	20001758 	.word	0x20001758
 800c524:	20001754 	.word	0x20001754
 800c528:	20000020 	.word	0x20000020

0800c52c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10b      	bne.n	800c554 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	60fb      	str	r3, [r7, #12]
}
 800c54e:	bf00      	nop
 800c550:	bf00      	nop
 800c552:	e7fd      	b.n	800c550 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c554:	4b07      	ldr	r3, [pc, #28]	@ (800c574 <vTaskPlaceOnEventList+0x48>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3318      	adds	r3, #24
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7fe fb04 	bl	800ab6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c562:	2101      	movs	r1, #1
 800c564:	6838      	ldr	r0, [r7, #0]
 800c566:	f000 fb87 	bl	800cc78 <prvAddCurrentTaskToDelayedList>
}
 800c56a:	bf00      	nop
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20001754 	.word	0x20001754

0800c578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10b      	bne.n	800c5a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	617b      	str	r3, [r7, #20]
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	e7fd      	b.n	800c59e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5cc <vTaskPlaceOnEventListRestricted+0x54>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3318      	adds	r3, #24
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f7fe fab9 	bl	800ab22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d002      	beq.n	800c5bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c5bc:	6879      	ldr	r1, [r7, #4]
 800c5be:	68b8      	ldr	r0, [r7, #8]
 800c5c0:	f000 fb5a 	bl	800cc78 <prvAddCurrentTaskToDelayedList>
	}
 800c5c4:	bf00      	nop
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	20001754 	.word	0x20001754

0800c5d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10b      	bne.n	800c5fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	60fb      	str	r3, [r7, #12]
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	e7fd      	b.n	800c5fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	3318      	adds	r3, #24
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe faea 	bl	800abdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c608:	4b1d      	ldr	r3, [pc, #116]	@ (800c680 <xTaskRemoveFromEventList+0xb0>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d11d      	bne.n	800c64c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	3304      	adds	r3, #4
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe fae1 	bl	800abdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c61e:	4b19      	ldr	r3, [pc, #100]	@ (800c684 <xTaskRemoveFromEventList+0xb4>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d903      	bls.n	800c62e <xTaskRemoveFromEventList+0x5e>
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62a:	4a16      	ldr	r2, [pc, #88]	@ (800c684 <xTaskRemoveFromEventList+0xb4>)
 800c62c:	6013      	str	r3, [r2, #0]
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c632:	4613      	mov	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4a13      	ldr	r2, [pc, #76]	@ (800c688 <xTaskRemoveFromEventList+0xb8>)
 800c63c:	441a      	add	r2, r3
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	3304      	adds	r3, #4
 800c642:	4619      	mov	r1, r3
 800c644:	4610      	mov	r0, r2
 800c646:	f7fe fa6c 	bl	800ab22 <vListInsertEnd>
 800c64a:	e005      	b.n	800c658 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	3318      	adds	r3, #24
 800c650:	4619      	mov	r1, r3
 800c652:	480e      	ldr	r0, [pc, #56]	@ (800c68c <xTaskRemoveFromEventList+0xbc>)
 800c654:	f7fe fa65 	bl	800ab22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c65c:	4b0c      	ldr	r3, [pc, #48]	@ (800c690 <xTaskRemoveFromEventList+0xc0>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c662:	429a      	cmp	r2, r3
 800c664:	d905      	bls.n	800c672 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c666:	2301      	movs	r3, #1
 800c668:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c66a:	4b0a      	ldr	r3, [pc, #40]	@ (800c694 <xTaskRemoveFromEventList+0xc4>)
 800c66c:	2201      	movs	r2, #1
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	e001      	b.n	800c676 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c672:	2300      	movs	r3, #0
 800c674:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c676:	697b      	ldr	r3, [r7, #20]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3718      	adds	r7, #24
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20001c50 	.word	0x20001c50
 800c684:	20001c30 	.word	0x20001c30
 800c688:	20001758 	.word	0x20001758
 800c68c:	20001be8 	.word	0x20001be8
 800c690:	20001754 	.word	0x20001754
 800c694:	20001c3c 	.word	0x20001c3c

0800c698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6a0:	4b06      	ldr	r3, [pc, #24]	@ (800c6bc <vTaskInternalSetTimeOutState+0x24>)
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c6a8:	4b05      	ldr	r3, [pc, #20]	@ (800c6c0 <vTaskInternalSetTimeOutState+0x28>)
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	605a      	str	r2, [r3, #4]
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	20001c40 	.word	0x20001c40
 800c6c0:	20001c2c 	.word	0x20001c2c

0800c6c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b088      	sub	sp, #32
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10b      	bne.n	800c6ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	613b      	str	r3, [r7, #16]
}
 800c6e6:	bf00      	nop
 800c6e8:	bf00      	nop
 800c6ea:	e7fd      	b.n	800c6e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10b      	bne.n	800c70a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	60fb      	str	r3, [r7, #12]
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	e7fd      	b.n	800c706 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c70a:	f000 ff95 	bl	800d638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c70e:	4b1d      	ldr	r3, [pc, #116]	@ (800c784 <xTaskCheckForTimeOut+0xc0>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	69ba      	ldr	r2, [r7, #24]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c726:	d102      	bne.n	800c72e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c728:	2300      	movs	r3, #0
 800c72a:	61fb      	str	r3, [r7, #28]
 800c72c:	e023      	b.n	800c776 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	4b15      	ldr	r3, [pc, #84]	@ (800c788 <xTaskCheckForTimeOut+0xc4>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	429a      	cmp	r2, r3
 800c738:	d007      	beq.n	800c74a <xTaskCheckForTimeOut+0x86>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	69ba      	ldr	r2, [r7, #24]
 800c740:	429a      	cmp	r2, r3
 800c742:	d302      	bcc.n	800c74a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c744:	2301      	movs	r3, #1
 800c746:	61fb      	str	r3, [r7, #28]
 800c748:	e015      	b.n	800c776 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	429a      	cmp	r2, r3
 800c752:	d20b      	bcs.n	800c76c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	1ad2      	subs	r2, r2, r3
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff ff99 	bl	800c698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c766:	2300      	movs	r3, #0
 800c768:	61fb      	str	r3, [r7, #28]
 800c76a:	e004      	b.n	800c776 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	2200      	movs	r2, #0
 800c770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c772:	2301      	movs	r3, #1
 800c774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c776:	f000 ff91 	bl	800d69c <vPortExitCritical>

	return xReturn;
 800c77a:	69fb      	ldr	r3, [r7, #28]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3720      	adds	r7, #32
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	20001c2c 	.word	0x20001c2c
 800c788:	20001c40 	.word	0x20001c40

0800c78c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c78c:	b480      	push	{r7}
 800c78e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c790:	4b03      	ldr	r3, [pc, #12]	@ (800c7a0 <vTaskMissedYield+0x14>)
 800c792:	2201      	movs	r2, #1
 800c794:	601a      	str	r2, [r3, #0]
}
 800c796:	bf00      	nop
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	20001c3c 	.word	0x20001c3c

0800c7a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7ac:	f000 f852 	bl	800c854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7b0:	4b06      	ldr	r3, [pc, #24]	@ (800c7cc <prvIdleTask+0x28>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d9f9      	bls.n	800c7ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800c7b8:	4b05      	ldr	r3, [pc, #20]	@ (800c7d0 <prvIdleTask+0x2c>)
 800c7ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c7c8:	e7f0      	b.n	800c7ac <prvIdleTask+0x8>
 800c7ca:	bf00      	nop
 800c7cc:	20001758 	.word	0x20001758
 800c7d0:	e000ed04 	.word	0xe000ed04

0800c7d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7da:	2300      	movs	r3, #0
 800c7dc:	607b      	str	r3, [r7, #4]
 800c7de:	e00c      	b.n	800c7fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4a12      	ldr	r2, [pc, #72]	@ (800c834 <prvInitialiseTaskLists+0x60>)
 800c7ec:	4413      	add	r3, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe f96a 	bl	800aac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	607b      	str	r3, [r7, #4]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b37      	cmp	r3, #55	@ 0x37
 800c7fe:	d9ef      	bls.n	800c7e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c800:	480d      	ldr	r0, [pc, #52]	@ (800c838 <prvInitialiseTaskLists+0x64>)
 800c802:	f7fe f961 	bl	800aac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c806:	480d      	ldr	r0, [pc, #52]	@ (800c83c <prvInitialiseTaskLists+0x68>)
 800c808:	f7fe f95e 	bl	800aac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c80c:	480c      	ldr	r0, [pc, #48]	@ (800c840 <prvInitialiseTaskLists+0x6c>)
 800c80e:	f7fe f95b 	bl	800aac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c812:	480c      	ldr	r0, [pc, #48]	@ (800c844 <prvInitialiseTaskLists+0x70>)
 800c814:	f7fe f958 	bl	800aac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c818:	480b      	ldr	r0, [pc, #44]	@ (800c848 <prvInitialiseTaskLists+0x74>)
 800c81a:	f7fe f955 	bl	800aac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c81e:	4b0b      	ldr	r3, [pc, #44]	@ (800c84c <prvInitialiseTaskLists+0x78>)
 800c820:	4a05      	ldr	r2, [pc, #20]	@ (800c838 <prvInitialiseTaskLists+0x64>)
 800c822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c824:	4b0a      	ldr	r3, [pc, #40]	@ (800c850 <prvInitialiseTaskLists+0x7c>)
 800c826:	4a05      	ldr	r2, [pc, #20]	@ (800c83c <prvInitialiseTaskLists+0x68>)
 800c828:	601a      	str	r2, [r3, #0]
}
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	20001758 	.word	0x20001758
 800c838:	20001bb8 	.word	0x20001bb8
 800c83c:	20001bcc 	.word	0x20001bcc
 800c840:	20001be8 	.word	0x20001be8
 800c844:	20001bfc 	.word	0x20001bfc
 800c848:	20001c14 	.word	0x20001c14
 800c84c:	20001be0 	.word	0x20001be0
 800c850:	20001be4 	.word	0x20001be4

0800c854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c85a:	e019      	b.n	800c890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c85c:	f000 feec 	bl	800d638 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c860:	4b10      	ldr	r3, [pc, #64]	@ (800c8a4 <prvCheckTasksWaitingTermination+0x50>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	3304      	adds	r3, #4
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe f9b5 	bl	800abdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c872:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a8 <prvCheckTasksWaitingTermination+0x54>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	3b01      	subs	r3, #1
 800c878:	4a0b      	ldr	r2, [pc, #44]	@ (800c8a8 <prvCheckTasksWaitingTermination+0x54>)
 800c87a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c87c:	4b0b      	ldr	r3, [pc, #44]	@ (800c8ac <prvCheckTasksWaitingTermination+0x58>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3b01      	subs	r3, #1
 800c882:	4a0a      	ldr	r2, [pc, #40]	@ (800c8ac <prvCheckTasksWaitingTermination+0x58>)
 800c884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c886:	f000 ff09 	bl	800d69c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f810 	bl	800c8b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c890:	4b06      	ldr	r3, [pc, #24]	@ (800c8ac <prvCheckTasksWaitingTermination+0x58>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e1      	bne.n	800c85c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20001bfc 	.word	0x20001bfc
 800c8a8:	20001c28 	.word	0x20001c28
 800c8ac:	20001c10 	.word	0x20001c10

0800c8b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	3354      	adds	r3, #84	@ 0x54
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f001 fbed 	bl	800e09c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d108      	bne.n	800c8de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f001 f8a1 	bl	800da18 <vPortFree>
				vPortFree( pxTCB );
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f001 f89e 	bl	800da18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c8dc:	e019      	b.n	800c912 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d103      	bne.n	800c8f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f001 f895 	bl	800da18 <vPortFree>
	}
 800c8ee:	e010      	b.n	800c912 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d00b      	beq.n	800c912 <prvDeleteTCB+0x62>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	60fb      	str	r3, [r7, #12]
}
 800c90c:	bf00      	nop
 800c90e:	bf00      	nop
 800c910:	e7fd      	b.n	800c90e <prvDeleteTCB+0x5e>
	}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
	...

0800c91c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c922:	4b0c      	ldr	r3, [pc, #48]	@ (800c954 <prvResetNextTaskUnblockTime+0x38>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d104      	bne.n	800c936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c92c:	4b0a      	ldr	r3, [pc, #40]	@ (800c958 <prvResetNextTaskUnblockTime+0x3c>)
 800c92e:	f04f 32ff 	mov.w	r2, #4294967295
 800c932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c934:	e008      	b.n	800c948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c936:	4b07      	ldr	r3, [pc, #28]	@ (800c954 <prvResetNextTaskUnblockTime+0x38>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	4a04      	ldr	r2, [pc, #16]	@ (800c958 <prvResetNextTaskUnblockTime+0x3c>)
 800c946:	6013      	str	r3, [r2, #0]
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	20001be0 	.word	0x20001be0
 800c958:	20001c48 	.word	0x20001c48

0800c95c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c962:	4b0b      	ldr	r3, [pc, #44]	@ (800c990 <xTaskGetSchedulerState+0x34>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d102      	bne.n	800c970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c96a:	2301      	movs	r3, #1
 800c96c:	607b      	str	r3, [r7, #4]
 800c96e:	e008      	b.n	800c982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c970:	4b08      	ldr	r3, [pc, #32]	@ (800c994 <xTaskGetSchedulerState+0x38>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c978:	2302      	movs	r3, #2
 800c97a:	607b      	str	r3, [r7, #4]
 800c97c:	e001      	b.n	800c982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c97e:	2300      	movs	r3, #0
 800c980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c982:	687b      	ldr	r3, [r7, #4]
	}
 800c984:	4618      	mov	r0, r3
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	20001c34 	.word	0x20001c34
 800c994:	20001c50 	.word	0x20001c50

0800c998 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d051      	beq.n	800ca52 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9b2:	4b2a      	ldr	r3, [pc, #168]	@ (800ca5c <xTaskPriorityInherit+0xc4>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d241      	bcs.n	800ca40 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	db06      	blt.n	800c9d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9c4:	4b25      	ldr	r3, [pc, #148]	@ (800ca5c <xTaskPriorityInherit+0xc4>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	6959      	ldr	r1, [r3, #20]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9da:	4613      	mov	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4a1f      	ldr	r2, [pc, #124]	@ (800ca60 <xTaskPriorityInherit+0xc8>)
 800c9e4:	4413      	add	r3, r2
 800c9e6:	4299      	cmp	r1, r3
 800c9e8:	d122      	bne.n	800ca30 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe f8f4 	bl	800abdc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c9f4:	4b19      	ldr	r3, [pc, #100]	@ (800ca5c <xTaskPriorityInherit+0xc4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca02:	4b18      	ldr	r3, [pc, #96]	@ (800ca64 <xTaskPriorityInherit+0xcc>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d903      	bls.n	800ca12 <xTaskPriorityInherit+0x7a>
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca0e:	4a15      	ldr	r2, [pc, #84]	@ (800ca64 <xTaskPriorityInherit+0xcc>)
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4a10      	ldr	r2, [pc, #64]	@ (800ca60 <xTaskPriorityInherit+0xc8>)
 800ca20:	441a      	add	r2, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	3304      	adds	r3, #4
 800ca26:	4619      	mov	r1, r3
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f7fe f87a 	bl	800ab22 <vListInsertEnd>
 800ca2e:	e004      	b.n	800ca3a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca30:	4b0a      	ldr	r3, [pc, #40]	@ (800ca5c <xTaskPriorityInherit+0xc4>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e008      	b.n	800ca52 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca44:	4b05      	ldr	r3, [pc, #20]	@ (800ca5c <xTaskPriorityInherit+0xc4>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d201      	bcs.n	800ca52 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca52:	68fb      	ldr	r3, [r7, #12]
	}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	20001754 	.word	0x20001754
 800ca60:	20001758 	.word	0x20001758
 800ca64:	20001c30 	.word	0x20001c30

0800ca68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d058      	beq.n	800cb30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca7e:	4b2f      	ldr	r3, [pc, #188]	@ (800cb3c <xTaskPriorityDisinherit+0xd4>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d00b      	beq.n	800caa0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	60fb      	str	r3, [r7, #12]
}
 800ca9a:	bf00      	nop
 800ca9c:	bf00      	nop
 800ca9e:	e7fd      	b.n	800ca9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10b      	bne.n	800cac0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	60bb      	str	r3, [r7, #8]
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	e7fd      	b.n	800cabc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cac4:	1e5a      	subs	r2, r3, #1
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d02c      	beq.n	800cb30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d128      	bne.n	800cb30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	3304      	adds	r3, #4
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe f87a 	bl	800abdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caf4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb00:	4b0f      	ldr	r3, [pc, #60]	@ (800cb40 <xTaskPriorityDisinherit+0xd8>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d903      	bls.n	800cb10 <xTaskPriorityDisinherit+0xa8>
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0c:	4a0c      	ldr	r2, [pc, #48]	@ (800cb40 <xTaskPriorityDisinherit+0xd8>)
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4a09      	ldr	r2, [pc, #36]	@ (800cb44 <xTaskPriorityDisinherit+0xdc>)
 800cb1e:	441a      	add	r2, r3
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	3304      	adds	r3, #4
 800cb24:	4619      	mov	r1, r3
 800cb26:	4610      	mov	r0, r2
 800cb28:	f7fd fffb 	bl	800ab22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb30:	697b      	ldr	r3, [r7, #20]
	}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20001754 	.word	0x20001754
 800cb40:	20001c30 	.word	0x20001c30
 800cb44:	20001758 	.word	0x20001758

0800cb48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cb56:	2301      	movs	r3, #1
 800cb58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d06c      	beq.n	800cc3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10b      	bne.n	800cb80 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	e7fd      	b.n	800cb7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d902      	bls.n	800cb90 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	61fb      	str	r3, [r7, #28]
 800cb8e:	e002      	b.n	800cb96 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9a:	69fa      	ldr	r2, [r7, #28]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d04c      	beq.n	800cc3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cba4:	697a      	ldr	r2, [r7, #20]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d147      	bne.n	800cc3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cbaa:	4b26      	ldr	r3, [pc, #152]	@ (800cc44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d10b      	bne.n	800cbcc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	60bb      	str	r3, [r7, #8]
}
 800cbc6:	bf00      	nop
 800cbc8:	bf00      	nop
 800cbca:	e7fd      	b.n	800cbc8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	69fa      	ldr	r2, [r7, #28]
 800cbd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	699b      	ldr	r3, [r3, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	db04      	blt.n	800cbea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	6959      	ldr	r1, [r3, #20]
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4a13      	ldr	r2, [pc, #76]	@ (800cc48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cbfa:	4413      	add	r3, r2
 800cbfc:	4299      	cmp	r1, r3
 800cbfe:	d11c      	bne.n	800cc3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	3304      	adds	r3, #4
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fd ffe9 	bl	800abdc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc0e:	4b0f      	ldr	r3, [pc, #60]	@ (800cc4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d903      	bls.n	800cc1e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc1a:	4a0c      	ldr	r2, [pc, #48]	@ (800cc4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc22:	4613      	mov	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4a07      	ldr	r2, [pc, #28]	@ (800cc48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cc2c:	441a      	add	r2, r3
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7fd ff74 	bl	800ab22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc3a:	bf00      	nop
 800cc3c:	3720      	adds	r7, #32
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20001754 	.word	0x20001754
 800cc48:	20001758 	.word	0x20001758
 800cc4c:	20001c30 	.word	0x20001c30

0800cc50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cc50:	b480      	push	{r7}
 800cc52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cc54:	4b07      	ldr	r3, [pc, #28]	@ (800cc74 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d004      	beq.n	800cc66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cc5c:	4b05      	ldr	r3, [pc, #20]	@ (800cc74 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc62:	3201      	adds	r2, #1
 800cc64:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cc66:	4b03      	ldr	r3, [pc, #12]	@ (800cc74 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc68:	681b      	ldr	r3, [r3, #0]
	}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	20001754 	.word	0x20001754

0800cc78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc82:	4b21      	ldr	r3, [pc, #132]	@ (800cd08 <prvAddCurrentTaskToDelayedList+0x90>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc88:	4b20      	ldr	r3, [pc, #128]	@ (800cd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fd ffa4 	bl	800abdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d10a      	bne.n	800ccb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d007      	beq.n	800ccb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cca2:	4b1a      	ldr	r3, [pc, #104]	@ (800cd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3304      	adds	r3, #4
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4819      	ldr	r0, [pc, #100]	@ (800cd10 <prvAddCurrentTaskToDelayedList+0x98>)
 800ccac:	f7fd ff39 	bl	800ab22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ccb0:	e026      	b.n	800cd00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ccba:	4b14      	ldr	r3, [pc, #80]	@ (800cd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d209      	bcs.n	800ccde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccca:	4b12      	ldr	r3, [pc, #72]	@ (800cd14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	4b0f      	ldr	r3, [pc, #60]	@ (800cd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	3304      	adds	r3, #4
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	f7fd ff47 	bl	800ab6a <vListInsert>
}
 800ccdc:	e010      	b.n	800cd00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccde:	4b0e      	ldr	r3, [pc, #56]	@ (800cd18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	4b0a      	ldr	r3, [pc, #40]	@ (800cd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3304      	adds	r3, #4
 800cce8:	4619      	mov	r1, r3
 800ccea:	4610      	mov	r0, r2
 800ccec:	f7fd ff3d 	bl	800ab6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccf0:	4b0a      	ldr	r3, [pc, #40]	@ (800cd1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d202      	bcs.n	800cd00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ccfa:	4a08      	ldr	r2, [pc, #32]	@ (800cd1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	6013      	str	r3, [r2, #0]
}
 800cd00:	bf00      	nop
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	20001c2c 	.word	0x20001c2c
 800cd0c:	20001754 	.word	0x20001754
 800cd10:	20001c14 	.word	0x20001c14
 800cd14:	20001be4 	.word	0x20001be4
 800cd18:	20001be0 	.word	0x20001be0
 800cd1c:	20001c48 	.word	0x20001c48

0800cd20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08a      	sub	sp, #40	@ 0x28
 800cd24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd2a:	f000 fb13 	bl	800d354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd2e:	4b1d      	ldr	r3, [pc, #116]	@ (800cda4 <xTimerCreateTimerTask+0x84>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d021      	beq.n	800cd7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd3e:	1d3a      	adds	r2, r7, #4
 800cd40:	f107 0108 	add.w	r1, r7, #8
 800cd44:	f107 030c 	add.w	r3, r7, #12
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7fd fea3 	bl	800aa94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd4e:	6879      	ldr	r1, [r7, #4]
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	9202      	str	r2, [sp, #8]
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	2302      	movs	r3, #2
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	460a      	mov	r2, r1
 800cd60:	4911      	ldr	r1, [pc, #68]	@ (800cda8 <xTimerCreateTimerTask+0x88>)
 800cd62:	4812      	ldr	r0, [pc, #72]	@ (800cdac <xTimerCreateTimerTask+0x8c>)
 800cd64:	f7fe ff90 	bl	800bc88 <xTaskCreateStatic>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	4a11      	ldr	r2, [pc, #68]	@ (800cdb0 <xTimerCreateTimerTask+0x90>)
 800cd6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd6e:	4b10      	ldr	r3, [pc, #64]	@ (800cdb0 <xTimerCreateTimerTask+0x90>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd76:	2301      	movs	r3, #1
 800cd78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10b      	bne.n	800cd98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	613b      	str	r3, [r7, #16]
}
 800cd92:	bf00      	nop
 800cd94:	bf00      	nop
 800cd96:	e7fd      	b.n	800cd94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd98:	697b      	ldr	r3, [r7, #20]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20001c84 	.word	0x20001c84
 800cda8:	0800f03c 	.word	0x0800f03c
 800cdac:	0800ceed 	.word	0x0800ceed
 800cdb0:	20001c88 	.word	0x20001c88

0800cdb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b08a      	sub	sp, #40	@ 0x28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10b      	bne.n	800cde4 <xTimerGenericCommand+0x30>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	623b      	str	r3, [r7, #32]
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	e7fd      	b.n	800cde0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cde4:	4b19      	ldr	r3, [pc, #100]	@ (800ce4c <xTimerGenericCommand+0x98>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d02a      	beq.n	800ce42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	2b05      	cmp	r3, #5
 800cdfc:	dc18      	bgt.n	800ce30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cdfe:	f7ff fdad 	bl	800c95c <xTaskGetSchedulerState>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d109      	bne.n	800ce1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce08:	4b10      	ldr	r3, [pc, #64]	@ (800ce4c <xTimerGenericCommand+0x98>)
 800ce0a:	6818      	ldr	r0, [r3, #0]
 800ce0c:	f107 0110 	add.w	r1, r7, #16
 800ce10:	2300      	movs	r3, #0
 800ce12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce14:	f7fe f8c0 	bl	800af98 <xQueueGenericSend>
 800ce18:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce1a:	e012      	b.n	800ce42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce4c <xTimerGenericCommand+0x98>)
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	f107 0110 	add.w	r1, r7, #16
 800ce24:	2300      	movs	r3, #0
 800ce26:	2200      	movs	r2, #0
 800ce28:	f7fe f8b6 	bl	800af98 <xQueueGenericSend>
 800ce2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce2e:	e008      	b.n	800ce42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce30:	4b06      	ldr	r3, [pc, #24]	@ (800ce4c <xTimerGenericCommand+0x98>)
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	f107 0110 	add.w	r1, r7, #16
 800ce38:	2300      	movs	r3, #0
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	f7fe f9ae 	bl	800b19c <xQueueGenericSendFromISR>
 800ce40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3728      	adds	r7, #40	@ 0x28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	20001c84 	.word	0x20001c84

0800ce50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af02      	add	r7, sp, #8
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce5a:	4b23      	ldr	r3, [pc, #140]	@ (800cee8 <prvProcessExpiredTimer+0x98>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	3304      	adds	r3, #4
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fd feb7 	bl	800abdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce74:	f003 0304 	and.w	r3, r3, #4
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d023      	beq.n	800cec4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	699a      	ldr	r2, [r3, #24]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	18d1      	adds	r1, r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	6978      	ldr	r0, [r7, #20]
 800ce8a:	f000 f8d5 	bl	800d038 <prvInsertTimerInActiveList>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d020      	beq.n	800ced6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce94:	2300      	movs	r3, #0
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	2300      	movs	r3, #0
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	6978      	ldr	r0, [r7, #20]
 800cea0:	f7ff ff88 	bl	800cdb4 <xTimerGenericCommand>
 800cea4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d114      	bne.n	800ced6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	60fb      	str	r3, [r7, #12]
}
 800cebe:	bf00      	nop
 800cec0:	bf00      	nop
 800cec2:	e7fd      	b.n	800cec0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceca:	f023 0301 	bic.w	r3, r3, #1
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	6a1b      	ldr	r3, [r3, #32]
 800ceda:	6978      	ldr	r0, [r7, #20]
 800cedc:	4798      	blx	r3
}
 800cede:	bf00      	nop
 800cee0:	3718      	adds	r7, #24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20001c7c 	.word	0x20001c7c

0800ceec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cef4:	f107 0308 	add.w	r3, r7, #8
 800cef8:	4618      	mov	r0, r3
 800cefa:	f000 f859 	bl	800cfb0 <prvGetNextExpireTime>
 800cefe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	4619      	mov	r1, r3
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f000 f805 	bl	800cf14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf0a:	f000 f8d7 	bl	800d0bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf0e:	bf00      	nop
 800cf10:	e7f0      	b.n	800cef4 <prvTimerTask+0x8>
	...

0800cf14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf1e:	f7ff f917 	bl	800c150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf22:	f107 0308 	add.w	r3, r7, #8
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 f866 	bl	800cff8 <prvSampleTimeNow>
 800cf2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d130      	bne.n	800cf96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d10a      	bne.n	800cf50 <prvProcessTimerOrBlockTask+0x3c>
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d806      	bhi.n	800cf50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf42:	f7ff f913 	bl	800c16c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf46:	68f9      	ldr	r1, [r7, #12]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff ff81 	bl	800ce50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf4e:	e024      	b.n	800cf9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d008      	beq.n	800cf68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf56:	4b13      	ldr	r3, [pc, #76]	@ (800cfa4 <prvProcessTimerOrBlockTask+0x90>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <prvProcessTimerOrBlockTask+0x50>
 800cf60:	2301      	movs	r3, #1
 800cf62:	e000      	b.n	800cf66 <prvProcessTimerOrBlockTask+0x52>
 800cf64:	2300      	movs	r3, #0
 800cf66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf68:	4b0f      	ldr	r3, [pc, #60]	@ (800cfa8 <prvProcessTimerOrBlockTask+0x94>)
 800cf6a:	6818      	ldr	r0, [r3, #0]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	4619      	mov	r1, r3
 800cf76:	f7fe fe53 	bl	800bc20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf7a:	f7ff f8f7 	bl	800c16c <xTaskResumeAll>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10a      	bne.n	800cf9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf84:	4b09      	ldr	r3, [pc, #36]	@ (800cfac <prvProcessTimerOrBlockTask+0x98>)
 800cf86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	f3bf 8f6f 	isb	sy
}
 800cf94:	e001      	b.n	800cf9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cf96:	f7ff f8e9 	bl	800c16c <xTaskResumeAll>
}
 800cf9a:	bf00      	nop
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	20001c80 	.word	0x20001c80
 800cfa8:	20001c84 	.word	0x20001c84
 800cfac:	e000ed04 	.word	0xe000ed04

0800cfb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfb8:	4b0e      	ldr	r3, [pc, #56]	@ (800cff4 <prvGetNextExpireTime+0x44>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d101      	bne.n	800cfc6 <prvGetNextExpireTime+0x16>
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	e000      	b.n	800cfc8 <prvGetNextExpireTime+0x18>
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d105      	bne.n	800cfe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfd4:	4b07      	ldr	r3, [pc, #28]	@ (800cff4 <prvGetNextExpireTime+0x44>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	e001      	b.n	800cfe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	20001c7c 	.word	0x20001c7c

0800cff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d000:	f7ff f952 	bl	800c2a8 <xTaskGetTickCount>
 800d004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d006:	4b0b      	ldr	r3, [pc, #44]	@ (800d034 <prvSampleTimeNow+0x3c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d205      	bcs.n	800d01c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d010:	f000 f93a 	bl	800d288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	e002      	b.n	800d022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d022:	4a04      	ldr	r2, [pc, #16]	@ (800d034 <prvSampleTimeNow+0x3c>)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d028:	68fb      	ldr	r3, [r7, #12]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	20001c8c 	.word	0x20001c8c

0800d038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d812      	bhi.n	800d084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	1ad2      	subs	r2, r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d302      	bcc.n	800d072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d06c:	2301      	movs	r3, #1
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	e01b      	b.n	800d0aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d072:	4b10      	ldr	r3, [pc, #64]	@ (800d0b4 <prvInsertTimerInActiveList+0x7c>)
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3304      	adds	r3, #4
 800d07a:	4619      	mov	r1, r3
 800d07c:	4610      	mov	r0, r2
 800d07e:	f7fd fd74 	bl	800ab6a <vListInsert>
 800d082:	e012      	b.n	800d0aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d206      	bcs.n	800d09a <prvInsertTimerInActiveList+0x62>
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	429a      	cmp	r2, r3
 800d092:	d302      	bcc.n	800d09a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d094:	2301      	movs	r3, #1
 800d096:	617b      	str	r3, [r7, #20]
 800d098:	e007      	b.n	800d0aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d09a:	4b07      	ldr	r3, [pc, #28]	@ (800d0b8 <prvInsertTimerInActiveList+0x80>)
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	f7fd fd60 	bl	800ab6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0aa:	697b      	ldr	r3, [r7, #20]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3718      	adds	r7, #24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	20001c80 	.word	0x20001c80
 800d0b8:	20001c7c 	.word	0x20001c7c

0800d0bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08e      	sub	sp, #56	@ 0x38
 800d0c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0c2:	e0ce      	b.n	800d262 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	da19      	bge.n	800d0fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0ca:	1d3b      	adds	r3, r7, #4
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10b      	bne.n	800d0ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	61fb      	str	r3, [r7, #28]
}
 800d0e8:	bf00      	nop
 800d0ea:	bf00      	nop
 800d0ec:	e7fd      	b.n	800d0ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0f4:	6850      	ldr	r0, [r2, #4]
 800d0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0f8:	6892      	ldr	r2, [r2, #8]
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	f2c0 80ae 	blt.w	800d262 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d004      	beq.n	800d11c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d114:	3304      	adds	r3, #4
 800d116:	4618      	mov	r0, r3
 800d118:	f7fd fd60 	bl	800abdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d11c:	463b      	mov	r3, r7
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff ff6a 	bl	800cff8 <prvSampleTimeNow>
 800d124:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b09      	cmp	r3, #9
 800d12a:	f200 8097 	bhi.w	800d25c <prvProcessReceivedCommands+0x1a0>
 800d12e:	a201      	add	r2, pc, #4	@ (adr r2, 800d134 <prvProcessReceivedCommands+0x78>)
 800d130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d134:	0800d15d 	.word	0x0800d15d
 800d138:	0800d15d 	.word	0x0800d15d
 800d13c:	0800d15d 	.word	0x0800d15d
 800d140:	0800d1d3 	.word	0x0800d1d3
 800d144:	0800d1e7 	.word	0x0800d1e7
 800d148:	0800d233 	.word	0x0800d233
 800d14c:	0800d15d 	.word	0x0800d15d
 800d150:	0800d15d 	.word	0x0800d15d
 800d154:	0800d1d3 	.word	0x0800d1d3
 800d158:	0800d1e7 	.word	0x0800d1e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d162:	f043 0301 	orr.w	r3, r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	18d1      	adds	r1, r2, r3
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d17a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d17c:	f7ff ff5c 	bl	800d038 <prvInsertTimerInActiveList>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d06c      	beq.n	800d260 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d188:	6a1b      	ldr	r3, [r3, #32]
 800d18a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d18c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d194:	f003 0304 	and.w	r3, r3, #4
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d061      	beq.n	800d260 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a0:	699b      	ldr	r3, [r3, #24]
 800d1a2:	441a      	add	r2, r3
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1ae:	f7ff fe01 	bl	800cdb4 <xTimerGenericCommand>
 800d1b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d152      	bne.n	800d260 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	61bb      	str	r3, [r7, #24]
}
 800d1cc:	bf00      	nop
 800d1ce:	bf00      	nop
 800d1d0:	e7fd      	b.n	800d1ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1d8:	f023 0301 	bic.w	r3, r3, #1
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d1e4:	e03d      	b.n	800d262 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1ec:	f043 0301 	orr.w	r3, r3, #1
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10b      	bne.n	800d21e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	617b      	str	r3, [r7, #20]
}
 800d218:	bf00      	nop
 800d21a:	bf00      	nop
 800d21c:	e7fd      	b.n	800d21a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d220:	699a      	ldr	r2, [r3, #24]
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	18d1      	adds	r1, r2, r3
 800d226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d22a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d22c:	f7ff ff04 	bl	800d038 <prvInsertTimerInActiveList>
					break;
 800d230:	e017      	b.n	800d262 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d238:	f003 0302 	and.w	r3, r3, #2
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d103      	bne.n	800d248 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d242:	f000 fbe9 	bl	800da18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d246:	e00c      	b.n	800d262 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d24e:	f023 0301 	bic.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d256:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d25a:	e002      	b.n	800d262 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d25c:	bf00      	nop
 800d25e:	e000      	b.n	800d262 <prvProcessReceivedCommands+0x1a6>
					break;
 800d260:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d262:	4b08      	ldr	r3, [pc, #32]	@ (800d284 <prvProcessReceivedCommands+0x1c8>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	1d39      	adds	r1, r7, #4
 800d268:	2200      	movs	r2, #0
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fe f8c4 	bl	800b3f8 <xQueueReceive>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	f47f af26 	bne.w	800d0c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	3730      	adds	r7, #48	@ 0x30
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	20001c84 	.word	0x20001c84

0800d288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d28e:	e049      	b.n	800d324 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d290:	4b2e      	ldr	r3, [pc, #184]	@ (800d34c <prvSwitchTimerLists+0xc4>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d29a:	4b2c      	ldr	r3, [pc, #176]	@ (800d34c <prvSwitchTimerLists+0xc4>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fd fc97 	bl	800abdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d02f      	beq.n	800d324 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	699b      	ldr	r3, [r3, #24]
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d90e      	bls.n	800d2f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2e2:	4b1a      	ldr	r3, [pc, #104]	@ (800d34c <prvSwitchTimerLists+0xc4>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	f7fd fc3c 	bl	800ab6a <vListInsert>
 800d2f2:	e017      	b.n	800d324 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f7ff fd58 	bl	800cdb4 <xTimerGenericCommand>
 800d304:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10b      	bne.n	800d324 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	603b      	str	r3, [r7, #0]
}
 800d31e:	bf00      	nop
 800d320:	bf00      	nop
 800d322:	e7fd      	b.n	800d320 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d324:	4b09      	ldr	r3, [pc, #36]	@ (800d34c <prvSwitchTimerLists+0xc4>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1b0      	bne.n	800d290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d32e:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <prvSwitchTimerLists+0xc4>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d334:	4b06      	ldr	r3, [pc, #24]	@ (800d350 <prvSwitchTimerLists+0xc8>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a04      	ldr	r2, [pc, #16]	@ (800d34c <prvSwitchTimerLists+0xc4>)
 800d33a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d33c:	4a04      	ldr	r2, [pc, #16]	@ (800d350 <prvSwitchTimerLists+0xc8>)
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	6013      	str	r3, [r2, #0]
}
 800d342:	bf00      	nop
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	20001c7c 	.word	0x20001c7c
 800d350:	20001c80 	.word	0x20001c80

0800d354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d35a:	f000 f96d 	bl	800d638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d35e:	4b15      	ldr	r3, [pc, #84]	@ (800d3b4 <prvCheckForValidListAndQueue+0x60>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d120      	bne.n	800d3a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d366:	4814      	ldr	r0, [pc, #80]	@ (800d3b8 <prvCheckForValidListAndQueue+0x64>)
 800d368:	f7fd fbae 	bl	800aac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d36c:	4813      	ldr	r0, [pc, #76]	@ (800d3bc <prvCheckForValidListAndQueue+0x68>)
 800d36e:	f7fd fbab 	bl	800aac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d372:	4b13      	ldr	r3, [pc, #76]	@ (800d3c0 <prvCheckForValidListAndQueue+0x6c>)
 800d374:	4a10      	ldr	r2, [pc, #64]	@ (800d3b8 <prvCheckForValidListAndQueue+0x64>)
 800d376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d378:	4b12      	ldr	r3, [pc, #72]	@ (800d3c4 <prvCheckForValidListAndQueue+0x70>)
 800d37a:	4a10      	ldr	r2, [pc, #64]	@ (800d3bc <prvCheckForValidListAndQueue+0x68>)
 800d37c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d37e:	2300      	movs	r3, #0
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	4b11      	ldr	r3, [pc, #68]	@ (800d3c8 <prvCheckForValidListAndQueue+0x74>)
 800d384:	4a11      	ldr	r2, [pc, #68]	@ (800d3cc <prvCheckForValidListAndQueue+0x78>)
 800d386:	2110      	movs	r1, #16
 800d388:	200a      	movs	r0, #10
 800d38a:	f7fd fcbb 	bl	800ad04 <xQueueGenericCreateStatic>
 800d38e:	4603      	mov	r3, r0
 800d390:	4a08      	ldr	r2, [pc, #32]	@ (800d3b4 <prvCheckForValidListAndQueue+0x60>)
 800d392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d394:	4b07      	ldr	r3, [pc, #28]	@ (800d3b4 <prvCheckForValidListAndQueue+0x60>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d005      	beq.n	800d3a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d39c:	4b05      	ldr	r3, [pc, #20]	@ (800d3b4 <prvCheckForValidListAndQueue+0x60>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	490b      	ldr	r1, [pc, #44]	@ (800d3d0 <prvCheckForValidListAndQueue+0x7c>)
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe fbe8 	bl	800bb78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3a8:	f000 f978 	bl	800d69c <vPortExitCritical>
}
 800d3ac:	bf00      	nop
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20001c84 	.word	0x20001c84
 800d3b8:	20001c54 	.word	0x20001c54
 800d3bc:	20001c68 	.word	0x20001c68
 800d3c0:	20001c7c 	.word	0x20001c7c
 800d3c4:	20001c80 	.word	0x20001c80
 800d3c8:	20001d30 	.word	0x20001d30
 800d3cc:	20001c90 	.word	0x20001c90
 800d3d0:	0800f044 	.word	0x0800f044

0800d3d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3b04      	subs	r3, #4
 800d3e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d3ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3b04      	subs	r3, #4
 800d3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f023 0201 	bic.w	r2, r3, #1
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3b04      	subs	r3, #4
 800d402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d404:	4a0c      	ldr	r2, [pc, #48]	@ (800d438 <pxPortInitialiseStack+0x64>)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3b14      	subs	r3, #20
 800d40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3b04      	subs	r3, #4
 800d41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f06f 0202 	mvn.w	r2, #2
 800d422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	3b20      	subs	r3, #32
 800d428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d42a:	68fb      	ldr	r3, [r7, #12]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	0800d43d 	.word	0x0800d43d

0800d43c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d442:	2300      	movs	r3, #0
 800d444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d446:	4b13      	ldr	r3, [pc, #76]	@ (800d494 <prvTaskExitError+0x58>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44e:	d00b      	beq.n	800d468 <prvTaskExitError+0x2c>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	60fb      	str	r3, [r7, #12]
}
 800d462:	bf00      	nop
 800d464:	bf00      	nop
 800d466:	e7fd      	b.n	800d464 <prvTaskExitError+0x28>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	60bb      	str	r3, [r7, #8]
}
 800d47a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d47c:	bf00      	nop
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d0fc      	beq.n	800d47e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	20000010 	.word	0x20000010
	...

0800d4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4a0:	4b07      	ldr	r3, [pc, #28]	@ (800d4c0 <pxCurrentTCBConst2>)
 800d4a2:	6819      	ldr	r1, [r3, #0]
 800d4a4:	6808      	ldr	r0, [r1, #0]
 800d4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4aa:	f380 8809 	msr	PSP, r0
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f04f 0000 	mov.w	r0, #0
 800d4b6:	f380 8811 	msr	BASEPRI, r0
 800d4ba:	4770      	bx	lr
 800d4bc:	f3af 8000 	nop.w

0800d4c0 <pxCurrentTCBConst2>:
 800d4c0:	20001754 	.word	0x20001754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop

0800d4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4c8:	4808      	ldr	r0, [pc, #32]	@ (800d4ec <prvPortStartFirstTask+0x24>)
 800d4ca:	6800      	ldr	r0, [r0, #0]
 800d4cc:	6800      	ldr	r0, [r0, #0]
 800d4ce:	f380 8808 	msr	MSP, r0
 800d4d2:	f04f 0000 	mov.w	r0, #0
 800d4d6:	f380 8814 	msr	CONTROL, r0
 800d4da:	b662      	cpsie	i
 800d4dc:	b661      	cpsie	f
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	df00      	svc	0
 800d4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4ea:	bf00      	nop
 800d4ec:	e000ed08 	.word	0xe000ed08

0800d4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d4f6:	4b47      	ldr	r3, [pc, #284]	@ (800d614 <xPortStartScheduler+0x124>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a47      	ldr	r2, [pc, #284]	@ (800d618 <xPortStartScheduler+0x128>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d10b      	bne.n	800d518 <xPortStartScheduler+0x28>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	60fb      	str	r3, [r7, #12]
}
 800d512:	bf00      	nop
 800d514:	bf00      	nop
 800d516:	e7fd      	b.n	800d514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d518:	4b3e      	ldr	r3, [pc, #248]	@ (800d614 <xPortStartScheduler+0x124>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a3f      	ldr	r2, [pc, #252]	@ (800d61c <xPortStartScheduler+0x12c>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d10b      	bne.n	800d53a <xPortStartScheduler+0x4a>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	613b      	str	r3, [r7, #16]
}
 800d534:	bf00      	nop
 800d536:	bf00      	nop
 800d538:	e7fd      	b.n	800d536 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d53a:	4b39      	ldr	r3, [pc, #228]	@ (800d620 <xPortStartScheduler+0x130>)
 800d53c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	b2db      	uxtb	r3, r3
 800d544:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	22ff      	movs	r2, #255	@ 0xff
 800d54a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d554:	78fb      	ldrb	r3, [r7, #3]
 800d556:	b2db      	uxtb	r3, r3
 800d558:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	4b31      	ldr	r3, [pc, #196]	@ (800d624 <xPortStartScheduler+0x134>)
 800d560:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d562:	4b31      	ldr	r3, [pc, #196]	@ (800d628 <xPortStartScheduler+0x138>)
 800d564:	2207      	movs	r2, #7
 800d566:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d568:	e009      	b.n	800d57e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d56a:	4b2f      	ldr	r3, [pc, #188]	@ (800d628 <xPortStartScheduler+0x138>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3b01      	subs	r3, #1
 800d570:	4a2d      	ldr	r2, [pc, #180]	@ (800d628 <xPortStartScheduler+0x138>)
 800d572:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d574:	78fb      	ldrb	r3, [r7, #3]
 800d576:	b2db      	uxtb	r3, r3
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d57e:	78fb      	ldrb	r3, [r7, #3]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d586:	2b80      	cmp	r3, #128	@ 0x80
 800d588:	d0ef      	beq.n	800d56a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d58a:	4b27      	ldr	r3, [pc, #156]	@ (800d628 <xPortStartScheduler+0x138>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f1c3 0307 	rsb	r3, r3, #7
 800d592:	2b04      	cmp	r3, #4
 800d594:	d00b      	beq.n	800d5ae <xPortStartScheduler+0xbe>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	60bb      	str	r3, [r7, #8]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5ae:	4b1e      	ldr	r3, [pc, #120]	@ (800d628 <xPortStartScheduler+0x138>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	021b      	lsls	r3, r3, #8
 800d5b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d628 <xPortStartScheduler+0x138>)
 800d5b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5b8:	4b1b      	ldr	r3, [pc, #108]	@ (800d628 <xPortStartScheduler+0x138>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d5c0:	4a19      	ldr	r2, [pc, #100]	@ (800d628 <xPortStartScheduler+0x138>)
 800d5c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5cc:	4b17      	ldr	r3, [pc, #92]	@ (800d62c <xPortStartScheduler+0x13c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a16      	ldr	r2, [pc, #88]	@ (800d62c <xPortStartScheduler+0x13c>)
 800d5d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d5d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5d8:	4b14      	ldr	r3, [pc, #80]	@ (800d62c <xPortStartScheduler+0x13c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a13      	ldr	r2, [pc, #76]	@ (800d62c <xPortStartScheduler+0x13c>)
 800d5de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d5e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5e4:	f000 f8da 	bl	800d79c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5e8:	4b11      	ldr	r3, [pc, #68]	@ (800d630 <xPortStartScheduler+0x140>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5ee:	f000 f8f9 	bl	800d7e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5f2:	4b10      	ldr	r3, [pc, #64]	@ (800d634 <xPortStartScheduler+0x144>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d634 <xPortStartScheduler+0x144>)
 800d5f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d5fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5fe:	f7ff ff63 	bl	800d4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d602:	f7fe ff2d 	bl	800c460 <vTaskSwitchContext>
	prvTaskExitError();
 800d606:	f7ff ff19 	bl	800d43c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	e000ed00 	.word	0xe000ed00
 800d618:	410fc271 	.word	0x410fc271
 800d61c:	410fc270 	.word	0x410fc270
 800d620:	e000e400 	.word	0xe000e400
 800d624:	20001d80 	.word	0x20001d80
 800d628:	20001d84 	.word	0x20001d84
 800d62c:	e000ed20 	.word	0xe000ed20
 800d630:	20000010 	.word	0x20000010
 800d634:	e000ef34 	.word	0xe000ef34

0800d638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	607b      	str	r3, [r7, #4]
}
 800d650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d652:	4b10      	ldr	r3, [pc, #64]	@ (800d694 <vPortEnterCritical+0x5c>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	3301      	adds	r3, #1
 800d658:	4a0e      	ldr	r2, [pc, #56]	@ (800d694 <vPortEnterCritical+0x5c>)
 800d65a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d65c:	4b0d      	ldr	r3, [pc, #52]	@ (800d694 <vPortEnterCritical+0x5c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d110      	bne.n	800d686 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d664:	4b0c      	ldr	r3, [pc, #48]	@ (800d698 <vPortEnterCritical+0x60>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00b      	beq.n	800d686 <vPortEnterCritical+0x4e>
	__asm volatile
 800d66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	603b      	str	r3, [r7, #0]
}
 800d680:	bf00      	nop
 800d682:	bf00      	nop
 800d684:	e7fd      	b.n	800d682 <vPortEnterCritical+0x4a>
	}
}
 800d686:	bf00      	nop
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	20000010 	.word	0x20000010
 800d698:	e000ed04 	.word	0xe000ed04

0800d69c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d6a2:	4b12      	ldr	r3, [pc, #72]	@ (800d6ec <vPortExitCritical+0x50>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10b      	bne.n	800d6c2 <vPortExitCritical+0x26>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	607b      	str	r3, [r7, #4]
}
 800d6bc:	bf00      	nop
 800d6be:	bf00      	nop
 800d6c0:	e7fd      	b.n	800d6be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6ec <vPortExitCritical+0x50>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	4a08      	ldr	r2, [pc, #32]	@ (800d6ec <vPortExitCritical+0x50>)
 800d6ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6cc:	4b07      	ldr	r3, [pc, #28]	@ (800d6ec <vPortExitCritical+0x50>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d105      	bne.n	800d6e0 <vPortExitCritical+0x44>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	f383 8811 	msr	BASEPRI, r3
}
 800d6de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	20000010 	.word	0x20000010

0800d6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6f0:	f3ef 8009 	mrs	r0, PSP
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	4b15      	ldr	r3, [pc, #84]	@ (800d750 <pxCurrentTCBConst>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	f01e 0f10 	tst.w	lr, #16
 800d700:	bf08      	it	eq
 800d702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70a:	6010      	str	r0, [r2, #0]
 800d70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d714:	f380 8811 	msr	BASEPRI, r0
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f7fe fe9e 	bl	800c460 <vTaskSwitchContext>
 800d724:	f04f 0000 	mov.w	r0, #0
 800d728:	f380 8811 	msr	BASEPRI, r0
 800d72c:	bc09      	pop	{r0, r3}
 800d72e:	6819      	ldr	r1, [r3, #0]
 800d730:	6808      	ldr	r0, [r1, #0]
 800d732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d736:	f01e 0f10 	tst.w	lr, #16
 800d73a:	bf08      	it	eq
 800d73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d740:	f380 8809 	msr	PSP, r0
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	f3af 8000 	nop.w

0800d750 <pxCurrentTCBConst>:
 800d750:	20001754 	.word	0x20001754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop

0800d758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	607b      	str	r3, [r7, #4]
}
 800d770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d772:	f7fe fdbb 	bl	800c2ec <xTaskIncrementTick>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d003      	beq.n	800d784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d77c:	4b06      	ldr	r3, [pc, #24]	@ (800d798 <xPortSysTickHandler+0x40>)
 800d77e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	2300      	movs	r3, #0
 800d786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	f383 8811 	msr	BASEPRI, r3
}
 800d78e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	e000ed04 	.word	0xe000ed04

0800d79c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d79c:	b480      	push	{r7}
 800d79e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d0 <vPortSetupTimerInterrupt+0x34>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d4 <vPortSetupTimerInterrupt+0x38>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <vPortSetupTimerInterrupt+0x3c>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d7dc <vPortSetupTimerInterrupt+0x40>)
 800d7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b6:	099b      	lsrs	r3, r3, #6
 800d7b8:	4a09      	ldr	r2, [pc, #36]	@ (800d7e0 <vPortSetupTimerInterrupt+0x44>)
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7be:	4b04      	ldr	r3, [pc, #16]	@ (800d7d0 <vPortSetupTimerInterrupt+0x34>)
 800d7c0:	2207      	movs	r2, #7
 800d7c2:	601a      	str	r2, [r3, #0]
}
 800d7c4:	bf00      	nop
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	e000e010 	.word	0xe000e010
 800d7d4:	e000e018 	.word	0xe000e018
 800d7d8:	20000004 	.word	0x20000004
 800d7dc:	10624dd3 	.word	0x10624dd3
 800d7e0:	e000e014 	.word	0xe000e014

0800d7e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d7f4 <vPortEnableVFP+0x10>
 800d7e8:	6801      	ldr	r1, [r0, #0]
 800d7ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d7ee:	6001      	str	r1, [r0, #0]
 800d7f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7f2:	bf00      	nop
 800d7f4:	e000ed88 	.word	0xe000ed88

0800d7f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7fe:	f3ef 8305 	mrs	r3, IPSR
 800d802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b0f      	cmp	r3, #15
 800d808:	d915      	bls.n	800d836 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d80a:	4a18      	ldr	r2, [pc, #96]	@ (800d86c <vPortValidateInterruptPriority+0x74>)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4413      	add	r3, r2
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d814:	4b16      	ldr	r3, [pc, #88]	@ (800d870 <vPortValidateInterruptPriority+0x78>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	7afa      	ldrb	r2, [r7, #11]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d20b      	bcs.n	800d836 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	607b      	str	r3, [r7, #4]
}
 800d830:	bf00      	nop
 800d832:	bf00      	nop
 800d834:	e7fd      	b.n	800d832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d836:	4b0f      	ldr	r3, [pc, #60]	@ (800d874 <vPortValidateInterruptPriority+0x7c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d83e:	4b0e      	ldr	r3, [pc, #56]	@ (800d878 <vPortValidateInterruptPriority+0x80>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d90b      	bls.n	800d85e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	603b      	str	r3, [r7, #0]
}
 800d858:	bf00      	nop
 800d85a:	bf00      	nop
 800d85c:	e7fd      	b.n	800d85a <vPortValidateInterruptPriority+0x62>
	}
 800d85e:	bf00      	nop
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	e000e3f0 	.word	0xe000e3f0
 800d870:	20001d80 	.word	0x20001d80
 800d874:	e000ed0c 	.word	0xe000ed0c
 800d878:	20001d84 	.word	0x20001d84

0800d87c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	@ 0x28
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d884:	2300      	movs	r3, #0
 800d886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d888:	f7fe fc62 	bl	800c150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d88c:	4b5c      	ldr	r3, [pc, #368]	@ (800da00 <pvPortMalloc+0x184>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d101      	bne.n	800d898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d894:	f000 f924 	bl	800dae0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d898:	4b5a      	ldr	r3, [pc, #360]	@ (800da04 <pvPortMalloc+0x188>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4013      	ands	r3, r2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f040 8095 	bne.w	800d9d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d01e      	beq.n	800d8ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d8ac:	2208      	movs	r2, #8
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d015      	beq.n	800d8ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f023 0307 	bic.w	r3, r3, #7
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f003 0307 	and.w	r3, r3, #7
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00b      	beq.n	800d8ea <pvPortMalloc+0x6e>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	617b      	str	r3, [r7, #20]
}
 800d8e4:	bf00      	nop
 800d8e6:	bf00      	nop
 800d8e8:	e7fd      	b.n	800d8e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d06f      	beq.n	800d9d0 <pvPortMalloc+0x154>
 800d8f0:	4b45      	ldr	r3, [pc, #276]	@ (800da08 <pvPortMalloc+0x18c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d86a      	bhi.n	800d9d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8fa:	4b44      	ldr	r3, [pc, #272]	@ (800da0c <pvPortMalloc+0x190>)
 800d8fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d8fe:	4b43      	ldr	r3, [pc, #268]	@ (800da0c <pvPortMalloc+0x190>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d904:	e004      	b.n	800d910 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	429a      	cmp	r2, r3
 800d918:	d903      	bls.n	800d922 <pvPortMalloc+0xa6>
 800d91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1f1      	bne.n	800d906 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d922:	4b37      	ldr	r3, [pc, #220]	@ (800da00 <pvPortMalloc+0x184>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d928:	429a      	cmp	r2, r3
 800d92a:	d051      	beq.n	800d9d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2208      	movs	r2, #8
 800d932:	4413      	add	r3, r2
 800d934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	6a3b      	ldr	r3, [r7, #32]
 800d93c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d940:	685a      	ldr	r2, [r3, #4]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	1ad2      	subs	r2, r2, r3
 800d946:	2308      	movs	r3, #8
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d920      	bls.n	800d990 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4413      	add	r3, r2
 800d954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00b      	beq.n	800d978 <pvPortMalloc+0xfc>
	__asm volatile
 800d960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	613b      	str	r3, [r7, #16]
}
 800d972:	bf00      	nop
 800d974:	bf00      	nop
 800d976:	e7fd      	b.n	800d974 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	1ad2      	subs	r2, r2, r3
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d98a:	69b8      	ldr	r0, [r7, #24]
 800d98c:	f000 f90a 	bl	800dba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d990:	4b1d      	ldr	r3, [pc, #116]	@ (800da08 <pvPortMalloc+0x18c>)
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	4a1b      	ldr	r2, [pc, #108]	@ (800da08 <pvPortMalloc+0x18c>)
 800d99c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d99e:	4b1a      	ldr	r3, [pc, #104]	@ (800da08 <pvPortMalloc+0x18c>)
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	4b1b      	ldr	r3, [pc, #108]	@ (800da10 <pvPortMalloc+0x194>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d203      	bcs.n	800d9b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9aa:	4b17      	ldr	r3, [pc, #92]	@ (800da08 <pvPortMalloc+0x18c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a18      	ldr	r2, [pc, #96]	@ (800da10 <pvPortMalloc+0x194>)
 800d9b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b4:	685a      	ldr	r2, [r3, #4]
 800d9b6:	4b13      	ldr	r3, [pc, #76]	@ (800da04 <pvPortMalloc+0x188>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	431a      	orrs	r2, r3
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d9c6:	4b13      	ldr	r3, [pc, #76]	@ (800da14 <pvPortMalloc+0x198>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	4a11      	ldr	r2, [pc, #68]	@ (800da14 <pvPortMalloc+0x198>)
 800d9ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d9d0:	f7fe fbcc 	bl	800c16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	f003 0307 	and.w	r3, r3, #7
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00b      	beq.n	800d9f6 <pvPortMalloc+0x17a>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	60fb      	str	r3, [r7, #12]
}
 800d9f0:	bf00      	nop
 800d9f2:	bf00      	nop
 800d9f4:	e7fd      	b.n	800d9f2 <pvPortMalloc+0x176>
	return pvReturn;
 800d9f6:	69fb      	ldr	r3, [r7, #28]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3728      	adds	r7, #40	@ 0x28
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	20005990 	.word	0x20005990
 800da04:	200059a4 	.word	0x200059a4
 800da08:	20005994 	.word	0x20005994
 800da0c:	20005988 	.word	0x20005988
 800da10:	20005998 	.word	0x20005998
 800da14:	2000599c 	.word	0x2000599c

0800da18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d04f      	beq.n	800daca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da2a:	2308      	movs	r3, #8
 800da2c:	425b      	negs	r3, r3
 800da2e:	697a      	ldr	r2, [r7, #20]
 800da30:	4413      	add	r3, r2
 800da32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	685a      	ldr	r2, [r3, #4]
 800da3c:	4b25      	ldr	r3, [pc, #148]	@ (800dad4 <vPortFree+0xbc>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4013      	ands	r3, r2
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10b      	bne.n	800da5e <vPortFree+0x46>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	60fb      	str	r3, [r7, #12]
}
 800da58:	bf00      	nop
 800da5a:	bf00      	nop
 800da5c:	e7fd      	b.n	800da5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d00b      	beq.n	800da7e <vPortFree+0x66>
	__asm volatile
 800da66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	60bb      	str	r3, [r7, #8]
}
 800da78:	bf00      	nop
 800da7a:	bf00      	nop
 800da7c:	e7fd      	b.n	800da7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	685a      	ldr	r2, [r3, #4]
 800da82:	4b14      	ldr	r3, [pc, #80]	@ (800dad4 <vPortFree+0xbc>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4013      	ands	r3, r2
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d01e      	beq.n	800daca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d11a      	bne.n	800daca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	685a      	ldr	r2, [r3, #4]
 800da98:	4b0e      	ldr	r3, [pc, #56]	@ (800dad4 <vPortFree+0xbc>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	43db      	mvns	r3, r3
 800da9e:	401a      	ands	r2, r3
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800daa4:	f7fe fb54 	bl	800c150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	4b0a      	ldr	r3, [pc, #40]	@ (800dad8 <vPortFree+0xc0>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4413      	add	r3, r2
 800dab2:	4a09      	ldr	r2, [pc, #36]	@ (800dad8 <vPortFree+0xc0>)
 800dab4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dab6:	6938      	ldr	r0, [r7, #16]
 800dab8:	f000 f874 	bl	800dba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dabc:	4b07      	ldr	r3, [pc, #28]	@ (800dadc <vPortFree+0xc4>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3301      	adds	r3, #1
 800dac2:	4a06      	ldr	r2, [pc, #24]	@ (800dadc <vPortFree+0xc4>)
 800dac4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dac6:	f7fe fb51 	bl	800c16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800daca:	bf00      	nop
 800dacc:	3718      	adds	r7, #24
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	200059a4 	.word	0x200059a4
 800dad8:	20005994 	.word	0x20005994
 800dadc:	200059a0 	.word	0x200059a0

0800dae0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dae6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800daea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800daec:	4b27      	ldr	r3, [pc, #156]	@ (800db8c <prvHeapInit+0xac>)
 800daee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00c      	beq.n	800db14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3307      	adds	r3, #7
 800dafe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f023 0307 	bic.w	r3, r3, #7
 800db06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	4a1f      	ldr	r2, [pc, #124]	@ (800db8c <prvHeapInit+0xac>)
 800db10:	4413      	add	r3, r2
 800db12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db18:	4a1d      	ldr	r2, [pc, #116]	@ (800db90 <prvHeapInit+0xb0>)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db1e:	4b1c      	ldr	r3, [pc, #112]	@ (800db90 <prvHeapInit+0xb0>)
 800db20:	2200      	movs	r2, #0
 800db22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	4413      	add	r3, r2
 800db2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db2c:	2208      	movs	r2, #8
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	1a9b      	subs	r3, r3, r2
 800db32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f023 0307 	bic.w	r3, r3, #7
 800db3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4a15      	ldr	r2, [pc, #84]	@ (800db94 <prvHeapInit+0xb4>)
 800db40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db42:	4b14      	ldr	r3, [pc, #80]	@ (800db94 <prvHeapInit+0xb4>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2200      	movs	r2, #0
 800db48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db4a:	4b12      	ldr	r3, [pc, #72]	@ (800db94 <prvHeapInit+0xb4>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2200      	movs	r2, #0
 800db50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	1ad2      	subs	r2, r2, r3
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db60:	4b0c      	ldr	r3, [pc, #48]	@ (800db94 <prvHeapInit+0xb4>)
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	4a0a      	ldr	r2, [pc, #40]	@ (800db98 <prvHeapInit+0xb8>)
 800db6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	4a09      	ldr	r2, [pc, #36]	@ (800db9c <prvHeapInit+0xbc>)
 800db76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db78:	4b09      	ldr	r3, [pc, #36]	@ (800dba0 <prvHeapInit+0xc0>)
 800db7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800db7e:	601a      	str	r2, [r3, #0]
}
 800db80:	bf00      	nop
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr
 800db8c:	20001d88 	.word	0x20001d88
 800db90:	20005988 	.word	0x20005988
 800db94:	20005990 	.word	0x20005990
 800db98:	20005998 	.word	0x20005998
 800db9c:	20005994 	.word	0x20005994
 800dba0:	200059a4 	.word	0x200059a4

0800dba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbac:	4b28      	ldr	r3, [pc, #160]	@ (800dc50 <prvInsertBlockIntoFreeList+0xac>)
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	e002      	b.n	800dbb8 <prvInsertBlockIntoFreeList+0x14>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	60fb      	str	r3, [r7, #12]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d8f7      	bhi.n	800dbb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	4413      	add	r3, r2
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d108      	bne.n	800dbe6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	441a      	add	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	441a      	add	r2, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d118      	bne.n	800dc2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	4b15      	ldr	r3, [pc, #84]	@ (800dc54 <prvInsertBlockIntoFreeList+0xb0>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d00d      	beq.n	800dc22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	441a      	add	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	e008      	b.n	800dc34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc22:	4b0c      	ldr	r3, [pc, #48]	@ (800dc54 <prvInsertBlockIntoFreeList+0xb0>)
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	e003      	b.n	800dc34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d002      	beq.n	800dc42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc42:	bf00      	nop
 800dc44:	3714      	adds	r7, #20
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	20005988 	.word	0x20005988
 800dc54:	20005990 	.word	0x20005990

0800dc58 <std>:
 800dc58:	2300      	movs	r3, #0
 800dc5a:	b510      	push	{r4, lr}
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc66:	6083      	str	r3, [r0, #8]
 800dc68:	8181      	strh	r1, [r0, #12]
 800dc6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc6c:	81c2      	strh	r2, [r0, #14]
 800dc6e:	6183      	str	r3, [r0, #24]
 800dc70:	4619      	mov	r1, r3
 800dc72:	2208      	movs	r2, #8
 800dc74:	305c      	adds	r0, #92	@ 0x5c
 800dc76:	f000 f9f9 	bl	800e06c <memset>
 800dc7a:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb0 <std+0x58>)
 800dc7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc7e:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb4 <std+0x5c>)
 800dc80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc82:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb8 <std+0x60>)
 800dc84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc86:	4b0d      	ldr	r3, [pc, #52]	@ (800dcbc <std+0x64>)
 800dc88:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc0 <std+0x68>)
 800dc8c:	6224      	str	r4, [r4, #32]
 800dc8e:	429c      	cmp	r4, r3
 800dc90:	d006      	beq.n	800dca0 <std+0x48>
 800dc92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dc96:	4294      	cmp	r4, r2
 800dc98:	d002      	beq.n	800dca0 <std+0x48>
 800dc9a:	33d0      	adds	r3, #208	@ 0xd0
 800dc9c:	429c      	cmp	r4, r3
 800dc9e:	d105      	bne.n	800dcac <std+0x54>
 800dca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dca8:	f000 bab6 	b.w	800e218 <__retarget_lock_init_recursive>
 800dcac:	bd10      	pop	{r4, pc}
 800dcae:	bf00      	nop
 800dcb0:	0800debd 	.word	0x0800debd
 800dcb4:	0800dedf 	.word	0x0800dedf
 800dcb8:	0800df17 	.word	0x0800df17
 800dcbc:	0800df3b 	.word	0x0800df3b
 800dcc0:	200059a8 	.word	0x200059a8

0800dcc4 <stdio_exit_handler>:
 800dcc4:	4a02      	ldr	r2, [pc, #8]	@ (800dcd0 <stdio_exit_handler+0xc>)
 800dcc6:	4903      	ldr	r1, [pc, #12]	@ (800dcd4 <stdio_exit_handler+0x10>)
 800dcc8:	4803      	ldr	r0, [pc, #12]	@ (800dcd8 <stdio_exit_handler+0x14>)
 800dcca:	f000 b869 	b.w	800dda0 <_fwalk_sglue>
 800dcce:	bf00      	nop
 800dcd0:	20000014 	.word	0x20000014
 800dcd4:	0800ead1 	.word	0x0800ead1
 800dcd8:	20000024 	.word	0x20000024

0800dcdc <cleanup_stdio>:
 800dcdc:	6841      	ldr	r1, [r0, #4]
 800dcde:	4b0c      	ldr	r3, [pc, #48]	@ (800dd10 <cleanup_stdio+0x34>)
 800dce0:	4299      	cmp	r1, r3
 800dce2:	b510      	push	{r4, lr}
 800dce4:	4604      	mov	r4, r0
 800dce6:	d001      	beq.n	800dcec <cleanup_stdio+0x10>
 800dce8:	f000 fef2 	bl	800ead0 <_fflush_r>
 800dcec:	68a1      	ldr	r1, [r4, #8]
 800dcee:	4b09      	ldr	r3, [pc, #36]	@ (800dd14 <cleanup_stdio+0x38>)
 800dcf0:	4299      	cmp	r1, r3
 800dcf2:	d002      	beq.n	800dcfa <cleanup_stdio+0x1e>
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f000 feeb 	bl	800ead0 <_fflush_r>
 800dcfa:	68e1      	ldr	r1, [r4, #12]
 800dcfc:	4b06      	ldr	r3, [pc, #24]	@ (800dd18 <cleanup_stdio+0x3c>)
 800dcfe:	4299      	cmp	r1, r3
 800dd00:	d004      	beq.n	800dd0c <cleanup_stdio+0x30>
 800dd02:	4620      	mov	r0, r4
 800dd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd08:	f000 bee2 	b.w	800ead0 <_fflush_r>
 800dd0c:	bd10      	pop	{r4, pc}
 800dd0e:	bf00      	nop
 800dd10:	200059a8 	.word	0x200059a8
 800dd14:	20005a10 	.word	0x20005a10
 800dd18:	20005a78 	.word	0x20005a78

0800dd1c <global_stdio_init.part.0>:
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd4c <global_stdio_init.part.0+0x30>)
 800dd20:	4c0b      	ldr	r4, [pc, #44]	@ (800dd50 <global_stdio_init.part.0+0x34>)
 800dd22:	4a0c      	ldr	r2, [pc, #48]	@ (800dd54 <global_stdio_init.part.0+0x38>)
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	4620      	mov	r0, r4
 800dd28:	2200      	movs	r2, #0
 800dd2a:	2104      	movs	r1, #4
 800dd2c:	f7ff ff94 	bl	800dc58 <std>
 800dd30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd34:	2201      	movs	r2, #1
 800dd36:	2109      	movs	r1, #9
 800dd38:	f7ff ff8e 	bl	800dc58 <std>
 800dd3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd40:	2202      	movs	r2, #2
 800dd42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd46:	2112      	movs	r1, #18
 800dd48:	f7ff bf86 	b.w	800dc58 <std>
 800dd4c:	20005ae0 	.word	0x20005ae0
 800dd50:	200059a8 	.word	0x200059a8
 800dd54:	0800dcc5 	.word	0x0800dcc5

0800dd58 <__sfp_lock_acquire>:
 800dd58:	4801      	ldr	r0, [pc, #4]	@ (800dd60 <__sfp_lock_acquire+0x8>)
 800dd5a:	f000 ba5e 	b.w	800e21a <__retarget_lock_acquire_recursive>
 800dd5e:	bf00      	nop
 800dd60:	20005ae9 	.word	0x20005ae9

0800dd64 <__sfp_lock_release>:
 800dd64:	4801      	ldr	r0, [pc, #4]	@ (800dd6c <__sfp_lock_release+0x8>)
 800dd66:	f000 ba59 	b.w	800e21c <__retarget_lock_release_recursive>
 800dd6a:	bf00      	nop
 800dd6c:	20005ae9 	.word	0x20005ae9

0800dd70 <__sinit>:
 800dd70:	b510      	push	{r4, lr}
 800dd72:	4604      	mov	r4, r0
 800dd74:	f7ff fff0 	bl	800dd58 <__sfp_lock_acquire>
 800dd78:	6a23      	ldr	r3, [r4, #32]
 800dd7a:	b11b      	cbz	r3, 800dd84 <__sinit+0x14>
 800dd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd80:	f7ff bff0 	b.w	800dd64 <__sfp_lock_release>
 800dd84:	4b04      	ldr	r3, [pc, #16]	@ (800dd98 <__sinit+0x28>)
 800dd86:	6223      	str	r3, [r4, #32]
 800dd88:	4b04      	ldr	r3, [pc, #16]	@ (800dd9c <__sinit+0x2c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1f5      	bne.n	800dd7c <__sinit+0xc>
 800dd90:	f7ff ffc4 	bl	800dd1c <global_stdio_init.part.0>
 800dd94:	e7f2      	b.n	800dd7c <__sinit+0xc>
 800dd96:	bf00      	nop
 800dd98:	0800dcdd 	.word	0x0800dcdd
 800dd9c:	20005ae0 	.word	0x20005ae0

0800dda0 <_fwalk_sglue>:
 800dda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda4:	4607      	mov	r7, r0
 800dda6:	4688      	mov	r8, r1
 800dda8:	4614      	mov	r4, r2
 800ddaa:	2600      	movs	r6, #0
 800ddac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddb0:	f1b9 0901 	subs.w	r9, r9, #1
 800ddb4:	d505      	bpl.n	800ddc2 <_fwalk_sglue+0x22>
 800ddb6:	6824      	ldr	r4, [r4, #0]
 800ddb8:	2c00      	cmp	r4, #0
 800ddba:	d1f7      	bne.n	800ddac <_fwalk_sglue+0xc>
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddc2:	89ab      	ldrh	r3, [r5, #12]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d907      	bls.n	800ddd8 <_fwalk_sglue+0x38>
 800ddc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	d003      	beq.n	800ddd8 <_fwalk_sglue+0x38>
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	47c0      	blx	r8
 800ddd6:	4306      	orrs	r6, r0
 800ddd8:	3568      	adds	r5, #104	@ 0x68
 800ddda:	e7e9      	b.n	800ddb0 <_fwalk_sglue+0x10>

0800dddc <iprintf>:
 800dddc:	b40f      	push	{r0, r1, r2, r3}
 800ddde:	b507      	push	{r0, r1, r2, lr}
 800dde0:	4906      	ldr	r1, [pc, #24]	@ (800ddfc <iprintf+0x20>)
 800dde2:	ab04      	add	r3, sp, #16
 800dde4:	6808      	ldr	r0, [r1, #0]
 800dde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddea:	6881      	ldr	r1, [r0, #8]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	f000 fb47 	bl	800e480 <_vfiprintf_r>
 800ddf2:	b003      	add	sp, #12
 800ddf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddf8:	b004      	add	sp, #16
 800ddfa:	4770      	bx	lr
 800ddfc:	20000020 	.word	0x20000020

0800de00 <_puts_r>:
 800de00:	6a03      	ldr	r3, [r0, #32]
 800de02:	b570      	push	{r4, r5, r6, lr}
 800de04:	6884      	ldr	r4, [r0, #8]
 800de06:	4605      	mov	r5, r0
 800de08:	460e      	mov	r6, r1
 800de0a:	b90b      	cbnz	r3, 800de10 <_puts_r+0x10>
 800de0c:	f7ff ffb0 	bl	800dd70 <__sinit>
 800de10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de12:	07db      	lsls	r3, r3, #31
 800de14:	d405      	bmi.n	800de22 <_puts_r+0x22>
 800de16:	89a3      	ldrh	r3, [r4, #12]
 800de18:	0598      	lsls	r0, r3, #22
 800de1a:	d402      	bmi.n	800de22 <_puts_r+0x22>
 800de1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de1e:	f000 f9fc 	bl	800e21a <__retarget_lock_acquire_recursive>
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	0719      	lsls	r1, r3, #28
 800de26:	d502      	bpl.n	800de2e <_puts_r+0x2e>
 800de28:	6923      	ldr	r3, [r4, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d135      	bne.n	800de9a <_puts_r+0x9a>
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	f000 f8c5 	bl	800dfc0 <__swsetup_r>
 800de36:	b380      	cbz	r0, 800de9a <_puts_r+0x9a>
 800de38:	f04f 35ff 	mov.w	r5, #4294967295
 800de3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de3e:	07da      	lsls	r2, r3, #31
 800de40:	d405      	bmi.n	800de4e <_puts_r+0x4e>
 800de42:	89a3      	ldrh	r3, [r4, #12]
 800de44:	059b      	lsls	r3, r3, #22
 800de46:	d402      	bmi.n	800de4e <_puts_r+0x4e>
 800de48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de4a:	f000 f9e7 	bl	800e21c <__retarget_lock_release_recursive>
 800de4e:	4628      	mov	r0, r5
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	2b00      	cmp	r3, #0
 800de54:	da04      	bge.n	800de60 <_puts_r+0x60>
 800de56:	69a2      	ldr	r2, [r4, #24]
 800de58:	429a      	cmp	r2, r3
 800de5a:	dc17      	bgt.n	800de8c <_puts_r+0x8c>
 800de5c:	290a      	cmp	r1, #10
 800de5e:	d015      	beq.n	800de8c <_puts_r+0x8c>
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	6022      	str	r2, [r4, #0]
 800de66:	7019      	strb	r1, [r3, #0]
 800de68:	68a3      	ldr	r3, [r4, #8]
 800de6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de6e:	3b01      	subs	r3, #1
 800de70:	60a3      	str	r3, [r4, #8]
 800de72:	2900      	cmp	r1, #0
 800de74:	d1ed      	bne.n	800de52 <_puts_r+0x52>
 800de76:	2b00      	cmp	r3, #0
 800de78:	da11      	bge.n	800de9e <_puts_r+0x9e>
 800de7a:	4622      	mov	r2, r4
 800de7c:	210a      	movs	r1, #10
 800de7e:	4628      	mov	r0, r5
 800de80:	f000 f85f 	bl	800df42 <__swbuf_r>
 800de84:	3001      	adds	r0, #1
 800de86:	d0d7      	beq.n	800de38 <_puts_r+0x38>
 800de88:	250a      	movs	r5, #10
 800de8a:	e7d7      	b.n	800de3c <_puts_r+0x3c>
 800de8c:	4622      	mov	r2, r4
 800de8e:	4628      	mov	r0, r5
 800de90:	f000 f857 	bl	800df42 <__swbuf_r>
 800de94:	3001      	adds	r0, #1
 800de96:	d1e7      	bne.n	800de68 <_puts_r+0x68>
 800de98:	e7ce      	b.n	800de38 <_puts_r+0x38>
 800de9a:	3e01      	subs	r6, #1
 800de9c:	e7e4      	b.n	800de68 <_puts_r+0x68>
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	1c5a      	adds	r2, r3, #1
 800dea2:	6022      	str	r2, [r4, #0]
 800dea4:	220a      	movs	r2, #10
 800dea6:	701a      	strb	r2, [r3, #0]
 800dea8:	e7ee      	b.n	800de88 <_puts_r+0x88>
	...

0800deac <puts>:
 800deac:	4b02      	ldr	r3, [pc, #8]	@ (800deb8 <puts+0xc>)
 800deae:	4601      	mov	r1, r0
 800deb0:	6818      	ldr	r0, [r3, #0]
 800deb2:	f7ff bfa5 	b.w	800de00 <_puts_r>
 800deb6:	bf00      	nop
 800deb8:	20000020 	.word	0x20000020

0800debc <__sread>:
 800debc:	b510      	push	{r4, lr}
 800debe:	460c      	mov	r4, r1
 800dec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec4:	f000 f95a 	bl	800e17c <_read_r>
 800dec8:	2800      	cmp	r0, #0
 800deca:	bfab      	itete	ge
 800decc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dece:	89a3      	ldrhlt	r3, [r4, #12]
 800ded0:	181b      	addge	r3, r3, r0
 800ded2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ded6:	bfac      	ite	ge
 800ded8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800deda:	81a3      	strhlt	r3, [r4, #12]
 800dedc:	bd10      	pop	{r4, pc}

0800dede <__swrite>:
 800dede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee2:	461f      	mov	r7, r3
 800dee4:	898b      	ldrh	r3, [r1, #12]
 800dee6:	05db      	lsls	r3, r3, #23
 800dee8:	4605      	mov	r5, r0
 800deea:	460c      	mov	r4, r1
 800deec:	4616      	mov	r6, r2
 800deee:	d505      	bpl.n	800defc <__swrite+0x1e>
 800def0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800def4:	2302      	movs	r3, #2
 800def6:	2200      	movs	r2, #0
 800def8:	f000 f92e 	bl	800e158 <_lseek_r>
 800defc:	89a3      	ldrh	r3, [r4, #12]
 800defe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df06:	81a3      	strh	r3, [r4, #12]
 800df08:	4632      	mov	r2, r6
 800df0a:	463b      	mov	r3, r7
 800df0c:	4628      	mov	r0, r5
 800df0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df12:	f000 b945 	b.w	800e1a0 <_write_r>

0800df16 <__sseek>:
 800df16:	b510      	push	{r4, lr}
 800df18:	460c      	mov	r4, r1
 800df1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df1e:	f000 f91b 	bl	800e158 <_lseek_r>
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	89a3      	ldrh	r3, [r4, #12]
 800df26:	bf15      	itete	ne
 800df28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df32:	81a3      	strheq	r3, [r4, #12]
 800df34:	bf18      	it	ne
 800df36:	81a3      	strhne	r3, [r4, #12]
 800df38:	bd10      	pop	{r4, pc}

0800df3a <__sclose>:
 800df3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df3e:	f000 b89d 	b.w	800e07c <_close_r>

0800df42 <__swbuf_r>:
 800df42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df44:	460e      	mov	r6, r1
 800df46:	4614      	mov	r4, r2
 800df48:	4605      	mov	r5, r0
 800df4a:	b118      	cbz	r0, 800df54 <__swbuf_r+0x12>
 800df4c:	6a03      	ldr	r3, [r0, #32]
 800df4e:	b90b      	cbnz	r3, 800df54 <__swbuf_r+0x12>
 800df50:	f7ff ff0e 	bl	800dd70 <__sinit>
 800df54:	69a3      	ldr	r3, [r4, #24]
 800df56:	60a3      	str	r3, [r4, #8]
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	071a      	lsls	r2, r3, #28
 800df5c:	d501      	bpl.n	800df62 <__swbuf_r+0x20>
 800df5e:	6923      	ldr	r3, [r4, #16]
 800df60:	b943      	cbnz	r3, 800df74 <__swbuf_r+0x32>
 800df62:	4621      	mov	r1, r4
 800df64:	4628      	mov	r0, r5
 800df66:	f000 f82b 	bl	800dfc0 <__swsetup_r>
 800df6a:	b118      	cbz	r0, 800df74 <__swbuf_r+0x32>
 800df6c:	f04f 37ff 	mov.w	r7, #4294967295
 800df70:	4638      	mov	r0, r7
 800df72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df74:	6823      	ldr	r3, [r4, #0]
 800df76:	6922      	ldr	r2, [r4, #16]
 800df78:	1a98      	subs	r0, r3, r2
 800df7a:	6963      	ldr	r3, [r4, #20]
 800df7c:	b2f6      	uxtb	r6, r6
 800df7e:	4283      	cmp	r3, r0
 800df80:	4637      	mov	r7, r6
 800df82:	dc05      	bgt.n	800df90 <__swbuf_r+0x4e>
 800df84:	4621      	mov	r1, r4
 800df86:	4628      	mov	r0, r5
 800df88:	f000 fda2 	bl	800ead0 <_fflush_r>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d1ed      	bne.n	800df6c <__swbuf_r+0x2a>
 800df90:	68a3      	ldr	r3, [r4, #8]
 800df92:	3b01      	subs	r3, #1
 800df94:	60a3      	str	r3, [r4, #8]
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	6022      	str	r2, [r4, #0]
 800df9c:	701e      	strb	r6, [r3, #0]
 800df9e:	6962      	ldr	r2, [r4, #20]
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d004      	beq.n	800dfb0 <__swbuf_r+0x6e>
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	07db      	lsls	r3, r3, #31
 800dfaa:	d5e1      	bpl.n	800df70 <__swbuf_r+0x2e>
 800dfac:	2e0a      	cmp	r6, #10
 800dfae:	d1df      	bne.n	800df70 <__swbuf_r+0x2e>
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f000 fd8c 	bl	800ead0 <_fflush_r>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d0d9      	beq.n	800df70 <__swbuf_r+0x2e>
 800dfbc:	e7d6      	b.n	800df6c <__swbuf_r+0x2a>
	...

0800dfc0 <__swsetup_r>:
 800dfc0:	b538      	push	{r3, r4, r5, lr}
 800dfc2:	4b29      	ldr	r3, [pc, #164]	@ (800e068 <__swsetup_r+0xa8>)
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	460c      	mov	r4, r1
 800dfca:	b118      	cbz	r0, 800dfd4 <__swsetup_r+0x14>
 800dfcc:	6a03      	ldr	r3, [r0, #32]
 800dfce:	b90b      	cbnz	r3, 800dfd4 <__swsetup_r+0x14>
 800dfd0:	f7ff fece 	bl	800dd70 <__sinit>
 800dfd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd8:	0719      	lsls	r1, r3, #28
 800dfda:	d422      	bmi.n	800e022 <__swsetup_r+0x62>
 800dfdc:	06da      	lsls	r2, r3, #27
 800dfde:	d407      	bmi.n	800dff0 <__swsetup_r+0x30>
 800dfe0:	2209      	movs	r2, #9
 800dfe2:	602a      	str	r2, [r5, #0]
 800dfe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	f04f 30ff 	mov.w	r0, #4294967295
 800dfee:	e033      	b.n	800e058 <__swsetup_r+0x98>
 800dff0:	0758      	lsls	r0, r3, #29
 800dff2:	d512      	bpl.n	800e01a <__swsetup_r+0x5a>
 800dff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dff6:	b141      	cbz	r1, 800e00a <__swsetup_r+0x4a>
 800dff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dffc:	4299      	cmp	r1, r3
 800dffe:	d002      	beq.n	800e006 <__swsetup_r+0x46>
 800e000:	4628      	mov	r0, r5
 800e002:	f000 f91b 	bl	800e23c <_free_r>
 800e006:	2300      	movs	r3, #0
 800e008:	6363      	str	r3, [r4, #52]	@ 0x34
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	2300      	movs	r3, #0
 800e014:	6063      	str	r3, [r4, #4]
 800e016:	6923      	ldr	r3, [r4, #16]
 800e018:	6023      	str	r3, [r4, #0]
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	f043 0308 	orr.w	r3, r3, #8
 800e020:	81a3      	strh	r3, [r4, #12]
 800e022:	6923      	ldr	r3, [r4, #16]
 800e024:	b94b      	cbnz	r3, 800e03a <__swsetup_r+0x7a>
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e030:	d003      	beq.n	800e03a <__swsetup_r+0x7a>
 800e032:	4621      	mov	r1, r4
 800e034:	4628      	mov	r0, r5
 800e036:	f000 fd99 	bl	800eb6c <__smakebuf_r>
 800e03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e03e:	f013 0201 	ands.w	r2, r3, #1
 800e042:	d00a      	beq.n	800e05a <__swsetup_r+0x9a>
 800e044:	2200      	movs	r2, #0
 800e046:	60a2      	str	r2, [r4, #8]
 800e048:	6962      	ldr	r2, [r4, #20]
 800e04a:	4252      	negs	r2, r2
 800e04c:	61a2      	str	r2, [r4, #24]
 800e04e:	6922      	ldr	r2, [r4, #16]
 800e050:	b942      	cbnz	r2, 800e064 <__swsetup_r+0xa4>
 800e052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e056:	d1c5      	bne.n	800dfe4 <__swsetup_r+0x24>
 800e058:	bd38      	pop	{r3, r4, r5, pc}
 800e05a:	0799      	lsls	r1, r3, #30
 800e05c:	bf58      	it	pl
 800e05e:	6962      	ldrpl	r2, [r4, #20]
 800e060:	60a2      	str	r2, [r4, #8]
 800e062:	e7f4      	b.n	800e04e <__swsetup_r+0x8e>
 800e064:	2000      	movs	r0, #0
 800e066:	e7f7      	b.n	800e058 <__swsetup_r+0x98>
 800e068:	20000020 	.word	0x20000020

0800e06c <memset>:
 800e06c:	4402      	add	r2, r0
 800e06e:	4603      	mov	r3, r0
 800e070:	4293      	cmp	r3, r2
 800e072:	d100      	bne.n	800e076 <memset+0xa>
 800e074:	4770      	bx	lr
 800e076:	f803 1b01 	strb.w	r1, [r3], #1
 800e07a:	e7f9      	b.n	800e070 <memset+0x4>

0800e07c <_close_r>:
 800e07c:	b538      	push	{r3, r4, r5, lr}
 800e07e:	4d06      	ldr	r5, [pc, #24]	@ (800e098 <_close_r+0x1c>)
 800e080:	2300      	movs	r3, #0
 800e082:	4604      	mov	r4, r0
 800e084:	4608      	mov	r0, r1
 800e086:	602b      	str	r3, [r5, #0]
 800e088:	f7f3 f8d7 	bl	800123a <_close>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d102      	bne.n	800e096 <_close_r+0x1a>
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	b103      	cbz	r3, 800e096 <_close_r+0x1a>
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	bd38      	pop	{r3, r4, r5, pc}
 800e098:	20005ae4 	.word	0x20005ae4

0800e09c <_reclaim_reent>:
 800e09c:	4b2d      	ldr	r3, [pc, #180]	@ (800e154 <_reclaim_reent+0xb8>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4283      	cmp	r3, r0
 800e0a2:	b570      	push	{r4, r5, r6, lr}
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	d053      	beq.n	800e150 <_reclaim_reent+0xb4>
 800e0a8:	69c3      	ldr	r3, [r0, #28]
 800e0aa:	b31b      	cbz	r3, 800e0f4 <_reclaim_reent+0x58>
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	b163      	cbz	r3, 800e0ca <_reclaim_reent+0x2e>
 800e0b0:	2500      	movs	r5, #0
 800e0b2:	69e3      	ldr	r3, [r4, #28]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	5959      	ldr	r1, [r3, r5]
 800e0b8:	b9b1      	cbnz	r1, 800e0e8 <_reclaim_reent+0x4c>
 800e0ba:	3504      	adds	r5, #4
 800e0bc:	2d80      	cmp	r5, #128	@ 0x80
 800e0be:	d1f8      	bne.n	800e0b2 <_reclaim_reent+0x16>
 800e0c0:	69e3      	ldr	r3, [r4, #28]
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	68d9      	ldr	r1, [r3, #12]
 800e0c6:	f000 f8b9 	bl	800e23c <_free_r>
 800e0ca:	69e3      	ldr	r3, [r4, #28]
 800e0cc:	6819      	ldr	r1, [r3, #0]
 800e0ce:	b111      	cbz	r1, 800e0d6 <_reclaim_reent+0x3a>
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f000 f8b3 	bl	800e23c <_free_r>
 800e0d6:	69e3      	ldr	r3, [r4, #28]
 800e0d8:	689d      	ldr	r5, [r3, #8]
 800e0da:	b15d      	cbz	r5, 800e0f4 <_reclaim_reent+0x58>
 800e0dc:	4629      	mov	r1, r5
 800e0de:	4620      	mov	r0, r4
 800e0e0:	682d      	ldr	r5, [r5, #0]
 800e0e2:	f000 f8ab 	bl	800e23c <_free_r>
 800e0e6:	e7f8      	b.n	800e0da <_reclaim_reent+0x3e>
 800e0e8:	680e      	ldr	r6, [r1, #0]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 f8a6 	bl	800e23c <_free_r>
 800e0f0:	4631      	mov	r1, r6
 800e0f2:	e7e1      	b.n	800e0b8 <_reclaim_reent+0x1c>
 800e0f4:	6961      	ldr	r1, [r4, #20]
 800e0f6:	b111      	cbz	r1, 800e0fe <_reclaim_reent+0x62>
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f000 f89f 	bl	800e23c <_free_r>
 800e0fe:	69e1      	ldr	r1, [r4, #28]
 800e100:	b111      	cbz	r1, 800e108 <_reclaim_reent+0x6c>
 800e102:	4620      	mov	r0, r4
 800e104:	f000 f89a 	bl	800e23c <_free_r>
 800e108:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e10a:	b111      	cbz	r1, 800e112 <_reclaim_reent+0x76>
 800e10c:	4620      	mov	r0, r4
 800e10e:	f000 f895 	bl	800e23c <_free_r>
 800e112:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e114:	b111      	cbz	r1, 800e11c <_reclaim_reent+0x80>
 800e116:	4620      	mov	r0, r4
 800e118:	f000 f890 	bl	800e23c <_free_r>
 800e11c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e11e:	b111      	cbz	r1, 800e126 <_reclaim_reent+0x8a>
 800e120:	4620      	mov	r0, r4
 800e122:	f000 f88b 	bl	800e23c <_free_r>
 800e126:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e128:	b111      	cbz	r1, 800e130 <_reclaim_reent+0x94>
 800e12a:	4620      	mov	r0, r4
 800e12c:	f000 f886 	bl	800e23c <_free_r>
 800e130:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e132:	b111      	cbz	r1, 800e13a <_reclaim_reent+0x9e>
 800e134:	4620      	mov	r0, r4
 800e136:	f000 f881 	bl	800e23c <_free_r>
 800e13a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e13c:	b111      	cbz	r1, 800e144 <_reclaim_reent+0xa8>
 800e13e:	4620      	mov	r0, r4
 800e140:	f000 f87c 	bl	800e23c <_free_r>
 800e144:	6a23      	ldr	r3, [r4, #32]
 800e146:	b11b      	cbz	r3, 800e150 <_reclaim_reent+0xb4>
 800e148:	4620      	mov	r0, r4
 800e14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e14e:	4718      	bx	r3
 800e150:	bd70      	pop	{r4, r5, r6, pc}
 800e152:	bf00      	nop
 800e154:	20000020 	.word	0x20000020

0800e158 <_lseek_r>:
 800e158:	b538      	push	{r3, r4, r5, lr}
 800e15a:	4d07      	ldr	r5, [pc, #28]	@ (800e178 <_lseek_r+0x20>)
 800e15c:	4604      	mov	r4, r0
 800e15e:	4608      	mov	r0, r1
 800e160:	4611      	mov	r1, r2
 800e162:	2200      	movs	r2, #0
 800e164:	602a      	str	r2, [r5, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	f7f3 f88e 	bl	8001288 <_lseek>
 800e16c:	1c43      	adds	r3, r0, #1
 800e16e:	d102      	bne.n	800e176 <_lseek_r+0x1e>
 800e170:	682b      	ldr	r3, [r5, #0]
 800e172:	b103      	cbz	r3, 800e176 <_lseek_r+0x1e>
 800e174:	6023      	str	r3, [r4, #0]
 800e176:	bd38      	pop	{r3, r4, r5, pc}
 800e178:	20005ae4 	.word	0x20005ae4

0800e17c <_read_r>:
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	4d07      	ldr	r5, [pc, #28]	@ (800e19c <_read_r+0x20>)
 800e180:	4604      	mov	r4, r0
 800e182:	4608      	mov	r0, r1
 800e184:	4611      	mov	r1, r2
 800e186:	2200      	movs	r2, #0
 800e188:	602a      	str	r2, [r5, #0]
 800e18a:	461a      	mov	r2, r3
 800e18c:	f7f3 f81c 	bl	80011c8 <_read>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d102      	bne.n	800e19a <_read_r+0x1e>
 800e194:	682b      	ldr	r3, [r5, #0]
 800e196:	b103      	cbz	r3, 800e19a <_read_r+0x1e>
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
 800e19c:	20005ae4 	.word	0x20005ae4

0800e1a0 <_write_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d07      	ldr	r5, [pc, #28]	@ (800e1c0 <_write_r+0x20>)
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	4608      	mov	r0, r1
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	602a      	str	r2, [r5, #0]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	f7f3 f827 	bl	8001202 <_write>
 800e1b4:	1c43      	adds	r3, r0, #1
 800e1b6:	d102      	bne.n	800e1be <_write_r+0x1e>
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	b103      	cbz	r3, 800e1be <_write_r+0x1e>
 800e1bc:	6023      	str	r3, [r4, #0]
 800e1be:	bd38      	pop	{r3, r4, r5, pc}
 800e1c0:	20005ae4 	.word	0x20005ae4

0800e1c4 <__errno>:
 800e1c4:	4b01      	ldr	r3, [pc, #4]	@ (800e1cc <__errno+0x8>)
 800e1c6:	6818      	ldr	r0, [r3, #0]
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	20000020 	.word	0x20000020

0800e1d0 <__libc_init_array>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	4d0d      	ldr	r5, [pc, #52]	@ (800e208 <__libc_init_array+0x38>)
 800e1d4:	4c0d      	ldr	r4, [pc, #52]	@ (800e20c <__libc_init_array+0x3c>)
 800e1d6:	1b64      	subs	r4, r4, r5
 800e1d8:	10a4      	asrs	r4, r4, #2
 800e1da:	2600      	movs	r6, #0
 800e1dc:	42a6      	cmp	r6, r4
 800e1de:	d109      	bne.n	800e1f4 <__libc_init_array+0x24>
 800e1e0:	4d0b      	ldr	r5, [pc, #44]	@ (800e210 <__libc_init_array+0x40>)
 800e1e2:	4c0c      	ldr	r4, [pc, #48]	@ (800e214 <__libc_init_array+0x44>)
 800e1e4:	f000 fd30 	bl	800ec48 <_init>
 800e1e8:	1b64      	subs	r4, r4, r5
 800e1ea:	10a4      	asrs	r4, r4, #2
 800e1ec:	2600      	movs	r6, #0
 800e1ee:	42a6      	cmp	r6, r4
 800e1f0:	d105      	bne.n	800e1fe <__libc_init_array+0x2e>
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1f8:	4798      	blx	r3
 800e1fa:	3601      	adds	r6, #1
 800e1fc:	e7ee      	b.n	800e1dc <__libc_init_array+0xc>
 800e1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e202:	4798      	blx	r3
 800e204:	3601      	adds	r6, #1
 800e206:	e7f2      	b.n	800e1ee <__libc_init_array+0x1e>
 800e208:	08039cb8 	.word	0x08039cb8
 800e20c:	08039cb8 	.word	0x08039cb8
 800e210:	08039cb8 	.word	0x08039cb8
 800e214:	08039cbc 	.word	0x08039cbc

0800e218 <__retarget_lock_init_recursive>:
 800e218:	4770      	bx	lr

0800e21a <__retarget_lock_acquire_recursive>:
 800e21a:	4770      	bx	lr

0800e21c <__retarget_lock_release_recursive>:
 800e21c:	4770      	bx	lr

0800e21e <memcpy>:
 800e21e:	440a      	add	r2, r1
 800e220:	4291      	cmp	r1, r2
 800e222:	f100 33ff 	add.w	r3, r0, #4294967295
 800e226:	d100      	bne.n	800e22a <memcpy+0xc>
 800e228:	4770      	bx	lr
 800e22a:	b510      	push	{r4, lr}
 800e22c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e230:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e234:	4291      	cmp	r1, r2
 800e236:	d1f9      	bne.n	800e22c <memcpy+0xe>
 800e238:	bd10      	pop	{r4, pc}
	...

0800e23c <_free_r>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	4605      	mov	r5, r0
 800e240:	2900      	cmp	r1, #0
 800e242:	d041      	beq.n	800e2c8 <_free_r+0x8c>
 800e244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e248:	1f0c      	subs	r4, r1, #4
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	bfb8      	it	lt
 800e24e:	18e4      	addlt	r4, r4, r3
 800e250:	f000 f8e0 	bl	800e414 <__malloc_lock>
 800e254:	4a1d      	ldr	r2, [pc, #116]	@ (800e2cc <_free_r+0x90>)
 800e256:	6813      	ldr	r3, [r2, #0]
 800e258:	b933      	cbnz	r3, 800e268 <_free_r+0x2c>
 800e25a:	6063      	str	r3, [r4, #4]
 800e25c:	6014      	str	r4, [r2, #0]
 800e25e:	4628      	mov	r0, r5
 800e260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e264:	f000 b8dc 	b.w	800e420 <__malloc_unlock>
 800e268:	42a3      	cmp	r3, r4
 800e26a:	d908      	bls.n	800e27e <_free_r+0x42>
 800e26c:	6820      	ldr	r0, [r4, #0]
 800e26e:	1821      	adds	r1, r4, r0
 800e270:	428b      	cmp	r3, r1
 800e272:	bf01      	itttt	eq
 800e274:	6819      	ldreq	r1, [r3, #0]
 800e276:	685b      	ldreq	r3, [r3, #4]
 800e278:	1809      	addeq	r1, r1, r0
 800e27a:	6021      	streq	r1, [r4, #0]
 800e27c:	e7ed      	b.n	800e25a <_free_r+0x1e>
 800e27e:	461a      	mov	r2, r3
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	b10b      	cbz	r3, 800e288 <_free_r+0x4c>
 800e284:	42a3      	cmp	r3, r4
 800e286:	d9fa      	bls.n	800e27e <_free_r+0x42>
 800e288:	6811      	ldr	r1, [r2, #0]
 800e28a:	1850      	adds	r0, r2, r1
 800e28c:	42a0      	cmp	r0, r4
 800e28e:	d10b      	bne.n	800e2a8 <_free_r+0x6c>
 800e290:	6820      	ldr	r0, [r4, #0]
 800e292:	4401      	add	r1, r0
 800e294:	1850      	adds	r0, r2, r1
 800e296:	4283      	cmp	r3, r0
 800e298:	6011      	str	r1, [r2, #0]
 800e29a:	d1e0      	bne.n	800e25e <_free_r+0x22>
 800e29c:	6818      	ldr	r0, [r3, #0]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	6053      	str	r3, [r2, #4]
 800e2a2:	4408      	add	r0, r1
 800e2a4:	6010      	str	r0, [r2, #0]
 800e2a6:	e7da      	b.n	800e25e <_free_r+0x22>
 800e2a8:	d902      	bls.n	800e2b0 <_free_r+0x74>
 800e2aa:	230c      	movs	r3, #12
 800e2ac:	602b      	str	r3, [r5, #0]
 800e2ae:	e7d6      	b.n	800e25e <_free_r+0x22>
 800e2b0:	6820      	ldr	r0, [r4, #0]
 800e2b2:	1821      	adds	r1, r4, r0
 800e2b4:	428b      	cmp	r3, r1
 800e2b6:	bf04      	itt	eq
 800e2b8:	6819      	ldreq	r1, [r3, #0]
 800e2ba:	685b      	ldreq	r3, [r3, #4]
 800e2bc:	6063      	str	r3, [r4, #4]
 800e2be:	bf04      	itt	eq
 800e2c0:	1809      	addeq	r1, r1, r0
 800e2c2:	6021      	streq	r1, [r4, #0]
 800e2c4:	6054      	str	r4, [r2, #4]
 800e2c6:	e7ca      	b.n	800e25e <_free_r+0x22>
 800e2c8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20005af0 	.word	0x20005af0

0800e2d0 <sbrk_aligned>:
 800e2d0:	b570      	push	{r4, r5, r6, lr}
 800e2d2:	4e0f      	ldr	r6, [pc, #60]	@ (800e310 <sbrk_aligned+0x40>)
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	6831      	ldr	r1, [r6, #0]
 800e2d8:	4605      	mov	r5, r0
 800e2da:	b911      	cbnz	r1, 800e2e2 <sbrk_aligned+0x12>
 800e2dc:	f000 fca4 	bl	800ec28 <_sbrk_r>
 800e2e0:	6030      	str	r0, [r6, #0]
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	f000 fc9f 	bl	800ec28 <_sbrk_r>
 800e2ea:	1c43      	adds	r3, r0, #1
 800e2ec:	d103      	bne.n	800e2f6 <sbrk_aligned+0x26>
 800e2ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	bd70      	pop	{r4, r5, r6, pc}
 800e2f6:	1cc4      	adds	r4, r0, #3
 800e2f8:	f024 0403 	bic.w	r4, r4, #3
 800e2fc:	42a0      	cmp	r0, r4
 800e2fe:	d0f8      	beq.n	800e2f2 <sbrk_aligned+0x22>
 800e300:	1a21      	subs	r1, r4, r0
 800e302:	4628      	mov	r0, r5
 800e304:	f000 fc90 	bl	800ec28 <_sbrk_r>
 800e308:	3001      	adds	r0, #1
 800e30a:	d1f2      	bne.n	800e2f2 <sbrk_aligned+0x22>
 800e30c:	e7ef      	b.n	800e2ee <sbrk_aligned+0x1e>
 800e30e:	bf00      	nop
 800e310:	20005aec 	.word	0x20005aec

0800e314 <_malloc_r>:
 800e314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e318:	1ccd      	adds	r5, r1, #3
 800e31a:	f025 0503 	bic.w	r5, r5, #3
 800e31e:	3508      	adds	r5, #8
 800e320:	2d0c      	cmp	r5, #12
 800e322:	bf38      	it	cc
 800e324:	250c      	movcc	r5, #12
 800e326:	2d00      	cmp	r5, #0
 800e328:	4606      	mov	r6, r0
 800e32a:	db01      	blt.n	800e330 <_malloc_r+0x1c>
 800e32c:	42a9      	cmp	r1, r5
 800e32e:	d904      	bls.n	800e33a <_malloc_r+0x26>
 800e330:	230c      	movs	r3, #12
 800e332:	6033      	str	r3, [r6, #0]
 800e334:	2000      	movs	r0, #0
 800e336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e33a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e410 <_malloc_r+0xfc>
 800e33e:	f000 f869 	bl	800e414 <__malloc_lock>
 800e342:	f8d8 3000 	ldr.w	r3, [r8]
 800e346:	461c      	mov	r4, r3
 800e348:	bb44      	cbnz	r4, 800e39c <_malloc_r+0x88>
 800e34a:	4629      	mov	r1, r5
 800e34c:	4630      	mov	r0, r6
 800e34e:	f7ff ffbf 	bl	800e2d0 <sbrk_aligned>
 800e352:	1c43      	adds	r3, r0, #1
 800e354:	4604      	mov	r4, r0
 800e356:	d158      	bne.n	800e40a <_malloc_r+0xf6>
 800e358:	f8d8 4000 	ldr.w	r4, [r8]
 800e35c:	4627      	mov	r7, r4
 800e35e:	2f00      	cmp	r7, #0
 800e360:	d143      	bne.n	800e3ea <_malloc_r+0xd6>
 800e362:	2c00      	cmp	r4, #0
 800e364:	d04b      	beq.n	800e3fe <_malloc_r+0xea>
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	4639      	mov	r1, r7
 800e36a:	4630      	mov	r0, r6
 800e36c:	eb04 0903 	add.w	r9, r4, r3
 800e370:	f000 fc5a 	bl	800ec28 <_sbrk_r>
 800e374:	4581      	cmp	r9, r0
 800e376:	d142      	bne.n	800e3fe <_malloc_r+0xea>
 800e378:	6821      	ldr	r1, [r4, #0]
 800e37a:	1a6d      	subs	r5, r5, r1
 800e37c:	4629      	mov	r1, r5
 800e37e:	4630      	mov	r0, r6
 800e380:	f7ff ffa6 	bl	800e2d0 <sbrk_aligned>
 800e384:	3001      	adds	r0, #1
 800e386:	d03a      	beq.n	800e3fe <_malloc_r+0xea>
 800e388:	6823      	ldr	r3, [r4, #0]
 800e38a:	442b      	add	r3, r5
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	f8d8 3000 	ldr.w	r3, [r8]
 800e392:	685a      	ldr	r2, [r3, #4]
 800e394:	bb62      	cbnz	r2, 800e3f0 <_malloc_r+0xdc>
 800e396:	f8c8 7000 	str.w	r7, [r8]
 800e39a:	e00f      	b.n	800e3bc <_malloc_r+0xa8>
 800e39c:	6822      	ldr	r2, [r4, #0]
 800e39e:	1b52      	subs	r2, r2, r5
 800e3a0:	d420      	bmi.n	800e3e4 <_malloc_r+0xd0>
 800e3a2:	2a0b      	cmp	r2, #11
 800e3a4:	d917      	bls.n	800e3d6 <_malloc_r+0xc2>
 800e3a6:	1961      	adds	r1, r4, r5
 800e3a8:	42a3      	cmp	r3, r4
 800e3aa:	6025      	str	r5, [r4, #0]
 800e3ac:	bf18      	it	ne
 800e3ae:	6059      	strne	r1, [r3, #4]
 800e3b0:	6863      	ldr	r3, [r4, #4]
 800e3b2:	bf08      	it	eq
 800e3b4:	f8c8 1000 	streq.w	r1, [r8]
 800e3b8:	5162      	str	r2, [r4, r5]
 800e3ba:	604b      	str	r3, [r1, #4]
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f000 f82f 	bl	800e420 <__malloc_unlock>
 800e3c2:	f104 000b 	add.w	r0, r4, #11
 800e3c6:	1d23      	adds	r3, r4, #4
 800e3c8:	f020 0007 	bic.w	r0, r0, #7
 800e3cc:	1ac2      	subs	r2, r0, r3
 800e3ce:	bf1c      	itt	ne
 800e3d0:	1a1b      	subne	r3, r3, r0
 800e3d2:	50a3      	strne	r3, [r4, r2]
 800e3d4:	e7af      	b.n	800e336 <_malloc_r+0x22>
 800e3d6:	6862      	ldr	r2, [r4, #4]
 800e3d8:	42a3      	cmp	r3, r4
 800e3da:	bf0c      	ite	eq
 800e3dc:	f8c8 2000 	streq.w	r2, [r8]
 800e3e0:	605a      	strne	r2, [r3, #4]
 800e3e2:	e7eb      	b.n	800e3bc <_malloc_r+0xa8>
 800e3e4:	4623      	mov	r3, r4
 800e3e6:	6864      	ldr	r4, [r4, #4]
 800e3e8:	e7ae      	b.n	800e348 <_malloc_r+0x34>
 800e3ea:	463c      	mov	r4, r7
 800e3ec:	687f      	ldr	r7, [r7, #4]
 800e3ee:	e7b6      	b.n	800e35e <_malloc_r+0x4a>
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	42a3      	cmp	r3, r4
 800e3f6:	d1fb      	bne.n	800e3f0 <_malloc_r+0xdc>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	6053      	str	r3, [r2, #4]
 800e3fc:	e7de      	b.n	800e3bc <_malloc_r+0xa8>
 800e3fe:	230c      	movs	r3, #12
 800e400:	6033      	str	r3, [r6, #0]
 800e402:	4630      	mov	r0, r6
 800e404:	f000 f80c 	bl	800e420 <__malloc_unlock>
 800e408:	e794      	b.n	800e334 <_malloc_r+0x20>
 800e40a:	6005      	str	r5, [r0, #0]
 800e40c:	e7d6      	b.n	800e3bc <_malloc_r+0xa8>
 800e40e:	bf00      	nop
 800e410:	20005af0 	.word	0x20005af0

0800e414 <__malloc_lock>:
 800e414:	4801      	ldr	r0, [pc, #4]	@ (800e41c <__malloc_lock+0x8>)
 800e416:	f7ff bf00 	b.w	800e21a <__retarget_lock_acquire_recursive>
 800e41a:	bf00      	nop
 800e41c:	20005ae8 	.word	0x20005ae8

0800e420 <__malloc_unlock>:
 800e420:	4801      	ldr	r0, [pc, #4]	@ (800e428 <__malloc_unlock+0x8>)
 800e422:	f7ff befb 	b.w	800e21c <__retarget_lock_release_recursive>
 800e426:	bf00      	nop
 800e428:	20005ae8 	.word	0x20005ae8

0800e42c <__sfputc_r>:
 800e42c:	6893      	ldr	r3, [r2, #8]
 800e42e:	3b01      	subs	r3, #1
 800e430:	2b00      	cmp	r3, #0
 800e432:	b410      	push	{r4}
 800e434:	6093      	str	r3, [r2, #8]
 800e436:	da08      	bge.n	800e44a <__sfputc_r+0x1e>
 800e438:	6994      	ldr	r4, [r2, #24]
 800e43a:	42a3      	cmp	r3, r4
 800e43c:	db01      	blt.n	800e442 <__sfputc_r+0x16>
 800e43e:	290a      	cmp	r1, #10
 800e440:	d103      	bne.n	800e44a <__sfputc_r+0x1e>
 800e442:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e446:	f7ff bd7c 	b.w	800df42 <__swbuf_r>
 800e44a:	6813      	ldr	r3, [r2, #0]
 800e44c:	1c58      	adds	r0, r3, #1
 800e44e:	6010      	str	r0, [r2, #0]
 800e450:	7019      	strb	r1, [r3, #0]
 800e452:	4608      	mov	r0, r1
 800e454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <__sfputs_r>:
 800e45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45c:	4606      	mov	r6, r0
 800e45e:	460f      	mov	r7, r1
 800e460:	4614      	mov	r4, r2
 800e462:	18d5      	adds	r5, r2, r3
 800e464:	42ac      	cmp	r4, r5
 800e466:	d101      	bne.n	800e46c <__sfputs_r+0x12>
 800e468:	2000      	movs	r0, #0
 800e46a:	e007      	b.n	800e47c <__sfputs_r+0x22>
 800e46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e470:	463a      	mov	r2, r7
 800e472:	4630      	mov	r0, r6
 800e474:	f7ff ffda 	bl	800e42c <__sfputc_r>
 800e478:	1c43      	adds	r3, r0, #1
 800e47a:	d1f3      	bne.n	800e464 <__sfputs_r+0xa>
 800e47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e480 <_vfiprintf_r>:
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	460d      	mov	r5, r1
 800e486:	b09d      	sub	sp, #116	@ 0x74
 800e488:	4614      	mov	r4, r2
 800e48a:	4698      	mov	r8, r3
 800e48c:	4606      	mov	r6, r0
 800e48e:	b118      	cbz	r0, 800e498 <_vfiprintf_r+0x18>
 800e490:	6a03      	ldr	r3, [r0, #32]
 800e492:	b90b      	cbnz	r3, 800e498 <_vfiprintf_r+0x18>
 800e494:	f7ff fc6c 	bl	800dd70 <__sinit>
 800e498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e49a:	07d9      	lsls	r1, r3, #31
 800e49c:	d405      	bmi.n	800e4aa <_vfiprintf_r+0x2a>
 800e49e:	89ab      	ldrh	r3, [r5, #12]
 800e4a0:	059a      	lsls	r2, r3, #22
 800e4a2:	d402      	bmi.n	800e4aa <_vfiprintf_r+0x2a>
 800e4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4a6:	f7ff feb8 	bl	800e21a <__retarget_lock_acquire_recursive>
 800e4aa:	89ab      	ldrh	r3, [r5, #12]
 800e4ac:	071b      	lsls	r3, r3, #28
 800e4ae:	d501      	bpl.n	800e4b4 <_vfiprintf_r+0x34>
 800e4b0:	692b      	ldr	r3, [r5, #16]
 800e4b2:	b99b      	cbnz	r3, 800e4dc <_vfiprintf_r+0x5c>
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7ff fd82 	bl	800dfc0 <__swsetup_r>
 800e4bc:	b170      	cbz	r0, 800e4dc <_vfiprintf_r+0x5c>
 800e4be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4c0:	07dc      	lsls	r4, r3, #31
 800e4c2:	d504      	bpl.n	800e4ce <_vfiprintf_r+0x4e>
 800e4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c8:	b01d      	add	sp, #116	@ 0x74
 800e4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ce:	89ab      	ldrh	r3, [r5, #12]
 800e4d0:	0598      	lsls	r0, r3, #22
 800e4d2:	d4f7      	bmi.n	800e4c4 <_vfiprintf_r+0x44>
 800e4d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4d6:	f7ff fea1 	bl	800e21c <__retarget_lock_release_recursive>
 800e4da:	e7f3      	b.n	800e4c4 <_vfiprintf_r+0x44>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4e0:	2320      	movs	r3, #32
 800e4e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4ea:	2330      	movs	r3, #48	@ 0x30
 800e4ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e69c <_vfiprintf_r+0x21c>
 800e4f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4f4:	f04f 0901 	mov.w	r9, #1
 800e4f8:	4623      	mov	r3, r4
 800e4fa:	469a      	mov	sl, r3
 800e4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e500:	b10a      	cbz	r2, 800e506 <_vfiprintf_r+0x86>
 800e502:	2a25      	cmp	r2, #37	@ 0x25
 800e504:	d1f9      	bne.n	800e4fa <_vfiprintf_r+0x7a>
 800e506:	ebba 0b04 	subs.w	fp, sl, r4
 800e50a:	d00b      	beq.n	800e524 <_vfiprintf_r+0xa4>
 800e50c:	465b      	mov	r3, fp
 800e50e:	4622      	mov	r2, r4
 800e510:	4629      	mov	r1, r5
 800e512:	4630      	mov	r0, r6
 800e514:	f7ff ffa1 	bl	800e45a <__sfputs_r>
 800e518:	3001      	adds	r0, #1
 800e51a:	f000 80a7 	beq.w	800e66c <_vfiprintf_r+0x1ec>
 800e51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e520:	445a      	add	r2, fp
 800e522:	9209      	str	r2, [sp, #36]	@ 0x24
 800e524:	f89a 3000 	ldrb.w	r3, [sl]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f000 809f 	beq.w	800e66c <_vfiprintf_r+0x1ec>
 800e52e:	2300      	movs	r3, #0
 800e530:	f04f 32ff 	mov.w	r2, #4294967295
 800e534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e538:	f10a 0a01 	add.w	sl, sl, #1
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	9307      	str	r3, [sp, #28]
 800e540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e544:	931a      	str	r3, [sp, #104]	@ 0x68
 800e546:	4654      	mov	r4, sl
 800e548:	2205      	movs	r2, #5
 800e54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e54e:	4853      	ldr	r0, [pc, #332]	@ (800e69c <_vfiprintf_r+0x21c>)
 800e550:	f7f1 fe3e 	bl	80001d0 <memchr>
 800e554:	9a04      	ldr	r2, [sp, #16]
 800e556:	b9d8      	cbnz	r0, 800e590 <_vfiprintf_r+0x110>
 800e558:	06d1      	lsls	r1, r2, #27
 800e55a:	bf44      	itt	mi
 800e55c:	2320      	movmi	r3, #32
 800e55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e562:	0713      	lsls	r3, r2, #28
 800e564:	bf44      	itt	mi
 800e566:	232b      	movmi	r3, #43	@ 0x2b
 800e568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e56c:	f89a 3000 	ldrb.w	r3, [sl]
 800e570:	2b2a      	cmp	r3, #42	@ 0x2a
 800e572:	d015      	beq.n	800e5a0 <_vfiprintf_r+0x120>
 800e574:	9a07      	ldr	r2, [sp, #28]
 800e576:	4654      	mov	r4, sl
 800e578:	2000      	movs	r0, #0
 800e57a:	f04f 0c0a 	mov.w	ip, #10
 800e57e:	4621      	mov	r1, r4
 800e580:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e584:	3b30      	subs	r3, #48	@ 0x30
 800e586:	2b09      	cmp	r3, #9
 800e588:	d94b      	bls.n	800e622 <_vfiprintf_r+0x1a2>
 800e58a:	b1b0      	cbz	r0, 800e5ba <_vfiprintf_r+0x13a>
 800e58c:	9207      	str	r2, [sp, #28]
 800e58e:	e014      	b.n	800e5ba <_vfiprintf_r+0x13a>
 800e590:	eba0 0308 	sub.w	r3, r0, r8
 800e594:	fa09 f303 	lsl.w	r3, r9, r3
 800e598:	4313      	orrs	r3, r2
 800e59a:	9304      	str	r3, [sp, #16]
 800e59c:	46a2      	mov	sl, r4
 800e59e:	e7d2      	b.n	800e546 <_vfiprintf_r+0xc6>
 800e5a0:	9b03      	ldr	r3, [sp, #12]
 800e5a2:	1d19      	adds	r1, r3, #4
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	9103      	str	r1, [sp, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	bfbb      	ittet	lt
 800e5ac:	425b      	neglt	r3, r3
 800e5ae:	f042 0202 	orrlt.w	r2, r2, #2
 800e5b2:	9307      	strge	r3, [sp, #28]
 800e5b4:	9307      	strlt	r3, [sp, #28]
 800e5b6:	bfb8      	it	lt
 800e5b8:	9204      	strlt	r2, [sp, #16]
 800e5ba:	7823      	ldrb	r3, [r4, #0]
 800e5bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5be:	d10a      	bne.n	800e5d6 <_vfiprintf_r+0x156>
 800e5c0:	7863      	ldrb	r3, [r4, #1]
 800e5c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5c4:	d132      	bne.n	800e62c <_vfiprintf_r+0x1ac>
 800e5c6:	9b03      	ldr	r3, [sp, #12]
 800e5c8:	1d1a      	adds	r2, r3, #4
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	9203      	str	r2, [sp, #12]
 800e5ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5d2:	3402      	adds	r4, #2
 800e5d4:	9305      	str	r3, [sp, #20]
 800e5d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e6ac <_vfiprintf_r+0x22c>
 800e5da:	7821      	ldrb	r1, [r4, #0]
 800e5dc:	2203      	movs	r2, #3
 800e5de:	4650      	mov	r0, sl
 800e5e0:	f7f1 fdf6 	bl	80001d0 <memchr>
 800e5e4:	b138      	cbz	r0, 800e5f6 <_vfiprintf_r+0x176>
 800e5e6:	9b04      	ldr	r3, [sp, #16]
 800e5e8:	eba0 000a 	sub.w	r0, r0, sl
 800e5ec:	2240      	movs	r2, #64	@ 0x40
 800e5ee:	4082      	lsls	r2, r0
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	3401      	adds	r4, #1
 800e5f4:	9304      	str	r3, [sp, #16]
 800e5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fa:	4829      	ldr	r0, [pc, #164]	@ (800e6a0 <_vfiprintf_r+0x220>)
 800e5fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e600:	2206      	movs	r2, #6
 800e602:	f7f1 fde5 	bl	80001d0 <memchr>
 800e606:	2800      	cmp	r0, #0
 800e608:	d03f      	beq.n	800e68a <_vfiprintf_r+0x20a>
 800e60a:	4b26      	ldr	r3, [pc, #152]	@ (800e6a4 <_vfiprintf_r+0x224>)
 800e60c:	bb1b      	cbnz	r3, 800e656 <_vfiprintf_r+0x1d6>
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	3307      	adds	r3, #7
 800e612:	f023 0307 	bic.w	r3, r3, #7
 800e616:	3308      	adds	r3, #8
 800e618:	9303      	str	r3, [sp, #12]
 800e61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e61c:	443b      	add	r3, r7
 800e61e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e620:	e76a      	b.n	800e4f8 <_vfiprintf_r+0x78>
 800e622:	fb0c 3202 	mla	r2, ip, r2, r3
 800e626:	460c      	mov	r4, r1
 800e628:	2001      	movs	r0, #1
 800e62a:	e7a8      	b.n	800e57e <_vfiprintf_r+0xfe>
 800e62c:	2300      	movs	r3, #0
 800e62e:	3401      	adds	r4, #1
 800e630:	9305      	str	r3, [sp, #20]
 800e632:	4619      	mov	r1, r3
 800e634:	f04f 0c0a 	mov.w	ip, #10
 800e638:	4620      	mov	r0, r4
 800e63a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e63e:	3a30      	subs	r2, #48	@ 0x30
 800e640:	2a09      	cmp	r2, #9
 800e642:	d903      	bls.n	800e64c <_vfiprintf_r+0x1cc>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d0c6      	beq.n	800e5d6 <_vfiprintf_r+0x156>
 800e648:	9105      	str	r1, [sp, #20]
 800e64a:	e7c4      	b.n	800e5d6 <_vfiprintf_r+0x156>
 800e64c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e650:	4604      	mov	r4, r0
 800e652:	2301      	movs	r3, #1
 800e654:	e7f0      	b.n	800e638 <_vfiprintf_r+0x1b8>
 800e656:	ab03      	add	r3, sp, #12
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	462a      	mov	r2, r5
 800e65c:	4b12      	ldr	r3, [pc, #72]	@ (800e6a8 <_vfiprintf_r+0x228>)
 800e65e:	a904      	add	r1, sp, #16
 800e660:	4630      	mov	r0, r6
 800e662:	f3af 8000 	nop.w
 800e666:	4607      	mov	r7, r0
 800e668:	1c78      	adds	r0, r7, #1
 800e66a:	d1d6      	bne.n	800e61a <_vfiprintf_r+0x19a>
 800e66c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e66e:	07d9      	lsls	r1, r3, #31
 800e670:	d405      	bmi.n	800e67e <_vfiprintf_r+0x1fe>
 800e672:	89ab      	ldrh	r3, [r5, #12]
 800e674:	059a      	lsls	r2, r3, #22
 800e676:	d402      	bmi.n	800e67e <_vfiprintf_r+0x1fe>
 800e678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e67a:	f7ff fdcf 	bl	800e21c <__retarget_lock_release_recursive>
 800e67e:	89ab      	ldrh	r3, [r5, #12]
 800e680:	065b      	lsls	r3, r3, #25
 800e682:	f53f af1f 	bmi.w	800e4c4 <_vfiprintf_r+0x44>
 800e686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e688:	e71e      	b.n	800e4c8 <_vfiprintf_r+0x48>
 800e68a:	ab03      	add	r3, sp, #12
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	462a      	mov	r2, r5
 800e690:	4b05      	ldr	r3, [pc, #20]	@ (800e6a8 <_vfiprintf_r+0x228>)
 800e692:	a904      	add	r1, sp, #16
 800e694:	4630      	mov	r0, r6
 800e696:	f000 f879 	bl	800e78c <_printf_i>
 800e69a:	e7e4      	b.n	800e666 <_vfiprintf_r+0x1e6>
 800e69c:	08039c7c 	.word	0x08039c7c
 800e6a0:	08039c86 	.word	0x08039c86
 800e6a4:	00000000 	.word	0x00000000
 800e6a8:	0800e45b 	.word	0x0800e45b
 800e6ac:	08039c82 	.word	0x08039c82

0800e6b0 <_printf_common>:
 800e6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b4:	4616      	mov	r6, r2
 800e6b6:	4698      	mov	r8, r3
 800e6b8:	688a      	ldr	r2, [r1, #8]
 800e6ba:	690b      	ldr	r3, [r1, #16]
 800e6bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	bfb8      	it	lt
 800e6c4:	4613      	movlt	r3, r2
 800e6c6:	6033      	str	r3, [r6, #0]
 800e6c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e6cc:	4607      	mov	r7, r0
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	b10a      	cbz	r2, 800e6d6 <_printf_common+0x26>
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	6033      	str	r3, [r6, #0]
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	0699      	lsls	r1, r3, #26
 800e6da:	bf42      	ittt	mi
 800e6dc:	6833      	ldrmi	r3, [r6, #0]
 800e6de:	3302      	addmi	r3, #2
 800e6e0:	6033      	strmi	r3, [r6, #0]
 800e6e2:	6825      	ldr	r5, [r4, #0]
 800e6e4:	f015 0506 	ands.w	r5, r5, #6
 800e6e8:	d106      	bne.n	800e6f8 <_printf_common+0x48>
 800e6ea:	f104 0a19 	add.w	sl, r4, #25
 800e6ee:	68e3      	ldr	r3, [r4, #12]
 800e6f0:	6832      	ldr	r2, [r6, #0]
 800e6f2:	1a9b      	subs	r3, r3, r2
 800e6f4:	42ab      	cmp	r3, r5
 800e6f6:	dc26      	bgt.n	800e746 <_printf_common+0x96>
 800e6f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6fc:	6822      	ldr	r2, [r4, #0]
 800e6fe:	3b00      	subs	r3, #0
 800e700:	bf18      	it	ne
 800e702:	2301      	movne	r3, #1
 800e704:	0692      	lsls	r2, r2, #26
 800e706:	d42b      	bmi.n	800e760 <_printf_common+0xb0>
 800e708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e70c:	4641      	mov	r1, r8
 800e70e:	4638      	mov	r0, r7
 800e710:	47c8      	blx	r9
 800e712:	3001      	adds	r0, #1
 800e714:	d01e      	beq.n	800e754 <_printf_common+0xa4>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	6922      	ldr	r2, [r4, #16]
 800e71a:	f003 0306 	and.w	r3, r3, #6
 800e71e:	2b04      	cmp	r3, #4
 800e720:	bf02      	ittt	eq
 800e722:	68e5      	ldreq	r5, [r4, #12]
 800e724:	6833      	ldreq	r3, [r6, #0]
 800e726:	1aed      	subeq	r5, r5, r3
 800e728:	68a3      	ldr	r3, [r4, #8]
 800e72a:	bf0c      	ite	eq
 800e72c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e730:	2500      	movne	r5, #0
 800e732:	4293      	cmp	r3, r2
 800e734:	bfc4      	itt	gt
 800e736:	1a9b      	subgt	r3, r3, r2
 800e738:	18ed      	addgt	r5, r5, r3
 800e73a:	2600      	movs	r6, #0
 800e73c:	341a      	adds	r4, #26
 800e73e:	42b5      	cmp	r5, r6
 800e740:	d11a      	bne.n	800e778 <_printf_common+0xc8>
 800e742:	2000      	movs	r0, #0
 800e744:	e008      	b.n	800e758 <_printf_common+0xa8>
 800e746:	2301      	movs	r3, #1
 800e748:	4652      	mov	r2, sl
 800e74a:	4641      	mov	r1, r8
 800e74c:	4638      	mov	r0, r7
 800e74e:	47c8      	blx	r9
 800e750:	3001      	adds	r0, #1
 800e752:	d103      	bne.n	800e75c <_printf_common+0xac>
 800e754:	f04f 30ff 	mov.w	r0, #4294967295
 800e758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e75c:	3501      	adds	r5, #1
 800e75e:	e7c6      	b.n	800e6ee <_printf_common+0x3e>
 800e760:	18e1      	adds	r1, r4, r3
 800e762:	1c5a      	adds	r2, r3, #1
 800e764:	2030      	movs	r0, #48	@ 0x30
 800e766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e76a:	4422      	add	r2, r4
 800e76c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e774:	3302      	adds	r3, #2
 800e776:	e7c7      	b.n	800e708 <_printf_common+0x58>
 800e778:	2301      	movs	r3, #1
 800e77a:	4622      	mov	r2, r4
 800e77c:	4641      	mov	r1, r8
 800e77e:	4638      	mov	r0, r7
 800e780:	47c8      	blx	r9
 800e782:	3001      	adds	r0, #1
 800e784:	d0e6      	beq.n	800e754 <_printf_common+0xa4>
 800e786:	3601      	adds	r6, #1
 800e788:	e7d9      	b.n	800e73e <_printf_common+0x8e>
	...

0800e78c <_printf_i>:
 800e78c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e790:	7e0f      	ldrb	r7, [r1, #24]
 800e792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e794:	2f78      	cmp	r7, #120	@ 0x78
 800e796:	4691      	mov	r9, r2
 800e798:	4680      	mov	r8, r0
 800e79a:	460c      	mov	r4, r1
 800e79c:	469a      	mov	sl, r3
 800e79e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e7a2:	d807      	bhi.n	800e7b4 <_printf_i+0x28>
 800e7a4:	2f62      	cmp	r7, #98	@ 0x62
 800e7a6:	d80a      	bhi.n	800e7be <_printf_i+0x32>
 800e7a8:	2f00      	cmp	r7, #0
 800e7aa:	f000 80d1 	beq.w	800e950 <_printf_i+0x1c4>
 800e7ae:	2f58      	cmp	r7, #88	@ 0x58
 800e7b0:	f000 80b8 	beq.w	800e924 <_printf_i+0x198>
 800e7b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e7bc:	e03a      	b.n	800e834 <_printf_i+0xa8>
 800e7be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e7c2:	2b15      	cmp	r3, #21
 800e7c4:	d8f6      	bhi.n	800e7b4 <_printf_i+0x28>
 800e7c6:	a101      	add	r1, pc, #4	@ (adr r1, 800e7cc <_printf_i+0x40>)
 800e7c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7cc:	0800e825 	.word	0x0800e825
 800e7d0:	0800e839 	.word	0x0800e839
 800e7d4:	0800e7b5 	.word	0x0800e7b5
 800e7d8:	0800e7b5 	.word	0x0800e7b5
 800e7dc:	0800e7b5 	.word	0x0800e7b5
 800e7e0:	0800e7b5 	.word	0x0800e7b5
 800e7e4:	0800e839 	.word	0x0800e839
 800e7e8:	0800e7b5 	.word	0x0800e7b5
 800e7ec:	0800e7b5 	.word	0x0800e7b5
 800e7f0:	0800e7b5 	.word	0x0800e7b5
 800e7f4:	0800e7b5 	.word	0x0800e7b5
 800e7f8:	0800e937 	.word	0x0800e937
 800e7fc:	0800e863 	.word	0x0800e863
 800e800:	0800e8f1 	.word	0x0800e8f1
 800e804:	0800e7b5 	.word	0x0800e7b5
 800e808:	0800e7b5 	.word	0x0800e7b5
 800e80c:	0800e959 	.word	0x0800e959
 800e810:	0800e7b5 	.word	0x0800e7b5
 800e814:	0800e863 	.word	0x0800e863
 800e818:	0800e7b5 	.word	0x0800e7b5
 800e81c:	0800e7b5 	.word	0x0800e7b5
 800e820:	0800e8f9 	.word	0x0800e8f9
 800e824:	6833      	ldr	r3, [r6, #0]
 800e826:	1d1a      	adds	r2, r3, #4
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	6032      	str	r2, [r6, #0]
 800e82c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e834:	2301      	movs	r3, #1
 800e836:	e09c      	b.n	800e972 <_printf_i+0x1e6>
 800e838:	6833      	ldr	r3, [r6, #0]
 800e83a:	6820      	ldr	r0, [r4, #0]
 800e83c:	1d19      	adds	r1, r3, #4
 800e83e:	6031      	str	r1, [r6, #0]
 800e840:	0606      	lsls	r6, r0, #24
 800e842:	d501      	bpl.n	800e848 <_printf_i+0xbc>
 800e844:	681d      	ldr	r5, [r3, #0]
 800e846:	e003      	b.n	800e850 <_printf_i+0xc4>
 800e848:	0645      	lsls	r5, r0, #25
 800e84a:	d5fb      	bpl.n	800e844 <_printf_i+0xb8>
 800e84c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e850:	2d00      	cmp	r5, #0
 800e852:	da03      	bge.n	800e85c <_printf_i+0xd0>
 800e854:	232d      	movs	r3, #45	@ 0x2d
 800e856:	426d      	negs	r5, r5
 800e858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e85c:	4858      	ldr	r0, [pc, #352]	@ (800e9c0 <_printf_i+0x234>)
 800e85e:	230a      	movs	r3, #10
 800e860:	e011      	b.n	800e886 <_printf_i+0xfa>
 800e862:	6821      	ldr	r1, [r4, #0]
 800e864:	6833      	ldr	r3, [r6, #0]
 800e866:	0608      	lsls	r0, r1, #24
 800e868:	f853 5b04 	ldr.w	r5, [r3], #4
 800e86c:	d402      	bmi.n	800e874 <_printf_i+0xe8>
 800e86e:	0649      	lsls	r1, r1, #25
 800e870:	bf48      	it	mi
 800e872:	b2ad      	uxthmi	r5, r5
 800e874:	2f6f      	cmp	r7, #111	@ 0x6f
 800e876:	4852      	ldr	r0, [pc, #328]	@ (800e9c0 <_printf_i+0x234>)
 800e878:	6033      	str	r3, [r6, #0]
 800e87a:	bf14      	ite	ne
 800e87c:	230a      	movne	r3, #10
 800e87e:	2308      	moveq	r3, #8
 800e880:	2100      	movs	r1, #0
 800e882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e886:	6866      	ldr	r6, [r4, #4]
 800e888:	60a6      	str	r6, [r4, #8]
 800e88a:	2e00      	cmp	r6, #0
 800e88c:	db05      	blt.n	800e89a <_printf_i+0x10e>
 800e88e:	6821      	ldr	r1, [r4, #0]
 800e890:	432e      	orrs	r6, r5
 800e892:	f021 0104 	bic.w	r1, r1, #4
 800e896:	6021      	str	r1, [r4, #0]
 800e898:	d04b      	beq.n	800e932 <_printf_i+0x1a6>
 800e89a:	4616      	mov	r6, r2
 800e89c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e8a0:	fb03 5711 	mls	r7, r3, r1, r5
 800e8a4:	5dc7      	ldrb	r7, [r0, r7]
 800e8a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e8aa:	462f      	mov	r7, r5
 800e8ac:	42bb      	cmp	r3, r7
 800e8ae:	460d      	mov	r5, r1
 800e8b0:	d9f4      	bls.n	800e89c <_printf_i+0x110>
 800e8b2:	2b08      	cmp	r3, #8
 800e8b4:	d10b      	bne.n	800e8ce <_printf_i+0x142>
 800e8b6:	6823      	ldr	r3, [r4, #0]
 800e8b8:	07df      	lsls	r7, r3, #31
 800e8ba:	d508      	bpl.n	800e8ce <_printf_i+0x142>
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	6861      	ldr	r1, [r4, #4]
 800e8c0:	4299      	cmp	r1, r3
 800e8c2:	bfde      	ittt	le
 800e8c4:	2330      	movle	r3, #48	@ 0x30
 800e8c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e8ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e8ce:	1b92      	subs	r2, r2, r6
 800e8d0:	6122      	str	r2, [r4, #16]
 800e8d2:	f8cd a000 	str.w	sl, [sp]
 800e8d6:	464b      	mov	r3, r9
 800e8d8:	aa03      	add	r2, sp, #12
 800e8da:	4621      	mov	r1, r4
 800e8dc:	4640      	mov	r0, r8
 800e8de:	f7ff fee7 	bl	800e6b0 <_printf_common>
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	d14a      	bne.n	800e97c <_printf_i+0x1f0>
 800e8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ea:	b004      	add	sp, #16
 800e8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8f0:	6823      	ldr	r3, [r4, #0]
 800e8f2:	f043 0320 	orr.w	r3, r3, #32
 800e8f6:	6023      	str	r3, [r4, #0]
 800e8f8:	4832      	ldr	r0, [pc, #200]	@ (800e9c4 <_printf_i+0x238>)
 800e8fa:	2778      	movs	r7, #120	@ 0x78
 800e8fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e900:	6823      	ldr	r3, [r4, #0]
 800e902:	6831      	ldr	r1, [r6, #0]
 800e904:	061f      	lsls	r7, r3, #24
 800e906:	f851 5b04 	ldr.w	r5, [r1], #4
 800e90a:	d402      	bmi.n	800e912 <_printf_i+0x186>
 800e90c:	065f      	lsls	r7, r3, #25
 800e90e:	bf48      	it	mi
 800e910:	b2ad      	uxthmi	r5, r5
 800e912:	6031      	str	r1, [r6, #0]
 800e914:	07d9      	lsls	r1, r3, #31
 800e916:	bf44      	itt	mi
 800e918:	f043 0320 	orrmi.w	r3, r3, #32
 800e91c:	6023      	strmi	r3, [r4, #0]
 800e91e:	b11d      	cbz	r5, 800e928 <_printf_i+0x19c>
 800e920:	2310      	movs	r3, #16
 800e922:	e7ad      	b.n	800e880 <_printf_i+0xf4>
 800e924:	4826      	ldr	r0, [pc, #152]	@ (800e9c0 <_printf_i+0x234>)
 800e926:	e7e9      	b.n	800e8fc <_printf_i+0x170>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	f023 0320 	bic.w	r3, r3, #32
 800e92e:	6023      	str	r3, [r4, #0]
 800e930:	e7f6      	b.n	800e920 <_printf_i+0x194>
 800e932:	4616      	mov	r6, r2
 800e934:	e7bd      	b.n	800e8b2 <_printf_i+0x126>
 800e936:	6833      	ldr	r3, [r6, #0]
 800e938:	6825      	ldr	r5, [r4, #0]
 800e93a:	6961      	ldr	r1, [r4, #20]
 800e93c:	1d18      	adds	r0, r3, #4
 800e93e:	6030      	str	r0, [r6, #0]
 800e940:	062e      	lsls	r6, r5, #24
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	d501      	bpl.n	800e94a <_printf_i+0x1be>
 800e946:	6019      	str	r1, [r3, #0]
 800e948:	e002      	b.n	800e950 <_printf_i+0x1c4>
 800e94a:	0668      	lsls	r0, r5, #25
 800e94c:	d5fb      	bpl.n	800e946 <_printf_i+0x1ba>
 800e94e:	8019      	strh	r1, [r3, #0]
 800e950:	2300      	movs	r3, #0
 800e952:	6123      	str	r3, [r4, #16]
 800e954:	4616      	mov	r6, r2
 800e956:	e7bc      	b.n	800e8d2 <_printf_i+0x146>
 800e958:	6833      	ldr	r3, [r6, #0]
 800e95a:	1d1a      	adds	r2, r3, #4
 800e95c:	6032      	str	r2, [r6, #0]
 800e95e:	681e      	ldr	r6, [r3, #0]
 800e960:	6862      	ldr	r2, [r4, #4]
 800e962:	2100      	movs	r1, #0
 800e964:	4630      	mov	r0, r6
 800e966:	f7f1 fc33 	bl	80001d0 <memchr>
 800e96a:	b108      	cbz	r0, 800e970 <_printf_i+0x1e4>
 800e96c:	1b80      	subs	r0, r0, r6
 800e96e:	6060      	str	r0, [r4, #4]
 800e970:	6863      	ldr	r3, [r4, #4]
 800e972:	6123      	str	r3, [r4, #16]
 800e974:	2300      	movs	r3, #0
 800e976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e97a:	e7aa      	b.n	800e8d2 <_printf_i+0x146>
 800e97c:	6923      	ldr	r3, [r4, #16]
 800e97e:	4632      	mov	r2, r6
 800e980:	4649      	mov	r1, r9
 800e982:	4640      	mov	r0, r8
 800e984:	47d0      	blx	sl
 800e986:	3001      	adds	r0, #1
 800e988:	d0ad      	beq.n	800e8e6 <_printf_i+0x15a>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	079b      	lsls	r3, r3, #30
 800e98e:	d413      	bmi.n	800e9b8 <_printf_i+0x22c>
 800e990:	68e0      	ldr	r0, [r4, #12]
 800e992:	9b03      	ldr	r3, [sp, #12]
 800e994:	4298      	cmp	r0, r3
 800e996:	bfb8      	it	lt
 800e998:	4618      	movlt	r0, r3
 800e99a:	e7a6      	b.n	800e8ea <_printf_i+0x15e>
 800e99c:	2301      	movs	r3, #1
 800e99e:	4632      	mov	r2, r6
 800e9a0:	4649      	mov	r1, r9
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	47d0      	blx	sl
 800e9a6:	3001      	adds	r0, #1
 800e9a8:	d09d      	beq.n	800e8e6 <_printf_i+0x15a>
 800e9aa:	3501      	adds	r5, #1
 800e9ac:	68e3      	ldr	r3, [r4, #12]
 800e9ae:	9903      	ldr	r1, [sp, #12]
 800e9b0:	1a5b      	subs	r3, r3, r1
 800e9b2:	42ab      	cmp	r3, r5
 800e9b4:	dcf2      	bgt.n	800e99c <_printf_i+0x210>
 800e9b6:	e7eb      	b.n	800e990 <_printf_i+0x204>
 800e9b8:	2500      	movs	r5, #0
 800e9ba:	f104 0619 	add.w	r6, r4, #25
 800e9be:	e7f5      	b.n	800e9ac <_printf_i+0x220>
 800e9c0:	08039c8d 	.word	0x08039c8d
 800e9c4:	08039c9e 	.word	0x08039c9e

0800e9c8 <__sflush_r>:
 800e9c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d0:	0716      	lsls	r6, r2, #28
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	460c      	mov	r4, r1
 800e9d6:	d454      	bmi.n	800ea82 <__sflush_r+0xba>
 800e9d8:	684b      	ldr	r3, [r1, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	dc02      	bgt.n	800e9e4 <__sflush_r+0x1c>
 800e9de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	dd48      	ble.n	800ea76 <__sflush_r+0xae>
 800e9e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9e6:	2e00      	cmp	r6, #0
 800e9e8:	d045      	beq.n	800ea76 <__sflush_r+0xae>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9f0:	682f      	ldr	r7, [r5, #0]
 800e9f2:	6a21      	ldr	r1, [r4, #32]
 800e9f4:	602b      	str	r3, [r5, #0]
 800e9f6:	d030      	beq.n	800ea5a <__sflush_r+0x92>
 800e9f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	0759      	lsls	r1, r3, #29
 800e9fe:	d505      	bpl.n	800ea0c <__sflush_r+0x44>
 800ea00:	6863      	ldr	r3, [r4, #4]
 800ea02:	1ad2      	subs	r2, r2, r3
 800ea04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea06:	b10b      	cbz	r3, 800ea0c <__sflush_r+0x44>
 800ea08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea0a:	1ad2      	subs	r2, r2, r3
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea10:	6a21      	ldr	r1, [r4, #32]
 800ea12:	4628      	mov	r0, r5
 800ea14:	47b0      	blx	r6
 800ea16:	1c43      	adds	r3, r0, #1
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	d106      	bne.n	800ea2a <__sflush_r+0x62>
 800ea1c:	6829      	ldr	r1, [r5, #0]
 800ea1e:	291d      	cmp	r1, #29
 800ea20:	d82b      	bhi.n	800ea7a <__sflush_r+0xb2>
 800ea22:	4a2a      	ldr	r2, [pc, #168]	@ (800eacc <__sflush_r+0x104>)
 800ea24:	40ca      	lsrs	r2, r1
 800ea26:	07d6      	lsls	r6, r2, #31
 800ea28:	d527      	bpl.n	800ea7a <__sflush_r+0xb2>
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	6062      	str	r2, [r4, #4]
 800ea2e:	04d9      	lsls	r1, r3, #19
 800ea30:	6922      	ldr	r2, [r4, #16]
 800ea32:	6022      	str	r2, [r4, #0]
 800ea34:	d504      	bpl.n	800ea40 <__sflush_r+0x78>
 800ea36:	1c42      	adds	r2, r0, #1
 800ea38:	d101      	bne.n	800ea3e <__sflush_r+0x76>
 800ea3a:	682b      	ldr	r3, [r5, #0]
 800ea3c:	b903      	cbnz	r3, 800ea40 <__sflush_r+0x78>
 800ea3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea42:	602f      	str	r7, [r5, #0]
 800ea44:	b1b9      	cbz	r1, 800ea76 <__sflush_r+0xae>
 800ea46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea4a:	4299      	cmp	r1, r3
 800ea4c:	d002      	beq.n	800ea54 <__sflush_r+0x8c>
 800ea4e:	4628      	mov	r0, r5
 800ea50:	f7ff fbf4 	bl	800e23c <_free_r>
 800ea54:	2300      	movs	r3, #0
 800ea56:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea58:	e00d      	b.n	800ea76 <__sflush_r+0xae>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b0      	blx	r6
 800ea60:	4602      	mov	r2, r0
 800ea62:	1c50      	adds	r0, r2, #1
 800ea64:	d1c9      	bne.n	800e9fa <__sflush_r+0x32>
 800ea66:	682b      	ldr	r3, [r5, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0c6      	beq.n	800e9fa <__sflush_r+0x32>
 800ea6c:	2b1d      	cmp	r3, #29
 800ea6e:	d001      	beq.n	800ea74 <__sflush_r+0xac>
 800ea70:	2b16      	cmp	r3, #22
 800ea72:	d11e      	bne.n	800eab2 <__sflush_r+0xea>
 800ea74:	602f      	str	r7, [r5, #0]
 800ea76:	2000      	movs	r0, #0
 800ea78:	e022      	b.n	800eac0 <__sflush_r+0xf8>
 800ea7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea7e:	b21b      	sxth	r3, r3
 800ea80:	e01b      	b.n	800eaba <__sflush_r+0xf2>
 800ea82:	690f      	ldr	r7, [r1, #16]
 800ea84:	2f00      	cmp	r7, #0
 800ea86:	d0f6      	beq.n	800ea76 <__sflush_r+0xae>
 800ea88:	0793      	lsls	r3, r2, #30
 800ea8a:	680e      	ldr	r6, [r1, #0]
 800ea8c:	bf08      	it	eq
 800ea8e:	694b      	ldreq	r3, [r1, #20]
 800ea90:	600f      	str	r7, [r1, #0]
 800ea92:	bf18      	it	ne
 800ea94:	2300      	movne	r3, #0
 800ea96:	eba6 0807 	sub.w	r8, r6, r7
 800ea9a:	608b      	str	r3, [r1, #8]
 800ea9c:	f1b8 0f00 	cmp.w	r8, #0
 800eaa0:	dde9      	ble.n	800ea76 <__sflush_r+0xae>
 800eaa2:	6a21      	ldr	r1, [r4, #32]
 800eaa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eaa6:	4643      	mov	r3, r8
 800eaa8:	463a      	mov	r2, r7
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b0      	blx	r6
 800eaae:	2800      	cmp	r0, #0
 800eab0:	dc08      	bgt.n	800eac4 <__sflush_r+0xfc>
 800eab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eaba:	81a3      	strh	r3, [r4, #12]
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295
 800eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac4:	4407      	add	r7, r0
 800eac6:	eba8 0800 	sub.w	r8, r8, r0
 800eaca:	e7e7      	b.n	800ea9c <__sflush_r+0xd4>
 800eacc:	20400001 	.word	0x20400001

0800ead0 <_fflush_r>:
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	690b      	ldr	r3, [r1, #16]
 800ead4:	4605      	mov	r5, r0
 800ead6:	460c      	mov	r4, r1
 800ead8:	b913      	cbnz	r3, 800eae0 <_fflush_r+0x10>
 800eada:	2500      	movs	r5, #0
 800eadc:	4628      	mov	r0, r5
 800eade:	bd38      	pop	{r3, r4, r5, pc}
 800eae0:	b118      	cbz	r0, 800eaea <_fflush_r+0x1a>
 800eae2:	6a03      	ldr	r3, [r0, #32]
 800eae4:	b90b      	cbnz	r3, 800eaea <_fflush_r+0x1a>
 800eae6:	f7ff f943 	bl	800dd70 <__sinit>
 800eaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d0f3      	beq.n	800eada <_fflush_r+0xa>
 800eaf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eaf4:	07d0      	lsls	r0, r2, #31
 800eaf6:	d404      	bmi.n	800eb02 <_fflush_r+0x32>
 800eaf8:	0599      	lsls	r1, r3, #22
 800eafa:	d402      	bmi.n	800eb02 <_fflush_r+0x32>
 800eafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eafe:	f7ff fb8c 	bl	800e21a <__retarget_lock_acquire_recursive>
 800eb02:	4628      	mov	r0, r5
 800eb04:	4621      	mov	r1, r4
 800eb06:	f7ff ff5f 	bl	800e9c8 <__sflush_r>
 800eb0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb0c:	07da      	lsls	r2, r3, #31
 800eb0e:	4605      	mov	r5, r0
 800eb10:	d4e4      	bmi.n	800eadc <_fflush_r+0xc>
 800eb12:	89a3      	ldrh	r3, [r4, #12]
 800eb14:	059b      	lsls	r3, r3, #22
 800eb16:	d4e1      	bmi.n	800eadc <_fflush_r+0xc>
 800eb18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb1a:	f7ff fb7f 	bl	800e21c <__retarget_lock_release_recursive>
 800eb1e:	e7dd      	b.n	800eadc <_fflush_r+0xc>

0800eb20 <__swhatbuf_r>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	460c      	mov	r4, r1
 800eb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb28:	2900      	cmp	r1, #0
 800eb2a:	b096      	sub	sp, #88	@ 0x58
 800eb2c:	4615      	mov	r5, r2
 800eb2e:	461e      	mov	r6, r3
 800eb30:	da0d      	bge.n	800eb4e <__swhatbuf_r+0x2e>
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb38:	f04f 0100 	mov.w	r1, #0
 800eb3c:	bf14      	ite	ne
 800eb3e:	2340      	movne	r3, #64	@ 0x40
 800eb40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb44:	2000      	movs	r0, #0
 800eb46:	6031      	str	r1, [r6, #0]
 800eb48:	602b      	str	r3, [r5, #0]
 800eb4a:	b016      	add	sp, #88	@ 0x58
 800eb4c:	bd70      	pop	{r4, r5, r6, pc}
 800eb4e:	466a      	mov	r2, sp
 800eb50:	f000 f848 	bl	800ebe4 <_fstat_r>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	dbec      	blt.n	800eb32 <__swhatbuf_r+0x12>
 800eb58:	9901      	ldr	r1, [sp, #4]
 800eb5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eb62:	4259      	negs	r1, r3
 800eb64:	4159      	adcs	r1, r3
 800eb66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb6a:	e7eb      	b.n	800eb44 <__swhatbuf_r+0x24>

0800eb6c <__smakebuf_r>:
 800eb6c:	898b      	ldrh	r3, [r1, #12]
 800eb6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb70:	079d      	lsls	r5, r3, #30
 800eb72:	4606      	mov	r6, r0
 800eb74:	460c      	mov	r4, r1
 800eb76:	d507      	bpl.n	800eb88 <__smakebuf_r+0x1c>
 800eb78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb7c:	6023      	str	r3, [r4, #0]
 800eb7e:	6123      	str	r3, [r4, #16]
 800eb80:	2301      	movs	r3, #1
 800eb82:	6163      	str	r3, [r4, #20]
 800eb84:	b003      	add	sp, #12
 800eb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb88:	ab01      	add	r3, sp, #4
 800eb8a:	466a      	mov	r2, sp
 800eb8c:	f7ff ffc8 	bl	800eb20 <__swhatbuf_r>
 800eb90:	9f00      	ldr	r7, [sp, #0]
 800eb92:	4605      	mov	r5, r0
 800eb94:	4639      	mov	r1, r7
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7ff fbbc 	bl	800e314 <_malloc_r>
 800eb9c:	b948      	cbnz	r0, 800ebb2 <__smakebuf_r+0x46>
 800eb9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eba2:	059a      	lsls	r2, r3, #22
 800eba4:	d4ee      	bmi.n	800eb84 <__smakebuf_r+0x18>
 800eba6:	f023 0303 	bic.w	r3, r3, #3
 800ebaa:	f043 0302 	orr.w	r3, r3, #2
 800ebae:	81a3      	strh	r3, [r4, #12]
 800ebb0:	e7e2      	b.n	800eb78 <__smakebuf_r+0xc>
 800ebb2:	89a3      	ldrh	r3, [r4, #12]
 800ebb4:	6020      	str	r0, [r4, #0]
 800ebb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	9b01      	ldr	r3, [sp, #4]
 800ebbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ebc2:	b15b      	cbz	r3, 800ebdc <__smakebuf_r+0x70>
 800ebc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f000 f81d 	bl	800ec08 <_isatty_r>
 800ebce:	b128      	cbz	r0, 800ebdc <__smakebuf_r+0x70>
 800ebd0:	89a3      	ldrh	r3, [r4, #12]
 800ebd2:	f023 0303 	bic.w	r3, r3, #3
 800ebd6:	f043 0301 	orr.w	r3, r3, #1
 800ebda:	81a3      	strh	r3, [r4, #12]
 800ebdc:	89a3      	ldrh	r3, [r4, #12]
 800ebde:	431d      	orrs	r5, r3
 800ebe0:	81a5      	strh	r5, [r4, #12]
 800ebe2:	e7cf      	b.n	800eb84 <__smakebuf_r+0x18>

0800ebe4 <_fstat_r>:
 800ebe4:	b538      	push	{r3, r4, r5, lr}
 800ebe6:	4d07      	ldr	r5, [pc, #28]	@ (800ec04 <_fstat_r+0x20>)
 800ebe8:	2300      	movs	r3, #0
 800ebea:	4604      	mov	r4, r0
 800ebec:	4608      	mov	r0, r1
 800ebee:	4611      	mov	r1, r2
 800ebf0:	602b      	str	r3, [r5, #0]
 800ebf2:	f7f2 fb2e 	bl	8001252 <_fstat>
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	d102      	bne.n	800ec00 <_fstat_r+0x1c>
 800ebfa:	682b      	ldr	r3, [r5, #0]
 800ebfc:	b103      	cbz	r3, 800ec00 <_fstat_r+0x1c>
 800ebfe:	6023      	str	r3, [r4, #0]
 800ec00:	bd38      	pop	{r3, r4, r5, pc}
 800ec02:	bf00      	nop
 800ec04:	20005ae4 	.word	0x20005ae4

0800ec08 <_isatty_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d06      	ldr	r5, [pc, #24]	@ (800ec24 <_isatty_r+0x1c>)
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	4604      	mov	r4, r0
 800ec10:	4608      	mov	r0, r1
 800ec12:	602b      	str	r3, [r5, #0]
 800ec14:	f7f2 fb2d 	bl	8001272 <_isatty>
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	d102      	bne.n	800ec22 <_isatty_r+0x1a>
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	b103      	cbz	r3, 800ec22 <_isatty_r+0x1a>
 800ec20:	6023      	str	r3, [r4, #0]
 800ec22:	bd38      	pop	{r3, r4, r5, pc}
 800ec24:	20005ae4 	.word	0x20005ae4

0800ec28 <_sbrk_r>:
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	4d06      	ldr	r5, [pc, #24]	@ (800ec44 <_sbrk_r+0x1c>)
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	4604      	mov	r4, r0
 800ec30:	4608      	mov	r0, r1
 800ec32:	602b      	str	r3, [r5, #0]
 800ec34:	f7f2 fb36 	bl	80012a4 <_sbrk>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	d102      	bne.n	800ec42 <_sbrk_r+0x1a>
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	b103      	cbz	r3, 800ec42 <_sbrk_r+0x1a>
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
 800ec44:	20005ae4 	.word	0x20005ae4

0800ec48 <_init>:
 800ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4a:	bf00      	nop
 800ec4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4e:	bc08      	pop	{r3}
 800ec50:	469e      	mov	lr, r3
 800ec52:	4770      	bx	lr

0800ec54 <_fini>:
 800ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec56:	bf00      	nop
 800ec58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec5a:	bc08      	pop	{r3}
 800ec5c:	469e      	mov	lr, r3
 800ec5e:	4770      	bx	lr
