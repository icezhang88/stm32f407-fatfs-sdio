
407vet6sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b0a8  0800b130  0800b130  0000c130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080361d8  080361d8  00038070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080361d8  080361d8  000371d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080361e0  080361e0  00038070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080361e0  080361e0  000371e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080361e4  080361e4  000371e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080361e8  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00038070  2**0
                  CONTENTS
 10 .bss          00001078  20000070  20000070  00038070  2**2
                  ALLOC
 11 ._user_heap_stack 0000a000  200010e8  200010e8  00038070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00038070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158be  00000000  00000000  000380a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd4  00000000  00000000  0004d95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00051738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d64  00000000  00000000  000528f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259d5  00000000  00000000  0005365c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b995  00000000  00000000  00079031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce45f  00000000  00000000  000949c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162e25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d98  00000000  00000000  00162e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00167c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b118 	.word	0x0800b118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800b118 	.word	0x0800b118

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <MX_DMA_Init+0x78>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_DMA_Init+0x78>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_DMA_Init+0x78>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	200f      	movs	r0, #15
 80005e0:	f001 f891 	bl	8001706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e4:	200f      	movs	r0, #15
 80005e6:	f001 f8aa 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 4, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2104      	movs	r1, #4
 80005ee:	203b      	movs	r0, #59	@ 0x3b
 80005f0:	f001 f889 	bl	8001706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f4:	203b      	movs	r0, #59	@ 0x3b
 80005f6:	f001 f8a2 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 4, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2104      	movs	r1, #4
 80005fe:	2045      	movs	r0, #69	@ 0x45
 8000600:	f001 f881 	bl	8001706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000604:	2045      	movs	r0, #69	@ 0x45
 8000606:	f001 f89a 	bl	800173e <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <initFileManager>:

#define BUFFER_SIZE 2048



uint8_t initFileManager() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

	FRESULT retSD = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	4911      	ldr	r1, [pc, #68]	@ (8000668 <initFileManager+0x50>)
 8000622:	4812      	ldr	r0, [pc, #72]	@ (800066c <initFileManager+0x54>)
 8000624:	f008 fc58 	bl	8008ed8 <f_mount>
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]
	printf("%u\r\n", retSD);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4619      	mov	r1, r3
 8000630:	480f      	ldr	r0, [pc, #60]	@ (8000670 <initFileManager+0x58>)
 8000632:	f009 fe97 	bl	800a364 <iprintf>
	printf("Compilation Date: %s %s\n", __DATE__, __TIME__);
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <initFileManager+0x5c>)
 8000638:	490f      	ldr	r1, [pc, #60]	@ (8000678 <initFileManager+0x60>)
 800063a:	4810      	ldr	r0, [pc, #64]	@ (800067c <initFileManager+0x64>)
 800063c:	f009 fe92 	bl	800a364 <iprintf>
	// mount SD card
	//   int retSD = f_mount(&SDFatFS, (TCHAR const *)SDPath, 1);
	if (retSD == FR_OK) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d106      	bne.n	8000654 <initFileManager+0x3c>

		//
		SDCard_ShowInfo();
 8000646:	f000 f895 	bl	8000774 <SDCard_ShowInfo>
		ListFiles("/");
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <initFileManager+0x68>)
 800064c:	f000 f81c 	bl	8000688 <ListFiles>
		return 1;
 8000650:	2301      	movs	r3, #1
 8000652:	e005      	b.n	8000660 <initFileManager+0x48>

	} else {
		printf("!! SDcard mount filesystem error。(%d)\r\n", retSD);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <initFileManager+0x6c>)
 800065a:	f009 fe83 	bl	800a364 <iprintf>
		return 0;
 800065e:	2300      	movs	r3, #0
	}
	// 不带fatfs调试函数

}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000d28 	.word	0x20000d28
 800066c:	20000d2c 	.word	0x20000d2c
 8000670:	0800b130 	.word	0x0800b130
 8000674:	0800b138 	.word	0x0800b138
 8000678:	0800b144 	.word	0x0800b144
 800067c:	0800b150 	.word	0x0800b150
 8000680:	0800b16c 	.word	0x0800b16c
 8000684:	0800b170 	.word	0x0800b170

08000688 <ListFiles>:
		}
	}
	printf("\r\n"); // 最后补一个换行
}

void ListFiles(const TCHAR *path) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b0d6      	sub	sp, #344	@ 0x158
 800068c:	af00      	add	r7, sp, #0
 800068e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000692:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000696:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;               // 目录对象
	FILINFO fno;           // 文件信息结构体

	// 打开目录
	res = f_opendir(&dir, path);
 8000698:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800069c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006a0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	4610      	mov	r0, r2
 80006a8:	f009 faff 	bl	8009caa <f_opendir>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	if (res != FR_OK) {
 80006b2:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <ListFiles+0x40>
		printf("open dir failed err: %d\r\n", res);
 80006ba:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006be:	4619      	mov	r1, r3
 80006c0:	4826      	ldr	r0, [pc, #152]	@ (800075c <ListFiles+0xd4>)
 80006c2:	f009 fe4f 	bl	800a364 <iprintf>
 80006c6:	e045      	b.n	8000754 <ListFiles+0xcc>
		return;
	}

	printf("\r\ndir %s file list : \r\n", path);
 80006c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006cc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	4823      	ldr	r0, [pc, #140]	@ (8000760 <ListFiles+0xd8>)
 80006d4:	f009 fe46 	bl	800a364 <iprintf>
	printf("----------------------------------------\r\n");
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <ListFiles+0xdc>)
 80006da:	f009 feab 	bl	800a434 <puts>

	// 循环读取目录项（f_readdir返回FR_OK且fno.fname不为空时继续）
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 80006de:	e01c      	b.n	800071a <ListFiles+0x92>
		// 判断是否为子目录（文件名以'/'结尾，或fno.fattrib包含AM_DIR属性）
		if (fno.fattrib & AM_DIR) {
 80006e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80006e8:	7a1b      	ldrb	r3, [r3, #8]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <ListFiles+0x7a>
			printf(" [dir]  %s\r\n", fno.fname);  // 子目录
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	3316      	adds	r3, #22
 80006f8:	4619      	mov	r1, r3
 80006fa:	481b      	ldr	r0, [pc, #108]	@ (8000768 <ListFiles+0xe0>)
 80006fc:	f009 fe32 	bl	800a364 <iprintf>
 8000700:	e00b      	b.n	800071a <ListFiles+0x92>
		} else {
			// 普通文件：输出文件名和大小（单位：字节）
			printf(" [file]  %s  (size: %ld bytes)\r\n", fno.fname, fno.fsize);
 8000702:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000706:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	3316      	adds	r3, #22
 8000712:	4619      	mov	r1, r3
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <ListFiles+0xe4>)
 8000716:	f009 fe25 	bl	800a364 <iprintf>
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f009 fba3 	bl	8009e70 <f_readdir>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <ListFiles+0xb6>
 8000730:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000734:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000738:	7d9b      	ldrb	r3, [r3, #22]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1d0      	bne.n	80006e0 <ListFiles+0x58>
		}
	}

	printf("----------------------------------------\r\n");
 800073e:	4809      	ldr	r0, [pc, #36]	@ (8000764 <ListFiles+0xdc>)
 8000740:	f009 fe78 	bl	800a434 <puts>
	printf("dir search success\r\n");
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <ListFiles+0xe8>)
 8000746:	f009 fe75 	bl	800a434 <puts>

	// 关闭目录
	f_closedir(&dir);
 800074a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800074e:	4618      	mov	r0, r3
 8000750:	f009 fb68 	bl	8009e24 <f_closedir>
}
 8000754:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	0800b1a8 	.word	0x0800b1a8
 8000760:	0800b1c4 	.word	0x0800b1c4
 8000764:	0800b1dc 	.word	0x0800b1dc
 8000768:	0800b208 	.word	0x0800b208
 800076c:	0800b218 	.word	0x0800b218
 8000770:	0800b23c 	.word	0x0800b23c

08000774 <SDCard_ShowInfo>:

void SDCard_ShowInfo(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
	// SD卡信息结构体变量
	HAL_SD_CardInfoTypeDef cardInfo;
	HAL_StatusTypeDef res = HAL_SD_GetCardInfo(&hsd, &cardInfo);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4821      	ldr	r0, [pc, #132]	@ (8000804 <SDCard_ShowInfo+0x90>)
 8000780:	f003 fe3a 	bl	80043f8 <HAL_SD_GetCardInfo>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res != HAL_OK) {
 800078a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <SDCard_ShowInfo+0x26>
		printf("HAL_SD_GetCardInfo() error\r\n");
 8000792:	481d      	ldr	r0, [pc, #116]	@ (8000808 <SDCard_ShowInfo+0x94>)
 8000794:	f009 fe4e 	bl	800a434 <puts>
 8000798:	e030      	b.n	80007fc <SDCard_ShowInfo+0x88>
		return;
	}
	printf("\r\n*** HAL_SD_GetCardInfo() info ***\r\n");
 800079a:	481c      	ldr	r0, [pc, #112]	@ (800080c <SDCard_ShowInfo+0x98>)
 800079c:	f009 fe4a 	bl	800a434 <puts>
	printf("Card Type= %ld\r\n", cardInfo.CardType);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	@ (8000810 <SDCard_ShowInfo+0x9c>)
 80007a6:	f009 fddd 	bl	800a364 <iprintf>
	printf("Card Version= %ld\r\n", cardInfo.CardVersion);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4819      	ldr	r0, [pc, #100]	@ (8000814 <SDCard_ShowInfo+0xa0>)
 80007b0:	f009 fdd8 	bl	800a364 <iprintf>
	printf("Card Class= %ld\r\n", cardInfo.Class);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4817      	ldr	r0, [pc, #92]	@ (8000818 <SDCard_ShowInfo+0xa4>)
 80007ba:	f009 fdd3 	bl	800a364 <iprintf>
	printf("Relative Card Address= %ld\r\n", cardInfo.RelCardAdd);
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4816      	ldr	r0, [pc, #88]	@ (800081c <SDCard_ShowInfo+0xa8>)
 80007c4:	f009 fdce 	bl	800a364 <iprintf>
	printf("Block Count= %ld\r\n", cardInfo.BlockNbr);
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	@ (8000820 <SDCard_ShowInfo+0xac>)
 80007ce:	f009 fdc9 	bl	800a364 <iprintf>
	printf("Block Size(Bytes)= %ld\r\n", cardInfo.BlockSize);
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <SDCard_ShowInfo+0xb0>)
 80007d8:	f009 fdc4 	bl	800a364 <iprintf>
	printf("LogiBlockCount= %ld\r\n", cardInfo.LogBlockNbr);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	4619      	mov	r1, r3
 80007e0:	4811      	ldr	r0, [pc, #68]	@ (8000828 <SDCard_ShowInfo+0xb4>)
 80007e2:	f009 fdbf 	bl	800a364 <iprintf>
	printf("LogiBlockSize(Bytes)= %ld\r\n", cardInfo.LogBlockSize);
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <SDCard_ShowInfo+0xb8>)
 80007ec:	f009 fdba 	bl	800a364 <iprintf>
	printf("SD Card Capacity(MB)= %ld\r\n", cardInfo.BlockNbr >> 1 >> 10);
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	0adb      	lsrs	r3, r3, #11
 80007f4:	4619      	mov	r1, r3
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <SDCard_ShowInfo+0xbc>)
 80007f8:	f009 fdb4 	bl	800a364 <iprintf>
}
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000134 	.word	0x20000134
 8000808:	0800b250 	.word	0x0800b250
 800080c:	0800b26c 	.word	0x0800b26c
 8000810:	0800b294 	.word	0x0800b294
 8000814:	0800b2a8 	.word	0x0800b2a8
 8000818:	0800b2bc 	.word	0x0800b2bc
 800081c:	0800b2d0 	.word	0x0800b2d0
 8000820:	0800b2f0 	.word	0x0800b2f0
 8000824:	0800b304 	.word	0x0800b304
 8000828:	0800b320 	.word	0x0800b320
 800082c:	0800b338 	.word	0x0800b338
 8000830:	0800b354 	.word	0x0800b354

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a29      	ldr	r2, [pc, #164]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD15 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 80008d6:	f248 0308 	movw	r3, #32776	@ 0x8008
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_GPIO_Init+0xc8>)
 80008ec:	f001 fae0 	bl	8001eb0 <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020c00 	.word	0x40020c00

08000900 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000906:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <MX_I2S2_Init+0x58>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_I2S2_Init+0x54>)
 800090c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000910:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_I2S2_Init+0x54>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000924:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000926:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800092a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_I2S2_Init+0x54>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_I2S2_Init+0x54>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_I2S2_Init+0x54>)
 8000940:	f001 fc6a 	bl	8002218 <HAL_I2S_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800094a:	f000 f975 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000008c 	.word	0x2000008c
 8000958:	40003800 	.word	0x40003800

0800095c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a4d      	ldr	r2, [pc, #308]	@ (8000abc <HAL_I2S_MspInit+0x160>)
 8000988:	4293      	cmp	r3, r2
 800098a:	f040 8092 	bne.w	8000ab2 <HAL_I2S_MspInit+0x156>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000992:	23c0      	movs	r3, #192	@ 0xc0
 8000994:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fe44 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80009aa:	f000 f945 	bl	8000c38 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b43      	ldr	r3, [pc, #268]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a42      	ldr	r2, [pc, #264]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b40      	ldr	r3, [pc, #256]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b35      	ldr	r3, [pc, #212]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a34      	ldr	r2, [pc, #208]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b32      	ldr	r3, [pc, #200]	@ (8000ac0 <HAL_I2S_MspInit+0x164>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a02:	2308      	movs	r3, #8
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a12:	2305      	movs	r3, #5
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4829      	ldr	r0, [pc, #164]	@ (8000ac4 <HAL_I2S_MspInit+0x168>)
 8000a1e:	f001 fa47 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a34:	2305      	movs	r3, #5
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4822      	ldr	r0, [pc, #136]	@ (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a40:	f001 fa36 	bl	8001eb0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a46:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <HAL_I2S_MspInit+0x174>)
 8000a48:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a52:	2240      	movs	r2, #64	@ 0x40
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a6a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a72:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a86:	4811      	ldr	r0, [pc, #68]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a88:	f000 fe74 	bl	8001774 <HAL_DMA_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_I2S_MspInit+0x13a>
    {
      Error_Handler();
 8000a92:	f000 f8d1 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a0c      	ldr	r2, [pc, #48]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000acc <HAL_I2S_MspInit+0x170>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2105      	movs	r1, #5
 8000aa6:	2024      	movs	r0, #36	@ 0x24
 8000aa8:	f000 fe2d 	bl	8001706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000aac:	2024      	movs	r0, #36	@ 0x24
 8000aae:	f000 fe46 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3738      	adds	r7, #56	@ 0x38
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40003800 	.word	0x40003800
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	200000d4 	.word	0x200000d4
 8000ad0:	40026070 	.word	0x40026070

08000ad4 <__io_putchar>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// WAV文件头部结构


int __io_putchar(int ch) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFFFFFF);
 8000adc:	1d39      	adds	r1, r7, #4
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <__io_putchar+0x20>)
 8000ae6:	f004 fa65 	bl	8004fb4 <HAL_UART_Transmit>
	return ch;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000027c 	.word	0x2000027c

08000af8 <__io_getchar>:

int __io_getchar(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	char rxChar;
	while (HAL_UART_Receive(&huart1, (uint8_t*) &rxChar, 1, 0xFFFFFFFF)
 8000afe:	bf00      	nop
 8000b00:	1df9      	adds	r1, r7, #7
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	2201      	movs	r2, #1
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <__io_getchar+0x28>)
 8000b0a:	f004 fade 	bl	80050ca <HAL_UART_Receive>
 8000b0e:	4603      	mov	r3, r0
			== HAL_TIMEOUT)
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d0f5      	beq.n	8000b00 <__io_getchar+0x8>
		;
	return rxChar;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000027c 	.word	0x2000027c

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 fc7c 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f81a 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f7ff fe80 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b34:	f7ff fd32 	bl	800059c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000b38:	f000 f884 	bl	8000c44 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000b3c:	f000 fad8 	bl	80010f0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000b40:	f005 fbfe 	bl	8006340 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000b44:	f7ff fedc 	bl	8000900 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
	printf("system init success，read play WAV file...\r\n");
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <main+0x3c>)
 8000b4a:	f009 fc73 	bl	800a434 <puts>
	initFileManager();
 8000b4e:	f7ff fd63 	bl	8000618 <initFileManager>
	testRead();
 8000b52:	f000 fb49 	bl	80011e8 <testRead>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// 可以在这里添加其他处理逻辑
		HAL_Delay(1000);
 8000b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5a:	f000 fcd5 	bl	8001508 <HAL_Delay>
 8000b5e:	e7fa      	b.n	8000b56 <main+0x32>
 8000b60:	0800b430 	.word	0x0800b430

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	@ 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2230      	movs	r2, #48	@ 0x30
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f009 fd4e 	bl	800a614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <SystemClock_Config+0xcc>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	4a27      	ldr	r2, [pc, #156]	@ (8000c30 <SystemClock_Config+0xcc>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b98:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <SystemClock_Config+0xcc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <SystemClock_Config+0xd0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <SystemClock_Config+0xd0>)
 8000bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <SystemClock_Config+0xd0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bd8:	23a8      	movs	r3, #168	@ 0xa8
 8000bda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000be0:	2307      	movs	r3, #7
 8000be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 f8c7 	bl	8002d7c <HAL_RCC_OscConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf4:	f000 f820 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2105      	movs	r1, #5
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fb28 	bl	800326c <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c22:	f000 f809 	bl	8000c38 <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3750      	adds	r7, #80	@ 0x50
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <MX_SDIO_SD_Init+0x44>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c66:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c70:	2205      	movs	r2, #5
 8000c72:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <MX_SDIO_SD_Init+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000134 	.word	0x20000134
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a69      	ldr	r2, [pc, #420]	@ (8000e50 <HAL_SD_MspInit+0x1c4>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f040 80cb 	bne.w	8000e46 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	4b67      	ldr	r3, [pc, #412]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb8:	4a66      	ldr	r2, [pc, #408]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc0:	4b64      	ldr	r3, [pc, #400]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b60      	ldr	r3, [pc, #384]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	4a5f      	ldr	r2, [pc, #380]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	4b59      	ldr	r3, [pc, #356]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a58      	ldr	r2, [pc, #352]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b56      	ldr	r3, [pc, #344]	@ (8000e54 <HAL_SD_MspInit+0x1c8>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d04:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000d08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d16:	230c      	movs	r3, #12
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	484d      	ldr	r0, [pc, #308]	@ (8000e58 <HAL_SD_MspInit+0x1cc>)
 8000d22:	f001 f8c5 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d26:	2304      	movs	r3, #4
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d36:	230c      	movs	r3, #12
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4846      	ldr	r0, [pc, #280]	@ (8000e5c <HAL_SD_MspInit+0x1d0>)
 8000d42:	f001 f8b5 	bl	8001eb0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d46:	4b46      	ldr	r3, [pc, #280]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d48:	4a46      	ldr	r2, [pc, #280]	@ (8000e64 <HAL_SD_MspInit+0x1d8>)
 8000d4a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d4c:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d54:	4b42      	ldr	r3, [pc, #264]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b41      	ldr	r3, [pc, #260]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d60:	4b3f      	ldr	r3, [pc, #252]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d66:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d68:	4b3d      	ldr	r3, [pc, #244]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d6e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d70:	4b3b      	ldr	r3, [pc, #236]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d78:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d7e:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d84:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d86:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d88:	2204      	movs	r2, #4
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d8c:	4b34      	ldr	r3, [pc, #208]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d92:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d94:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d9a:	4b31      	ldr	r3, [pc, #196]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000d9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000da0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000da2:	482f      	ldr	r0, [pc, #188]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000da4:	f000 fce6 	bl	8001774 <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8000dae:	f7ff ff43 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a2a      	ldr	r2, [pc, #168]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000db6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000db8:	4a29      	ldr	r2, [pc, #164]	@ (8000e60 <HAL_SD_MspInit+0x1d4>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <HAL_SD_MspInit+0x1e0>)
 8000dc2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000dc4:	4b28      	ldr	r3, [pc, #160]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000dc6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000dce:	2240      	movs	r2, #64	@ 0x40
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000de0:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000de2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000df8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000dfc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000e00:	2204      	movs	r2, #4
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000e06:	2203      	movs	r2, #3
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000e0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e10:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000e14:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e1a:	4813      	ldr	r0, [pc, #76]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000e1c:	f000 fcaa 	bl	8001774 <HAL_DMA_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8000e26:	f7ff ff07 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <HAL_SD_MspInit+0x1dc>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2103      	movs	r1, #3
 8000e3a:	2031      	movs	r0, #49	@ 0x31
 8000e3c:	f000 fc63 	bl	8001706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e40:	2031      	movs	r0, #49	@ 0x31
 8000e42:	f000 fc7c 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012c00 	.word	0x40012c00
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	200001b8 	.word	0x200001b8
 8000e64:	40026458 	.word	0x40026458
 8000e68:	20000218 	.word	0x20000218
 8000e6c:	400264a0 	.word	0x400264a0

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f16:	f000 fad7 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <DMA1_Stream4_IRQHandler+0x10>)
 8000f26:	f000 fd4d 	bl	80019c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000d4 	.word	0x200000d4

08000f34 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <SPI2_IRQHandler+0x10>)
 8000f3a:	f001 fb51 	bl	80025e0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000008c 	.word	0x2000008c

08000f48 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <SDIO_IRQHandler+0x10>)
 8000f4e:	f002 ff1f 	bl	8003d90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000134 	.word	0x20000134

08000f5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <DMA2_Stream3_IRQHandler+0x10>)
 8000f62:	f000 fd2f 	bl	80019c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001b8 	.word	0x200001b8

08000f70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <DMA2_Stream6_IRQHandler+0x10>)
 8000f76:	f000 fd25 	bl	80019c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000218 	.word	0x20000218

08000f84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f96:	f7ff fdaf 	bl	8000af8 <__io_getchar>
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
  }

  return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fd7b 	bl	8000ad4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf1      	blt.n	8000fd0 <_write+0x12>
  }
  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_close>:

int _close(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101e:	605a      	str	r2, [r3, #4]
  return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f009 fb0e 	bl	800a6b0 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20020000 	.word	0x20020000
 80010c0:	00006000 	.word	0x00006000
 80010c4:	20000278 	.word	0x20000278
 80010c8:	200010e8 	.word	0x200010e8

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_USART1_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_USART1_UART_Init+0x4c>)
 8001128:	f003 fef4 	bl	8004f14 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f7ff fd81 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000027c 	.word	0x2000027c
 8001140:	40011000 	.word	0x40011000

08001144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <HAL_UART_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12c      	bne.n	80011c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_UART_MspInit+0x88>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	6453      	str	r3, [r2, #68]	@ 0x44
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_UART_MspInit+0x88>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800119e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b0:	2307      	movs	r3, #7
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_UART_MspInit+0x8c>)
 80011bc:	f000 fe78 	bl	8001eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	@ 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_I2S_TxCpltCallback>:
#include "wavPlayer.h"




void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	//printf("HAL_I2S_TxCpltCallback\r\n");

	// res = f_read(&file, buffer, BUFFER_SIZE, &bytesRead);

	 //HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)buffer, bytesRead / sample_bytes);
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <testRead>:


void testRead() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0


	    // 1. 打开文件
	    res = f_open(&file, filename, FA_READ);
 80011ee:	4b65      	ldr	r3, [pc, #404]	@ (8001384 <testRead+0x19c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	4864      	ldr	r0, [pc, #400]	@ (8001388 <testRead+0x1a0>)
 80011f8:	f007 feb4 	bl	8008f64 <f_open>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b62      	ldr	r3, [pc, #392]	@ (800138c <testRead+0x1a4>)
 8001202:	701a      	strb	r2, [r3, #0]
	    if (res != FR_OK) {
 8001204:	4b61      	ldr	r3, [pc, #388]	@ (800138c <testRead+0x1a4>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <testRead+0x36>
	        printf("open %s failed error code: %d\r\n", filename, res);
 800120c:	4b5d      	ldr	r3, [pc, #372]	@ (8001384 <testRead+0x19c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a5e      	ldr	r2, [pc, #376]	@ (800138c <testRead+0x1a4>)
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	485e      	ldr	r0, [pc, #376]	@ (8001390 <testRead+0x1a8>)
 8001218:	f009 f8a4 	bl	800a364 <iprintf>
	        return;
 800121c:	e0af      	b.n	800137e <testRead+0x196>
	    }
	    printf("sizeof wavHead:%d\r\n",sizeof(wavHeader));
 800121e:	2124      	movs	r1, #36	@ 0x24
 8001220:	485c      	ldr	r0, [pc, #368]	@ (8001394 <testRead+0x1ac>)
 8001222:	f009 f89f 	bl	800a364 <iprintf>
	    // 2. 解析WAV头部（关键：获取采样位数）
	    res = f_read(&file, &wavHeader, sizeof(WavHeader), &bytesRead);
 8001226:	4b5c      	ldr	r3, [pc, #368]	@ (8001398 <testRead+0x1b0>)
 8001228:	2224      	movs	r2, #36	@ 0x24
 800122a:	495c      	ldr	r1, [pc, #368]	@ (800139c <testRead+0x1b4>)
 800122c:	4856      	ldr	r0, [pc, #344]	@ (8001388 <testRead+0x1a0>)
 800122e:	f008 f94c 	bl	80094ca <f_read>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b55      	ldr	r3, [pc, #340]	@ (800138c <testRead+0x1a4>)
 8001238:	701a      	strb	r2, [r3, #0]
	    if (res != FR_OK || bytesRead != sizeof(WavHeader)) {
 800123a:	4b54      	ldr	r3, [pc, #336]	@ (800138c <testRead+0x1a4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d103      	bne.n	800124a <testRead+0x62>
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <testRead+0x1b0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b24      	cmp	r3, #36	@ 0x24
 8001248:	d009      	beq.n	800125e <testRead+0x76>
	        printf("read WAV header failed! code: %d\r\n", res);
 800124a:	4b50      	ldr	r3, [pc, #320]	@ (800138c <testRead+0x1a4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	4853      	ldr	r0, [pc, #332]	@ (80013a0 <testRead+0x1b8>)
 8001252:	f009 f887 	bl	800a364 <iprintf>
	        f_close(&file); // 修复：用f_close关闭文件
 8001256:	484c      	ldr	r0, [pc, #304]	@ (8001388 <testRead+0x1a0>)
 8001258:	f008 faf4 	bl	8009844 <f_close>
	        return;
 800125c:	e08f      	b.n	800137e <testRead+0x196>
	    }
	    // 验证PCM格式
	    if (memcmp(wavHeader.riff, "RIFF", 4) != 0 || memcmp(wavHeader.wave, "WAVE", 4) != 0 || wavHeader.audio_format != 1) {
 800125e:	2204      	movs	r2, #4
 8001260:	4950      	ldr	r1, [pc, #320]	@ (80013a4 <testRead+0x1bc>)
 8001262:	484e      	ldr	r0, [pc, #312]	@ (800139c <testRead+0x1b4>)
 8001264:	f009 f9c6 	bl	800a5f4 <memcmp>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10b      	bne.n	8001286 <testRead+0x9e>
 800126e:	2204      	movs	r2, #4
 8001270:	494d      	ldr	r1, [pc, #308]	@ (80013a8 <testRead+0x1c0>)
 8001272:	484e      	ldr	r0, [pc, #312]	@ (80013ac <testRead+0x1c4>)
 8001274:	f009 f9be 	bl	800a5f4 <memcmp>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <testRead+0x9e>
 800127e:	4b47      	ldr	r3, [pc, #284]	@ (800139c <testRead+0x1b4>)
 8001280:	8a9b      	ldrh	r3, [r3, #20]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d006      	beq.n	8001294 <testRead+0xac>
	        printf("not PCM WAV file!\r\n");
 8001286:	484a      	ldr	r0, [pc, #296]	@ (80013b0 <testRead+0x1c8>)
 8001288:	f009 f8d4 	bl	800a434 <puts>
	        f_close(&file);
 800128c:	483e      	ldr	r0, [pc, #248]	@ (8001388 <testRead+0x1a0>)
 800128e:	f008 fad9 	bl	8009844 <f_close>
	        return;
 8001292:	e074      	b.n	800137e <testRead+0x196>
	    }
	    // 更新每个采样的字节数（修复传输长度计算依据）
	    sample_bytes = wavHeader.bits_per_sample / 8;
 8001294:	4b41      	ldr	r3, [pc, #260]	@ (800139c <testRead+0x1b4>)
 8001296:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	b29b      	uxth	r3, r3
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b45      	ldr	r3, [pc, #276]	@ (80013b4 <testRead+0x1cc>)
 80012a0:	701a      	strb	r2, [r3, #0]
	    printf("WAV info: sample rate=%d, bits=%d, sample bytes=%d\r\n",
 80012a2:	4b3e      	ldr	r3, [pc, #248]	@ (800139c <testRead+0x1b4>)
 80012a4:	6999      	ldr	r1, [r3, #24]
	           wavHeader.sample_rate, wavHeader.bits_per_sample, sample_bytes);
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <testRead+0x1b4>)
 80012a8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
	    printf("WAV info: sample rate=%d, bits=%d, sample bytes=%d\r\n",
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <testRead+0x1cc>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4841      	ldr	r0, [pc, #260]	@ (80013b8 <testRead+0x1d0>)
 80012b2:	f009 f857 	bl	800a364 <iprintf>

	    // 3. 查找WAV数据块（跳过头部扩展信息，关键：避免读取无效数据）
	    uint8_t chunk_id[4];
	    uint32_t chunk_size;
	    while (1) {
	        res = f_read(&file, chunk_id, 4, &bytesRead);
 80012b6:	1d39      	adds	r1, r7, #4
 80012b8:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <testRead+0x1b0>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	4832      	ldr	r0, [pc, #200]	@ (8001388 <testRead+0x1a0>)
 80012be:	f008 f904 	bl	80094ca <f_read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b31      	ldr	r3, [pc, #196]	@ (800138c <testRead+0x1a4>)
 80012c8:	701a      	strb	r2, [r3, #0]
	        if (res != FR_OK || bytesRead != 4) break;
 80012ca:	4b30      	ldr	r3, [pc, #192]	@ (800138c <testRead+0x1a4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d137      	bne.n	8001342 <testRead+0x15a>
 80012d2:	4b31      	ldr	r3, [pc, #196]	@ (8001398 <testRead+0x1b0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d133      	bne.n	8001342 <testRead+0x15a>
	        res = f_read(&file, &chunk_size, 4, &bytesRead);
 80012da:	4639      	mov	r1, r7
 80012dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <testRead+0x1b0>)
 80012de:	2204      	movs	r2, #4
 80012e0:	4829      	ldr	r0, [pc, #164]	@ (8001388 <testRead+0x1a0>)
 80012e2:	f008 f8f2 	bl	80094ca <f_read>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <testRead+0x1a4>)
 80012ec:	701a      	strb	r2, [r3, #0]
	        if (res != FR_OK || bytesRead != 4) break;
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <testRead+0x1a4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d125      	bne.n	8001342 <testRead+0x15a>
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <testRead+0x1b0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d121      	bne.n	8001342 <testRead+0x15a>
	        // 找到data块，跳出循环（后续读取的就是音频数据）
	        if (memcmp(chunk_id, "data", 4) == 0) {
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2204      	movs	r2, #4
 8001302:	492e      	ldr	r1, [pc, #184]	@ (80013bc <testRead+0x1d4>)
 8001304:	4618      	mov	r0, r3
 8001306:	f009 f975 	bl	800a5f4 <memcmp>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <testRead+0x136>
	            printf("find data block, size=%ld bytes\r\n", chunk_size);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	482a      	ldr	r0, [pc, #168]	@ (80013c0 <testRead+0x1d8>)
 8001316:	f009 f825 	bl	800a364 <iprintf>
	            break;
 800131a:	bf00      	nop
 800131c:	e011      	b.n	8001342 <testRead+0x15a>
	        }
	        // 跳过非data块（如LIST块）
	        printf("data block index:%d\r\n",( f_tell(&file) + chunk_size));
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <testRead+0x1a0>)
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4619      	mov	r1, r3
 8001328:	4826      	ldr	r0, [pc, #152]	@ (80013c4 <testRead+0x1dc>)
 800132a:	f009 f81b 	bl	800a364 <iprintf>
	        f_lseek(&file, f_tell(&file) + chunk_size);
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <testRead+0x1a0>)
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	4619      	mov	r1, r3
 8001338:	4813      	ldr	r0, [pc, #76]	@ (8001388 <testRead+0x1a0>)
 800133a:	f008 faad 	bl	8009898 <f_lseek>
	        res = f_read(&file, chunk_id, 4, &bytesRead);
 800133e:	e7ba      	b.n	80012b6 <testRead+0xce>
	        // 等待I2S空闲（避免DMA冲突）
//	        while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
//	            continue;
//	        }
	    	  while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
	    		            continue;
 8001340:	bf00      	nop
	    	  while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
 8001342:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <testRead+0x1e0>)
 8001344:	f001 f976 	bl	8002634 <HAL_I2S_GetState>
 8001348:	4603      	mov	r3, r0
 800134a:	2b03      	cmp	r3, #3
 800134c:	d0f8      	beq.n	8001340 <testRead+0x158>
	    		        }

	        // 读取数据（用实际需要的字节数，而非固定BUFFER_SIZE）
	        res = f_read(&file, buffer, BUFFER_SIZE, &bytesRead);
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <testRead+0x1b0>)
 8001350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001354:	491d      	ldr	r1, [pc, #116]	@ (80013cc <testRead+0x1e4>)
 8001356:	480c      	ldr	r0, [pc, #48]	@ (8001388 <testRead+0x1a0>)
 8001358:	f008 f8b7 	bl	80094ca <f_read>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <testRead+0x1a4>)
 8001362:	701a      	strb	r2, [r3, #0]
	        //totalRead += bytesRead;
	        //printf("read %d bytes, total=%ld\r\n", bytesRead, totalRead);

	        // 启动I2S DMA播放（修复：按采样位数计算传输个数）

	        HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)buffer, bytesRead / sample_bytes);
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <testRead+0x1b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <testRead+0x1cc>)
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	4915      	ldr	r1, [pc, #84]	@ (80013cc <testRead+0x1e4>)
 8001376:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <testRead+0x1e0>)
 8001378:	f001 f88e 	bl	8002498 <HAL_I2S_Transmit_DMA>
	    	  while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
 800137c:	e7e1      	b.n	8001342 <testRead+0x15a>
	    }

	    // 5. 关闭文件（修复：用f_close）
	    f_close(&file);

}
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000004 	.word	0x20000004
 8001388:	200002c8 	.word	0x200002c8
 800138c:	200002c4 	.word	0x200002c4
 8001390:	0800b468 	.word	0x0800b468
 8001394:	0800b488 	.word	0x0800b488
 8001398:	200004f8 	.word	0x200004f8
 800139c:	20000cfc 	.word	0x20000cfc
 80013a0:	0800b49c 	.word	0x0800b49c
 80013a4:	0800b4c0 	.word	0x0800b4c0
 80013a8:	0800b4c8 	.word	0x0800b4c8
 80013ac:	20000d04 	.word	0x20000d04
 80013b0:	0800b4d0 	.word	0x0800b4d0
 80013b4:	20000008 	.word	0x20000008
 80013b8:	0800b4e4 	.word	0x0800b4e4
 80013bc:	0800b51c 	.word	0x0800b51c
 80013c0:	0800b524 	.word	0x0800b524
 80013c4:	0800b548 	.word	0x0800b548
 80013c8:	2000008c 	.word	0x2000008c
 80013cc:	200004fc 	.word	0x200004fc

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001408 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d4:	f7ff fe7a 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	@ (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	@ (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f009 f95d 	bl	800a6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fb8f 	bl	8000b24 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001414:	080361e8 	.word	0x080361e8
  ldr r2, =_sbss
 8001418:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800141c:	200010e8 	.word	0x200010e8

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <HAL_Init+0x40>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_Init+0x40>)
 800143a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800143e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_Init+0x40>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f94f 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	200f      	movs	r0, #15
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fd0a 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f967 	bl	800175a <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 f92f 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000010 	.word	0x20000010
 80014c4:	2000000c 	.word	0x2000000c

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000010 	.word	0x20000010
 80014ec:	20000d20 	.word	0x20000d20

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000d20 	.word	0x20000d20

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000010 	.word	0x20000010

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db0b      	blt.n	80015de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4907      	ldr	r1, [pc, #28]	@ (80015ec <__NVIC_EnableIRQ+0x38>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff29 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff3e 	bl	8001598 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff8e 	bl	8001644 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff31 	bl	80015b4 <__NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffa2 	bl	80016ac <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff feb6 	bl	80014f0 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e099      	b.n	80018c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b0:	e00f      	b.n	80017d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b2:	f7ff fe9d 	bl	80014f0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d908      	bls.n	80017d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2220      	movs	r2, #32
 80017c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e078      	b.n	80018c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e8      	bne.n	80017b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <HAL_DMA_Init+0x158>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4313      	orrs	r3, r2
 8001822:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	2b04      	cmp	r3, #4
 800182a:	d107      	bne.n	800183c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	4313      	orrs	r3, r2
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f023 0307 	bic.w	r3, r3, #7
 8001852:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	4313      	orrs	r3, r2
 800185c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	2b04      	cmp	r3, #4
 8001864:	d117      	bne.n	8001896 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00e      	beq.n	8001896 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fa9d 	bl	8001db8 <DMA_CheckFifoParam>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001892:	2301      	movs	r3, #1
 8001894:	e016      	b.n	80018c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fa54 	bl	8001d4c <DMA_CalcBaseAndBitshift>
 80018a4:	4603      	mov	r3, r0
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ac:	223f      	movs	r2, #63	@ 0x3f
 80018ae:	409a      	lsls	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	f010803f 	.word	0xf010803f

080018d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_DMA_Start_IT+0x26>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e040      	b.n	8001978 <HAL_DMA_Start_IT+0xa8>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d12f      	bne.n	800196a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f9e6 	bl	8001cf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001928:	223f      	movs	r2, #63	@ 0x3f
 800192a:	409a      	lsls	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0216 	orr.w	r2, r2, #22
 800193e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0208 	orr.w	r2, r2, #8
 8001956:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e005      	b.n	8001976 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001972:	2302      	movs	r3, #2
 8001974:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d004      	beq.n	800199e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2280      	movs	r2, #128	@ 0x80
 8001998:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00c      	b.n	80019b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019d0:	4b8e      	ldr	r3, [pc, #568]	@ (8001c0c <HAL_DMA_IRQHandler+0x248>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a8e      	ldr	r2, [pc, #568]	@ (8001c10 <HAL_DMA_IRQHandler+0x24c>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0a9b      	lsrs	r3, r3, #10
 80019dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ee:	2208      	movs	r2, #8
 80019f0:	409a      	lsls	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01a      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0204 	bic.w	r2, r2, #4
 8001a16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a34:	2201      	movs	r2, #1
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d012      	beq.n	8001a66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	2201      	movs	r2, #1
 8001a54:	409a      	lsls	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5e:	f043 0202 	orr.w	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d012      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a88:	2204      	movs	r2, #4
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a94:	f043 0204 	orr.w	r2, r3, #4
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d043      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d03c      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abe:	2210      	movs	r2, #16
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d018      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d024      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
 8001af2:	e01f      	b.n	8001b34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01b      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
 8001b04:	e016      	b.n	8001b34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0208 	bic.w	r2, r2, #8
 8001b22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	2220      	movs	r2, #32
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 808f 	beq.w	8001c64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8087 	beq.w	8001c64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d136      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0216 	bic.w	r2, r2, #22
 8001b7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d103      	bne.n	8001b9e <HAL_DMA_IRQHandler+0x1da>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0208 	bic.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb2:	223f      	movs	r2, #63	@ 0x3f
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d07e      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
        }
        return;
 8001bda:	e079      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01d      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d031      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
 8001c08:	e02c      	b.n	8001c64 <HAL_DMA_IRQHandler+0x2a0>
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
 8001c24:	e01e      	b.n	8001c64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10f      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0210 	bic.w	r2, r2, #16
 8001c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d032      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2205      	movs	r2, #5
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	3301      	adds	r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d307      	bcc.n	8001cac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f2      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x2cc>
 8001caa:	e000      	b.n	8001cae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
 8001cce:	e000      	b.n	8001cd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cd0:	bf00      	nop
    }
  }
}
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b40      	cmp	r3, #64	@ 0x40
 8001d1c:	d108      	bne.n	8001d30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d2e:	e007      	b.n	8001d40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3b10      	subs	r3, #16
 8001d5c:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d66:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d909      	bls.n	8001d8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	1d1a      	adds	r2, r3, #4
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d8c:	e007      	b.n	8001d9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d96:	f023 0303 	bic.w	r3, r3, #3
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	aaaaaaab 	.word	0xaaaaaaab
 8001db4:	0800b5c0 	.word	0x0800b5c0

08001db8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d11f      	bne.n	8001e12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d856      	bhi.n	8001e86 <DMA_CheckFifoParam+0xce>
 8001dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001de0 <DMA_CheckFifoParam+0x28>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001e03 	.word	0x08001e03
 8001de8:	08001df1 	.word	0x08001df1
 8001dec:	08001e87 	.word	0x08001e87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d046      	beq.n	8001e8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e00:	e043      	b.n	8001e8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e0a:	d140      	bne.n	8001e8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e10:	e03d      	b.n	8001e8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e1a:	d121      	bne.n	8001e60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d837      	bhi.n	8001e92 <DMA_CheckFifoParam+0xda>
 8001e22:	a201      	add	r2, pc, #4	@ (adr r2, 8001e28 <DMA_CheckFifoParam+0x70>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e3f 	.word	0x08001e3f
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001e51 	.word	0x08001e51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e3c:	e030      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d025      	beq.n	8001e96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4e:	e022      	b.n	8001e96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e58:	d11f      	bne.n	8001e9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e5e:	e01c      	b.n	8001e9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d903      	bls.n	8001e6e <DMA_CheckFifoParam+0xb6>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d003      	beq.n	8001e74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e6c:	e018      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
      break;
 8001e72:	e015      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00e      	beq.n	8001e9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      break;
 8001e84:	e00b      	b.n	8001e9e <DMA_CheckFifoParam+0xe6>
      break;
 8001e86:	bf00      	nop
 8001e88:	e00a      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e008      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e006      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
 8001e94:	e004      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e96:	bf00      	nop
 8001e98:	e002      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e9a:	bf00      	nop
 8001e9c:	e000      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e16b      	b.n	80021a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 815a 	bne.w	800219e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d005      	beq.n	8001f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d130      	bne.n	8001f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d017      	beq.n	8001fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80b4 	beq.w	800219e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b60      	ldr	r3, [pc, #384]	@ (80021bc <HAL_GPIO_Init+0x30c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203e:	4a5f      	ldr	r2, [pc, #380]	@ (80021bc <HAL_GPIO_Init+0x30c>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002044:	6453      	str	r3, [r2, #68]	@ 0x44
 8002046:	4b5d      	ldr	r3, [pc, #372]	@ (80021bc <HAL_GPIO_Init+0x30c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002052:	4a5b      	ldr	r2, [pc, #364]	@ (80021c0 <HAL_GPIO_Init+0x310>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_GPIO_Init+0x314>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_Init+0x226>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a51      	ldr	r2, [pc, #324]	@ (80021c8 <HAL_GPIO_Init+0x318>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x222>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a50      	ldr	r2, [pc, #320]	@ (80021cc <HAL_GPIO_Init+0x31c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x21e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	@ (80021d0 <HAL_GPIO_Init+0x320>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x21a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4e      	ldr	r2, [pc, #312]	@ (80021d4 <HAL_GPIO_Init+0x324>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x216>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4d      	ldr	r2, [pc, #308]	@ (80021d8 <HAL_GPIO_Init+0x328>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x212>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4c      	ldr	r2, [pc, #304]	@ (80021dc <HAL_GPIO_Init+0x32c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x20e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4b      	ldr	r2, [pc, #300]	@ (80021e0 <HAL_GPIO_Init+0x330>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x20a>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e00e      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e00c      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00a      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020c2:	2305      	movs	r3, #5
 80020c4:	e008      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020c6:	2304      	movs	r3, #4
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020d6:	2300      	movs	r3, #0
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e8:	4935      	ldr	r1, [pc, #212]	@ (80021c0 <HAL_GPIO_Init+0x310>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b3b      	ldr	r3, [pc, #236]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a32      	ldr	r2, [pc, #200]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a27      	ldr	r2, [pc, #156]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214a:	4b26      	ldr	r3, [pc, #152]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216e:	4a1d      	ldr	r2, [pc, #116]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002198:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <HAL_GPIO_Init+0x334>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	f67f ae90 	bls.w	8001ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40021400 	.word	0x40021400
 80021dc:	40021800 	.word	0x40021800
 80021e0:	40021c00 	.word	0x40021c00
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e001      	b.n	800220a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e128      	b.n	800247c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a90      	ldr	r2, [pc, #576]	@ (8002484 <HAL_I2S_Init+0x26c>)
 8002242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fe fb89 	bl	800095c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002260:	f023 030f 	bic.w	r3, r3, #15
 8002264:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2202      	movs	r2, #2
 800226c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d060      	beq.n	8002338 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800227e:	2310      	movs	r3, #16
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e001      	b.n	8002288 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b20      	cmp	r3, #32
 800228e:	d802      	bhi.n	8002296 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002296:	2001      	movs	r0, #1
 8002298:	f001 faaa 	bl	80037f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800229c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022a6:	d125      	bne.n	80022f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d010      	beq.n	80022d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	3305      	adds	r3, #5
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e01f      	b.n	8002312 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	3305      	adds	r3, #5
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e00e      	b.n	8002312 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	3305      	adds	r3, #5
 8002310:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4a5c      	ldr	r2, [pc, #368]	@ (8002488 <HAL_I2S_Init+0x270>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	08db      	lsrs	r3, r3, #3
 800231c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e003      	b.n	8002340 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002338:	2302      	movs	r3, #2
 800233a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d902      	bls.n	800234c <HAL_I2S_Init+0x134>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2bff      	cmp	r3, #255	@ 0xff
 800234a:	d907      	bls.n	800235c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e08f      	b.n	800247c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	ea42 0103 	orr.w	r1, r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	430a      	orrs	r2, r1
 800236e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800237a:	f023 030f 	bic.w	r3, r3, #15
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6851      	ldr	r1, [r2, #4]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68d2      	ldr	r2, [r2, #12]
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6992      	ldr	r2, [r2, #24]
 8002392:	430a      	orrs	r2, r1
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800239e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d161      	bne.n	800246c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a38      	ldr	r2, [pc, #224]	@ (800248c <HAL_I2S_Init+0x274>)
 80023ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a37      	ldr	r2, [pc, #220]	@ (8002490 <HAL_I2S_Init+0x278>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_I2S_Init+0x1a4>
 80023b8:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <HAL_I2S_Init+0x27c>)
 80023ba:	e001      	b.n	80023c0 <HAL_I2S_Init+0x1a8>
 80023bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	4932      	ldr	r1, [pc, #200]	@ (8002490 <HAL_I2S_Init+0x278>)
 80023c8:	428a      	cmp	r2, r1
 80023ca:	d101      	bne.n	80023d0 <HAL_I2S_Init+0x1b8>
 80023cc:	4a31      	ldr	r2, [pc, #196]	@ (8002494 <HAL_I2S_Init+0x27c>)
 80023ce:	e001      	b.n	80023d4 <HAL_I2S_Init+0x1bc>
 80023d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80023d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80023d8:	f023 030f 	bic.w	r3, r3, #15
 80023dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002490 <HAL_I2S_Init+0x278>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_I2S_Init+0x1d4>
 80023e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <HAL_I2S_Init+0x27c>)
 80023ea:	e001      	b.n	80023f0 <HAL_I2S_Init+0x1d8>
 80023ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023f0:	2202      	movs	r2, #2
 80023f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a25      	ldr	r2, [pc, #148]	@ (8002490 <HAL_I2S_Init+0x278>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_I2S_Init+0x1ea>
 80023fe:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <HAL_I2S_Init+0x27c>)
 8002400:	e001      	b.n	8002406 <HAL_I2S_Init+0x1ee>
 8002402:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002412:	d003      	beq.n	800241c <HAL_I2S_Init+0x204>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800241c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e001      	b.n	8002428 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002432:	4313      	orrs	r3, r2
 8002434:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800243c:	4313      	orrs	r3, r2
 800243e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002446:	4313      	orrs	r3, r2
 8002448:	b29a      	uxth	r2, r3
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	4313      	orrs	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002454:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_I2S_Init+0x278>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d101      	bne.n	8002464 <HAL_I2S_Init+0x24c>
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <HAL_I2S_Init+0x27c>)
 8002462:	e001      	b.n	8002468 <HAL_I2S_Init+0x250>
 8002464:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002468:	897a      	ldrh	r2, [r7, #10]
 800246a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	080027b5 	.word	0x080027b5
 8002488:	cccccccd 	.word	0xcccccccd
 800248c:	080028c9 	.word	0x080028c9
 8002490:	40003800 	.word	0x40003800
 8002494:	40003400 	.word	0x40003400

08002498 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_I2S_Transmit_DMA+0x1a>
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08a      	b.n	80025cc <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	e082      	b.n	80025cc <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_I2S_Transmit_DMA+0x3e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e07a      	b.n	80025cc <HAL_I2S_Transmit_DMA+0x134>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2203      	movs	r2, #3
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d002      	beq.n	800250a <HAL_I2S_Transmit_DMA+0x72>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d10a      	bne.n	8002520 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800251e:	e005      	b.n	800252c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	88fa      	ldrh	r2, [r7, #6]
 8002524:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	88fa      	ldrh	r2, [r7, #6]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	4a28      	ldr	r2, [pc, #160]	@ (80025d4 <HAL_I2S_Transmit_DMA+0x13c>)
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002538:	4a27      	ldr	r2, [pc, #156]	@ (80025d8 <HAL_I2S_Transmit_DMA+0x140>)
 800253a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	4a26      	ldr	r2, [pc, #152]	@ (80025dc <HAL_I2S_Transmit_DMA+0x144>)
 8002542:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800254c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002554:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800255c:	f7ff f9b8 	bl	80018d0 <HAL_DMA_Start_IT>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f043 0208 	orr.w	r2, r3, #8
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e022      	b.n	80025cc <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0202 	orr.w	r2, r2, #2
 80025aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025c8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	08002693 	.word	0x08002693
 80025d8:	08002651 	.word	0x08002651
 80025dc:	080026af 	.word	0x080026af

080025e0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(const I2S_HandleTypeDef *hi2s)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002642:	b2db      	uxtb	r3, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800265c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10e      	bne.n	8002684 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0202 	bic.w	r2, r2, #2
 8002674:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7fe fda5 	bl	80011d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff ffa9 	bl	80025f8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0203 	bic.w	r2, r2, #3
 80026ca:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e4:	f043 0208 	orr.w	r2, r3, #8
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff ff97 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	1c9a      	adds	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10e      	bne.n	800274e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800273e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fe fd43 	bl	80011d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	b292      	uxth	r2, r2
 800276a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	1c9a      	adds	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10e      	bne.n	80027ac <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800279c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff30 	bl	800260c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d13a      	bne.n	8002846 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d109      	bne.n	80027ee <I2S_IRQHandler+0x3a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	d102      	bne.n	80027ee <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ffb4 	bl	8002756 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	d126      	bne.n	8002846 <I2S_IRQHandler+0x92>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d11f      	bne.n	8002846 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002814:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002838:	f043 0202 	orr.w	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff feed 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b03      	cmp	r3, #3
 8002850:	d136      	bne.n	80028c0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b02      	cmp	r3, #2
 800285a:	d109      	bne.n	8002870 <I2S_IRQHandler+0xbc>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b80      	cmp	r3, #128	@ 0x80
 8002868:	d102      	bne.n	8002870 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff45 	bl	80026fa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	d122      	bne.n	80028c0 <I2S_IRQHandler+0x10c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b20      	cmp	r3, #32
 8002886:	d11b      	bne.n	80028c0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002896:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	f043 0204 	orr.w	r2, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff feb0 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a92      	ldr	r2, [pc, #584]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80028e2:	4b92      	ldr	r3, [pc, #584]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028e4:	e001      	b.n	80028ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80028e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a8b      	ldr	r2, [pc, #556]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002900:	4b8a      	ldr	r3, [pc, #552]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002902:	e001      	b.n	8002908 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002904:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002914:	d004      	beq.n	8002920 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 8099 	bne.w	8002a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d107      	bne.n	800293a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f925 	bl	8002b84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d107      	bne.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f9c8 	bl	8002ce4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295a:	2b40      	cmp	r3, #64	@ 0x40
 800295c:	d13a      	bne.n	80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d035      	beq.n	80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002972:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002974:	e001      	b.n	800297a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4969      	ldr	r1, [pc, #420]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002982:	428b      	cmp	r3, r1
 8002984:	d101      	bne.n	800298a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002986:	4b69      	ldr	r3, [pc, #420]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002988:	e001      	b.n	800298e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800298a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800298e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002992:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f043 0202 	orr.w	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff fe26 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	f040 80c3 	bne.w	8002b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80bd 	beq.w	8002b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a49      	ldr	r2, [pc, #292]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a06:	4b49      	ldr	r3, [pc, #292]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a08:	e001      	b.n	8002a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4944      	ldr	r1, [pc, #272]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a16:	428b      	cmp	r3, r1
 8002a18:	d101      	bne.n	8002a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a1a:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a1c:	e001      	b.n	8002a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff fde8 	bl	8002620 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a50:	e089      	b.n	8002b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d107      	bne.n	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8be 	bl	8002be8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d107      	bne.n	8002a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f8fd 	bl	8002c80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8c:	2b40      	cmp	r3, #64	@ 0x40
 8002a8e:	d12f      	bne.n	8002af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02a      	beq.n	8002af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002aa8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ab6:	e001      	b.n	8002abc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ab8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4919      	ldr	r1, [pc, #100]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002ac8:	4b18      	ldr	r3, [pc, #96]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002aca:	e001      	b.n	8002ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ad0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ad4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fd98 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d136      	bne.n	8002b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d031      	beq.n	8002b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b0e:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b10:	e001      	b.n	8002b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4902      	ldr	r1, [pc, #8]	@ (8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b1e:	428b      	cmp	r3, r1
 8002b20:	d106      	bne.n	8002b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002b22:	4b02      	ldr	r3, [pc, #8]	@ (8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b24:	e006      	b.n	8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002b26:	bf00      	nop
 8002b28:	40003800 	.word	0x40003800
 8002b2c:	40003400 	.word	0x40003400
 8002b30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b38:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fd5e 	bl	8002620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b64:	e000      	b.n	8002b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b66:	bf00      	nop
}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	1c99      	adds	r1, r3, #2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6251      	str	r1, [r2, #36]	@ 0x24
 8002b96:	881a      	ldrh	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d113      	bne.n	8002bde <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ffc9 	bl	8002b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	1c99      	adds	r1, r3, #2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6251      	str	r1, [r2, #36]	@ 0x24
 8002bfa:	8819      	ldrh	r1, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <I2SEx_TxISR_I2SExt+0x90>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <I2SEx_TxISR_I2SExt+0x22>
 8002c06:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <I2SEx_TxISR_I2SExt+0x94>)
 8002c08:	e001      	b.n	8002c0e <I2SEx_TxISR_I2SExt+0x26>
 8002c0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c0e:	460a      	mov	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	@ (8002c78 <I2SEx_TxISR_I2SExt+0x90>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <I2SEx_TxISR_I2SExt+0x50>
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <I2SEx_TxISR_I2SExt+0x94>)
 8002c36:	e001      	b.n	8002c3c <I2SEx_TxISR_I2SExt+0x54>
 8002c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	490d      	ldr	r1, [pc, #52]	@ (8002c78 <I2SEx_TxISR_I2SExt+0x90>)
 8002c44:	428b      	cmp	r3, r1
 8002c46:	d101      	bne.n	8002c4c <I2SEx_TxISR_I2SExt+0x64>
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <I2SEx_TxISR_I2SExt+0x94>)
 8002c4a:	e001      	b.n	8002c50 <I2SEx_TxISR_I2SExt+0x68>
 8002c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff81 	bl	8002b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40003800 	.word	0x40003800
 8002c7c:	40003400 	.word	0x40003400

08002c80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68d8      	ldr	r0, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	1c99      	adds	r1, r3, #2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002c98:	b282      	uxth	r2, r0
 8002c9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d113      	bne.n	8002cdc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cc2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ff4a 	bl	8002b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	@ (8002d74 <I2SEx_RxISR_I2SExt+0x90>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <I2SEx_RxISR_I2SExt+0x16>
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <I2SEx_RxISR_I2SExt+0x94>)
 8002cf8:	e001      	b.n	8002cfe <I2SEx_RxISR_I2SExt+0x1a>
 8002cfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cfe:	68d8      	ldr	r0, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	1c99      	adds	r1, r3, #2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002d0a:	b282      	uxth	r2, r0
 8002d0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d121      	bne.n	8002d6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <I2SEx_RxISR_I2SExt+0x90>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <I2SEx_RxISR_I2SExt+0x50>
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <I2SEx_RxISR_I2SExt+0x94>)
 8002d32:	e001      	b.n	8002d38 <I2SEx_RxISR_I2SExt+0x54>
 8002d34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	490d      	ldr	r1, [pc, #52]	@ (8002d74 <I2SEx_RxISR_I2SExt+0x90>)
 8002d40:	428b      	cmp	r3, r1
 8002d42:	d101      	bne.n	8002d48 <I2SEx_RxISR_I2SExt+0x64>
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <I2SEx_RxISR_I2SExt+0x94>)
 8002d46:	e001      	b.n	8002d4c <I2SEx_RxISR_I2SExt+0x68>
 8002d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff03 	bl	8002b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40003800 	.word	0x40003800
 8002d78:	40003400 	.word	0x40003400

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e267      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d075      	beq.n	8002e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d9a:	4b88      	ldr	r3, [pc, #544]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b85      	ldr	r3, [pc, #532]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d112      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	4b82      	ldr	r3, [pc, #520]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d05b      	beq.n	8002e84 <HAL_RCC_OscConfig+0x108>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d157      	bne.n	8002e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e242      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x74>
 8002de2:	4b76      	ldr	r3, [pc, #472]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a75      	ldr	r2, [pc, #468]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01d      	b.n	8002e2c <HAL_RCC_OscConfig+0xb0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x98>
 8002dfa:	4b70      	ldr	r3, [pc, #448]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b6d      	ldr	r3, [pc, #436]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6c      	ldr	r2, [pc, #432]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0xb0>
 8002e14:	4b69      	ldr	r3, [pc, #420]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a68      	ldr	r2, [pc, #416]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b66      	ldr	r3, [pc, #408]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a65      	ldr	r2, [pc, #404]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fb5c 	bl	80014f0 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fb58 	bl	80014f0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	@ 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e207      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0xc0>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fb48 	bl	80014f0 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fb44 	bl	80014f0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1f3      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	4b51      	ldr	r3, [pc, #324]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0xe8>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d063      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e92:	4b4a      	ldr	r3, [pc, #296]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b47      	ldr	r3, [pc, #284]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d11c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eaa:	4b44      	ldr	r3, [pc, #272]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	4b41      	ldr	r3, [pc, #260]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x152>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1c7      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b3b      	ldr	r3, [pc, #236]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4937      	ldr	r1, [pc, #220]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	e03a      	b.n	8002f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eec:	4b34      	ldr	r3, [pc, #208]	@ (8002fc0 <HAL_RCC_OscConfig+0x244>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fafd 	bl	80014f0 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe faf9 	bl	80014f0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e1a8      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f18:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4925      	ldr	r1, [pc, #148]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2e:	4b24      	ldr	r3, [pc, #144]	@ (8002fc0 <HAL_RCC_OscConfig+0x244>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fadc 	bl	80014f0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fad8 	bl	80014f0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e187      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d036      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_RCC_OscConfig+0x248>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe fabc 	bl	80014f0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fab8 	bl	80014f0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e167      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_RCC_OscConfig+0x240>)
 8002f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x200>
 8002f9a:	e01b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9c:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <HAL_RCC_OscConfig+0x248>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe faa5 	bl	80014f0 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	e00e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe faa1 	bl	80014f0 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d907      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e150      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	42470000 	.word	0x42470000
 8002fc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	4b88      	ldr	r3, [pc, #544]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ea      	bne.n	8002faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8097 	beq.w	8003110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe6:	4b81      	ldr	r3, [pc, #516]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10f      	bne.n	8003012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	4a7c      	ldr	r2, [pc, #496]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003000:	6413      	str	r3, [r2, #64]	@ 0x40
 8003002:	4b7a      	ldr	r3, [pc, #488]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003012:	4b77      	ldr	r3, [pc, #476]	@ (80031f0 <HAL_RCC_OscConfig+0x474>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d118      	bne.n	8003050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301e:	4b74      	ldr	r3, [pc, #464]	@ (80031f0 <HAL_RCC_OscConfig+0x474>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a73      	ldr	r2, [pc, #460]	@ (80031f0 <HAL_RCC_OscConfig+0x474>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302a:	f7fe fa61 	bl	80014f0 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003032:	f7fe fa5d 	bl	80014f0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e10c      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	4b6a      	ldr	r3, [pc, #424]	@ (80031f0 <HAL_RCC_OscConfig+0x474>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x2ea>
 8003058:	4b64      	ldr	r3, [pc, #400]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	4a63      	ldr	r2, [pc, #396]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6713      	str	r3, [r2, #112]	@ 0x70
 8003064:	e01c      	b.n	80030a0 <HAL_RCC_OscConfig+0x324>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b05      	cmp	r3, #5
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x30c>
 800306e:	4b5f      	ldr	r3, [pc, #380]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4a5e      	ldr	r2, [pc, #376]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	6713      	str	r3, [r2, #112]	@ 0x70
 800307a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	4a5b      	ldr	r2, [pc, #364]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6713      	str	r3, [r2, #112]	@ 0x70
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0x324>
 8003088:	4b58      	ldr	r3, [pc, #352]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	4a57      	ldr	r2, [pc, #348]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	@ 0x70
 8003094:	4b55      	ldr	r3, [pc, #340]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003098:	4a54      	ldr	r2, [pc, #336]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800309a:	f023 0304 	bic.w	r3, r3, #4
 800309e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d015      	beq.n	80030d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fa22 	bl	80014f0 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe fa1e 	bl	80014f0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0cb      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	4b49      	ldr	r3, [pc, #292]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ee      	beq.n	80030b0 <HAL_RCC_OscConfig+0x334>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7fe fa0c 	bl	80014f0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030dc:	f7fe fa08 	bl	80014f0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0b5      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f2:	4b3e      	ldr	r3, [pc, #248]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ee      	bne.n	80030dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4b39      	ldr	r3, [pc, #228]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	4a38      	ldr	r2, [pc, #224]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a1 	beq.w	800325c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311a:	4b34      	ldr	r3, [pc, #208]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b08      	cmp	r3, #8
 8003124:	d05c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d141      	bne.n	80031b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312e:	4b31      	ldr	r3, [pc, #196]	@ (80031f4 <HAL_RCC_OscConfig+0x478>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe f9dc 	bl	80014f0 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe f9d8 	bl	80014f0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e087      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314e:	4b27      	ldr	r3, [pc, #156]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	3b01      	subs	r3, #1
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	491b      	ldr	r1, [pc, #108]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003184:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <HAL_RCC_OscConfig+0x478>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe f9b1 	bl	80014f0 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fe f9ad 	bl	80014f0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e05c      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a4:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x416>
 80031b0:	e054      	b.n	800325c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b10      	ldr	r3, [pc, #64]	@ (80031f4 <HAL_RCC_OscConfig+0x478>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe f99a 	bl	80014f0 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe f996 	bl	80014f0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e045      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_RCC_OscConfig+0x470>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x444>
 80031de:	e03d      	b.n	800325c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e038      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40007000 	.word	0x40007000
 80031f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <HAL_RCC_OscConfig+0x4ec>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d028      	beq.n	8003258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d121      	bne.n	8003258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d11a      	bne.n	8003258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800322e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003230:	4293      	cmp	r3, r2
 8003232:	d111      	bne.n	8003258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	3b01      	subs	r3, #1
 8003242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0cc      	b.n	800341a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003280:	4b68      	ldr	r3, [pc, #416]	@ (8003424 <HAL_RCC_ClockConfig+0x1b8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d90c      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b65      	ldr	r3, [pc, #404]	@ (8003424 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b63      	ldr	r3, [pc, #396]	@ (8003424 <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0b8      	b.n	800341a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c0:	4b59      	ldr	r3, [pc, #356]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a58      	ldr	r2, [pc, #352]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d8:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a52      	ldr	r2, [pc, #328]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e4:	4b50      	ldr	r3, [pc, #320]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	494d      	ldr	r1, [pc, #308]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d044      	beq.n	800338c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d119      	bne.n	800334a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e07f      	b.n	800341a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d003      	beq.n	800332a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003326:	2b03      	cmp	r3, #3
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332a:	4b3f      	ldr	r3, [pc, #252]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e06f      	b.n	800341a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333a:	4b3b      	ldr	r3, [pc, #236]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e067      	b.n	800341a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334a:	4b37      	ldr	r3, [pc, #220]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f023 0203 	bic.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4934      	ldr	r1, [pc, #208]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800335c:	f7fe f8c8 	bl	80014f0 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	e00a      	b.n	800337a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003364:	f7fe f8c4 	bl	80014f0 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e04f      	b.n	800341a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	4b2b      	ldr	r3, [pc, #172]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 020c 	and.w	r2, r3, #12
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	429a      	cmp	r2, r3
 800338a:	d1eb      	bne.n	8003364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800338c:	4b25      	ldr	r3, [pc, #148]	@ (8003424 <HAL_RCC_ClockConfig+0x1b8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d20c      	bcs.n	80033b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b22      	ldr	r3, [pc, #136]	@ (8003424 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e032      	b.n	800341a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c0:	4b19      	ldr	r3, [pc, #100]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4916      	ldr	r1, [pc, #88]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	490e      	ldr	r1, [pc, #56]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033f2:	f000 f821 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	490a      	ldr	r1, [pc, #40]	@ (800342c <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	5ccb      	ldrb	r3, [r1, r3]
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a09      	ldr	r2, [pc, #36]	@ (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800340e:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe f828 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023c00 	.word	0x40023c00
 8003428:	40023800 	.word	0x40023800
 800342c:	0800b5a8 	.word	0x0800b5a8
 8003430:	20000000 	.word	0x20000000
 8003434:	2000000c 	.word	0x2000000c

08003438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b090      	sub	sp, #64	@ 0x40
 800343e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003450:	4b59      	ldr	r3, [pc, #356]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d00d      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x40>
 800345c:	2b08      	cmp	r3, #8
 800345e:	f200 80a1 	bhi.w	80035a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x34>
 8003466:	2b04      	cmp	r3, #4
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x3a>
 800346a:	e09b      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b53      	ldr	r3, [pc, #332]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x184>)
 800346e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003470:	e09b      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003472:	4b53      	ldr	r3, [pc, #332]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003474:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003476:	e098      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003478:	4b4f      	ldr	r3, [pc, #316]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003480:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003482:	4b4d      	ldr	r3, [pc, #308]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d028      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348e:	4b4a      	ldr	r3, [pc, #296]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	099b      	lsrs	r3, r3, #6
 8003494:	2200      	movs	r2, #0
 8003496:	623b      	str	r3, [r7, #32]
 8003498:	627a      	str	r2, [r7, #36]	@ 0x24
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034a0:	2100      	movs	r1, #0
 80034a2:	4b47      	ldr	r3, [pc, #284]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a4:	fb03 f201 	mul.w	r2, r3, r1
 80034a8:	2300      	movs	r3, #0
 80034aa:	fb00 f303 	mul.w	r3, r0, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	4a43      	ldr	r2, [pc, #268]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80034b2:	fba0 1202 	umull	r1, r2, r0, r2
 80034b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b8:	460a      	mov	r2, r1
 80034ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034be:	4413      	add	r3, r2
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c4:	2200      	movs	r2, #0
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	61fa      	str	r2, [r7, #28]
 80034ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034d2:	f7fc fecd 	bl	8000270 <__aeabi_uldivmod>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4613      	mov	r3, r2
 80034dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034de:	e053      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e0:	4b35      	ldr	r3, [pc, #212]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	2200      	movs	r2, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	617a      	str	r2, [r7, #20]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034f2:	f04f 0b00 	mov.w	fp, #0
 80034f6:	4652      	mov	r2, sl
 80034f8:	465b      	mov	r3, fp
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	0159      	lsls	r1, r3, #5
 8003504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003508:	0150      	lsls	r0, r2, #5
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	ebb2 080a 	subs.w	r8, r2, sl
 8003512:	eb63 090b 	sbc.w	r9, r3, fp
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003522:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003526:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800352a:	ebb2 0408 	subs.w	r4, r2, r8
 800352e:	eb63 0509 	sbc.w	r5, r3, r9
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	00eb      	lsls	r3, r5, #3
 800353c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003540:	00e2      	lsls	r2, r4, #3
 8003542:	4614      	mov	r4, r2
 8003544:	461d      	mov	r5, r3
 8003546:	eb14 030a 	adds.w	r3, r4, sl
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	eb45 030b 	adc.w	r3, r5, fp
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003572:	2200      	movs	r2, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	60fa      	str	r2, [r7, #12]
 8003578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357c:	f7fc fe78 	bl	8000270 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003588:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003598:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800359a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x184>)
 80035a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3740      	adds	r7, #64	@ 0x40
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	017d7840 	.word	0x017d7840

080035c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000000 	.word	0x20000000

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e0:	f7ff fff0 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0a9b      	lsrs	r3, r3, #10
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	@ (8003600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	0800b5b8 	.word	0x0800b5b8

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003608:	f7ff ffdc 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	0800b5b8 	.word	0x0800b5b8

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003650:	2b00      	cmp	r3, #0
 8003652:	d035      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003654:	4b62      	ldr	r3, [pc, #392]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800365a:	f7fd ff49 	bl	80014f0 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003662:	f7fd ff45 	bl	80014f0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0b0      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003674:	4b5b      	ldr	r3, [pc, #364]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	019a      	lsls	r2, r3, #6
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	071b      	lsls	r3, r3, #28
 800368c:	4955      	ldr	r1, [pc, #340]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003694:	4b52      	ldr	r3, [pc, #328]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800369a:	f7fd ff29 	bl	80014f0 <HAL_GetTick>
 800369e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036a2:	f7fd ff25 	bl	80014f0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e090      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036b4:	4b4b      	ldr	r3, [pc, #300]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8083 	beq.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b44      	ldr	r3, [pc, #272]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	4a43      	ldr	r2, [pc, #268]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036de:	4b41      	ldr	r3, [pc, #260]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036ea:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3e      	ldr	r2, [pc, #248]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036f6:	f7fd fefb 	bl	80014f0 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7fd fef7 	bl	80014f0 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e062      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003710:	4b35      	ldr	r3, [pc, #212]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371c:	4b31      	ldr	r3, [pc, #196]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003724:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	429a      	cmp	r2, r3
 8003738:	d028      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800373a:	4b2a      	ldr	r3, [pc, #168]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003742:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003744:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800374a:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003750:	4a24      	ldr	r2, [pc, #144]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003756:	4b23      	ldr	r3, [pc, #140]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d114      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd fec5 	bl	80014f0 <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fec1 	bl	80014f0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e02a      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ee      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003798:	d10d      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800379a:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80037aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ae:	490d      	ldr	r1, [pc, #52]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
 80037b4:	e005      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037b6:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80037c0:	6093      	str	r3, [r2, #8]
 80037c2:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	4905      	ldr	r1, [pc, #20]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	42470068 	.word	0x42470068
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42470e40 	.word	0x42470e40

080037f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d13f      	bne.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800380e:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003816:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003824:	d12f      	bne.n	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003826:	4b1f      	ldr	r3, [pc, #124]	@ (80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003828:	617b      	str	r3, [r7, #20]
          break;
 800382a:	e02f      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800382c:	4b1c      	ldr	r3, [pc, #112]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003834:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003838:	d108      	bne.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800383a:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003842:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e007      	b.n	800385c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800384c:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003854:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800385c:	4b10      	ldr	r3, [pc, #64]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	617b      	str	r3, [r7, #20]
          break;
 8003884:	e002      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
          break;
 800388a:	bf00      	nop
        }
      }
      break;
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800388e:	bf00      	nop
    }
  }
  return frequency;
 8003890:	697b      	ldr	r3, [r7, #20]
}
 8003892:	4618      	mov	r0, r3
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	00bb8000 	.word	0x00bb8000
 80038a8:	017d7840 	.word	0x017d7840
 80038ac:	00f42400 	.word	0x00f42400

080038b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fd f9d9 	bl	8000c8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2203      	movs	r2, #3
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f814 	bl	8003910 <HAL_SD_InitCard>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00a      	b.n	8003908 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003910:	b5b0      	push	{r4, r5, r7, lr}
 8003912:	b08e      	sub	sp, #56	@ 0x38
 8003914:	af04      	add	r7, sp, #16
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800392c:	2376      	movs	r3, #118	@ 0x76
 800392e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681d      	ldr	r5, [r3, #0]
 8003934:	466c      	mov	r4, sp
 8003936:	f107 0318 	add.w	r3, r7, #24
 800393a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800393e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003948:	4628      	mov	r0, r5
 800394a:	f001 ff85 	bl	8005858 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800394e:	4b2a      	ldr	r3, [pc, #168]	@ (80039f8 <HAL_SD_InitCard+0xe8>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f001 ffc6 	bl	80058ea <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800395e:	4b26      	ldr	r3, [pc, #152]	@ (80039f8 <HAL_SD_InitCard+0xe8>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003964:	2002      	movs	r0, #2
 8003966:	f7fd fdcf 	bl	8001508 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f001 f806 	bl	800497c <SD_PowerON>
 8003970:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e02e      	b.n	80039ee <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 ff25 	bl	80047e0 <SD_InitCard>
 8003996:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01b      	b.n	80039ee <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 f825 	bl	8005a0e <SDMMC_CmdBlockLength>
 80039c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00f      	beq.n	80039ec <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <HAL_SD_InitCard+0xec>)
 80039d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3728      	adds	r7, #40	@ 0x28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bdb0      	pop	{r4, r5, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	422580a0 	.word	0x422580a0
 80039fc:	004005ff 	.word	0x004005ff

08003a00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	@ 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0c0      	b.n	8003baa <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 80b9 	bne.w	8003ba8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	441a      	add	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d907      	bls.n	8003a5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0a7      	b.n	8003baa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003a84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003a8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2200      	movs	r2, #0
 8003a94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3380      	adds	r3, #128	@ 0x80
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	025b      	lsls	r3, r3, #9
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	f7fd feff 	bl	80018d0 <HAL_DMA_Start_IT>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d017      	beq.n	8003b08 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a33      	ldr	r2, [pc, #204]	@ (8003bbc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003aee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e050      	b.n	8003baa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003b08:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d002      	beq.n	8003b1c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	025b      	lsls	r3, r3, #9
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b20:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	025b      	lsls	r3, r3, #9
 8003b26:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b28:	2390      	movs	r3, #144	@ 0x90
 8003b2a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f107 0210 	add.w	r2, r7, #16
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 ff37 	bl	80059b6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d90a      	bls.n	8003b64 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2282      	movs	r2, #130	@ 0x82
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 ff9b 	bl	8005a96 <SDMMC_CmdReadMultiBlock>
 8003b60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003b62:	e009      	b.n	8003b78 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2281      	movs	r2, #129	@ 0x81
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 ff6e 	bl	8005a52 <SDMMC_CmdReadSingleBlock>
 8003b76:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a0e      	ldr	r2, [pc, #56]	@ (8003bbc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e002      	b.n	8003baa <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3730      	adds	r7, #48	@ 0x30
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	080045ef 	.word	0x080045ef
 8003bb8:	08004661 	.word	0x08004661
 8003bbc:	004005ff 	.word	0x004005ff
 8003bc0:	4225858c 	.word	0x4225858c

08003bc4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	@ 0x30
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0c5      	b.n	8003d78 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 80be 	bne.w	8003d76 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	441a      	add	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d907      	bls.n	8003c1e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0ac      	b.n	8003d78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2203      	movs	r2, #3
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c46:	4a4e      	ldr	r2, [pc, #312]	@ (8003d80 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003c48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8003d84 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003c50:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c56:	2200      	movs	r2, #0
 8003c58:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d002      	beq.n	8003c68 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c64:	025b      	lsls	r3, r3, #9
 8003c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d90a      	bls.n	8003c84 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	22a0      	movs	r2, #160	@ 0xa0
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 ff4f 	bl	8005b1e <SDMMC_CmdWriteMultiBlock>
 8003c80:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003c82:	e009      	b.n	8003c98 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2290      	movs	r2, #144	@ 0x90
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 ff22 	bl	8005ada <SDMMC_CmdWriteSingleBlock>
 8003c96:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d012      	beq.n	8003cc4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a39      	ldr	r2, [pc, #228]	@ (8003d88 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003ca4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e059      	b.n	8003d78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003cc4:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3380      	adds	r3, #128	@ 0x80
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	025b      	lsls	r3, r3, #9
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	f7fd fde5 	bl	80018d0 <HAL_DMA_Start_IT>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01c      	beq.n	8003d46 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8003d1a:	f023 0302 	bic.w	r3, r3, #2
 8003d1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a18      	ldr	r2, [pc, #96]	@ (8003d88 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e018      	b.n	8003d78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	025b      	lsls	r3, r3, #9
 8003d50:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d52:	2390      	movs	r3, #144	@ 0x90
 8003d54:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f107 0210 	add.w	r2, r7, #16
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 fe22 	bl	80059b6 <SDIO_ConfigData>

      return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3730      	adds	r7, #48	@ 0x30
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	080045c5 	.word	0x080045c5
 8003d84:	08004661 	.word	0x08004661
 8003d88:	004005ff 	.word	0x004005ff
 8003d8c:	4225858c 	.word	0x4225858c

08003d90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_SD_IRQHandler+0x2e>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f001 f806 	bl	8004dc8 <SD_Read_IT>
 8003dbc:	e165      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 808f 	beq.w	8003eec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dd6:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003de6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003dea:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d039      	beq.n	8003e7a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <HAL_SD_IRQHandler+0x8a>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d011      	beq.n	8003e3e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 fea0 	bl	8005b64 <SDMMC_CmdStopTransfer>
 8003e24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f92f 	bl	800409c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_SD_IRQHandler+0xda>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f002 fb0e 	bl	800648c <HAL_SD_RxCpltCallback>
 8003e70:	e10b      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f002 fb00 	bl	8006478 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e78:	e107      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8102 	beq.w	800408a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d011      	beq.n	8003eb4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 fe65 	bl	8005b64 <SDMMC_CmdStopTransfer>
 8003e9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8f4 	bl	800409c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 80e5 	bne.w	800408a <HAL_SD_IRQHandler+0x2fa>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f040 80df 	bne.w	800408a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0208 	bic.w	r2, r2, #8
 8003eda:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f002 fac7 	bl	8006478 <HAL_SD_TxCpltCallback>
}
 8003eea:	e0ce      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_SD_IRQHandler+0x17c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 ffb0 	bl	8004e6a <SD_Write_IT>
 8003f0a:	e0be      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f12:	f240 233a 	movw	r3, #570	@ 0x23a
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80b6 	beq.w	800408a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f30:	f043 0202 	orr.w	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	f043 0208 	orr.w	r2, r3, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	f043 0208 	orr.w	r2, r3, #8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003fb8:	f023 0302 	bic.w	r3, r3, #2
 8003fbc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fdce 	bl	8005b64 <SDMMC_CmdStopTransfer>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f855 	bl	800409c <HAL_SD_ErrorCallback>
}
 8003ff2:	e04a      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d045      	beq.n	800408a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <HAL_SD_IRQHandler+0x282>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004016:	4a1f      	ldr	r2, [pc, #124]	@ (8004094 <HAL_SD_IRQHandler+0x304>)
 8004018:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fcae 	bl	8001980 <HAL_DMA_Abort_IT>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02f      	beq.n	800408a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fb68 	bl	8004704 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004034:	e029      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_SD_IRQHandler+0x2ba>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	4a12      	ldr	r2, [pc, #72]	@ (8004098 <HAL_SD_IRQHandler+0x308>)
 8004050:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd fc92 	bl	8001980 <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fb83 	bl	8004772 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800406c:	e00d      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f002 f9ee 	bl	8006464 <HAL_SD_AbortCallback>
}
 8004088:	e7ff      	b.n	800408a <HAL_SD_IRQHandler+0x2fa>
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	08004705 	.word	0x08004705
 8004098:	08004773 	.word	0x08004773

0800409c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040be:	0f9b      	lsrs	r3, r3, #30
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040dc:	0e1b      	lsrs	r3, r3, #24
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004106:	b2da      	uxtb	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004110:	0d1b      	lsrs	r3, r3, #20
 8004112:	b29a      	uxth	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	b2da      	uxtb	r2, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800412e:	0bdb      	lsrs	r3, r3, #15
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004140:	0b9b      	lsrs	r3, r3, #14
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004164:	0b1b      	lsrs	r3, r3, #12
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2200      	movs	r2, #0
 8004176:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417c:	2b00      	cmp	r3, #0
 800417e:	d163      	bne.n	8004248 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004184:	009a      	lsls	r2, r3, #2
 8004186:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800418a:	4013      	ands	r3, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004190:	0f92      	lsrs	r2, r2, #30
 8004192:	431a      	orrs	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419c:	0edb      	lsrs	r3, r3, #27
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ae:	0e1b      	lsrs	r3, r3, #24
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c0:	0d5b      	lsrs	r3, r3, #21
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d2:	0c9b      	lsrs	r3, r3, #18
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e4:	0bdb      	lsrs	r3, r3, #15
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	7e1b      	ldrb	r3, [r3, #24]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	3302      	adds	r3, #2
 8004208:	2201      	movs	r2, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004212:	fb03 f202 	mul.w	r2, r3, r2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	7a1b      	ldrb	r3, [r3, #8]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004234:	0a52      	lsrs	r2, r2, #9
 8004236:	fb03 f202 	mul.w	r2, r3, r2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004244:	661a      	str	r2, [r3, #96]	@ 0x60
 8004246:	e031      	b.n	80042ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	2b01      	cmp	r3, #1
 800424e:	d11d      	bne.n	800428c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	431a      	orrs	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	3301      	adds	r3, #1
 800426c:	029a      	lsls	r2, r3, #10
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004280:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	661a      	str	r2, [r3, #96]	@ 0x60
 800428a:	e00f      	b.n	80042ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a58      	ldr	r2, [pc, #352]	@ (80043f4 <HAL_SD_GetCardCSD+0x344>)
 8004292:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e09d      	b.n	80043e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042b0:	0b9b      	lsrs	r3, r3, #14
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c2:	09db      	lsrs	r3, r3, #7
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	0fdb      	lsrs	r3, r3, #31
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	0f5b      	lsrs	r3, r3, #29
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	0e9b      	lsrs	r3, r3, #26
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	b2da      	uxtb	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	0d9b      	lsrs	r3, r3, #22
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	b2da      	uxtb	r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	0d5b      	lsrs	r3, r3, #21
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	0bdb      	lsrs	r3, r3, #15
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436a:	0b9b      	lsrs	r3, r3, #14
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437e:	0b5b      	lsrs	r3, r3, #13
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	0b1b      	lsrs	r3, r3, #12
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	b2da      	uxtb	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	0a9b      	lsrs	r3, r3, #10
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	004005ff 	.word	0x004005ff

080043f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004450:	b5b0      	push	{r4, r5, r7, lr}
 8004452:	b08e      	sub	sp, #56	@ 0x38
 8004454:	af04      	add	r7, sp, #16
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2203      	movs	r2, #3
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	2b03      	cmp	r3, #3
 800446e:	d02e      	beq.n	80044ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004476:	d106      	bne.n	8004486 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
 8004484:	e029      	b.n	80044da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448c:	d10a      	bne.n	80044a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fb2a 	bl	8004ae8 <SD_WideBus_Enable>
 8004494:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80044a2:	e01a      	b.n	80044da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fb67 	bl	8004b7e <SD_WideBus_Disable>
 80044b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80044be:	e00c      	b.n	80044da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80044cc:	e005      	b.n	80044da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a26      	ldr	r2, [pc, #152]	@ (8004580 <HAL_SD_ConfigWideBusOperation+0x130>)
 80044e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044f8:	e01f      	b.n	800453a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681d      	ldr	r5, [r3, #0]
 8004520:	466c      	mov	r4, sp
 8004522:	f107 0314 	add.w	r3, r7, #20
 8004526:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800452a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004534:	4628      	mov	r0, r5
 8004536:	f001 f98f 	bl	8005858 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004542:	4618      	mov	r0, r3
 8004544:	f001 fa63 	bl	8005a0e <SDMMC_CmdBlockLength>
 8004548:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00c      	beq.n	800456a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004576:	4618      	mov	r0, r3
 8004578:	3728      	adds	r7, #40	@ 0x28
 800457a:	46bd      	mov	sp, r7
 800457c:	bdb0      	pop	{r4, r5, r7, pc}
 800457e:	bf00      	nop
 8004580:	004005ff 	.word	0x004005ff

08004584 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa7e 	bl	8004a98 <SD_SendStatus>
 800459c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	0a5b      	lsrs	r3, r3, #9
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80045ba:	693b      	ldr	r3, [r7, #16]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	2b82      	cmp	r3, #130	@ 0x82
 8004602:	d111      	bne.n	8004628 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f001 faab 	bl	8005b64 <SDMMC_CmdStopTransfer>
 800460e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff fd3a 	bl	800409c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0208 	bic.w	r2, r2, #8
 8004636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004640:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f001 ff1b 	bl	800648c <HAL_SD_RxCpltCallback>
#endif
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd fb32 	bl	8001cd8 <HAL_DMA_GetError>
 8004674:	4603      	mov	r3, r0
 8004676:	2b02      	cmp	r3, #2
 8004678:	d03e      	beq.n	80046f8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004680:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004688:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d002      	beq.n	8004696 <SD_DMAError+0x36>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d12d      	bne.n	80046f2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a19      	ldr	r2, [pc, #100]	@ (8004700 <SD_DMAError+0xa0>)
 800469c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80046ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80046ba:	6978      	ldr	r0, [r7, #20]
 80046bc:	f7ff ff62 	bl	8004584 <HAL_SD_GetCardState>
 80046c0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	d002      	beq.n	80046ce <SD_DMAError+0x6e>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d10a      	bne.n	80046e4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fa46 	bl	8005b64 <SDMMC_CmdStopTransfer>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046de:	431a      	orrs	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff fcd2 	bl	800409c <HAL_SD_ErrorCallback>
#endif
  }
}
 80046f8:	bf00      	nop
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	004005ff 	.word	0x004005ff

08004704 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f240 523a 	movw	r2, #1338	@ 0x53a
 800471a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff ff31 	bl	8004584 <HAL_SD_GetCardState>
 8004722:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d002      	beq.n	800473e <SD_DMATxAbort+0x3a>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d10a      	bne.n	8004754 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f001 fa0e 	bl	8005b64 <SDMMC_CmdStopTransfer>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	431a      	orrs	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f001 fe81 	bl	8006464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004762:	e002      	b.n	800476a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fc99 	bl	800409c <HAL_SD_ErrorCallback>
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004788:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fefa 	bl	8004584 <HAL_SD_GetCardState>
 8004790:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d002      	beq.n	80047ac <SD_DMARxAbort+0x3a>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d10a      	bne.n	80047c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f9d7 	bl	8005b64 <SDMMC_CmdStopTransfer>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f001 fe4a 	bl	8006464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80047d0:	e002      	b.n	80047d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff fc62 	bl	800409c <HAL_SD_ErrorCallback>
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047e0:	b5b0      	push	{r4, r5, r7, lr}
 80047e2:	b094      	sub	sp, #80	@ 0x50
 80047e4:	af04      	add	r7, sp, #16
 80047e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80047e8:	2301      	movs	r3, #1
 80047ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 f888 	bl	8005906 <SDIO_GetPowerState>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047fc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004800:	e0b8      	b.n	8004974 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	2b03      	cmp	r3, #3
 8004808:	d02f      	beq.n	800486a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f001 fab2 	bl	8005d78 <SDMMC_CmdSendCID>
 8004814:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <SD_InitCard+0x40>
    {
      return errorstate;
 800481c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800481e:	e0a9      	b.n	8004974 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f001 f8b2 	bl	8005990 <SDIO_GetResponse>
 800482c:	4602      	mov	r2, r0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2104      	movs	r1, #4
 8004838:	4618      	mov	r0, r3
 800483a:	f001 f8a9 	bl	8005990 <SDIO_GetResponse>
 800483e:	4602      	mov	r2, r0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2108      	movs	r1, #8
 800484a:	4618      	mov	r0, r3
 800484c:	f001 f8a0 	bl	8005990 <SDIO_GetResponse>
 8004850:	4602      	mov	r2, r0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	210c      	movs	r1, #12
 800485c:	4618      	mov	r0, r3
 800485e:	f001 f897 	bl	8005990 <SDIO_GetResponse>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	2b03      	cmp	r3, #3
 8004870:	d00d      	beq.n	800488e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f107 020e 	add.w	r2, r7, #14
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fab8 	bl	8005df2 <SDMMC_CmdSetRelAdd>
 8004882:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <SD_InitCard+0xae>
    {
      return errorstate;
 800488a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488c:	e072      	b.n	8004974 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	2b03      	cmp	r3, #3
 8004894:	d036      	beq.n	8004904 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f001 fa82 	bl	8005db4 <SDMMC_CmdSendCSD>
 80048b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80048b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ba:	e05b      	b.n	8004974 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f864 	bl	8005990 <SDIO_GetResponse>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2104      	movs	r1, #4
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 f85b 	bl	8005990 <SDIO_GetResponse>
 80048da:	4602      	mov	r2, r0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2108      	movs	r1, #8
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 f852 	bl	8005990 <SDIO_GetResponse>
 80048ec:	4602      	mov	r2, r0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	210c      	movs	r1, #12
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 f849 	bl	8005990 <SDIO_GetResponse>
 80048fe:	4602      	mov	r2, r0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2104      	movs	r1, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f001 f840 	bl	8005990 <SDIO_GetResponse>
 8004910:	4603      	mov	r3, r0
 8004912:	0d1a      	lsrs	r2, r3, #20
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004918:	f107 0310 	add.w	r3, r7, #16
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fbc6 	bl	80040b0 <HAL_SD_GetCardCSD>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800492a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800492e:	e021      	b.n	8004974 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	2200      	movs	r2, #0
 800493c:	461c      	mov	r4, r3
 800493e:	4615      	mov	r5, r2
 8004940:	4622      	mov	r2, r4
 8004942:	462b      	mov	r3, r5
 8004944:	4608      	mov	r0, r1
 8004946:	f001 f92f 	bl	8005ba8 <SDMMC_CmdSelDesel>
 800494a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800494c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <SD_InitCard+0x176>
  {
    return errorstate;
 8004952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004954:	e00e      	b.n	8004974 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681d      	ldr	r5, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	466c      	mov	r4, sp
 800495e:	f103 0210 	add.w	r2, r3, #16
 8004962:	ca07      	ldmia	r2, {r0, r1, r2}
 8004964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004968:	3304      	adds	r3, #4
 800496a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800496c:	4628      	mov	r0, r5
 800496e:	f000 ff73 	bl	8005858 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3740      	adds	r7, #64	@ 0x40
 8004978:	46bd      	mov	sp, r7
 800497a:	bdb0      	pop	{r4, r5, r7, pc}

0800497c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f001 f92a 	bl	8005bee <SDMMC_CmdGoIdleState>
 800499a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	e072      	b.n	8004a8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f93d 	bl	8005c2a <SDMMC_CmdOperCond>
 80049b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00d      	beq.n	80049d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 f913 	bl	8005bee <SDMMC_CmdGoIdleState>
 80049c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <SD_PowerON+0x5e>
    {
      return errorstate;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	e05b      	b.n	8004a8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d137      	bne.n	8004a52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 f93d 	bl	8005c68 <SDMMC_CmdAppCommand>
 80049ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d02d      	beq.n	8004a52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80049fa:	e047      	b.n	8004a8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f930 	bl	8005c68 <SDMMC_CmdAppCommand>
 8004a08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	e03b      	b.n	8004a8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	491e      	ldr	r1, [pc, #120]	@ (8004a94 <SD_PowerON+0x118>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 f946 	bl	8005cac <SDMMC_CmdAppOperCommand>
 8004a20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004a2c:	e02e      	b.n	8004a8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 ffab 	bl	8005990 <SDIO_GetResponse>
 8004a3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	0fdb      	lsrs	r3, r3, #31
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <SD_PowerON+0xcc>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <SD_PowerON+0xce>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]

    count++;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d802      	bhi.n	8004a62 <SD_PowerON+0xe6>
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0cc      	beq.n	80049fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d902      	bls.n	8004a72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a70:	e00c      	b.n	8004a8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a82:	e002      	b.n	8004a8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	c1100000 	.word	0xc1100000

08004a98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004aa8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004aac:	e018      	b.n	8004ae0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f001 f9ba 	bl	8005e34 <SDMMC_CmdSendStatus>
 8004ac0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <SD_SendStatus+0x34>
  {
    return errorstate;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	e009      	b.n	8004ae0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff5c 	bl	8005990 <SDIO_GetResponse>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 ff46 	bl	8005990 <SDIO_GetResponse>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b0e:	d102      	bne.n	8004b16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b14:	e02f      	b.n	8004b76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b16:	f107 030c 	add.w	r3, r7, #12
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f879 	bl	8004c14 <SD_FindSCR>
 8004b22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	e023      	b.n	8004b76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01c      	beq.n	8004b72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f001 f88f 	bl	8005c68 <SDMMC_CmdAppCommand>
 8004b4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	e00f      	b.n	8004b76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 f8c8 	bl	8005cf2 <SDMMC_CmdBusWidth>
 8004b62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	e003      	b.n	8004b76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e001      	b.n	8004b76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fefb 	bl	8005990 <SDIO_GetResponse>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ba4:	d102      	bne.n	8004bac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ba6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004baa:	e02f      	b.n	8004c0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f82e 	bl	8004c14 <SD_FindSCR>
 8004bb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	e023      	b.n	8004c0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01c      	beq.n	8004c08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f001 f844 	bl	8005c68 <SDMMC_CmdAppCommand>
 8004be0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	e00f      	b.n	8004c0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 f87d 	bl	8005cf2 <SDMMC_CmdBusWidth>
 8004bf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	e003      	b.n	8004c0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e001      	b.n	8004c0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b08f      	sub	sp, #60	@ 0x3c
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c1e:	f7fc fc67 	bl	80014f0 <HAL_GetTick>
 8004c22:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2108      	movs	r1, #8
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fee7 	bl	8005a0e <SDMMC_CmdBlockLength>
 8004c40:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	e0b9      	b.n	8004dc0 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f001 f805 	bl	8005c68 <SDMMC_CmdAppCommand>
 8004c5e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	e0aa      	b.n	8004dc0 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c70:	2308      	movs	r3, #8
 8004c72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c74:	2330      	movs	r3, #48	@ 0x30
 8004c76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f107 0210 	add.w	r2, r7, #16
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fe91 	bl	80059b6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 f84c 	bl	8005d36 <SDMMC_CmdSendSCR>
 8004c9e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02a      	beq.n	8004cfc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	e08a      	b.n	8004dc0 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00f      	beq.n	8004cd8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	f107 0208 	add.w	r2, r7, #8
 8004cc4:	18d4      	adds	r4, r2, r3
 8004cc6:	4608      	mov	r0, r1
 8004cc8:	f000 fdf1 	bl	80058ae <SDIO_ReadFIFO>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	6023      	str	r3, [r4, #0]
      index++;
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd6:	e006      	b.n	8004ce6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d012      	beq.n	8004d0c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004ce6:	f7fc fc03 	bl	80014f0 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d102      	bne.n	8004cfc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004cf6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004cfa:	e061      	b.n	8004dc0 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d02:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0cf      	beq.n	8004caa <SD_FindSCR+0x96>
 8004d0a:	e000      	b.n	8004d0e <SD_FindSCR+0xfa>
      break;
 8004d0c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <SD_FindSCR+0x116>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d32:	2308      	movs	r3, #8
 8004d34:	e044      	b.n	8004dc0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e037      	b.n	8004dc0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2220      	movs	r2, #32
 8004d64:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004d66:	2320      	movs	r3, #32
 8004d68:	e02a      	b.n	8004dc0 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	061a      	lsls	r2, r3, #24
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d80:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	0e1b      	lsrs	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	601a      	str	r2, [r3, #0]
    scr++;
 8004d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d98:	3304      	adds	r3, #4
 8004d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	061a      	lsls	r2, r3, #24
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004da8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	0a1b      	lsrs	r3, r3, #8
 8004dae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004db2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	0e1b      	lsrs	r3, r3, #24
 8004db8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	373c      	adds	r7, #60	@ 0x3c
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd90      	pop	{r4, r7, pc}

08004dc8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d03f      	beq.n	8004e62 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e033      	b.n	8004e50 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fd5e 	bl	80058ae <SDIO_ReadFIFO>
 8004df2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	0e1b      	lsrs	r3, r3, #24
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3301      	adds	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b07      	cmp	r3, #7
 8004e54:	d9c8      	bls.n	8004de8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004e62:	bf00      	nop
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d043      	beq.n	8004f0c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e037      	b.n	8004efa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	021a      	lsls	r2, r3, #8
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	041a      	lsls	r2, r3, #16
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	061a      	lsls	r2, r3, #24
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f107 0208 	add.w	r2, r7, #8
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fcea 	bl	80058c8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b07      	cmp	r3, #7
 8004efe:	d9c4      	bls.n	8004e8a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e042      	b.n	8004fac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc f902 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	@ 0x24
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fa09 	bl	8005370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	@ 0x28
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d175      	bne.n	80050c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_UART_Transmit+0x2c>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e06e      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	@ 0x21
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff2:	f7fc fa7d 	bl	80014f0 <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800500c:	d108      	bne.n	8005020 <HAL_UART_Transmit+0x6c>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e003      	b.n	8005028 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005028:	e02e      	b.n	8005088 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2200      	movs	r2, #0
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f8df 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e03a      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3302      	adds	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e007      	b.n	800507a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1cb      	bne.n	800502a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2140      	movs	r1, #64	@ 0x40
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f8ab 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e006      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08a      	sub	sp, #40	@ 0x28
 80050ce:	af02      	add	r7, sp, #8
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	f040 8081 	bne.w	80051ee <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Receive+0x2e>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e079      	b.n	80051f0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2222      	movs	r2, #34	@ 0x22
 8005106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005110:	f7fc f9ee 	bl	80014f0 <HAL_GetTick>
 8005114:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512a:	d108      	bne.n	800513e <HAL_UART_Receive+0x74>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e003      	b.n	8005146 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005146:	e047      	b.n	80051d8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	2120      	movs	r1, #32
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f850 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e042      	b.n	80051f0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10c      	bne.n	800518a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517c:	b29a      	uxth	r2, r3
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	3302      	adds	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e01f      	b.n	80051ca <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005192:	d007      	beq.n	80051a4 <HAL_UART_Receive+0xda>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <HAL_UART_Receive+0xe8>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e008      	b.n	80051c4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1b2      	bne.n	8005148 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005208:	e03b      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d037      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fc f96d 	bl	80014f0 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <UART_WaitOnFlagUntilTimeout+0x30>
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e03a      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d023      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0x8a>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b80      	cmp	r3, #128	@ 0x80
 800523e:	d020      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	d01d      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b08      	cmp	r3, #8
 8005252:	d116      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f81d 	bl	80052aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2208      	movs	r2, #8
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e00f      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	429a      	cmp	r2, r3
 800529e:	d0b4      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b095      	sub	sp, #84	@ 0x54
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80052d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e5      	bne.n	80052b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3314      	adds	r3, #20
 80052ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800530c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e5      	bne.n	80052e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531e:	2b01      	cmp	r3, #1
 8005320:	d119      	bne.n	8005356 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	60bb      	str	r3, [r7, #8]
   return(result);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 0310 	bic.w	r3, r3, #16
 8005338:	647b      	str	r3, [r7, #68]	@ 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	330c      	adds	r3, #12
 8005340:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005342:	61ba      	str	r2, [r7, #24]
 8005344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	613b      	str	r3, [r7, #16]
   return(result);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e5      	bne.n	8005322 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005364:	bf00      	nop
 8005366:	3754      	adds	r7, #84	@ 0x54
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005374:	b0c0      	sub	sp, #256	@ 0x100
 8005376:	af00      	add	r7, sp, #0
 8005378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	68d9      	ldr	r1, [r3, #12]
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	ea40 0301 	orr.w	r3, r0, r1
 8005398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053c8:	f021 010c 	bic.w	r1, r1, #12
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053d6:	430b      	orrs	r3, r1
 80053d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ea:	6999      	ldr	r1, [r3, #24]
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	ea40 0301 	orr.w	r3, r0, r1
 80053f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b8f      	ldr	r3, [pc, #572]	@ (800563c <UART_SetConfig+0x2cc>)
 8005400:	429a      	cmp	r2, r3
 8005402:	d005      	beq.n	8005410 <UART_SetConfig+0xa0>
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b8d      	ldr	r3, [pc, #564]	@ (8005640 <UART_SetConfig+0x2d0>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d104      	bne.n	800541a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005410:	f7fe f8f8 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8005414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005418:	e003      	b.n	8005422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800541a:	f7fe f8df 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 800541e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542c:	f040 810c 	bne.w	8005648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800543a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800543e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	1891      	adds	r1, r2, r2
 8005448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800544a:	415b      	adcs	r3, r3
 800544c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800544e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005452:	4621      	mov	r1, r4
 8005454:	eb12 0801 	adds.w	r8, r2, r1
 8005458:	4629      	mov	r1, r5
 800545a:	eb43 0901 	adc.w	r9, r3, r1
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800546a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800546e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005472:	4690      	mov	r8, r2
 8005474:	4699      	mov	r9, r3
 8005476:	4623      	mov	r3, r4
 8005478:	eb18 0303 	adds.w	r3, r8, r3
 800547c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005480:	462b      	mov	r3, r5
 8005482:	eb49 0303 	adc.w	r3, r9, r3
 8005486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800549a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800549e:	460b      	mov	r3, r1
 80054a0:	18db      	adds	r3, r3, r3
 80054a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a4:	4613      	mov	r3, r2
 80054a6:	eb42 0303 	adc.w	r3, r2, r3
 80054aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054b4:	f7fa fedc 	bl	8000270 <__aeabi_uldivmod>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4b61      	ldr	r3, [pc, #388]	@ (8005644 <UART_SetConfig+0x2d4>)
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	011c      	lsls	r4, r3, #4
 80054c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	1891      	adds	r1, r2, r2
 80054de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054e0:	415b      	adcs	r3, r3
 80054e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054e8:	4641      	mov	r1, r8
 80054ea:	eb12 0a01 	adds.w	sl, r2, r1
 80054ee:	4649      	mov	r1, r9
 80054f0:	eb43 0b01 	adc.w	fp, r3, r1
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005508:	4692      	mov	sl, r2
 800550a:	469b      	mov	fp, r3
 800550c:	4643      	mov	r3, r8
 800550e:	eb1a 0303 	adds.w	r3, sl, r3
 8005512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005516:	464b      	mov	r3, r9
 8005518:	eb4b 0303 	adc.w	r3, fp, r3
 800551c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800552c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005534:	460b      	mov	r3, r1
 8005536:	18db      	adds	r3, r3, r3
 8005538:	643b      	str	r3, [r7, #64]	@ 0x40
 800553a:	4613      	mov	r3, r2
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	647b      	str	r3, [r7, #68]	@ 0x44
 8005542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800554a:	f7fa fe91 	bl	8000270 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4611      	mov	r1, r2
 8005554:	4b3b      	ldr	r3, [pc, #236]	@ (8005644 <UART_SetConfig+0x2d4>)
 8005556:	fba3 2301 	umull	r2, r3, r3, r1
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	2264      	movs	r2, #100	@ 0x64
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	1acb      	subs	r3, r1, r3
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800556a:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <UART_SetConfig+0x2d4>)
 800556c:	fba3 2302 	umull	r2, r3, r3, r2
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005578:	441c      	add	r4, r3
 800557a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557e:	2200      	movs	r2, #0
 8005580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	1891      	adds	r1, r2, r2
 8005592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005594:	415b      	adcs	r3, r3
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800559c:	4641      	mov	r1, r8
 800559e:	1851      	adds	r1, r2, r1
 80055a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80055a2:	4649      	mov	r1, r9
 80055a4:	414b      	adcs	r3, r1
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055b4:	4659      	mov	r1, fp
 80055b6:	00cb      	lsls	r3, r1, #3
 80055b8:	4651      	mov	r1, sl
 80055ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055be:	4651      	mov	r1, sl
 80055c0:	00ca      	lsls	r2, r1, #3
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	4642      	mov	r2, r8
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055d0:	464b      	mov	r3, r9
 80055d2:	460a      	mov	r2, r1
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055f0:	460b      	mov	r3, r1
 80055f2:	18db      	adds	r3, r3, r3
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055f6:	4613      	mov	r3, r2
 80055f8:	eb42 0303 	adc.w	r3, r2, r3
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005606:	f7fa fe33 	bl	8000270 <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <UART_SetConfig+0x2d4>)
 8005610:	fba3 1302 	umull	r1, r3, r3, r2
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	2164      	movs	r1, #100	@ 0x64
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	3332      	adds	r3, #50	@ 0x32
 8005622:	4a08      	ldr	r2, [pc, #32]	@ (8005644 <UART_SetConfig+0x2d4>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f003 0207 	and.w	r2, r3, #7
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4422      	add	r2, r4
 8005636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005638:	e106      	b.n	8005848 <UART_SetConfig+0x4d8>
 800563a:	bf00      	nop
 800563c:	40011000 	.word	0x40011000
 8005640:	40011400 	.word	0x40011400
 8005644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564c:	2200      	movs	r2, #0
 800564e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800565a:	4642      	mov	r2, r8
 800565c:	464b      	mov	r3, r9
 800565e:	1891      	adds	r1, r2, r2
 8005660:	6239      	str	r1, [r7, #32]
 8005662:	415b      	adcs	r3, r3
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
 8005666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800566a:	4641      	mov	r1, r8
 800566c:	1854      	adds	r4, r2, r1
 800566e:	4649      	mov	r1, r9
 8005670:	eb43 0501 	adc.w	r5, r3, r1
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	00eb      	lsls	r3, r5, #3
 800567e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005682:	00e2      	lsls	r2, r4, #3
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	4643      	mov	r3, r8
 800568a:	18e3      	adds	r3, r4, r3
 800568c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005690:	464b      	mov	r3, r9
 8005692:	eb45 0303 	adc.w	r3, r5, r3
 8005696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056b6:	4629      	mov	r1, r5
 80056b8:	008b      	lsls	r3, r1, #2
 80056ba:	4621      	mov	r1, r4
 80056bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c0:	4621      	mov	r1, r4
 80056c2:	008a      	lsls	r2, r1, #2
 80056c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056c8:	f7fa fdd2 	bl	8000270 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4b60      	ldr	r3, [pc, #384]	@ (8005854 <UART_SetConfig+0x4e4>)
 80056d2:	fba3 2302 	umull	r2, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	011c      	lsls	r4, r3, #4
 80056da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056ec:	4642      	mov	r2, r8
 80056ee:	464b      	mov	r3, r9
 80056f0:	1891      	adds	r1, r2, r2
 80056f2:	61b9      	str	r1, [r7, #24]
 80056f4:	415b      	adcs	r3, r3
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fc:	4641      	mov	r1, r8
 80056fe:	1851      	adds	r1, r2, r1
 8005700:	6139      	str	r1, [r7, #16]
 8005702:	4649      	mov	r1, r9
 8005704:	414b      	adcs	r3, r1
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005714:	4659      	mov	r1, fp
 8005716:	00cb      	lsls	r3, r1, #3
 8005718:	4651      	mov	r1, sl
 800571a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800571e:	4651      	mov	r1, sl
 8005720:	00ca      	lsls	r2, r1, #3
 8005722:	4610      	mov	r0, r2
 8005724:	4619      	mov	r1, r3
 8005726:	4603      	mov	r3, r0
 8005728:	4642      	mov	r2, r8
 800572a:	189b      	adds	r3, r3, r2
 800572c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005730:	464b      	mov	r3, r9
 8005732:	460a      	mov	r2, r1
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005754:	4649      	mov	r1, r9
 8005756:	008b      	lsls	r3, r1, #2
 8005758:	4641      	mov	r1, r8
 800575a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575e:	4641      	mov	r1, r8
 8005760:	008a      	lsls	r2, r1, #2
 8005762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005766:	f7fa fd83 	bl	8000270 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4611      	mov	r1, r2
 8005770:	4b38      	ldr	r3, [pc, #224]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005772:	fba3 2301 	umull	r2, r3, r3, r1
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2264      	movs	r2, #100	@ 0x64
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	1acb      	subs	r3, r1, r3
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	3332      	adds	r3, #50	@ 0x32
 8005784:	4a33      	ldr	r2, [pc, #204]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005790:	441c      	add	r4, r3
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005796:	2200      	movs	r2, #0
 8005798:	673b      	str	r3, [r7, #112]	@ 0x70
 800579a:	677a      	str	r2, [r7, #116]	@ 0x74
 800579c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	415b      	adcs	r3, r3
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057b0:	4641      	mov	r1, r8
 80057b2:	1851      	adds	r1, r2, r1
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	4649      	mov	r1, r9
 80057b8:	414b      	adcs	r3, r1
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057c8:	4659      	mov	r1, fp
 80057ca:	00cb      	lsls	r3, r1, #3
 80057cc:	4651      	mov	r1, sl
 80057ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d2:	4651      	mov	r1, sl
 80057d4:	00ca      	lsls	r2, r1, #3
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	4642      	mov	r2, r8
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057e2:	464b      	mov	r3, r9
 80057e4:	460a      	mov	r2, r1
 80057e6:	eb42 0303 	adc.w	r3, r2, r3
 80057ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80057f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005804:	4649      	mov	r1, r9
 8005806:	008b      	lsls	r3, r1, #2
 8005808:	4641      	mov	r1, r8
 800580a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800580e:	4641      	mov	r1, r8
 8005810:	008a      	lsls	r2, r1, #2
 8005812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005816:	f7fa fd2b 	bl	8000270 <__aeabi_uldivmod>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005820:	fba3 1302 	umull	r1, r3, r3, r2
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	2164      	movs	r1, #100	@ 0x64
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	3332      	adds	r3, #50	@ 0x32
 8005832:	4a08      	ldr	r2, [pc, #32]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	f003 020f 	and.w	r2, r3, #15
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4422      	add	r2, r4
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800584e:	46bd      	mov	sp, r7
 8005850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005854:	51eb851f 	.word	0x51eb851f

08005858 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005858:	b084      	sub	sp, #16
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	f107 001c 	add.w	r0, r7, #28
 8005866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800586e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005870:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005872:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005876:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800587a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800587e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005882:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005892:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	b004      	add	sp, #16
 80058ac:	4770      	bx	lr

080058ae <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2203      	movs	r2, #3
 80058f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0303 	and.w	r3, r3, #3
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005940:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005946:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800594c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800595c:	f023 030f 	bic.w	r3, r3, #15
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	b2db      	uxtb	r3, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3314      	adds	r3, #20
 800599e:	461a      	mov	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
}  
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80059dc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80059e2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80059e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0

}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b088      	sub	sp, #32
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a20:	2340      	movs	r3, #64	@ 0x40
 8005a22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a2e:	f107 0308 	add.w	r3, r7, #8
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ff74 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a3e:	2110      	movs	r1, #16
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa19 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a48:	69fb      	ldr	r3, [r7, #28]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b088      	sub	sp, #32
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005a60:	2311      	movs	r3, #17
 8005a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a64:	2340      	movs	r3, #64	@ 0x40
 8005a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a72:	f107 0308 	add.w	r3, r7, #8
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff ff52 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a82:	2111      	movs	r1, #17
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f9f7 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b088      	sub	sp, #32
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005aa4:	2312      	movs	r3, #18
 8005aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005aa8:	2340      	movs	r3, #64	@ 0x40
 8005aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ab6:	f107 0308 	add.w	r3, r7, #8
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ff30 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac6:	2112      	movs	r1, #18
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f9d5 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b088      	sub	sp, #32
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005ae8:	2318      	movs	r3, #24
 8005aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005aec:	2340      	movs	r3, #64	@ 0x40
 8005aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005af8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ff0e 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	2118      	movs	r1, #24
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f9b3 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b14:	69fb      	ldr	r3, [r7, #28]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b088      	sub	sp, #32
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005b2c:	2319      	movs	r3, #25
 8005b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b30:	2340      	movs	r3, #64	@ 0x40
 8005b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff feec 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4e:	2119      	movs	r1, #25
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f991 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b58:	69fb      	ldr	r3, [r7, #28]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005b70:	230c      	movs	r3, #12
 8005b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b74:	2340      	movs	r3, #64	@ 0x40
 8005b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff feca 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005b8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ba4 <SDMMC_CmdStopTransfer+0x40>)
 8005b90:	210c      	movs	r1, #12
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f970 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	05f5e100 	.word	0x05f5e100

08005ba8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	@ 0x28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005bb8:	2307      	movs	r3, #7
 8005bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bbc:	2340      	movs	r3, #64	@ 0x40
 8005bbe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bc8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bca:	f107 0310 	add.w	r3, r7, #16
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff fea6 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bda:	2107      	movs	r1, #7
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f94b 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005be2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3728      	adds	r7, #40	@ 0x28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b088      	sub	sp, #32
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c0c:	f107 0308 	add.w	r3, r7, #8
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fe85 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb65 	bl	80062e8 <SDMMC_GetCmdError>
 8005c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c20:	69fb      	ldr	r3, [r7, #28]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b088      	sub	sp, #32
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005c32:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c38:	2308      	movs	r3, #8
 8005c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c3c:	2340      	movs	r3, #64	@ 0x40
 8005c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff fe66 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 faf8 	bl	800624c <SDMMC_GetCmdResp7>
 8005c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c76:	2337      	movs	r3, #55	@ 0x37
 8005c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c7a:	2340      	movs	r3, #64	@ 0x40
 8005c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c88:	f107 0308 	add.w	r3, r7, #8
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fe47 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c98:	2137      	movs	r1, #55	@ 0x37
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f8ec 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005cc2:	2329      	movs	r3, #41	@ 0x29
 8005cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cc6:	2340      	movs	r3, #64	@ 0x40
 8005cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fe21 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f9ff 	bl	80060e4 <SDMMC_GetCmdResp3>
 8005ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b088      	sub	sp, #32
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005d00:	2306      	movs	r3, #6
 8005d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d04:	2340      	movs	r3, #64	@ 0x40
 8005d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d12:	f107 0308 	add.w	r3, r7, #8
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fe02 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d22:	2106      	movs	r1, #6
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8a7 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005d2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b088      	sub	sp, #32
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005d42:	2333      	movs	r3, #51	@ 0x33
 8005d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d46:	2340      	movs	r3, #64	@ 0x40
 8005d48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d54:	f107 0308 	add.w	r3, r7, #8
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fde1 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d64:	2133      	movs	r1, #51	@ 0x33
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f886 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005d84:	2302      	movs	r3, #2
 8005d86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005d88:	23c0      	movs	r3, #192	@ 0xc0
 8005d8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d96:	f107 0308 	add.w	r3, r7, #8
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff fdc0 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f956 	bl	8006054 <SDMMC_GetCmdResp2>
 8005da8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005daa:	69fb      	ldr	r3, [r7, #28]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005dc2:	2309      	movs	r3, #9
 8005dc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005dc6:	23c0      	movs	r3, #192	@ 0xc0
 8005dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fda1 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f937 	bl	8006054 <SDMMC_GetCmdResp2>
 8005de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de8:	69fb      	ldr	r3, [r7, #28]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b088      	sub	sp, #32
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005e00:	2303      	movs	r3, #3
 8005e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e04:	2340      	movs	r3, #64	@ 0x40
 8005e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fd82 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	2103      	movs	r1, #3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f99c 	bl	8006160 <SDMMC_GetCmdResp6>
 8005e28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005e42:	230d      	movs	r3, #13
 8005e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e46:	2340      	movs	r3, #64	@ 0x40
 8005e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e54:	f107 0308 	add.w	r3, r7, #8
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fd61 	bl	8005922 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e64:	210d      	movs	r1, #13
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f806 	bl	8005e78 <SDMMC_GetCmdResp1>
 8005e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	460b      	mov	r3, r1
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005e86:	4b70      	ldr	r3, [pc, #448]	@ (8006048 <SDMMC_GetCmdResp1+0x1d0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a70      	ldr	r2, [pc, #448]	@ (800604c <SDMMC_GetCmdResp1+0x1d4>)
 8005e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e90:	0a5a      	lsrs	r2, r3, #9
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	1e5a      	subs	r2, r3, #1
 8005e9e:	61fa      	str	r2, [r7, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ea4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ea8:	e0c9      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0ef      	beq.n	8005e9a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1ea      	bne.n	8005e9a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	e0b1      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0a6      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	22c5      	movs	r2, #197	@ 0xc5
 8005ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fd3d 	bl	8005976 <SDIO_GetCommandResponse>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d001      	beq.n	8005f0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e099      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff fd3f 	bl	8005990 <SDIO_GetResponse>
 8005f12:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4b4e      	ldr	r3, [pc, #312]	@ (8006050 <SDMMC_GetCmdResp1+0x1d8>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e08d      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da02      	bge.n	8005f2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005f28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f2c:	e087      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005f38:	2340      	movs	r3, #64	@ 0x40
 8005f3a:	e080      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005f46:	2380      	movs	r3, #128	@ 0x80
 8005f48:	e079      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005f54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f58:	e071      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005f64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f68:	e069      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005f74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f78:	e061      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005f84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f88:	e059      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f98:	e051      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fa8:	e049      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005fb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005fb8:	e041      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fc8:	e039      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fd8:	e031      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005fe4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005fe8:	e029      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005ff4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005ff8:	e021      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006004:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006008:	e019      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006014:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006018:	e011      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006024:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006028:	e009      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006034:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006038:	e001      	b.n	800603e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800603a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000000 	.word	0x20000000
 800604c:	10624dd3 	.word	0x10624dd3
 8006050:	fdffe008 	.word	0xfdffe008

08006054 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800605c:	4b1f      	ldr	r3, [pc, #124]	@ (80060dc <SDMMC_GetCmdResp2+0x88>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1f      	ldr	r2, [pc, #124]	@ (80060e0 <SDMMC_GetCmdResp2+0x8c>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	0a5b      	lsrs	r3, r3, #9
 8006068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1e5a      	subs	r2, r3, #1
 8006076:	60fa      	str	r2, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800607c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006080:	e026      	b.n	80060d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006086:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ef      	beq.n	8006072 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1ea      	bne.n	8006072 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2204      	movs	r2, #4
 80060ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060ae:	2304      	movs	r3, #4
 80060b0:	e00e      	b.n	80060d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e003      	b.n	80060d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	22c5      	movs	r2, #197	@ 0xc5
 80060cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20000000 	.word	0x20000000
 80060e0:	10624dd3 	.word	0x10624dd3

080060e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <SDMMC_GetCmdResp3+0x74>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1a      	ldr	r2, [pc, #104]	@ (800615c <SDMMC_GetCmdResp3+0x78>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	0a5b      	lsrs	r3, r3, #9
 80060f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fc:	fb02 f303 	mul.w	r3, r2, r3
 8006100:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1e5a      	subs	r2, r3, #1
 8006106:	60fa      	str	r2, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800610c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006110:	e01b      	b.n	800614a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006116:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0ef      	beq.n	8006102 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ea      	bne.n	8006102 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2204      	movs	r2, #4
 800613c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800613e:	2304      	movs	r3, #4
 8006140:	e003      	b.n	800614a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	22c5      	movs	r2, #197	@ 0xc5
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000000 	.word	0x20000000
 800615c:	10624dd3 	.word	0x10624dd3

08006160 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	460b      	mov	r3, r1
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800616e:	4b35      	ldr	r3, [pc, #212]	@ (8006244 <SDMMC_GetCmdResp6+0xe4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a35      	ldr	r2, [pc, #212]	@ (8006248 <SDMMC_GetCmdResp6+0xe8>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	0a5b      	lsrs	r3, r3, #9
 800617a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1e5a      	subs	r2, r3, #1
 8006188:	61fa      	str	r2, [r7, #28]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800618e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006192:	e052      	b.n	800623a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006198:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0ef      	beq.n	8006184 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1ea      	bne.n	8006184 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2204      	movs	r2, #4
 80061be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061c0:	2304      	movs	r3, #4
 80061c2:	e03a      	b.n	800623a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e02f      	b.n	800623a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff fbcb 	bl	8005976 <SDIO_GetCommandResponse>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d001      	beq.n	80061ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e025      	b.n	800623a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	22c5      	movs	r2, #197	@ 0xc5
 80061f2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80061f4:	2100      	movs	r1, #0
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fbca 	bl	8005990 <SDIO_GetResponse>
 80061fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	b29a      	uxth	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006212:	2300      	movs	r3, #0
 8006214:	e011      	b.n	800623a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006224:	e009      	b.n	800623a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006234:	e001      	b.n	800623a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000000 	.word	0x20000000
 8006248:	10624dd3 	.word	0x10624dd3

0800624c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006254:	4b22      	ldr	r3, [pc, #136]	@ (80062e0 <SDMMC_GetCmdResp7+0x94>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a22      	ldr	r2, [pc, #136]	@ (80062e4 <SDMMC_GetCmdResp7+0x98>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	0a5b      	lsrs	r3, r3, #9
 8006260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006264:	fb02 f303 	mul.w	r3, r2, r3
 8006268:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1e5a      	subs	r2, r3, #1
 800626e:	60fa      	str	r2, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006274:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006278:	e02c      	b.n	80062d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0ef      	beq.n	800626a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ea      	bne.n	800626a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2204      	movs	r2, #4
 80062a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062a6:	2304      	movs	r3, #4
 80062a8:	e014      	b.n	80062d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062bc:	2301      	movs	r3, #1
 80062be:	e009      	b.n	80062d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2240      	movs	r2, #64	@ 0x40
 80062d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80062d2:	2300      	movs	r3, #0
  
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000000 	.word	0x20000000
 80062e4:	10624dd3 	.word	0x10624dd3

080062e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062f0:	4b11      	ldr	r3, [pc, #68]	@ (8006338 <SDMMC_GetCmdError+0x50>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a11      	ldr	r2, [pc, #68]	@ (800633c <SDMMC_GetCmdError+0x54>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0a5b      	lsrs	r3, r3, #9
 80062fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	60fa      	str	r2, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006310:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006314:	e009      	b.n	800632a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f1      	beq.n	8006306 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	22c5      	movs	r2, #197	@ 0xc5
 8006326:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	20000000 	.word	0x20000000
 800633c:	10624dd3 	.word	0x10624dd3

08006340 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006344:	4904      	ldr	r1, [pc, #16]	@ (8006358 <MX_FATFS_Init+0x18>)
 8006346:	4805      	ldr	r0, [pc, #20]	@ (800635c <MX_FATFS_Init+0x1c>)
 8006348:	f003 fe52 	bl	8009ff0 <FATFS_LinkDriver>
 800634c:	4603      	mov	r3, r0
 800634e:	461a      	mov	r2, r3
 8006350:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <MX_FATFS_Init+0x20>)
 8006352:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006354:	bf00      	nop
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000d28 	.word	0x20000d28
 800635c:	0800b5c8 	.word	0x0800b5c8
 8006360:	20000d24 	.word	0x20000d24

08006364 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006368:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800636a:	4618      	mov	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800637e:	f000 f896 	bl	80064ae <BSP_SD_IsDetected>
 8006382:	4603      	mov	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d001      	beq.n	800638c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e012      	b.n	80063b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800638c:	480b      	ldr	r0, [pc, #44]	@ (80063bc <BSP_SD_Init+0x48>)
 800638e:	f7fd fa8f 	bl	80038b0 <HAL_SD_Init>
 8006392:	4603      	mov	r3, r0
 8006394:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800639c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80063a0:	4806      	ldr	r0, [pc, #24]	@ (80063bc <BSP_SD_Init+0x48>)
 80063a2:	f7fe f855 	bl	8004450 <HAL_SD_ConfigWideBusOperation>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80063b0:	79fb      	ldrb	r3, [r7, #7]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000134 	.word	0x20000134

080063c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	68f9      	ldr	r1, [r7, #12]
 80063d6:	4806      	ldr	r0, [pc, #24]	@ (80063f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80063d8:	f7fd fb12 	bl	8003a00 <HAL_SD_ReadBlocks_DMA>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20000134 	.word	0x20000134

080063f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	68f9      	ldr	r1, [r7, #12]
 800640a:	4806      	ldr	r0, [pc, #24]	@ (8006424 <BSP_SD_WriteBlocks_DMA+0x30>)
 800640c:	f7fd fbda 	bl	8003bc4 <HAL_SD_WriteBlocks_DMA>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000134 	.word	0x20000134

08006428 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800642c:	4805      	ldr	r0, [pc, #20]	@ (8006444 <BSP_SD_GetCardState+0x1c>)
 800642e:	f7fe f8a9 	bl	8004584 <HAL_SD_GetCardState>
 8006432:	4603      	mov	r3, r0
 8006434:	2b04      	cmp	r3, #4
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
}
 800643e:	4618      	mov	r0, r3
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000134 	.word	0x20000134

08006448 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4803      	ldr	r0, [pc, #12]	@ (8006460 <BSP_SD_GetCardInfo+0x18>)
 8006454:	f7fd ffd0 	bl	80043f8 <HAL_SD_GetCardInfo>
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000134 	.word	0x20000134

08006464 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800646c:	f000 f818 	bl	80064a0 <BSP_SD_AbortCallback>
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006480:	f000 f9a8 	bl	80067d4 <BSP_SD_WriteCpltCallback>
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006494:	f000 f9aa 	bl	80067ec <BSP_SD_ReadCpltCallback>
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0

}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80064b4:	2301      	movs	r3, #1
 80064b6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80064b8:	f000 f80c 	bl	80064d4 <BSP_PlatformIsDetected>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80064c2:	2300      	movs	r3, #0
 80064c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	b2db      	uxtb	r3, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80064da:	2301      	movs	r3, #1
 80064dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80064de:	2108      	movs	r1, #8
 80064e0:	4806      	ldr	r0, [pc, #24]	@ (80064fc <BSP_PlatformIsDetected+0x28>)
 80064e2:	f7fb fe81 	bl	80021e8 <HAL_GPIO_ReadPin>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80064ec:	2300      	movs	r3, #0
 80064ee:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80064f0:	79fb      	ldrb	r3, [r7, #7]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40020c00 	.word	0x40020c00

08006500 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006508:	f7fa fff2 	bl	80014f0 <HAL_GetTick>
 800650c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800650e:	e006      	b.n	800651e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006510:	f7ff ff8a 	bl	8006428 <BSP_SD_GetCardState>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800651a:	2300      	movs	r3, #0
 800651c:	e009      	b.n	8006532 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800651e:	f7fa ffe7 	bl	80014f0 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	429a      	cmp	r2, r3
 800652c:	d8f0      	bhi.n	8006510 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006546:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <SD_CheckStatus+0x38>)
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800654c:	f7ff ff6c 	bl	8006428 <BSP_SD_GetCardState>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d107      	bne.n	8006566 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006556:	4b07      	ldr	r3, [pc, #28]	@ (8006574 <SD_CheckStatus+0x38>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b04      	ldr	r3, [pc, #16]	@ (8006574 <SD_CheckStatus+0x38>)
 8006564:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006566:	4b03      	ldr	r3, [pc, #12]	@ (8006574 <SD_CheckStatus+0x38>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b2db      	uxtb	r3, r3
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20000011 	.word	0x20000011

08006578 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006582:	f7ff fef7 	bl	8006374 <BSP_SD_Init>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d107      	bne.n	800659c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff ffd4 	bl	800653c <SD_CheckStatus>
 8006594:	4603      	mov	r3, r0
 8006596:	461a      	mov	r2, r3
 8006598:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <SD_initialize+0x34>)
 800659a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800659c:	4b03      	ldr	r3, [pc, #12]	@ (80065ac <SD_initialize+0x34>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b2db      	uxtb	r3, r3
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000011 	.word	0x20000011

080065b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ffbd 	bl	800653c <SD_CheckStatus>
 80065c2:	4603      	mov	r3, r0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80065e0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80065e4:	f7ff ff8c 	bl	8006500 <SD_CheckStatusWithTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da01      	bge.n	80065f2 <SD_read+0x26>
  {
    return res;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	e03b      	b.n	800666a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	68b8      	ldr	r0, [r7, #8]
 80065f8:	f7ff fee2 	bl	80063c0 <BSP_SD_ReadBlocks_DMA>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d132      	bne.n	8006668 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006602:	4b1c      	ldr	r3, [pc, #112]	@ (8006674 <SD_read+0xa8>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006608:	f7fa ff72 	bl	80014f0 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800660e:	bf00      	nop
 8006610:	4b18      	ldr	r3, [pc, #96]	@ (8006674 <SD_read+0xa8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d108      	bne.n	800662a <SD_read+0x5e>
 8006618:	f7fa ff6a 	bl	80014f0 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006626:	4293      	cmp	r3, r2
 8006628:	d9f2      	bls.n	8006610 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800662a:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <SD_read+0xa8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d102      	bne.n	8006638 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	75fb      	strb	r3, [r7, #23]
 8006636:	e017      	b.n	8006668 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006638:	4b0e      	ldr	r3, [pc, #56]	@ (8006674 <SD_read+0xa8>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800663e:	f7fa ff57 	bl	80014f0 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006644:	e007      	b.n	8006656 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006646:	f7ff feef 	bl	8006428 <BSP_SD_GetCardState>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <SD_read+0x8a>
          {
            res = RES_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006654:	e008      	b.n	8006668 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006656:	f7fa ff4b 	bl	80014f0 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006664:	4293      	cmp	r3, r2
 8006666:	d9ee      	bls.n	8006646 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006668:	7dfb      	ldrb	r3, [r7, #23]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000f64 	.word	0x20000f64

08006678 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800668c:	4b24      	ldr	r3, [pc, #144]	@ (8006720 <SD_write+0xa8>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006692:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006696:	f7ff ff33 	bl	8006500 <SD_CheckStatusWithTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	da01      	bge.n	80066a4 <SD_write+0x2c>
  {
    return res;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	e038      	b.n	8006716 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f7ff fea3 	bl	80063f4 <BSP_SD_WriteBlocks_DMA>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d12f      	bne.n	8006714 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80066b4:	f7fa ff1c 	bl	80014f0 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80066ba:	bf00      	nop
 80066bc:	4b18      	ldr	r3, [pc, #96]	@ (8006720 <SD_write+0xa8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d108      	bne.n	80066d6 <SD_write+0x5e>
 80066c4:	f7fa ff14 	bl	80014f0 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f247 522f 	movw	r2, #29999	@ 0x752f
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d9f2      	bls.n	80066bc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80066d6:	4b12      	ldr	r3, [pc, #72]	@ (8006720 <SD_write+0xa8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
 80066e2:	e017      	b.n	8006714 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80066e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <SD_write+0xa8>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80066ea:	f7fa ff01 	bl	80014f0 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80066f0:	e007      	b.n	8006702 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80066f2:	f7ff fe99 	bl	8006428 <BSP_SD_GetCardState>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <SD_write+0x8a>
          {
            res = RES_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	75fb      	strb	r3, [r7, #23]
            break;
 8006700:	e008      	b.n	8006714 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006702:	f7fa fef5 	bl	80014f0 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006710:	4293      	cmp	r3, r2
 8006712:	d9ee      	bls.n	80066f2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000f60 	.word	0x20000f60

08006724 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08c      	sub	sp, #48	@ 0x30
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	603a      	str	r2, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
 8006730:	460b      	mov	r3, r1
 8006732:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800673a:	4b25      	ldr	r3, [pc, #148]	@ (80067d0 <SD_ioctl+0xac>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <SD_ioctl+0x28>
 8006748:	2303      	movs	r3, #3
 800674a:	e03c      	b.n	80067c6 <SD_ioctl+0xa2>

  switch (cmd)
 800674c:	79bb      	ldrb	r3, [r7, #6]
 800674e:	2b03      	cmp	r3, #3
 8006750:	d834      	bhi.n	80067bc <SD_ioctl+0x98>
 8006752:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <SD_ioctl+0x34>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	08006769 	.word	0x08006769
 800675c:	08006771 	.word	0x08006771
 8006760:	08006789 	.word	0x08006789
 8006764:	080067a3 	.word	0x080067a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800676e:	e028      	b.n	80067c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006770:	f107 030c 	add.w	r3, r7, #12
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fe67 	bl	8006448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800677a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006786:	e01c      	b.n	80067c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006788:	f107 030c 	add.w	r3, r7, #12
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fe5b 	bl	8006448 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	b29a      	uxth	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80067a0:	e00f      	b.n	80067c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80067a2:	f107 030c 	add.w	r3, r7, #12
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fe4e 	bl	8006448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	0a5a      	lsrs	r2, r3, #9
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80067ba:	e002      	b.n	80067c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80067bc:	2304      	movs	r3, #4
 80067be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80067c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3730      	adds	r7, #48	@ 0x30
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000011 	.word	0x20000011

080067d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80067d8:	4b03      	ldr	r3, [pc, #12]	@ (80067e8 <BSP_SD_WriteCpltCallback+0x14>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	20000f60 	.word	0x20000f60

080067ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80067f0:	4b03      	ldr	r3, [pc, #12]	@ (8006800 <BSP_SD_ReadCpltCallback+0x14>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20000f64 	.word	0x20000f64

08006804 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	4a08      	ldr	r2, [pc, #32]	@ (8006834 <disk_status+0x30>)
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	79fa      	ldrb	r2, [r7, #7]
 800681c:	4905      	ldr	r1, [pc, #20]	@ (8006834 <disk_status+0x30>)
 800681e:	440a      	add	r2, r1
 8006820:	7a12      	ldrb	r2, [r2, #8]
 8006822:	4610      	mov	r0, r2
 8006824:	4798      	blx	r3
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]
  return stat;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000f90 	.word	0x20000f90

08006838 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	4a0e      	ldr	r2, [pc, #56]	@ (8006884 <disk_initialize+0x4c>)
 800684a:	5cd3      	ldrb	r3, [r2, r3]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d114      	bne.n	800687a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	4a0c      	ldr	r2, [pc, #48]	@ (8006884 <disk_initialize+0x4c>)
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	79fa      	ldrb	r2, [r7, #7]
 800685e:	4909      	ldr	r1, [pc, #36]	@ (8006884 <disk_initialize+0x4c>)
 8006860:	440a      	add	r2, r1
 8006862:	7a12      	ldrb	r2, [r2, #8]
 8006864:	4610      	mov	r0, r2
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	4a03      	ldr	r2, [pc, #12]	@ (8006884 <disk_initialize+0x4c>)
 8006876:	2101      	movs	r1, #1
 8006878:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000f90 	.word	0x20000f90

08006888 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	4a0a      	ldr	r2, [pc, #40]	@ (80068c4 <disk_read+0x3c>)
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	689c      	ldr	r4, [r3, #8]
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4a07      	ldr	r2, [pc, #28]	@ (80068c4 <disk_read+0x3c>)
 80068a8:	4413      	add	r3, r2
 80068aa:	7a18      	ldrb	r0, [r3, #8]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	47a0      	blx	r4
 80068b4:	4603      	mov	r3, r0
 80068b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd90      	pop	{r4, r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000f90 	.word	0x20000f90

080068c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	4a0a      	ldr	r2, [pc, #40]	@ (8006904 <disk_write+0x3c>)
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68dc      	ldr	r4, [r3, #12]
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	4a07      	ldr	r2, [pc, #28]	@ (8006904 <disk_write+0x3c>)
 80068e8:	4413      	add	r3, r2
 80068ea:	7a18      	ldrb	r0, [r3, #8]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	47a0      	blx	r4
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	20000f90 	.word	0x20000f90

08006908 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	603a      	str	r2, [r7, #0]
 8006912:	71fb      	strb	r3, [r7, #7]
 8006914:	460b      	mov	r3, r1
 8006916:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	4a09      	ldr	r2, [pc, #36]	@ (8006940 <disk_ioctl+0x38>)
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	79fa      	ldrb	r2, [r7, #7]
 8006926:	4906      	ldr	r1, [pc, #24]	@ (8006940 <disk_ioctl+0x38>)
 8006928:	440a      	add	r2, r1
 800692a:	7a10      	ldrb	r0, [r2, #8]
 800692c:	79b9      	ldrb	r1, [r7, #6]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
  return res;
 8006936:	7bfb      	ldrb	r3, [r7, #15]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000f90 	.word	0x20000f90

08006944 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3301      	adds	r3, #1
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	b21a      	sxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	b21b      	sxth	r3, r3
 8006962:	4313      	orrs	r3, r2
 8006964:	b21b      	sxth	r3, r3
 8006966:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006968:	89fb      	ldrh	r3, [r7, #14]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3303      	adds	r3, #3
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	3202      	adds	r2, #2
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	3201      	adds	r2, #1
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
	return rv;
 80069ae:	68fb      	ldr	r3, [r7, #12]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	607a      	str	r2, [r7, #4]
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	887b      	ldrh	r3, [r7, #2]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	887a      	ldrh	r2, [r7, #2]
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	607a      	str	r2, [r7, #4]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006a4a:	b480      	push	{r7}
 8006a4c:	b087      	sub	sp, #28
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00d      	beq.n	8006a80 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	1c53      	adds	r3, r2, #1
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	1c59      	adds	r1, r3, #1
 8006a6e:	6179      	str	r1, [r7, #20]
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f1      	bne.n	8006a64 <mem_cpy+0x1a>
	}
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	617a      	str	r2, [r7, #20]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	607b      	str	r3, [r7, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f3      	bne.n	8006a9c <mem_set+0x10>
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ac2:	b480      	push	{r7}
 8006ac4:	b089      	sub	sp, #36	@ 0x24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	61fa      	str	r2, [r7, #28]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	61ba      	str	r2, [r7, #24]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	1acb      	subs	r3, r1, r3
 8006aee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <mem_cmp+0x40>
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0eb      	beq.n	8006ada <mem_cmp+0x18>

	return r;
 8006b02:	697b      	ldr	r3, [r7, #20]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3724      	adds	r7, #36	@ 0x24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006b1a:	e002      	b.n	8006b22 <chk_chr+0x12>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <chk_chr+0x26>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d1f2      	bne.n	8006b1c <chk_chr+0xc>
	return *str;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	781b      	ldrb	r3, [r3, #0]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
	...

08006b48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	e029      	b.n	8006bb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006b5c:	4a27      	ldr	r2, [pc, #156]	@ (8006bfc <chk_lock+0xb4>)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	4413      	add	r3, r2
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01d      	beq.n	8006ba6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b6a:	4a24      	ldr	r2, [pc, #144]	@ (8006bfc <chk_lock+0xb4>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	4413      	add	r3, r2
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d116      	bne.n	8006baa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bfc <chk_lock+0xb4>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	4413      	add	r3, r2
 8006b84:	3304      	adds	r3, #4
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d10c      	bne.n	8006baa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b90:	4a1a      	ldr	r2, [pc, #104]	@ (8006bfc <chk_lock+0xb4>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	4413      	add	r3, r2
 8006b98:	3308      	adds	r3, #8
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d102      	bne.n	8006baa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ba4:	e007      	b.n	8006bb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3301      	adds	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d9d2      	bls.n	8006b5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d109      	bne.n	8006bd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <chk_lock+0x80>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d101      	bne.n	8006bcc <chk_lock+0x84>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e010      	b.n	8006bee <chk_lock+0xa6>
 8006bcc:	2312      	movs	r3, #18
 8006bce:	e00e      	b.n	8006bee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <chk_lock+0xa0>
 8006bd6:	4a09      	ldr	r2, [pc, #36]	@ (8006bfc <chk_lock+0xb4>)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	4413      	add	r3, r2
 8006bde:	330c      	adds	r3, #12
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be6:	d101      	bne.n	8006bec <chk_lock+0xa4>
 8006be8:	2310      	movs	r3, #16
 8006bea:	e000      	b.n	8006bee <chk_lock+0xa6>
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	20000f70 	.word	0x20000f70

08006c00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	e002      	b.n	8006c12 <enq_lock+0x12>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	607b      	str	r3, [r7, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d806      	bhi.n	8006c26 <enq_lock+0x26>
 8006c18:	4a09      	ldr	r2, [pc, #36]	@ (8006c40 <enq_lock+0x40>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	4413      	add	r3, r2
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f2      	bne.n	8006c0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000f70 	.word	0x20000f70

08006c44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e01f      	b.n	8006c94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006c54:	4a41      	ldr	r2, [pc, #260]	@ (8006d5c <inc_lock+0x118>)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	4413      	add	r3, r2
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d113      	bne.n	8006c8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006c66:	4a3d      	ldr	r2, [pc, #244]	@ (8006d5c <inc_lock+0x118>)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3304      	adds	r3, #4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d109      	bne.n	8006c8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006c7a:	4a38      	ldr	r2, [pc, #224]	@ (8006d5c <inc_lock+0x118>)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	4413      	add	r3, r2
 8006c82:	3308      	adds	r3, #8
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d006      	beq.n	8006c9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d9dc      	bls.n	8006c54 <inc_lock+0x10>
 8006c9a:	e000      	b.n	8006c9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006c9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d132      	bne.n	8006d0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e002      	b.n	8006cb0 <inc_lock+0x6c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d806      	bhi.n	8006cc4 <inc_lock+0x80>
 8006cb6:	4a29      	ldr	r2, [pc, #164]	@ (8006d5c <inc_lock+0x118>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	4413      	add	r3, r2
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f2      	bne.n	8006caa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d101      	bne.n	8006cce <inc_lock+0x8a>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e040      	b.n	8006d50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4922      	ldr	r1, [pc, #136]	@ (8006d5c <inc_lock+0x118>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	440b      	add	r3, r1
 8006cda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	491e      	ldr	r1, [pc, #120]	@ (8006d5c <inc_lock+0x118>)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3304      	adds	r3, #4
 8006cea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	491a      	ldr	r1, [pc, #104]	@ (8006d5c <inc_lock+0x118>)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006cfc:	4a17      	ldr	r2, [pc, #92]	@ (8006d5c <inc_lock+0x118>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	4413      	add	r3, r2
 8006d04:	330c      	adds	r3, #12
 8006d06:	2200      	movs	r2, #0
 8006d08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <inc_lock+0xe0>
 8006d10:	4a12      	ldr	r2, [pc, #72]	@ (8006d5c <inc_lock+0x118>)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	4413      	add	r3, r2
 8006d18:	330c      	adds	r3, #12
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <inc_lock+0xe0>
 8006d20:	2300      	movs	r3, #0
 8006d22:	e015      	b.n	8006d50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d108      	bne.n	8006d3c <inc_lock+0xf8>
 8006d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d5c <inc_lock+0x118>)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	4413      	add	r3, r2
 8006d32:	330c      	adds	r3, #12
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	3301      	adds	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	e001      	b.n	8006d40 <inc_lock+0xfc>
 8006d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d40:	4906      	ldr	r1, [pc, #24]	@ (8006d5c <inc_lock+0x118>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	440b      	add	r3, r1
 8006d48:	330c      	adds	r3, #12
 8006d4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3301      	adds	r3, #1
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000f70 	.word	0x20000f70

08006d60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d825      	bhi.n	8006dc0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006d74:	4a17      	ldr	r2, [pc, #92]	@ (8006dd4 <dec_lock+0x74>)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	4413      	add	r3, r2
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006d82:	89fb      	ldrh	r3, [r7, #14]
 8006d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d88:	d101      	bne.n	8006d8e <dec_lock+0x2e>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <dec_lock+0x3a>
 8006d94:	89fb      	ldrh	r3, [r7, #14]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd4 <dec_lock+0x74>)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	4413      	add	r3, r2
 8006da2:	330c      	adds	r3, #12
 8006da4:	89fa      	ldrh	r2, [r7, #14]
 8006da6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006da8:	89fb      	ldrh	r3, [r7, #14]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <dec_lock+0x5a>
 8006dae:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <dec_lock+0x74>)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	4413      	add	r3, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	737b      	strb	r3, [r7, #13]
 8006dbe:	e001      	b.n	8006dc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006dc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000f70 	.word	0x20000f70

08006dd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	e010      	b.n	8006e08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006de6:	4a0d      	ldr	r2, [pc, #52]	@ (8006e1c <clear_lock+0x44>)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	4413      	add	r3, r2
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d105      	bne.n	8006e02 <clear_lock+0x2a>
 8006df6:	4a09      	ldr	r2, [pc, #36]	@ (8006e1c <clear_lock+0x44>)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	4413      	add	r3, r2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d9eb      	bls.n	8006de6 <clear_lock+0xe>
	}
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20000f70 	.word	0x20000f70

08006e20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	78db      	ldrb	r3, [r3, #3]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d034      	beq.n	8006e9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7858      	ldrb	r0, [r3, #1]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e44:	2301      	movs	r3, #1
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	f7ff fd3e 	bl	80068c8 <disk_write>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	73fb      	strb	r3, [r7, #15]
 8006e56:	e022      	b.n	8006e9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	1ad2      	subs	r2, r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d217      	bcs.n	8006e9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	789b      	ldrb	r3, [r3, #2]
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	e010      	b.n	8006e98 <sync_window+0x78>
					wsect += fs->fsize;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7858      	ldrb	r0, [r3, #1]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	f7ff fd1b 	bl	80068c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d8eb      	bhi.n	8006e76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d01b      	beq.n	8006ef8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff ffad 	bl	8006e20 <sync_window>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d113      	bne.n	8006ef8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7858      	ldrb	r0, [r3, #1]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006eda:	2301      	movs	r3, #1
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	f7ff fcd3 	bl	8006888 <disk_read>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ff87 	bl	8006e20 <sync_window>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d158      	bne.n	8006fce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d148      	bne.n	8006fb6 <sync_fs+0xb2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	791b      	ldrb	r3, [r3, #4]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d144      	bne.n	8006fb6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3334      	adds	r3, #52	@ 0x34
 8006f30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fda8 	bl	8006a8c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3334      	adds	r3, #52	@ 0x34
 8006f40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f44:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fd37 	bl	80069bc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3334      	adds	r3, #52	@ 0x34
 8006f52:	4921      	ldr	r1, [pc, #132]	@ (8006fd8 <sync_fs+0xd4>)
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff fd4c 	bl	80069f2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3334      	adds	r3, #52	@ 0x34
 8006f5e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006f62:	491e      	ldr	r1, [pc, #120]	@ (8006fdc <sync_fs+0xd8>)
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fd44 	bl	80069f2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3334      	adds	r3, #52	@ 0x34
 8006f6e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7ff fd3a 	bl	80069f2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3334      	adds	r3, #52	@ 0x34
 8006f82:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7ff fd30 	bl	80069f2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7858      	ldrb	r0, [r3, #1]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006faa:	2301      	movs	r3, #1
 8006fac:	f7ff fc8c 	bl	80068c8 <disk_write>
			fs->fsi_flag = 0;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff fca2 	bl	8006908 <disk_ioctl>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <sync_fs+0xca>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	41615252 	.word	0x41615252
 8006fdc:	61417272 	.word	0x61417272

08006fe0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	3b02      	subs	r3, #2
 8006fee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	3b02      	subs	r3, #2
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d301      	bcc.n	8007000 <clust2sect+0x20>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e008      	b.n	8007012 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	895b      	ldrh	r3, [r3, #10]
 8007004:	461a      	mov	r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	fb03 f202 	mul.w	r2, r3, r2
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4413      	add	r3, r2
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d904      	bls.n	800703e <get_fat+0x20>
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <get_fat+0x26>
		val = 1;	/* Internal error */
 800703e:	2301      	movs	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e08e      	b.n	8007162 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007044:	f04f 33ff 	mov.w	r3, #4294967295
 8007048:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d061      	beq.n	8007116 <get_fat+0xf8>
 8007052:	2b03      	cmp	r3, #3
 8007054:	dc7b      	bgt.n	800714e <get_fat+0x130>
 8007056:	2b01      	cmp	r3, #1
 8007058:	d002      	beq.n	8007060 <get_fat+0x42>
 800705a:	2b02      	cmp	r3, #2
 800705c:	d041      	beq.n	80070e2 <get_fat+0xc4>
 800705e:	e076      	b.n	800714e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	0a5b      	lsrs	r3, r3, #9
 8007076:	4413      	add	r3, r2
 8007078:	4619      	mov	r1, r3
 800707a:	6938      	ldr	r0, [r7, #16]
 800707c:	f7ff ff14 	bl	8006ea8 <move_window>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d166      	bne.n	8007154 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	60fa      	str	r2, [r7, #12]
 800708c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007098:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	0a5b      	lsrs	r3, r3, #9
 80070a2:	4413      	add	r3, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	6938      	ldr	r0, [r7, #16]
 80070a8:	f7ff fefe 	bl	8006ea8 <move_window>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d152      	bne.n	8007158 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <get_fat+0xba>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	e002      	b.n	80070de <get_fat+0xc0>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070de:	617b      	str	r3, [r7, #20]
			break;
 80070e0:	e03f      	b.n	8007162 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	0a1b      	lsrs	r3, r3, #8
 80070ea:	4413      	add	r3, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	6938      	ldr	r0, [r7, #16]
 80070f0:	f7ff feda 	bl	8006ea8 <move_window>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d130      	bne.n	800715c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007108:	4413      	add	r3, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff fc1a 	bl	8006944 <ld_word>
 8007110:	4603      	mov	r3, r0
 8007112:	617b      	str	r3, [r7, #20]
			break;
 8007114:	e025      	b.n	8007162 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	09db      	lsrs	r3, r3, #7
 800711e:	4413      	add	r3, r2
 8007120:	4619      	mov	r1, r3
 8007122:	6938      	ldr	r0, [r7, #16]
 8007124:	f7ff fec0 	bl	8006ea8 <move_window>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d118      	bne.n	8007160 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800713c:	4413      	add	r3, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fc19 	bl	8006976 <ld_dword>
 8007144:	4603      	mov	r3, r0
 8007146:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800714a:	617b      	str	r3, [r7, #20]
			break;
 800714c:	e009      	b.n	8007162 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800714e:	2301      	movs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e006      	b.n	8007162 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007154:	bf00      	nop
 8007156:	e004      	b.n	8007162 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007158:	bf00      	nop
 800715a:	e002      	b.n	8007162 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800715c:	bf00      	nop
 800715e:	e000      	b.n	8007162 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007160:	bf00      	nop
		}
	}

	return val;
 8007162:	697b      	ldr	r3, [r7, #20]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800716c:	b590      	push	{r4, r7, lr}
 800716e:	b089      	sub	sp, #36	@ 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007178:	2302      	movs	r3, #2
 800717a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b01      	cmp	r3, #1
 8007180:	f240 80d9 	bls.w	8007336 <put_fat+0x1ca>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	f080 80d3 	bcs.w	8007336 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b03      	cmp	r3, #3
 8007196:	f000 8096 	beq.w	80072c6 <put_fat+0x15a>
 800719a:	2b03      	cmp	r3, #3
 800719c:	f300 80cb 	bgt.w	8007336 <put_fat+0x1ca>
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d002      	beq.n	80071aa <put_fat+0x3e>
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d06e      	beq.n	8007286 <put_fat+0x11a>
 80071a8:	e0c5      	b.n	8007336 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	4413      	add	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	0a5b      	lsrs	r3, r3, #9
 80071c0:	4413      	add	r3, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fe6f 	bl	8006ea8 <move_window>
 80071ca:	4603      	mov	r3, r0
 80071cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071ce:	7ffb      	ldrb	r3, [r7, #31]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 80a9 	bne.w	8007328 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	61b9      	str	r1, [r7, #24]
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	4413      	add	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00d      	beq.n	8007210 <put_fat+0xa4>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b25b      	sxtb	r3, r3
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	b25a      	sxtb	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	b25b      	sxtb	r3, r3
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	b25b      	sxtb	r3, r3
 8007208:	4313      	orrs	r3, r2
 800720a:	b25b      	sxtb	r3, r3
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e001      	b.n	8007214 <put_fat+0xa8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	0a5b      	lsrs	r3, r3, #9
 8007226:	4413      	add	r3, r2
 8007228:	4619      	mov	r1, r3
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7ff fe3c 	bl	8006ea8 <move_window>
 8007230:	4603      	mov	r3, r0
 8007232:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007234:	7ffb      	ldrb	r3, [r7, #31]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d178      	bne.n	800732c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	4413      	add	r3, r2
 8007248:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <put_fat+0xf0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	091b      	lsrs	r3, r3, #4
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e00e      	b.n	800727a <put_fat+0x10e>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b25b      	sxtb	r3, r3
 8007262:	f023 030f 	bic.w	r3, r3, #15
 8007266:	b25a      	sxtb	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b25b      	sxtb	r3, r3
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	b25b      	sxtb	r3, r3
 8007274:	4313      	orrs	r3, r2
 8007276:	b25b      	sxtb	r3, r3
 8007278:	b2db      	uxtb	r3, r3
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	70da      	strb	r2, [r3, #3]
			break;
 8007284:	e057      	b.n	8007336 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	4413      	add	r3, r2
 8007290:	4619      	mov	r1, r3
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff fe08 	bl	8006ea8 <move_window>
 8007298:	4603      	mov	r3, r0
 800729a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800729c:	7ffb      	ldrb	r3, [r7, #31]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d146      	bne.n	8007330 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80072b0:	4413      	add	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	b292      	uxth	r2, r2
 80072b6:	4611      	mov	r1, r2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fb7f 	bl	80069bc <st_word>
			fs->wflag = 1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	70da      	strb	r2, [r3, #3]
			break;
 80072c4:	e037      	b.n	8007336 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	09db      	lsrs	r3, r3, #7
 80072ce:	4413      	add	r3, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff fde8 	bl	8006ea8 <move_window>
 80072d8:	4603      	mov	r3, r0
 80072da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072dc:	7ffb      	ldrb	r3, [r7, #31]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d128      	bne.n	8007334 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80072f6:	4413      	add	r3, r2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff fb3c 	bl	8006976 <ld_dword>
 80072fe:	4603      	mov	r3, r0
 8007300:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007304:	4323      	orrs	r3, r4
 8007306:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007316:	4413      	add	r3, r2
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fb69 	bl	80069f2 <st_dword>
			fs->wflag = 1;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	70da      	strb	r2, [r3, #3]
			break;
 8007326:	e006      	b.n	8007336 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007328:	bf00      	nop
 800732a:	e004      	b.n	8007336 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007334:	bf00      	nop
		}
	}
	return res;
 8007336:	7ffb      	ldrb	r3, [r7, #31]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3724      	adds	r7, #36	@ 0x24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd90      	pop	{r4, r7, pc}

08007340 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d904      	bls.n	8007366 <remove_chain+0x26>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	d301      	bcc.n	800736a <remove_chain+0x2a>
 8007366:	2302      	movs	r3, #2
 8007368:	e04b      	b.n	8007402 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00c      	beq.n	800738a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007370:	f04f 32ff 	mov.w	r2, #4294967295
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	69b8      	ldr	r0, [r7, #24]
 8007378:	f7ff fef8 	bl	800716c <put_fat>
 800737c:	4603      	mov	r3, r0
 800737e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007380:	7ffb      	ldrb	r3, [r7, #31]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <remove_chain+0x4a>
 8007386:	7ffb      	ldrb	r3, [r7, #31]
 8007388:	e03b      	b.n	8007402 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff fe46 	bl	800701e <get_fat>
 8007392:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d031      	beq.n	80073fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <remove_chain+0x64>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e02e      	b.n	8007402 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073aa:	d101      	bne.n	80073b0 <remove_chain+0x70>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e028      	b.n	8007402 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80073b0:	2200      	movs	r2, #0
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	69b8      	ldr	r0, [r7, #24]
 80073b6:	f7ff fed9 	bl	800716c <put_fat>
 80073ba:	4603      	mov	r3, r0
 80073bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80073be:	7ffb      	ldrb	r3, [r7, #31]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <remove_chain+0x88>
 80073c4:	7ffb      	ldrb	r3, [r7, #31]
 80073c6:	e01c      	b.n	8007402 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	695a      	ldr	r2, [r3, #20]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	3b02      	subs	r3, #2
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d20b      	bcs.n	80073ee <remove_chain+0xae>
			fs->free_clst++;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	791b      	ldrb	r3, [r3, #4]
 80073e4:	f043 0301 	orr.w	r3, r3, #1
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d3c6      	bcc.n	800738a <remove_chain+0x4a>
 80073fc:	e000      	b.n	8007400 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80073fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <create_chain+0x2c>
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	429a      	cmp	r2, r3
 8007434:	d31b      	bcc.n	800746e <create_chain+0x64>
 8007436:	2301      	movs	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e018      	b.n	800746e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fded 	bl	800701e <get_fat>
 8007444:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d801      	bhi.n	8007450 <create_chain+0x46>
 800744c:	2301      	movs	r3, #1
 800744e:	e070      	b.n	8007532 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d101      	bne.n	800745c <create_chain+0x52>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	e06a      	b.n	8007532 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	429a      	cmp	r2, r3
 8007464:	d201      	bcs.n	800746a <create_chain+0x60>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	e063      	b.n	8007532 <create_chain+0x128>
		scl = clst;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	3301      	adds	r3, #1
 8007476:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	429a      	cmp	r2, r3
 8007480:	d307      	bcc.n	8007492 <create_chain+0x88>
				ncl = 2;
 8007482:	2302      	movs	r3, #2
 8007484:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	429a      	cmp	r2, r3
 800748c:	d901      	bls.n	8007492 <create_chain+0x88>
 800748e:	2300      	movs	r3, #0
 8007490:	e04f      	b.n	8007532 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007492:	69f9      	ldr	r1, [r7, #28]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fdc2 	bl	800701e <get_fat>
 800749a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00e      	beq.n	80074c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d003      	beq.n	80074b0 <create_chain+0xa6>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d101      	bne.n	80074b4 <create_chain+0xaa>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	e03e      	b.n	8007532 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d1da      	bne.n	8007472 <create_chain+0x68>
 80074bc:	2300      	movs	r3, #0
 80074be:	e038      	b.n	8007532 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80074c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295
 80074c6:	69f9      	ldr	r1, [r7, #28]
 80074c8:	6938      	ldr	r0, [r7, #16]
 80074ca:	f7ff fe4f 	bl	800716c <put_fat>
 80074ce:	4603      	mov	r3, r0
 80074d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <create_chain+0xe2>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d006      	beq.n	80074ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6938      	ldr	r0, [r7, #16]
 80074e4:	f7ff fe42 	bl	800716c <put_fat>
 80074e8:	4603      	mov	r3, r0
 80074ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d116      	bne.n	8007520 <create_chain+0x116>
		fs->last_clst = ncl;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	695a      	ldr	r2, [r3, #20]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	3b02      	subs	r3, #2
 8007502:	429a      	cmp	r2, r3
 8007504:	d804      	bhi.n	8007510 <create_chain+0x106>
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	1e5a      	subs	r2, r3, #1
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	791b      	ldrb	r3, [r3, #4]
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	b2da      	uxtb	r2, r3
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	711a      	strb	r2, [r3, #4]
 800751e:	e007      	b.n	8007530 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d102      	bne.n	800752c <create_chain+0x122>
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	e000      	b.n	800752e <create_chain+0x124>
 800752c:	2301      	movs	r3, #1
 800752e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007530:	69fb      	ldr	r3, [r7, #28]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800753a:	b480      	push	{r7}
 800753c:	b087      	sub	sp, #28
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	3304      	adds	r3, #4
 8007550:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	0a5b      	lsrs	r3, r3, #9
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	8952      	ldrh	r2, [r2, #10]
 800755a:	fbb3 f3f2 	udiv	r3, r3, r2
 800755e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1d1a      	adds	r2, r3, #4
 8007564:	613a      	str	r2, [r7, #16]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <clmt_clust+0x3a>
 8007570:	2300      	movs	r3, #0
 8007572:	e010      	b.n	8007596 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	429a      	cmp	r2, r3
 800757a:	d307      	bcc.n	800758c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	3304      	adds	r3, #4
 8007588:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800758a:	e7e9      	b.n	8007560 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800758c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4413      	add	r3, r2
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075b8:	d204      	bcs.n	80075c4 <dir_sdi+0x22>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e063      	b.n	8007690 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <dir_sdi+0x46>
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d902      	bls.n	80075e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10c      	bne.n	8007608 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	8912      	ldrh	r2, [r2, #8]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d301      	bcc.n	80075fe <dir_sdi+0x5c>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e048      	b.n	8007690 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	61da      	str	r2, [r3, #28]
 8007606:	e029      	b.n	800765c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	895b      	ldrh	r3, [r3, #10]
 800760c:	025b      	lsls	r3, r3, #9
 800760e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007610:	e019      	b.n	8007646 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6979      	ldr	r1, [r7, #20]
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff fd01 	bl	800701e <get_fat>
 800761c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d101      	bne.n	800762a <dir_sdi+0x88>
 8007626:	2301      	movs	r3, #1
 8007628:	e032      	b.n	8007690 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d904      	bls.n	800763a <dir_sdi+0x98>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	429a      	cmp	r2, r3
 8007638:	d301      	bcc.n	800763e <dir_sdi+0x9c>
 800763a:	2302      	movs	r3, #2
 800763c:	e028      	b.n	8007690 <dir_sdi+0xee>
			ofs -= csz;
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	429a      	cmp	r2, r3
 800764c:	d2e1      	bcs.n	8007612 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800764e:	6979      	ldr	r1, [r7, #20]
 8007650:	6938      	ldr	r0, [r7, #16]
 8007652:	f7ff fcc5 	bl	8006fe0 <clust2sect>
 8007656:	4602      	mov	r2, r0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <dir_sdi+0xcc>
 800766a:	2302      	movs	r3, #2
 800766c:	e010      	b.n	8007690 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	0a5b      	lsrs	r3, r3, #9
 8007676:	441a      	add	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	3320      	adds	r3, #32
 80076ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <dir_next+0x28>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076be:	d301      	bcc.n	80076c4 <dir_next+0x2c>
 80076c0:	2304      	movs	r3, #4
 80076c2:	e0aa      	b.n	800781a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 8098 	bne.w	8007800 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	8912      	ldrh	r2, [r2, #8]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	f0c0 8088 	bcc.w	8007800 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	61da      	str	r2, [r3, #28]
 80076f6:	2304      	movs	r3, #4
 80076f8:	e08f      	b.n	800781a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	0a5b      	lsrs	r3, r3, #9
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	8952      	ldrh	r2, [r2, #10]
 8007702:	3a01      	subs	r2, #1
 8007704:	4013      	ands	r3, r2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d17a      	bne.n	8007800 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7ff fc83 	bl	800701e <get_fat>
 8007718:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d801      	bhi.n	8007724 <dir_next+0x8c>
 8007720:	2302      	movs	r3, #2
 8007722:	e07a      	b.n	800781a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d101      	bne.n	8007730 <dir_next+0x98>
 800772c:	2301      	movs	r3, #1
 800772e:	e074      	b.n	800781a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	429a      	cmp	r2, r3
 8007738:	d358      	bcc.n	80077ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	61da      	str	r2, [r3, #28]
 8007746:	2304      	movs	r3, #4
 8007748:	e067      	b.n	800781a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f7ff fe59 	bl	800740a <create_chain>
 8007758:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <dir_next+0xcc>
 8007760:	2307      	movs	r3, #7
 8007762:	e05a      	b.n	800781a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <dir_next+0xd6>
 800776a:	2302      	movs	r3, #2
 800776c:	e055      	b.n	800781a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d101      	bne.n	800777a <dir_next+0xe2>
 8007776:	2301      	movs	r3, #1
 8007778:	e04f      	b.n	800781a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fb50 	bl	8006e20 <sync_window>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <dir_next+0xf2>
 8007786:	2301      	movs	r3, #1
 8007788:	e047      	b.n	800781a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3334      	adds	r3, #52	@ 0x34
 800778e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff f979 	bl	8006a8c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	6979      	ldr	r1, [r7, #20]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff fc1d 	bl	8006fe0 <clust2sect>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80077ac:	e012      	b.n	80077d4 <dir_next+0x13c>
						fs->wflag = 1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff fb33 	bl	8006e20 <sync_window>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <dir_next+0x12c>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e02a      	b.n	800781a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	3301      	adds	r3, #1
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	895b      	ldrh	r3, [r3, #10]
 80077d8:	461a      	mov	r2, r3
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4293      	cmp	r3, r2
 80077de:	d3e6      	bcc.n	80077ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff fbf3 	bl	8006fe0 <clust2sect>
 80077fa:	4602      	mov	r2, r0
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	441a      	add	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007832:	2100      	movs	r1, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff feb4 	bl	80075a2 <dir_sdi>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d12b      	bne.n	800789c <dir_alloc+0x7a>
		n = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	4619      	mov	r1, r3
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff fb2a 	bl	8006ea8 <move_window>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d11d      	bne.n	800789a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2be5      	cmp	r3, #229	@ 0xe5
 8007866:	d004      	beq.n	8007872 <dir_alloc+0x50>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3301      	adds	r3, #1
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d102      	bne.n	8007886 <dir_alloc+0x64>
 8007880:	e00c      	b.n	800789c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007886:	2101      	movs	r1, #1
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ff05 	bl	8007698 <dir_next>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0d7      	beq.n	8007848 <dir_alloc+0x26>
 8007898:	e000      	b.n	800789c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800789a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d101      	bne.n	80078a6 <dir_alloc+0x84>
 80078a2:	2307      	movs	r3, #7
 80078a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	331a      	adds	r3, #26
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff f840 	bl	8006944 <ld_word>
 80078c4:	4603      	mov	r3, r0
 80078c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d109      	bne.n	80078e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	3314      	adds	r3, #20
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff f835 	bl	8006944 <ld_word>
 80078da:	4603      	mov	r3, r0
 80078dc:	041b      	lsls	r3, r3, #16
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80078e4:	68fb      	ldr	r3, [r7, #12]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	331a      	adds	r3, #26
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	b292      	uxth	r2, r2
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff f859 	bl	80069bc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b03      	cmp	r3, #3
 8007910:	d109      	bne.n	8007926 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f103 0214 	add.w	r2, r3, #20
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	0c1b      	lsrs	r3, r3, #16
 800791c:	b29b      	uxth	r3, r3
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7ff f84b 	bl	80069bc <st_word>
	}
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007930:	b590      	push	{r4, r7, lr}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	331a      	adds	r3, #26
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff f800 	bl	8006944 <ld_word>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <cmp_lfn+0x1e>
 800794a:	2300      	movs	r3, #0
 800794c:	e059      	b.n	8007a02 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007956:	1e5a      	subs	r2, r3, #1
 8007958:	4613      	mov	r3, r2
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007964:	2301      	movs	r3, #1
 8007966:	81fb      	strh	r3, [r7, #14]
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	e033      	b.n	80079d6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800796e:	4a27      	ldr	r2, [pc, #156]	@ (8007a0c <cmp_lfn+0xdc>)
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	4413      	add	r3, r2
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	4413      	add	r3, r2
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe ffe1 	bl	8006944 <ld_word>
 8007982:	4603      	mov	r3, r0
 8007984:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007986:	89fb      	ldrh	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01a      	beq.n	80079c2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007990:	d812      	bhi.n	80079b8 <cmp_lfn+0x88>
 8007992:	89bb      	ldrh	r3, [r7, #12]
 8007994:	4618      	mov	r0, r3
 8007996:	f002 fb99 	bl	800a0cc <ff_wtoupper>
 800799a:	4603      	mov	r3, r0
 800799c:	461c      	mov	r4, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	617a      	str	r2, [r7, #20]
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4413      	add	r3, r2
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f002 fb8d 	bl	800a0cc <ff_wtoupper>
 80079b2:	4603      	mov	r3, r0
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d001      	beq.n	80079bc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80079b8:	2300      	movs	r3, #0
 80079ba:	e022      	b.n	8007a02 <cmp_lfn+0xd2>
			}
			wc = uc;
 80079bc:	89bb      	ldrh	r3, [r7, #12]
 80079be:	81fb      	strh	r3, [r7, #14]
 80079c0:	e006      	b.n	80079d0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80079c2:	89bb      	ldrh	r3, [r7, #12]
 80079c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d001      	beq.n	80079d0 <cmp_lfn+0xa0>
 80079cc:	2300      	movs	r3, #0
 80079ce:	e018      	b.n	8007a02 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3301      	adds	r3, #1
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b0c      	cmp	r3, #12
 80079da:	d9c8      	bls.n	800796e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <cmp_lfn+0xd0>
 80079e8:	89fb      	ldrh	r3, [r7, #14]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d008      	beq.n	8007a00 <cmp_lfn+0xd0>
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	4413      	add	r3, r2
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <cmp_lfn+0xd0>
 80079fc:	2300      	movs	r3, #0
 80079fe:	e000      	b.n	8007a02 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007a00:	2301      	movs	r3, #1
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd90      	pop	{r4, r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	0800b5dc 	.word	0x0800b5dc

08007a10 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	331a      	adds	r3, #26
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe ff90 	bl	8006944 <ld_word>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <pick_lfn+0x1e>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e04d      	b.n	8007aca <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a36:	1e5a      	subs	r2, r3, #1
 8007a38:	4613      	mov	r3, r2
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007a44:	2301      	movs	r3, #1
 8007a46:	81fb      	strh	r3, [r7, #14]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	e028      	b.n	8007aa0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007a4e:	4a21      	ldr	r2, [pc, #132]	@ (8007ad4 <pick_lfn+0xc4>)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4413      	add	r3, r2
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe ff71 	bl	8006944 <ld_word>
 8007a62:	4603      	mov	r3, r0
 8007a64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007a66:	89fb      	ldrh	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00f      	beq.n	8007a8c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a70:	d901      	bls.n	8007a76 <pick_lfn+0x66>
 8007a72:	2300      	movs	r3, #0
 8007a74:	e029      	b.n	8007aca <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007a76:	89bb      	ldrh	r3, [r7, #12]
 8007a78:	81fb      	strh	r3, [r7, #14]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	617a      	str	r2, [r7, #20]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	89fa      	ldrh	r2, [r7, #14]
 8007a88:	801a      	strh	r2, [r3, #0]
 8007a8a:	e006      	b.n	8007a9a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007a8c:	89bb      	ldrh	r3, [r7, #12]
 8007a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d001      	beq.n	8007a9a <pick_lfn+0x8a>
 8007a96:	2300      	movs	r3, #0
 8007a98:	e017      	b.n	8007aca <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	2b0c      	cmp	r3, #12
 8007aa4:	d9d3      	bls.n	8007a4e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2bfe      	cmp	r3, #254	@ 0xfe
 8007ab6:	d901      	bls.n	8007abc <pick_lfn+0xac>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e006      	b.n	8007aca <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007ac8:	2301      	movs	r3, #1
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	0800b5dc 	.word	0x0800b5dc

08007ad8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	71fb      	strb	r3, [r7, #7]
 8007aea:	4613      	mov	r3, r2
 8007aec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	330d      	adds	r3, #13
 8007af2:	79ba      	ldrb	r2, [r7, #6]
 8007af4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	330b      	adds	r3, #11
 8007afa:	220f      	movs	r2, #15
 8007afc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	330c      	adds	r3, #12
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	331a      	adds	r3, #26
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe ff55 	bl	80069bc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	1e5a      	subs	r2, r3, #1
 8007b16:	4613      	mov	r3, r2
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	82fb      	strh	r3, [r7, #22]
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007b2a:	8afb      	ldrh	r3, [r7, #22]
 8007b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d007      	beq.n	8007b44 <put_lfn+0x6c>
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	61fa      	str	r2, [r7, #28]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007b44:	4a17      	ldr	r2, [pc, #92]	@ (8007ba4 <put_lfn+0xcc>)
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	4413      	add	r3, r2
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	8afa      	ldrh	r2, [r7, #22]
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe ff30 	bl	80069bc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007b5c:	8afb      	ldrh	r3, [r7, #22]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d102      	bne.n	8007b68 <put_lfn+0x90>
 8007b62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b66:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b0c      	cmp	r3, #12
 8007b72:	d9da      	bls.n	8007b2a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007b74:	8afb      	ldrh	r3, [r7, #22]
 8007b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d006      	beq.n	8007b8c <put_lfn+0xb4>
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d103      	bne.n	8007b94 <put_lfn+0xbc>
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b92:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	79fa      	ldrb	r2, [r7, #7]
 8007b98:	701a      	strb	r2, [r3, #0]
}
 8007b9a:	bf00      	nop
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0800b5dc 	.word	0x0800b5dc

08007ba8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08c      	sub	sp, #48	@ 0x30
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007bb6:	220b      	movs	r2, #11
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7fe ff45 	bl	8006a4a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d92b      	bls.n	8007c1e <gen_numname+0x76>
		sr = seq;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007bca:	e022      	b.n	8007c12 <gen_numname+0x6a>
			wc = *lfn++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	1c9a      	adds	r2, r3, #2
 8007bd0:	607a      	str	r2, [r7, #4]
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bda:	e017      	b.n	8007c0c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	005a      	lsls	r2, r3, #1
 8007be0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	4413      	add	r3, r2
 8007be8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007bea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <gen_numname+0x5e>
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007c00:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007c04:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	3301      	adds	r3, #1
 8007c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	2b0f      	cmp	r3, #15
 8007c10:	d9e4      	bls.n	8007bdc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1d8      	bne.n	8007bcc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007c1e:	2307      	movs	r3, #7
 8007c20:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	3330      	adds	r3, #48	@ 0x30
 8007c2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c36:	2b39      	cmp	r3, #57	@ 0x39
 8007c38:	d904      	bls.n	8007c44 <gen_numname+0x9c>
 8007c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c3e:	3307      	adds	r3, #7
 8007c40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007c4a:	3330      	adds	r3, #48	@ 0x30
 8007c4c:	443b      	add	r3, r7
 8007c4e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007c52:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	091b      	lsrs	r3, r3, #4
 8007c5a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1df      	bne.n	8007c22 <gen_numname+0x7a>
	ns[i] = '~';
 8007c62:	f107 0214 	add.w	r2, r7, #20
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	4413      	add	r3, r2
 8007c6a:	227e      	movs	r2, #126	@ 0x7e
 8007c6c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007c6e:	2300      	movs	r3, #0
 8007c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c72:	e016      	b.n	8007ca2 <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	4413      	add	r3, r2
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b80      	cmp	r3, #128	@ 0x80
 8007c7e:	d90d      	bls.n	8007c9c <gen_numname+0xf4>
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	4413      	add	r3, r2
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2bff      	cmp	r3, #255	@ 0xff
 8007c8a:	d007      	beq.n	8007c9c <gen_numname+0xf4>
			if (j == i - 1) break;
 8007c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d010      	beq.n	8007cb8 <gen_numname+0x110>
			j++;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	3301      	adds	r3, #1
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d207      	bcs.n	8007cba <gen_numname+0x112>
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	4413      	add	r3, r2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d1de      	bne.n	8007c74 <gen_numname+0xcc>
 8007cb6:	e000      	b.n	8007cba <gen_numname+0x112>
			if (j == i - 1) break;
 8007cb8:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	2b07      	cmp	r3, #7
 8007cbe:	d807      	bhi.n	8007cd0 <gen_numname+0x128>
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cc6:	3330      	adds	r3, #48	@ 0x30
 8007cc8:	443b      	add	r3, r7
 8007cca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007cce:	e000      	b.n	8007cd2 <gen_numname+0x12a>
 8007cd0:	2120      	movs	r1, #32
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	460a      	mov	r2, r1
 8007cde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	2b07      	cmp	r3, #7
 8007ce4:	d9e9      	bls.n	8007cba <gen_numname+0x112>
}
 8007ce6:	bf00      	nop
 8007ce8:	bf00      	nop
 8007cea:	3730      	adds	r7, #48	@ 0x30
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007cfc:	230b      	movs	r3, #11
 8007cfe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	0852      	lsrs	r2, r2, #1
 8007d06:	01db      	lsls	r3, r3, #7
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	1c59      	adds	r1, r3, #1
 8007d10:	6079      	str	r1, [r7, #4]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	4413      	add	r3, r2
 8007d16:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	60bb      	str	r3, [r7, #8]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1ed      	bne.n	8007d00 <sum_sfn+0x10>
	return sum;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007d46:	23ff      	movs	r3, #255	@ 0xff
 8007d48:	757b      	strb	r3, [r7, #21]
 8007d4a:	23ff      	movs	r3, #255	@ 0xff
 8007d4c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007d4e:	e081      	b.n	8007e54 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	4619      	mov	r1, r3
 8007d56:	6938      	ldr	r0, [r7, #16]
 8007d58:	f7ff f8a6 	bl	8006ea8 <move_window>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d17c      	bne.n	8007e60 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007d6e:	7dbb      	ldrb	r3, [r7, #22]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007d74:	2304      	movs	r3, #4
 8007d76:	75fb      	strb	r3, [r7, #23]
 8007d78:	e077      	b.n	8007e6a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	330b      	adds	r3, #11
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d86:	73fb      	strb	r3, [r7, #15]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7bfa      	ldrb	r2, [r7, #15]
 8007d8c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007d8e:	7dbb      	ldrb	r3, [r7, #22]
 8007d90:	2be5      	cmp	r3, #229	@ 0xe5
 8007d92:	d00e      	beq.n	8007db2 <dir_read+0x80>
 8007d94:	7dbb      	ldrb	r3, [r7, #22]
 8007d96:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d98:	d00b      	beq.n	8007db2 <dir_read+0x80>
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	f023 0320 	bic.w	r3, r3, #32
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	bf0c      	ite	eq
 8007da4:	2301      	moveq	r3, #1
 8007da6:	2300      	movne	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d002      	beq.n	8007db8 <dir_read+0x86>
				ord = 0xFF;
 8007db2:	23ff      	movs	r3, #255	@ 0xff
 8007db4:	757b      	strb	r3, [r7, #21]
 8007db6:	e044      	b.n	8007e42 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d12f      	bne.n	8007e1e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007dbe:	7dbb      	ldrb	r3, [r7, #22]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00d      	beq.n	8007de4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	7b5b      	ldrb	r3, [r3, #13]
 8007dce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007dd0:	7dbb      	ldrb	r3, [r7, #22]
 8007dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dd6:	75bb      	strb	r3, [r7, #22]
 8007dd8:	7dbb      	ldrb	r3, [r7, #22]
 8007dda:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695a      	ldr	r2, [r3, #20]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007de4:	7dba      	ldrb	r2, [r7, #22]
 8007de6:	7d7b      	ldrb	r3, [r7, #21]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d115      	bne.n	8007e18 <dir_read+0xe6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	330d      	adds	r3, #13
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	7d3a      	ldrb	r2, [r7, #20]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d10e      	bne.n	8007e18 <dir_read+0xe6>
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7ff fe03 	bl	8007a10 <pick_lfn>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <dir_read+0xe6>
 8007e10:	7d7b      	ldrb	r3, [r7, #21]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	e000      	b.n	8007e1a <dir_read+0xe8>
 8007e18:	23ff      	movs	r3, #255	@ 0xff
 8007e1a:	757b      	strb	r3, [r7, #21]
 8007e1c:	e011      	b.n	8007e42 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007e1e:	7d7b      	ldrb	r3, [r7, #21]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <dir_read+0x106>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff ff61 	bl	8007cf0 <sum_sfn>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	461a      	mov	r2, r3
 8007e32:	7d3b      	ldrb	r3, [r7, #20]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d015      	beq.n	8007e64 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8007e40:	e010      	b.n	8007e64 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007e42:	2100      	movs	r1, #0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fc27 	bl	8007698 <dir_next>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <dir_read+0x136>
	while (dp->sect) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f af79 	bne.w	8007d50 <dir_read+0x1e>
 8007e5e:	e004      	b.n	8007e6a <dir_read+0x138>
		if (res != FR_OK) break;
 8007e60:	bf00      	nop
 8007e62:	e002      	b.n	8007e6a <dir_read+0x138>
					break;
 8007e64:	bf00      	nop
 8007e66:	e000      	b.n	8007e6a <dir_read+0x138>
		if (res != FR_OK) break;
 8007e68:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <dir_read+0x144>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	61da      	str	r2, [r3, #28]
	return res;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff fb86 	bl	80075a2 <dir_sdi>
 8007e96:	4603      	mov	r3, r0
 8007e98:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <dir_find+0x24>
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	e0a9      	b.n	8007ff8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007ea4:	23ff      	movs	r3, #255	@ 0xff
 8007ea6:	753b      	strb	r3, [r7, #20]
 8007ea8:	7d3b      	ldrb	r3, [r7, #20]
 8007eaa:	757b      	strb	r3, [r7, #21]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6938      	ldr	r0, [r7, #16]
 8007ebc:	f7fe fff4 	bl	8006ea8 <move_window>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f040 8090 	bne.w	8007fec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ed4:	7dbb      	ldrb	r3, [r7, #22]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d102      	bne.n	8007ee0 <dir_find+0x60>
 8007eda:	2304      	movs	r3, #4
 8007edc:	75fb      	strb	r3, [r7, #23]
 8007ede:	e08a      	b.n	8007ff6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	330b      	adds	r3, #11
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eec:	73fb      	strb	r3, [r7, #15]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7bfa      	ldrb	r2, [r7, #15]
 8007ef2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007ef4:	7dbb      	ldrb	r3, [r7, #22]
 8007ef6:	2be5      	cmp	r3, #229	@ 0xe5
 8007ef8:	d007      	beq.n	8007f0a <dir_find+0x8a>
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <dir_find+0x98>
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d006      	beq.n	8007f18 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007f0a:	23ff      	movs	r3, #255	@ 0xff
 8007f0c:	757b      	strb	r3, [r7, #21]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f16:	e05e      	b.n	8007fd6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b0f      	cmp	r3, #15
 8007f1c:	d136      	bne.n	8007f8c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d154      	bne.n	8007fd6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007f2c:	7dbb      	ldrb	r3, [r7, #22]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00d      	beq.n	8007f52 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	7b5b      	ldrb	r3, [r3, #13]
 8007f3c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007f3e:	7dbb      	ldrb	r3, [r7, #22]
 8007f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f44:	75bb      	strb	r3, [r7, #22]
 8007f46:	7dbb      	ldrb	r3, [r7, #22]
 8007f48:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007f52:	7dba      	ldrb	r2, [r7, #22]
 8007f54:	7d7b      	ldrb	r3, [r7, #21]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d115      	bne.n	8007f86 <dir_find+0x106>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	330d      	adds	r3, #13
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	7d3a      	ldrb	r2, [r7, #20]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d10e      	bne.n	8007f86 <dir_find+0x106>
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7ff fcdc 	bl	8007930 <cmp_lfn>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <dir_find+0x106>
 8007f7e:	7d7b      	ldrb	r3, [r7, #21]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	e000      	b.n	8007f88 <dir_find+0x108>
 8007f86:	23ff      	movs	r3, #255	@ 0xff
 8007f88:	757b      	strb	r3, [r7, #21]
 8007f8a:	e024      	b.n	8007fd6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007f8c:	7d7b      	ldrb	r3, [r7, #21]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <dir_find+0x126>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff feaa 	bl	8007cf0 <sum_sfn>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	7d3b      	ldrb	r3, [r7, #20]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d024      	beq.n	8007ff0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <dir_find+0x14a>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a18      	ldr	r0, [r3, #32]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3324      	adds	r3, #36	@ 0x24
 8007fbc:	220b      	movs	r2, #11
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f7fe fd7f 	bl	8006ac2 <mem_cmp>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d014      	beq.n	8007ff4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007fca:	23ff      	movs	r3, #255	@ 0xff
 8007fcc:	757b      	strb	r3, [r7, #21]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff fb5d 	bl	8007698 <dir_next>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f43f af65 	beq.w	8007eb4 <dir_find+0x34>
 8007fea:	e004      	b.n	8007ff6 <dir_find+0x176>
		if (res != FR_OK) break;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007ff4:	bf00      	nop

	return res;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	@ 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008014:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <dir_register+0x20>
 800801c:	2306      	movs	r3, #6
 800801e:	e0e0      	b.n	80081e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008020:	2300      	movs	r3, #0
 8008022:	627b      	str	r3, [r7, #36]	@ 0x24
 8008024:	e002      	b.n	800802c <dir_register+0x2c>
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	3301      	adds	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f4      	bne.n	8008026 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008042:	f107 030c 	add.w	r3, r7, #12
 8008046:	220c      	movs	r2, #12
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fcfe 	bl	8006a4a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d032      	beq.n	80080be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2240      	movs	r2, #64	@ 0x40
 800805c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008060:	2301      	movs	r3, #1
 8008062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008064:	e016      	b.n	8008094 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	f107 010c 	add.w	r1, r7, #12
 8008074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008076:	f7ff fd97 	bl	8007ba8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff ff00 	bl	8007e80 <dir_find>
 8008080:	4603      	mov	r3, r0
 8008082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800808e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008090:	3301      	adds	r3, #1
 8008092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	2b63      	cmp	r3, #99	@ 0x63
 8008098:	d9e5      	bls.n	8008066 <dir_register+0x66>
 800809a:	e000      	b.n	800809e <dir_register+0x9e>
			if (res != FR_OK) break;
 800809c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	2b64      	cmp	r3, #100	@ 0x64
 80080a2:	d101      	bne.n	80080a8 <dir_register+0xa8>
 80080a4:	2307      	movs	r3, #7
 80080a6:	e09c      	b.n	80081e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80080a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d002      	beq.n	80080b6 <dir_register+0xb6>
 80080b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080b4:	e095      	b.n	80081e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80080b6:	7dfa      	ldrb	r2, [r7, #23]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <dir_register+0xd8>
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	330c      	adds	r3, #12
 80080cc:	4a47      	ldr	r2, [pc, #284]	@ (80081ec <dir_register+0x1ec>)
 80080ce:	fba2 2303 	umull	r2, r3, r2, r3
 80080d2:	089b      	lsrs	r3, r3, #2
 80080d4:	3301      	adds	r3, #1
 80080d6:	e000      	b.n	80080da <dir_register+0xda>
 80080d8:	2301      	movs	r3, #1
 80080da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80080dc:	6a39      	ldr	r1, [r7, #32]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fb9f 	bl	8007822 <dir_alloc>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80080ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d148      	bne.n	8008184 <dir_register+0x184>
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	623b      	str	r3, [r7, #32]
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d042      	beq.n	8008184 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695a      	ldr	r2, [r3, #20]
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	015b      	lsls	r3, r3, #5
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff fa49 	bl	80075a2 <dir_sdi>
 8008110:	4603      	mov	r3, r0
 8008112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800811a:	2b00      	cmp	r3, #0
 800811c:	d132      	bne.n	8008184 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3324      	adds	r3, #36	@ 0x24
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff fde4 	bl	8007cf0 <sum_sfn>
 8008128:	4603      	mov	r3, r0
 800812a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	4619      	mov	r1, r3
 8008132:	69f8      	ldr	r0, [r7, #28]
 8008134:	f7fe feb8 	bl	8006ea8 <move_window>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800813e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008142:	2b00      	cmp	r3, #0
 8008144:	d11d      	bne.n	8008182 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	68d8      	ldr	r0, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a19      	ldr	r1, [r3, #32]
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	b2da      	uxtb	r2, r3
 8008152:	7efb      	ldrb	r3, [r7, #27]
 8008154:	f7ff fcc0 	bl	8007ad8 <put_lfn>
				fs->wflag = 1;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2201      	movs	r2, #1
 800815c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800815e:	2100      	movs	r1, #0
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fa99 	bl	8007698 <dir_next>
 8008166:	4603      	mov	r3, r0
 8008168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800816c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008170:	2b00      	cmp	r3, #0
 8008172:	d107      	bne.n	8008184 <dir_register+0x184>
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	3b01      	subs	r3, #1
 8008178:	623b      	str	r3, [r7, #32]
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1d5      	bne.n	800812c <dir_register+0x12c>
 8008180:	e000      	b.n	8008184 <dir_register+0x184>
				if (res != FR_OK) break;
 8008182:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008184:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008188:	2b00      	cmp	r3, #0
 800818a:	d128      	bne.n	80081de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	4619      	mov	r1, r3
 8008192:	69f8      	ldr	r0, [r7, #28]
 8008194:	f7fe fe88 	bl	8006ea8 <move_window>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800819e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d11b      	bne.n	80081de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	2220      	movs	r2, #32
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fc6c 	bl	8006a8c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a18      	ldr	r0, [r3, #32]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3324      	adds	r3, #36	@ 0x24
 80081bc:	220b      	movs	r2, #11
 80081be:	4619      	mov	r1, r3
 80081c0:	f7fe fc43 	bl	8006a4a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	330c      	adds	r3, #12
 80081d0:	f002 0218 	and.w	r2, r2, #24
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2201      	movs	r2, #1
 80081dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80081de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3730      	adds	r7, #48	@ 0x30
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	4ec4ec4f 	.word	0x4ec4ec4f

080081f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80d8 	beq.w	80083c0 <get_fileinfo+0x1d0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d040      	beq.n	800829c <get_fileinfo+0xac>
			i = j = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008222:	e029      	b.n	8008278 <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008224:	89fb      	ldrh	r3, [r7, #14]
 8008226:	2100      	movs	r1, #0
 8008228:	4618      	mov	r0, r3
 800822a:	f001 fef1 	bl	800a010 <ff_convert>
 800822e:	4603      	mov	r3, r0
 8008230:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008232:	89fb      	ldrh	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <get_fileinfo+0x4e>
 8008238:	2300      	movs	r3, #0
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	e028      	b.n	8008290 <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800823e:	89fb      	ldrh	r3, [r7, #14]
 8008240:	2bff      	cmp	r3, #255	@ 0xff
 8008242:	d90a      	bls.n	800825a <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 8008244:	89fb      	ldrh	r3, [r7, #14]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b299      	uxth	r1, r3
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	61fa      	str	r2, [r7, #28]
 8008250:	b2c9      	uxtb	r1, r1
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4413      	add	r3, r2
 8008256:	460a      	mov	r2, r1
 8008258:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	2bfe      	cmp	r3, #254	@ 0xfe
 800825e:	d902      	bls.n	8008266 <get_fileinfo+0x76>
 8008260:	2300      	movs	r3, #0
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	e014      	b.n	8008290 <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	61fa      	str	r2, [r7, #28]
 800826c:	89fa      	ldrh	r2, [r7, #14]
 800826e:	b2d1      	uxtb	r1, r2
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	4413      	add	r3, r2
 8008274:	460a      	mov	r2, r1
 8008276:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	61b9      	str	r1, [r7, #24]
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	4413      	add	r3, r2
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	81fb      	strh	r3, [r7, #14]
 800828a:	89fb      	ldrh	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1c9      	bne.n	8008224 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	3316      	adds	r3, #22
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	61bb      	str	r3, [r7, #24]
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	3316      	adds	r3, #22
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80082b0:	e04d      	b.n	800834e <get_fileinfo+0x15e>
		c = (TCHAR)dp->dir[i++];
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1a      	ldr	r2, [r3, #32]
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	1c59      	adds	r1, r3, #1
 80082ba:	61f9      	str	r1, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d041      	beq.n	800834c <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d101      	bne.n	80082d2 <get_fileinfo+0xe2>
 80082ce:	23e5      	movs	r3, #229	@ 0xe5
 80082d0:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	d10f      	bne.n	80082f8 <get_fileinfo+0x108>
			if (!lfv) fno->fname[j] = '.';
 80082d8:	89bb      	ldrh	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <get_fileinfo+0xfa>
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	4413      	add	r3, r2
 80082e4:	3316      	adds	r3, #22
 80082e6:	222e      	movs	r2, #46	@ 0x2e
 80082e8:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	61ba      	str	r2, [r7, #24]
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	4413      	add	r3, r2
 80082f4:	222e      	movs	r2, #46	@ 0x2e
 80082f6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	4413      	add	r3, r2
 80082fe:	3309      	adds	r3, #9
 8008300:	7dfa      	ldrb	r2, [r7, #23]
 8008302:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008304:	89bb      	ldrh	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d11c      	bne.n	8008344 <get_fileinfo+0x154>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	2b40      	cmp	r3, #64	@ 0x40
 800830e:	d913      	bls.n	8008338 <get_fileinfo+0x148>
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	2b5a      	cmp	r3, #90	@ 0x5a
 8008314:	d810      	bhi.n	8008338 <get_fileinfo+0x148>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	330c      	adds	r3, #12
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	2b08      	cmp	r3, #8
 8008324:	d901      	bls.n	800832a <get_fileinfo+0x13a>
 8008326:	2310      	movs	r3, #16
 8008328:	e000      	b.n	800832c <get_fileinfo+0x13c>
 800832a:	2308      	movs	r3, #8
 800832c:	4013      	ands	r3, r2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <get_fileinfo+0x148>
				c += 0x20;			/* To lower */
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	3320      	adds	r3, #32
 8008336:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	4413      	add	r3, r2
 800833e:	3316      	adds	r3, #22
 8008340:	7dfa      	ldrb	r2, [r7, #23]
 8008342:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	3301      	adds	r3, #1
 8008348:	61bb      	str	r3, [r7, #24]
 800834a:	e000      	b.n	800834e <get_fileinfo+0x15e>
		if (c == ' ') continue;				/* Skip padding spaces */
 800834c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2b0a      	cmp	r3, #10
 8008352:	d9ae      	bls.n	80082b2 <get_fileinfo+0xc2>
	}
	if (!lfv) {
 8008354:	89bb      	ldrh	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <get_fileinfo+0x186>
		fno->fname[j] = 0;
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	4413      	add	r3, r2
 8008360:	3316      	adds	r3, #22
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	330c      	adds	r3, #12
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <get_fileinfo+0x186>
 8008372:	2300      	movs	r3, #0
 8008374:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	4413      	add	r3, r2
 800837c:	3309      	adds	r3, #9
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	7ada      	ldrb	r2, [r3, #11]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	331c      	adds	r3, #28
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe faef 	bl	8006976 <ld_dword>
 8008398:	4602      	mov	r2, r0
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	3316      	adds	r3, #22
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fae6 	bl	8006976 <ld_dword>
 80083aa:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	80da      	strh	r2, [r3, #6]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	0c1b      	lsrs	r3, r3, #16
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	809a      	strh	r2, [r3, #4]
 80083be:	e000      	b.n	80083c2 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80083c0:	bf00      	nop
}
 80083c2:	3720      	adds	r7, #32
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	@ 0x28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	613b      	str	r3, [r7, #16]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	61ba      	str	r2, [r7, #24]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4413      	add	r3, r2
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80083f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083f8:	2b1f      	cmp	r3, #31
 80083fa:	d96a      	bls.n	80084d2 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80083fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8008400:	d006      	beq.n	8008410 <create_name+0x48>
 8008402:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008404:	2b5c      	cmp	r3, #92	@ 0x5c
 8008406:	d110      	bne.n	800842a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008408:	e002      	b.n	8008410 <create_name+0x48>
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	3301      	adds	r3, #1
 800840e:	61bb      	str	r3, [r7, #24]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	4413      	add	r3, r2
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b2f      	cmp	r3, #47	@ 0x2f
 800841a:	d0f6      	beq.n	800840a <create_name+0x42>
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	4413      	add	r3, r2
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b5c      	cmp	r3, #92	@ 0x5c
 8008426:	d0f0      	beq.n	800840a <create_name+0x42>
			break;
 8008428:	e054      	b.n	80084d4 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2bfe      	cmp	r3, #254	@ 0xfe
 800842e:	d901      	bls.n	8008434 <create_name+0x6c>
 8008430:	2306      	movs	r3, #6
 8008432:	e1bf      	b.n	80087b4 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008434:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008436:	b2db      	uxtb	r3, r3
 8008438:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800843a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b80      	cmp	r3, #128	@ 0x80
 8008440:	d925      	bls.n	800848e <create_name+0xc6>
 8008442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2bff      	cmp	r3, #255	@ 0xff
 8008448:	d021      	beq.n	800848e <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	61ba      	str	r2, [r7, #24]
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4413      	add	r3, r2
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800845a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	b29a      	uxth	r2, r3
 8008460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008464:	b29b      	uxth	r3, r3
 8008466:	4413      	add	r3, r2
 8008468:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800846a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800846e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008470:	d903      	bls.n	800847a <create_name+0xb2>
 8008472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008476:	2b7e      	cmp	r3, #126	@ 0x7e
 8008478:	d909      	bls.n	800848e <create_name+0xc6>
 800847a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800847e:	2b00      	cmp	r3, #0
 8008480:	da03      	bge.n	800848a <create_name+0xc2>
 8008482:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008486:	2bff      	cmp	r3, #255	@ 0xff
 8008488:	d101      	bne.n	800848e <create_name+0xc6>
 800848a:	2306      	movs	r3, #6
 800848c:	e192      	b.n	80087b4 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800848e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f001 fdbc 	bl	800a010 <ff_convert>
 8008498:	4603      	mov	r3, r0
 800849a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800849c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <create_name+0xde>
 80084a2:	2306      	movs	r3, #6
 80084a4:	e186      	b.n	80087b4 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80084a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80084aa:	d809      	bhi.n	80084c0 <create_name+0xf8>
 80084ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084ae:	4619      	mov	r1, r3
 80084b0:	489a      	ldr	r0, [pc, #616]	@ (800871c <create_name+0x354>)
 80084b2:	f7fe fb2d 	bl	8006b10 <chk_chr>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <create_name+0xf8>
 80084bc:	2306      	movs	r3, #6
 80084be:	e179      	b.n	80087b4 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	617a      	str	r2, [r7, #20]
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80084ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80084d0:	e78a      	b.n	80083e8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80084d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	441a      	add	r2, r3
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80084de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084e0:	2b1f      	cmp	r3, #31
 80084e2:	d801      	bhi.n	80084e8 <create_name+0x120>
 80084e4:	2304      	movs	r3, #4
 80084e6:	e000      	b.n	80084ea <create_name+0x122>
 80084e8:	2300      	movs	r3, #0
 80084ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80084ee:	e011      	b.n	8008514 <create_name+0x14c>
		w = lfn[di - 1];
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80084f6:	3b01      	subs	r3, #1
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008502:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008504:	2b20      	cmp	r3, #32
 8008506:	d002      	beq.n	800850e <create_name+0x146>
 8008508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800850a:	2b2e      	cmp	r3, #46	@ 0x2e
 800850c:	d106      	bne.n	800851c <create_name+0x154>
		di--;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3b01      	subs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1ea      	bne.n	80084f0 <create_name+0x128>
 800851a:	e000      	b.n	800851e <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800851c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	2200      	movs	r2, #0
 8008528:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <create_name+0x16c>
 8008530:	2306      	movs	r3, #6
 8008532:	e13f      	b.n	80087b4 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3324      	adds	r3, #36	@ 0x24
 8008538:	220b      	movs	r2, #11
 800853a:	2120      	movs	r1, #32
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe faa5 	bl	8006a8c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	e002      	b.n	800854e <create_name+0x186>
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	3301      	adds	r3, #1
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	2b20      	cmp	r3, #32
 800855a:	d0f5      	beq.n	8008548 <create_name+0x180>
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	2b2e      	cmp	r3, #46	@ 0x2e
 8008568:	d0ee      	beq.n	8008548 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <create_name+0x1bc>
 8008570:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008574:	f043 0303 	orr.w	r3, r3, #3
 8008578:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800857c:	e002      	b.n	8008584 <create_name+0x1bc>
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	3b01      	subs	r3, #1
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <create_name+0x1d6>
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008590:	3b01      	subs	r3, #1
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	2b2e      	cmp	r3, #46	@ 0x2e
 800859c:	d1ef      	bne.n	800857e <create_name+0x1b6>

	i = b = 0; ni = 8;
 800859e:	2300      	movs	r3, #0
 80085a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085a4:	2300      	movs	r3, #0
 80085a6:	623b      	str	r3, [r7, #32]
 80085a8:	2308      	movs	r3, #8
 80085aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	61ba      	str	r2, [r7, #24]
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80085bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 80aa 	beq.w	8008718 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80085c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d006      	beq.n	80085d8 <create_name+0x210>
 80085ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80085ce:	d10a      	bne.n	80085e6 <create_name+0x21e>
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d006      	beq.n	80085e6 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 80085d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085dc:	f043 0303 	orr.w	r3, r3, #3
 80085e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80085e4:	e097      	b.n	8008716 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80085e6:	6a3a      	ldr	r2, [r7, #32]
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d203      	bcs.n	80085f6 <create_name+0x22e>
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d123      	bne.n	800863e <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	2b0b      	cmp	r3, #11
 80085fa:	d106      	bne.n	800860a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 80085fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008600:	f043 0303 	orr.w	r3, r3, #3
 8008604:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008608:	e08d      	b.n	8008726 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	429a      	cmp	r2, r3
 8008610:	d005      	beq.n	800861e <create_name+0x256>
 8008612:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008616:	f043 0303 	orr.w	r3, r3, #3
 800861a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	429a      	cmp	r2, r3
 8008624:	d87e      	bhi.n	8008724 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	2308      	movs	r3, #8
 800862c:	623b      	str	r3, [r7, #32]
 800862e:	230b      	movs	r3, #11
 8008630:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800863c:	e06b      	b.n	8008716 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800863e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008640:	2b7f      	cmp	r3, #127	@ 0x7f
 8008642:	d910      	bls.n	8008666 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8008644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008646:	4618      	mov	r0, r3
 8008648:	f001 fd40 	bl	800a0cc <ff_wtoupper>
 800864c:	4603      	mov	r3, r0
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f001 fcdd 	bl	800a010 <ff_convert>
 8008656:	4603      	mov	r3, r0
 8008658:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800865a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800865e:	f043 0302 	orr.w	r3, r3, #2
 8008662:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8008666:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008668:	2bff      	cmp	r3, #255	@ 0xff
 800866a:	d91a      	bls.n	80086a2 <create_name+0x2da>
			if (i >= ni - 1) {
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	3b01      	subs	r3, #1
 8008670:	6a3a      	ldr	r2, [r7, #32]
 8008672:	429a      	cmp	r2, r3
 8008674:	d308      	bcc.n	8008688 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8008676:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800867a:	f043 0303 	orr.w	r3, r3, #3
 800867e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	623b      	str	r3, [r7, #32]
 8008686:	e046      	b.n	8008716 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8008688:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	b299      	uxth	r1, r3
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	623a      	str	r2, [r7, #32]
 8008694:	b2c9      	uxtb	r1, r1
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	460a      	mov	r2, r1
 800869c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80086a0:	e02f      	b.n	8008702 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80086a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <create_name+0x2f0>
 80086a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086aa:	4619      	mov	r1, r3
 80086ac:	481c      	ldr	r0, [pc, #112]	@ (8008720 <create_name+0x358>)
 80086ae:	f7fe fa2f 	bl	8006b10 <chk_chr>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80086b8:	235f      	movs	r3, #95	@ 0x5f
 80086ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80086bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086c0:	f043 0303 	orr.w	r3, r3, #3
 80086c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80086c8:	e01b      	b.n	8008702 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80086ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086cc:	2b40      	cmp	r3, #64	@ 0x40
 80086ce:	d909      	bls.n	80086e4 <create_name+0x31c>
 80086d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086d2:	2b5a      	cmp	r3, #90	@ 0x5a
 80086d4:	d806      	bhi.n	80086e4 <create_name+0x31c>
					b |= 2;
 80086d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086da:	f043 0302 	orr.w	r3, r3, #2
 80086de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80086e2:	e00e      	b.n	8008702 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80086e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086e6:	2b60      	cmp	r3, #96	@ 0x60
 80086e8:	d90b      	bls.n	8008702 <create_name+0x33a>
 80086ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086ec:	2b7a      	cmp	r3, #122	@ 0x7a
 80086ee:	d808      	bhi.n	8008702 <create_name+0x33a>
						b |= 1; w -= 0x20;
 80086f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80086fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086fe:	3b20      	subs	r3, #32
 8008700:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	623a      	str	r2, [r7, #32]
 8008708:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800870a:	b2d1      	uxtb	r1, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	460a      	mov	r2, r1
 8008712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008716:	e749      	b.n	80085ac <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8008718:	bf00      	nop
 800871a:	e004      	b.n	8008726 <create_name+0x35e>
 800871c:	0800b560 	.word	0x0800b560
 8008720:	0800b56c 	.word	0x0800b56c
			if (si > di) break;			/* No extension */
 8008724:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800872c:	2be5      	cmp	r3, #229	@ 0xe5
 800872e:	d103      	bne.n	8008738 <create_name+0x370>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2205      	movs	r2, #5
 8008734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	2b08      	cmp	r3, #8
 800873c:	d104      	bne.n	8008748 <create_name+0x380>
 800873e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800874c:	f003 030c 	and.w	r3, r3, #12
 8008750:	2b0c      	cmp	r3, #12
 8008752:	d005      	beq.n	8008760 <create_name+0x398>
 8008754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	2b03      	cmp	r3, #3
 800875e:	d105      	bne.n	800876c <create_name+0x3a4>
 8008760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008764:	f043 0302 	orr.w	r3, r3, #2
 8008768:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800876c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d117      	bne.n	80087a8 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <create_name+0x3c8>
 8008784:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008788:	f043 0310 	orr.w	r3, r3, #16
 800878c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008794:	f003 030c 	and.w	r3, r3, #12
 8008798:	2b04      	cmp	r3, #4
 800879a:	d105      	bne.n	80087a8 <create_name+0x3e0>
 800879c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80087ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80087b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3728      	adds	r7, #40	@ 0x28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80087d0:	e002      	b.n	80087d8 <follow_path+0x1c>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80087de:	d0f8      	beq.n	80087d2 <follow_path+0x16>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80087e6:	d0f4      	beq.n	80087d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2200      	movs	r2, #0
 80087ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2b1f      	cmp	r3, #31
 80087f4:	d80a      	bhi.n	800880c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2280      	movs	r2, #128	@ 0x80
 80087fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80087fe:	2100      	movs	r1, #0
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7fe fece 	bl	80075a2 <dir_sdi>
 8008806:	4603      	mov	r3, r0
 8008808:	75fb      	strb	r3, [r7, #23]
 800880a:	e043      	b.n	8008894 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800880c:	463b      	mov	r3, r7
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff fdd9 	bl	80083c8 <create_name>
 8008816:	4603      	mov	r3, r0
 8008818:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d134      	bne.n	800888a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff fb2d 	bl	8007e80 <dir_find>
 8008826:	4603      	mov	r3, r0
 8008828:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008830:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	2b04      	cmp	r3, #4
 800883c:	d127      	bne.n	800888e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d122      	bne.n	800888e <follow_path+0xd2>
 8008848:	2305      	movs	r3, #5
 800884a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800884c:	e01f      	b.n	800888e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d11c      	bne.n	8008892 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	799b      	ldrb	r3, [r3, #6]
 800885c:	f003 0310 	and.w	r3, r3, #16
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008864:	2305      	movs	r3, #5
 8008866:	75fb      	strb	r3, [r7, #23]
 8008868:	e014      	b.n	8008894 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008878:	4413      	add	r3, r2
 800887a:	4619      	mov	r1, r3
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff f817 	bl	80078b0 <ld_clust>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008888:	e7c0      	b.n	800880c <follow_path+0x50>
			if (res != FR_OK) break;
 800888a:	bf00      	nop
 800888c:	e002      	b.n	8008894 <follow_path+0xd8>
				break;
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008892:	bf00      	nop
			}
		}
	}

	return res;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800889e:	b480      	push	{r7}
 80088a0:	b087      	sub	sp, #28
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80088a6:	f04f 33ff 	mov.w	r3, #4294967295
 80088aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d031      	beq.n	8008918 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	e002      	b.n	80088c2 <get_ldnumber+0x24>
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	3301      	adds	r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b1f      	cmp	r3, #31
 80088c8:	d903      	bls.n	80088d2 <get_ldnumber+0x34>
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80088d0:	d1f4      	bne.n	80088bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b3a      	cmp	r3, #58	@ 0x3a
 80088d8:	d11c      	bne.n	8008914 <get_ldnumber+0x76>
			tp = *path;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	60fa      	str	r2, [r7, #12]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	3b30      	subs	r3, #48	@ 0x30
 80088ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d80e      	bhi.n	8008910 <get_ldnumber+0x72>
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d10a      	bne.n	8008910 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d107      	bne.n	8008910 <get_ldnumber+0x72>
					vol = (int)i;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	3301      	adds	r3, #1
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	e002      	b.n	800891a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008918:	693b      	ldr	r3, [r7, #16]
}
 800891a:	4618      	mov	r0, r3
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	70da      	strb	r2, [r3, #3]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f04f 32ff 	mov.w	r2, #4294967295
 800893e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fe fab0 	bl	8006ea8 <move_window>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <check_fs+0x2a>
 800894e:	2304      	movs	r3, #4
 8008950:	e038      	b.n	80089c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3334      	adds	r3, #52	@ 0x34
 8008956:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800895a:	4618      	mov	r0, r3
 800895c:	f7fd fff2 	bl	8006944 <ld_word>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008968:	429a      	cmp	r2, r3
 800896a:	d001      	beq.n	8008970 <check_fs+0x48>
 800896c:	2303      	movs	r3, #3
 800896e:	e029      	b.n	80089c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008976:	2be9      	cmp	r3, #233	@ 0xe9
 8008978:	d009      	beq.n	800898e <check_fs+0x66>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008980:	2beb      	cmp	r3, #235	@ 0xeb
 8008982:	d11e      	bne.n	80089c2 <check_fs+0x9a>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800898a:	2b90      	cmp	r3, #144	@ 0x90
 800898c:	d119      	bne.n	80089c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3334      	adds	r3, #52	@ 0x34
 8008992:	3336      	adds	r3, #54	@ 0x36
 8008994:	4618      	mov	r0, r3
 8008996:	f7fd ffee 	bl	8006976 <ld_dword>
 800899a:	4603      	mov	r3, r0
 800899c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80089a0:	4a0a      	ldr	r2, [pc, #40]	@ (80089cc <check_fs+0xa4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d101      	bne.n	80089aa <check_fs+0x82>
 80089a6:	2300      	movs	r3, #0
 80089a8:	e00c      	b.n	80089c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3334      	adds	r3, #52	@ 0x34
 80089ae:	3352      	adds	r3, #82	@ 0x52
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fd ffe0 	bl	8006976 <ld_dword>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4a05      	ldr	r2, [pc, #20]	@ (80089d0 <check_fs+0xa8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d101      	bne.n	80089c2 <check_fs+0x9a>
 80089be:	2300      	movs	r3, #0
 80089c0:	e000      	b.n	80089c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80089c2:	2302      	movs	r3, #2
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	00544146 	.word	0x00544146
 80089d0:	33544146 	.word	0x33544146

080089d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b096      	sub	sp, #88	@ 0x58
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff ff58 	bl	800889e <get_ldnumber>
 80089ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80089f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da01      	bge.n	80089fa <find_volume+0x26>
 80089f6:	230b      	movs	r3, #11
 80089f8:	e22d      	b.n	8008e56 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80089fa:	4aa1      	ldr	r2, [pc, #644]	@ (8008c80 <find_volume+0x2ac>)
 80089fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a02:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <find_volume+0x3a>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	e223      	b.n	8008e56 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	f023 0301 	bic.w	r3, r3, #1
 8008a1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d01a      	beq.n	8008a5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fd feeb 	bl	8006804 <disk_status>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10c      	bne.n	8008a5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <find_volume+0x82>
 8008a46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008a52:	230a      	movs	r3, #10
 8008a54:	e1ff      	b.n	8008e56 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008a56:	2300      	movs	r3, #0
 8008a58:	e1fd      	b.n	8008e56 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fd fee3 	bl	8006838 <disk_initialize>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a84:	2303      	movs	r3, #3
 8008a86:	e1e6      	b.n	8008e56 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d007      	beq.n	8008a9e <find_volume+0xca>
 8008a8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a92:	f003 0304 	and.w	r3, r3, #4
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	e1db      	b.n	8008e56 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008aa2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008aa4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008aa6:	f7ff ff3f 	bl	8008928 <check_fs>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d149      	bne.n	8008b4c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ab8:	2300      	movs	r3, #0
 8008aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008abc:	e01e      	b.n	8008afc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008acc:	4413      	add	r3, r2
 8008ace:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d006      	beq.n	8008ae8 <find_volume+0x114>
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	3308      	adds	r3, #8
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fd ff49 	bl	8006976 <ld_dword>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	e000      	b.n	8008aea <find_volume+0x116>
 8008ae8:	2200      	movs	r2, #0
 8008aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	3358      	adds	r3, #88	@ 0x58
 8008af0:	443b      	add	r3, r7
 8008af2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008af8:	3301      	adds	r3, #1
 8008afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8008afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d9dd      	bls.n	8008abe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b02:	2300      	movs	r3, #0
 8008b04:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <find_volume+0x13e>
 8008b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	3358      	adds	r3, #88	@ 0x58
 8008b18:	443b      	add	r3, r7
 8008b1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b1e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <find_volume+0x15e>
 8008b26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b2a:	f7ff fefd 	bl	8008928 <check_fs>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	e000      	b.n	8008b34 <find_volume+0x160>
 8008b32:	2303      	movs	r3, #3
 8008b34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d905      	bls.n	8008b4c <find_volume+0x178>
 8008b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b42:	3301      	adds	r3, #1
 8008b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d9e2      	bls.n	8008b12 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d101      	bne.n	8008b58 <find_volume+0x184>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e17e      	b.n	8008e56 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d901      	bls.n	8008b64 <find_volume+0x190>
 8008b60:	230d      	movs	r3, #13
 8008b62:	e178      	b.n	8008e56 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b66:	3334      	adds	r3, #52	@ 0x34
 8008b68:	330b      	adds	r3, #11
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fd feea 	bl	8006944 <ld_word>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b76:	d001      	beq.n	8008b7c <find_volume+0x1a8>
 8008b78:	230d      	movs	r3, #13
 8008b7a:	e16c      	b.n	8008e56 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7e:	3334      	adds	r3, #52	@ 0x34
 8008b80:	3316      	adds	r3, #22
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd fede 	bl	8006944 <ld_word>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <find_volume+0x1cc>
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	3334      	adds	r3, #52	@ 0x34
 8008b96:	3324      	adds	r3, #36	@ 0x24
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fd feec 	bl	8006976 <ld_dword>
 8008b9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ba4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	789b      	ldrb	r3, [r3, #2]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d005      	beq.n	8008bc4 <find_volume+0x1f0>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	789b      	ldrb	r3, [r3, #2]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d001      	beq.n	8008bc4 <find_volume+0x1f0>
 8008bc0:	230d      	movs	r3, #13
 8008bc2:	e148      	b.n	8008e56 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	789b      	ldrb	r3, [r3, #2]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be0:	895b      	ldrh	r3, [r3, #10]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <find_volume+0x224>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	895b      	ldrh	r3, [r3, #10]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	895b      	ldrh	r3, [r3, #10]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <find_volume+0x228>
 8008bf8:	230d      	movs	r3, #13
 8008bfa:	e12c      	b.n	8008e56 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfe:	3334      	adds	r3, #52	@ 0x34
 8008c00:	3311      	adds	r3, #17
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fd fe9e 	bl	8006944 <ld_word>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	891b      	ldrh	r3, [r3, #8]
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <find_volume+0x24e>
 8008c1e:	230d      	movs	r3, #13
 8008c20:	e119      	b.n	8008e56 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	3334      	adds	r3, #52	@ 0x34
 8008c26:	3313      	adds	r3, #19
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fd fe8b 	bl	8006944 <ld_word>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <find_volume+0x272>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	3334      	adds	r3, #52	@ 0x34
 8008c3c:	3320      	adds	r3, #32
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fd fe99 	bl	8006976 <ld_dword>
 8008c44:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c48:	3334      	adds	r3, #52	@ 0x34
 8008c4a:	330e      	adds	r3, #14
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fd fe79 	bl	8006944 <ld_word>
 8008c52:	4603      	mov	r3, r0
 8008c54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <find_volume+0x28c>
 8008c5c:	230d      	movs	r3, #13
 8008c5e:	e0fa      	b.n	8008e56 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c64:	4413      	add	r3, r2
 8008c66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c68:	8912      	ldrh	r2, [r2, #8]
 8008c6a:	0912      	lsrs	r2, r2, #4
 8008c6c:	b292      	uxth	r2, r2
 8008c6e:	4413      	add	r3, r2
 8008c70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d204      	bcs.n	8008c84 <find_volume+0x2b0>
 8008c7a:	230d      	movs	r3, #13
 8008c7c:	e0eb      	b.n	8008e56 <find_volume+0x482>
 8008c7e:	bf00      	nop
 8008c80:	20000f68 	.word	0x20000f68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c8c:	8952      	ldrh	r2, [r2, #10]
 8008c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <find_volume+0x2ca>
 8008c9a:	230d      	movs	r3, #13
 8008c9c:	e0db      	b.n	8008e56 <find_volume+0x482>
		fmt = FS_FAT32;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d802      	bhi.n	8008cb4 <find_volume+0x2e0>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d802      	bhi.n	8008cc4 <find_volume+0x2f0>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	1c9a      	adds	r2, r3, #2
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cd0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008cd2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd6:	441a      	add	r2, r3
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008cdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce0:	441a      	add	r2, r3
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008ce6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d11e      	bne.n	8008d2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	3334      	adds	r3, #52	@ 0x34
 8008cf2:	332a      	adds	r3, #42	@ 0x2a
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fd fe25 	bl	8006944 <ld_word>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <find_volume+0x330>
 8008d00:	230d      	movs	r3, #13
 8008d02:	e0a8      	b.n	8008e56 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d06:	891b      	ldrh	r3, [r3, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <find_volume+0x33c>
 8008d0c:	230d      	movs	r3, #13
 8008d0e:	e0a2      	b.n	8008e56 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	3334      	adds	r3, #52	@ 0x34
 8008d14:	332c      	adds	r3, #44	@ 0x2c
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fd fe2d 	bl	8006976 <ld_dword>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d20:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d2a:	e01f      	b.n	8008d6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	891b      	ldrh	r3, [r3, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <find_volume+0x364>
 8008d34:	230d      	movs	r3, #13
 8008d36:	e08e      	b.n	8008e56 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d3e:	441a      	add	r2, r3
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d103      	bne.n	8008d54 <find_volume+0x380>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	e00a      	b.n	8008d6a <find_volume+0x396>
 8008d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d56:	699a      	ldr	r2, [r3, #24]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	4413      	add	r3, r2
 8008d5e:	085a      	lsrs	r2, r3, #1
 8008d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d6a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6e:	69da      	ldr	r2, [r3, #28]
 8008d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d72:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008d76:	0a5b      	lsrs	r3, r3, #9
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d201      	bcs.n	8008d80 <find_volume+0x3ac>
 8008d7c:	230d      	movs	r3, #13
 8008d7e:	e06a      	b.n	8008e56 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	615a      	str	r2, [r3, #20]
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d92:	2280      	movs	r2, #128	@ 0x80
 8008d94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d149      	bne.n	8008e32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da0:	3334      	adds	r3, #52	@ 0x34
 8008da2:	3330      	adds	r3, #48	@ 0x30
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fd fdcd 	bl	8006944 <ld_word>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d140      	bne.n	8008e32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008db2:	3301      	adds	r3, #1
 8008db4:	4619      	mov	r1, r3
 8008db6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008db8:	f7fe f876 	bl	8006ea8 <move_window>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d137      	bne.n	8008e32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	3334      	adds	r3, #52	@ 0x34
 8008dcc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fd fdb7 	bl	8006944 <ld_word>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d127      	bne.n	8008e32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	3334      	adds	r3, #52	@ 0x34
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fdc5 	bl	8006976 <ld_dword>
 8008dec:	4603      	mov	r3, r0
 8008dee:	4a1c      	ldr	r2, [pc, #112]	@ (8008e60 <find_volume+0x48c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d11e      	bne.n	8008e32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	3334      	adds	r3, #52	@ 0x34
 8008df8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fd fdba 	bl	8006976 <ld_dword>
 8008e02:	4603      	mov	r3, r0
 8008e04:	4a17      	ldr	r2, [pc, #92]	@ (8008e64 <find_volume+0x490>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d113      	bne.n	8008e32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	3334      	adds	r3, #52	@ 0x34
 8008e0e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fd fdaf 	bl	8006976 <ld_dword>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	3334      	adds	r3, #52	@ 0x34
 8008e22:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fd fda5 	bl	8006976 <ld_dword>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008e38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <find_volume+0x494>)
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	4b09      	ldr	r3, [pc, #36]	@ (8008e68 <find_volume+0x494>)
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	4b08      	ldr	r3, [pc, #32]	@ (8008e68 <find_volume+0x494>)
 8008e48:	881a      	ldrh	r2, [r3, #0]
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e50:	f7fd ffc2 	bl	8006dd8 <clear_lock>
#endif
	return FR_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3758      	adds	r7, #88	@ 0x58
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	41615252 	.word	0x41615252
 8008e64:	61417272 	.word	0x61417272
 8008e68:	20000f6c 	.word	0x20000f6c

08008e6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008e76:	2309      	movs	r3, #9
 8008e78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01c      	beq.n	8008eba <validate+0x4e>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d018      	beq.n	8008eba <validate+0x4e>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d013      	beq.n	8008eba <validate+0x4e>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	889a      	ldrh	r2, [r3, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	88db      	ldrh	r3, [r3, #6]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d10c      	bne.n	8008eba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fd fcac 	bl	8006804 <disk_status>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <validate+0x4e>
			res = FR_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <validate+0x5a>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	e000      	b.n	8008ec8 <validate+0x5c>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	6013      	str	r3, [r2, #0]
	return res;
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008eea:	f107 0310 	add.w	r3, r7, #16
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fcd5 	bl	800889e <get_ldnumber>
 8008ef4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da01      	bge.n	8008f00 <f_mount+0x28>
 8008efc:	230b      	movs	r3, #11
 8008efe:	e02b      	b.n	8008f58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f00:	4a17      	ldr	r2, [pc, #92]	@ (8008f60 <f_mount+0x88>)
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d005      	beq.n	8008f1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f10:	69b8      	ldr	r0, [r7, #24]
 8008f12:	f7fd ff61 	bl	8006dd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	490d      	ldr	r1, [pc, #52]	@ (8008f60 <f_mount+0x88>)
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <f_mount+0x66>
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d001      	beq.n	8008f42 <f_mount+0x6a>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e00a      	b.n	8008f58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008f42:	f107 010c 	add.w	r1, r7, #12
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff fd41 	bl	80089d4 <find_volume>
 8008f52:	4603      	mov	r3, r0
 8008f54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000f68 	.word	0x20000f68

08008f64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f70:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8008f74:	6018      	str	r0, [r3, #0]
 8008f76:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f7a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008f7e:	6019      	str	r1, [r3, #0]
 8008f80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f84:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008f88:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f8a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f8e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <f_open+0x38>
 8008f98:	2309      	movs	r3, #9
 8008f9a:	e291      	b.n	80094c0 <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f9c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fa0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008fa4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008fa8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8008fac:	7812      	ldrb	r2, [r2, #0]
 8008fae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008fb2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008fb4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fb8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8008fbc:	781a      	ldrb	r2, [r3, #0]
 8008fbe:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8008fc2:	f107 0308 	add.w	r3, r7, #8
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff fd04 	bl	80089d4 <find_volume>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8008fd2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 8265 	bne.w	80094a6 <f_open+0x542>
		dj.obj.fs = fs;
 8008fdc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8008fe0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8008fe4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8008fe8:	f107 0214 	add.w	r2, r7, #20
 8008fec:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008fee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ff2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff fbdc 	bl	80087bc <follow_path>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800900a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800900e:	2b00      	cmp	r3, #0
 8009010:	d11c      	bne.n	800904c <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009012:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8009016:	b25b      	sxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	da03      	bge.n	8009024 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800901c:	2306      	movs	r3, #6
 800901e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009022:	e013      	b.n	800904c <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009024:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009028:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b01      	cmp	r3, #1
 8009030:	bf8c      	ite	hi
 8009032:	2301      	movhi	r3, #1
 8009034:	2300      	movls	r3, #0
 8009036:	b2db      	uxtb	r3, r3
 8009038:	461a      	mov	r2, r3
 800903a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800903e:	4611      	mov	r1, r2
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd fd81 	bl	8006b48 <chk_lock>
 8009046:	4603      	mov	r3, r0
 8009048:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800904c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009050:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 031c 	and.w	r3, r3, #28
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 80a7 	beq.w	80091ae <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8009060:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009064:	2b00      	cmp	r3, #0
 8009066:	d01f      	beq.n	80090a8 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009068:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800906c:	2b04      	cmp	r3, #4
 800906e:	d10e      	bne.n	800908e <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009070:	f7fd fdc6 	bl	8006c00 <enq_lock>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d006      	beq.n	8009088 <f_open+0x124>
 800907a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe ffbe 	bl	8008000 <dir_register>
 8009084:	4603      	mov	r3, r0
 8009086:	e000      	b.n	800908a <f_open+0x126>
 8009088:	2312      	movs	r3, #18
 800908a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800908e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009092:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009096:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800909a:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800909e:	7812      	ldrb	r2, [r2, #0]
 80090a0:	f042 0208 	orr.w	r2, r2, #8
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	e015      	b.n	80090d4 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80090a8:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80090ac:	f003 0311 	and.w	r3, r3, #17
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <f_open+0x158>
					res = FR_DENIED;
 80090b4:	2307      	movs	r3, #7
 80090b6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80090ba:	e00b      	b.n	80090d4 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80090bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090c0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <f_open+0x170>
 80090ce:	2308      	movs	r3, #8
 80090d0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80090d4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f040 8088 	bne.w	80091ee <f_open+0x28a>
 80090de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090e2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	f003 0308 	and.w	r3, r3, #8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d07e      	beq.n	80091ee <f_open+0x28a>
				dw = GET_FATTIME();
 80090f0:	f7fd f938 	bl	8006364 <get_fattime>
 80090f4:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80090f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80090fc:	330e      	adds	r3, #14
 80090fe:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009102:	4618      	mov	r0, r3
 8009104:	f7fd fc75 	bl	80069f2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009108:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800910c:	3316      	adds	r3, #22
 800910e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009112:	4618      	mov	r0, r3
 8009114:	f7fd fc6d 	bl	80069f2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009118:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800911c:	330b      	adds	r3, #11
 800911e:	2220      	movs	r2, #32
 8009120:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009122:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009126:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe fbbf 	bl	80078b0 <ld_clust>
 8009132:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009136:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800913a:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800913e:	2200      	movs	r2, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fbd4 	bl	80078ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009146:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800914a:	331c      	adds	r3, #28
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f7fd fc4f 	bl	80069f2 <st_dword>
					fs->wflag = 1;
 8009154:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009158:	2201      	movs	r2, #1
 800915a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800915c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009160:	2b00      	cmp	r3, #0
 8009162:	d044      	beq.n	80091ee <f_open+0x28a>
						dw = fs->winsect;
 8009164:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800916e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009172:	2200      	movs	r2, #0
 8009174:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8009178:	4618      	mov	r0, r3
 800917a:	f7fe f8e1 	bl	8007340 <remove_chain>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8009184:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009188:	2b00      	cmp	r3, #0
 800918a:	d130      	bne.n	80091ee <f_open+0x28a>
							res = move_window(fs, dw);
 800918c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009190:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009194:	4618      	mov	r0, r3
 8009196:	f7fd fe87 	bl	8006ea8 <move_window>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80091a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80091a4:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80091a8:	3a01      	subs	r2, #1
 80091aa:	611a      	str	r2, [r3, #16]
 80091ac:	e01f      	b.n	80091ee <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80091ae:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d11b      	bne.n	80091ee <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80091b6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80091ba:	f003 0310 	and.w	r3, r3, #16
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <f_open+0x266>
					res = FR_NO_FILE;
 80091c2:	2304      	movs	r3, #4
 80091c4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80091c8:	e011      	b.n	80091ee <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80091ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091ce:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d008      	beq.n	80091ee <f_open+0x28a>
 80091dc:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <f_open+0x28a>
						res = FR_DENIED;
 80091e8:	2307      	movs	r3, #7
 80091ea:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80091ee:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d148      	bne.n	8009288 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80091f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091fa:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8009208:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800920c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009210:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009214:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800921e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009220:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009226:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800922a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009232:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009236:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800923a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009242:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009246:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	bf8c      	ite	hi
 8009250:	2301      	movhi	r3, #1
 8009252:	2300      	movls	r3, #0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f7fd fcf0 	bl	8006c44 <inc_lock>
 8009264:	4602      	mov	r2, r0
 8009266:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800926a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009272:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009276:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <f_open+0x324>
 8009282:	2302      	movs	r3, #2
 8009284:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009288:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800928c:	2b00      	cmp	r3, #0
 800928e:	f040 810a 	bne.w	80094a6 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009292:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009296:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe fb07 	bl	80078b0 <ld_clust>
 80092a2:	4602      	mov	r2, r0
 80092a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092a8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80092b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80092b4:	331c      	adds	r3, #28
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fd fb5d 	bl	8006976 <ld_dword>
 80092bc:	4602      	mov	r2, r0
 80092be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80092ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092ce:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2200      	movs	r2, #0
 80092d6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80092d8:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80092dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092e0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80092e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80092ec:	88da      	ldrh	r2, [r3, #6]
 80092ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092f2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80092fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092fe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009308:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800930c:	7812      	ldrb	r2, [r2, #0]
 800930e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009310:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009314:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2200      	movs	r2, #0
 800931c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800931e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009322:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800932c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009330:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2200      	movs	r2, #0
 8009338:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800933a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800933e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3330      	adds	r3, #48	@ 0x30
 8009346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800934a:	2100      	movs	r1, #0
 800934c:	4618      	mov	r0, r3
 800934e:	f7fd fb9d 	bl	8006a8c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009352:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009356:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80a0 	beq.w	80094a6 <f_open+0x542>
 8009366:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800936a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 8097 	beq.w	80094a6 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009378:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800937c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009388:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009390:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009394:	895b      	ldrh	r3, [r3, #10]
 8009396:	025b      	lsls	r3, r3, #9
 8009398:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800939c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093a0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093b0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80093bc:	e021      	b.n	8009402 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 80093be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fd fe26 	bl	800701e <get_fat>
 80093d2:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80093d6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d802      	bhi.n	80093e4 <f_open+0x480>
 80093de:	2302      	movs	r3, #2
 80093e0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80093e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d102      	bne.n	80093f4 <f_open+0x490>
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093f4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80093f8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009402:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009406:	2b00      	cmp	r3, #0
 8009408:	d105      	bne.n	8009416 <f_open+0x4b2>
 800940a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800940e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009412:	429a      	cmp	r2, r3
 8009414:	d8d3      	bhi.n	80093be <f_open+0x45a>
				}
				fp->clust = clst;
 8009416:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800941a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009424:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009426:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800942a:	2b00      	cmp	r3, #0
 800942c:	d13b      	bne.n	80094a6 <f_open+0x542>
 800942e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009436:	2b00      	cmp	r3, #0
 8009438:	d035      	beq.n	80094a6 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800943a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800943e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009442:	4618      	mov	r0, r3
 8009444:	f7fd fdcc 	bl	8006fe0 <clust2sect>
 8009448:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800944c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <f_open+0x4f8>
						res = FR_INT_ERR;
 8009454:	2302      	movs	r3, #2
 8009456:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800945a:	e024      	b.n	80094a6 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800945c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009460:	0a5a      	lsrs	r2, r3, #9
 8009462:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009466:	441a      	add	r2, r3
 8009468:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800946c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009474:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009478:	7858      	ldrb	r0, [r3, #1]
 800947a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800947e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009488:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800948c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6a1a      	ldr	r2, [r3, #32]
 8009494:	2301      	movs	r3, #1
 8009496:	f7fd f9f7 	bl	8006888 <disk_read>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <f_open+0x542>
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80094a6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d006      	beq.n	80094bc <f_open+0x558>
 80094ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094b2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80094bc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b08e      	sub	sp, #56	@ 0x38
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f107 0214 	add.w	r2, r7, #20
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fcbe 	bl	8008e6c <validate>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80094f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d107      	bne.n	800950e <f_read+0x44>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	7d5b      	ldrb	r3, [r3, #21]
 8009502:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009506:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <f_read+0x4a>
 800950e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009512:	e115      	b.n	8009740 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	7d1b      	ldrb	r3, [r3, #20]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <f_read+0x5a>
 8009520:	2307      	movs	r3, #7
 8009522:	e10d      	b.n	8009740 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	429a      	cmp	r2, r3
 8009536:	f240 80fe 	bls.w	8009736 <f_read+0x26c>
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800953e:	e0fa      	b.n	8009736 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009548:	2b00      	cmp	r3, #0
 800954a:	f040 80c6 	bne.w	80096da <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	0a5b      	lsrs	r3, r3, #9
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	8952      	ldrh	r2, [r2, #10]
 8009558:	3a01      	subs	r2, #1
 800955a:	4013      	ands	r3, r2
 800955c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d12f      	bne.n	80095c4 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	633b      	str	r3, [r7, #48]	@ 0x30
 8009572:	e013      	b.n	800959c <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	4619      	mov	r1, r3
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7fd ffd9 	bl	800753a <clmt_clust>
 8009588:	6338      	str	r0, [r7, #48]	@ 0x30
 800958a:	e007      	b.n	800959c <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f7fd fd42 	bl	800701e <get_fat>
 800959a:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d804      	bhi.n	80095ac <f_read+0xe2>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2202      	movs	r2, #2
 80095a6:	755a      	strb	r2, [r3, #21]
 80095a8:	2302      	movs	r3, #2
 80095aa:	e0c9      	b.n	8009740 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80095ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d104      	bne.n	80095be <f_read+0xf4>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	755a      	strb	r2, [r3, #21]
 80095ba:	2301      	movs	r3, #1
 80095bc:	e0c0      	b.n	8009740 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f7fd fd07 	bl	8006fe0 <clust2sect>
 80095d2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d104      	bne.n	80095e4 <f_read+0x11a>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2202      	movs	r2, #2
 80095de:	755a      	strb	r2, [r3, #21]
 80095e0:	2302      	movs	r3, #2
 80095e2:	e0ad      	b.n	8009740 <f_read+0x276>
			sect += csect;
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	0a5b      	lsrs	r3, r3, #9
 80095f0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d039      	beq.n	800966c <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fc:	4413      	add	r3, r2
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	8952      	ldrh	r2, [r2, #10]
 8009602:	4293      	cmp	r3, r2
 8009604:	d905      	bls.n	8009612 <f_read+0x148>
					cc = fs->csize - csect;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	895b      	ldrh	r3, [r3, #10]
 800960a:	461a      	mov	r2, r3
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	7858      	ldrb	r0, [r3, #1]
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800961c:	f7fd f934 	bl	8006888 <disk_read>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <f_read+0x166>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	755a      	strb	r2, [r3, #21]
 800962c:	2301      	movs	r3, #1
 800962e:	e087      	b.n	8009740 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	7d1b      	ldrb	r3, [r3, #20]
 8009634:	b25b      	sxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	da14      	bge.n	8009664 <f_read+0x19a>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a1a      	ldr	r2, [r3, #32]
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009644:	429a      	cmp	r2, r3
 8009646:	d90d      	bls.n	8009664 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a1a      	ldr	r2, [r3, #32]
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	025b      	lsls	r3, r3, #9
 8009652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009654:	18d0      	adds	r0, r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3330      	adds	r3, #48	@ 0x30
 800965a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800965e:	4619      	mov	r1, r3
 8009660:	f7fd f9f3 	bl	8006a4a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009666:	025b      	lsls	r3, r3, #9
 8009668:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800966a:	e050      	b.n	800970e <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	69ba      	ldr	r2, [r7, #24]
 8009672:	429a      	cmp	r2, r3
 8009674:	d02e      	beq.n	80096d4 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	b25b      	sxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	da18      	bge.n	80096b2 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	7858      	ldrb	r0, [r3, #1]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a1a      	ldr	r2, [r3, #32]
 800968e:	2301      	movs	r3, #1
 8009690:	f7fd f91a 	bl	80068c8 <disk_write>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d004      	beq.n	80096a4 <f_read+0x1da>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2201      	movs	r2, #1
 800969e:	755a      	strb	r2, [r3, #21]
 80096a0:	2301      	movs	r3, #1
 80096a2:	e04d      	b.n	8009740 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
 80096a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	7858      	ldrb	r0, [r3, #1]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80096bc:	2301      	movs	r3, #1
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	f7fd f8e2 	bl	8006888 <disk_read>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <f_read+0x20a>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	755a      	strb	r2, [r3, #21]
 80096d0:	2301      	movs	r3, #1
 80096d2:	e035      	b.n	8009740 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80096e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80096e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d901      	bls.n	80096f4 <f_read+0x22a>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009702:	4413      	add	r3, r2
 8009704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009706:	4619      	mov	r1, r3
 8009708:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800970a:	f7fd f99e 	bl	8006a4a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800970e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009712:	4413      	add	r3, r2
 8009714:	627b      	str	r3, [r7, #36]	@ 0x24
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	699a      	ldr	r2, [r3, #24]
 800971a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971c:	441a      	add	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	619a      	str	r2, [r3, #24]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009728:	441a      	add	r2, r3
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	f47f af01 	bne.w	8009540 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3738      	adds	r7, #56	@ 0x38
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f107 0208 	add.w	r2, r7, #8
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fb87 	bl	8008e6c <validate>
 800975e:	4603      	mov	r3, r0
 8009760:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d168      	bne.n	800983a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7d1b      	ldrb	r3, [r3, #20]
 800976c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d062      	beq.n	800983a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	7d1b      	ldrb	r3, [r3, #20]
 8009778:	b25b      	sxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	da15      	bge.n	80097aa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	7858      	ldrb	r0, [r3, #1]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1a      	ldr	r2, [r3, #32]
 800978c:	2301      	movs	r3, #1
 800978e:	f7fd f89b 	bl	80068c8 <disk_write>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <f_sync+0x54>
 8009798:	2301      	movs	r3, #1
 800979a:	e04f      	b.n	800983c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	7d1b      	ldrb	r3, [r3, #20]
 80097a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80097aa:	f7fc fddb 	bl	8006364 <get_fattime>
 80097ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f7fd fb75 	bl	8006ea8 <move_window>
 80097be:	4603      	mov	r3, r0
 80097c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d138      	bne.n	800983a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	330b      	adds	r3, #11
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	330b      	adds	r3, #11
 80097d8:	f042 0220 	orr.w	r2, r2, #32
 80097dc:	b2d2      	uxtb	r2, r2
 80097de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	461a      	mov	r2, r3
 80097ea:	68f9      	ldr	r1, [r7, #12]
 80097ec:	f7fe f87f 	bl	80078ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f103 021c 	add.w	r2, r3, #28
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f7fd f8f8 	bl	80069f2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3316      	adds	r3, #22
 8009806:	6939      	ldr	r1, [r7, #16]
 8009808:	4618      	mov	r0, r3
 800980a:	f7fd f8f2 	bl	80069f2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3312      	adds	r3, #18
 8009812:	2100      	movs	r1, #0
 8009814:	4618      	mov	r0, r3
 8009816:	f7fd f8d1 	bl	80069bc <st_word>
					fs->wflag = 1;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2201      	movs	r2, #1
 800981e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4618      	mov	r0, r3
 8009824:	f7fd fb6e 	bl	8006f04 <sync_fs>
 8009828:	4603      	mov	r3, r0
 800982a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	7d1b      	ldrb	r3, [r3, #20]
 8009830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009834:	b2da      	uxtb	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800983a:	7dfb      	ldrb	r3, [r7, #23]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff ff7b 	bl	8009748 <f_sync>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d118      	bne.n	800988e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f107 0208 	add.w	r2, r7, #8
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fb01 	bl	8008e6c <validate>
 800986a:	4603      	mov	r3, r0
 800986c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10c      	bne.n	800988e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	4618      	mov	r0, r3
 800987a:	f7fd fa71 	bl	8006d60 <dec_lock>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800988e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b090      	sub	sp, #64	@ 0x40
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f107 0208 	add.w	r2, r7, #8
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff fade 	bl	8008e6c <validate>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80098b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <f_lseek+0x2e>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	7d5b      	ldrb	r3, [r3, #21]
 80098c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80098c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <f_lseek+0x3c>
 80098ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80098d2:	e1e6      	b.n	8009ca2 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80d1 	beq.w	8009a80 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e4:	d15a      	bne.n	800999c <f_lseek+0x104>
			tbl = fp->cltbl;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	1d1a      	adds	r2, r3, #4
 80098f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	2302      	movs	r3, #2
 80098f8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009902:	2b00      	cmp	r3, #0
 8009904:	d03a      	beq.n	800997c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	2300      	movs	r3, #0
 800990c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800990e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009910:	3302      	adds	r3, #2
 8009912:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991a:	3301      	adds	r3, #1
 800991c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009922:	4618      	mov	r0, r3
 8009924:	f7fd fb7b 	bl	800701e <get_fat>
 8009928:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	2b01      	cmp	r3, #1
 800992e:	d804      	bhi.n	800993a <f_lseek+0xa2>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	755a      	strb	r2, [r3, #21]
 8009936:	2302      	movs	r3, #2
 8009938:	e1b3      	b.n	8009ca2 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009940:	d104      	bne.n	800994c <f_lseek+0xb4>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	755a      	strb	r2, [r3, #21]
 8009948:	2301      	movs	r3, #1
 800994a:	e1aa      	b.n	8009ca2 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009952:	429a      	cmp	r2, r3
 8009954:	d0de      	beq.n	8009914 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	429a      	cmp	r2, r3
 800995c:	d809      	bhi.n	8009972 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	1d1a      	adds	r2, r3, #4
 8009962:	627a      	str	r2, [r7, #36]	@ 0x24
 8009964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996a:	1d1a      	adds	r2, r3, #4
 800996c:	627a      	str	r2, [r7, #36]	@ 0x24
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009978:	429a      	cmp	r2, r3
 800997a:	d3c4      	bcc.n	8009906 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009982:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009984:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	429a      	cmp	r2, r3
 800998a:	d803      	bhi.n	8009994 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e184      	b.n	8009c9e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009994:	2311      	movs	r3, #17
 8009996:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800999a:	e180      	b.n	8009c9e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d902      	bls.n	80099ac <f_lseek+0x114>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 8172 	beq.w	8009c9e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	3b01      	subs	r3, #1
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7fd fdba 	bl	800753a <clmt_clust>
 80099c6:	4602      	mov	r2, r0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	4619      	mov	r1, r3
 80099d4:	4610      	mov	r0, r2
 80099d6:	f7fd fb03 	bl	8006fe0 <clust2sect>
 80099da:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d104      	bne.n	80099ec <f_lseek+0x154>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2202      	movs	r2, #2
 80099e6:	755a      	strb	r2, [r3, #21]
 80099e8:	2302      	movs	r3, #2
 80099ea:	e15a      	b.n	8009ca2 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	0a5b      	lsrs	r3, r3, #9
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	8952      	ldrh	r2, [r2, #10]
 80099f6:	3a01      	subs	r2, #1
 80099f8:	4013      	ands	r3, r2
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	4413      	add	r3, r2
 80099fe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 8148 	beq.w	8009c9e <f_lseek+0x406>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	f000 8142 	beq.w	8009c9e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7d1b      	ldrb	r3, [r3, #20]
 8009a1e:	b25b      	sxtb	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	da18      	bge.n	8009a56 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	7858      	ldrb	r0, [r3, #1]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1a      	ldr	r2, [r3, #32]
 8009a32:	2301      	movs	r3, #1
 8009a34:	f7fc ff48 	bl	80068c8 <disk_write>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d004      	beq.n	8009a48 <f_lseek+0x1b0>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	755a      	strb	r2, [r3, #21]
 8009a44:	2301      	movs	r3, #1
 8009a46:	e12c      	b.n	8009ca2 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7d1b      	ldrb	r3, [r3, #20]
 8009a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	7858      	ldrb	r0, [r3, #1]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a60:	2301      	movs	r3, #1
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	f7fc ff10 	bl	8006888 <disk_read>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <f_lseek+0x1e0>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	755a      	strb	r2, [r3, #21]
 8009a74:	2301      	movs	r3, #1
 8009a76:	e114      	b.n	8009ca2 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	621a      	str	r2, [r3, #32]
 8009a7e:	e10e      	b.n	8009c9e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d908      	bls.n	8009a9c <f_lseek+0x204>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	7d1b      	ldrb	r3, [r3, #20]
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d102      	bne.n	8009a9c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009aaa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 80a7 	beq.w	8009c02 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	895b      	ldrh	r3, [r3, #10]
 8009ab8:	025b      	lsls	r3, r3, #9
 8009aba:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d01b      	beq.n	8009afa <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	1e5a      	subs	r2, r3, #1
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	1e59      	subs	r1, r3, #1
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d30f      	bcc.n	8009afa <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	1e5a      	subs	r2, r3, #1
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	425b      	negs	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009af8:	e022      	b.n	8009b40 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d119      	bne.n	8009b3a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2100      	movs	r1, #0
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fd fc7d 	bl	800740a <create_chain>
 8009b10:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d104      	bne.n	8009b22 <f_lseek+0x28a>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	755a      	strb	r2, [r3, #21]
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e0bf      	b.n	8009ca2 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b28:	d104      	bne.n	8009b34 <f_lseek+0x29c>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	755a      	strb	r2, [r3, #21]
 8009b30:	2301      	movs	r3, #1
 8009b32:	e0b6      	b.n	8009ca2 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b38:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b3e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d05d      	beq.n	8009c02 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009b46:	e03a      	b.n	8009bbe <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699a      	ldr	r2, [r3, #24]
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	441a      	add	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	7d1b      	ldrb	r3, [r3, #20]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fd fc4c 	bl	800740a <create_chain>
 8009b72:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d108      	bne.n	8009b8c <f_lseek+0x2f4>
							ofs = 0; break;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	603b      	str	r3, [r7, #0]
 8009b7e:	e022      	b.n	8009bc6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fd fa4a 	bl	800701e <get_fat>
 8009b8a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b92:	d104      	bne.n	8009b9e <f_lseek+0x306>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	755a      	strb	r2, [r3, #21]
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e081      	b.n	8009ca2 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d904      	bls.n	8009bae <f_lseek+0x316>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d304      	bcc.n	8009bb8 <f_lseek+0x320>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	755a      	strb	r2, [r3, #21]
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e074      	b.n	8009ca2 <f_lseek+0x40a>
					fp->clust = clst;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bbc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d8c0      	bhi.n	8009b48 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	441a      	add	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d012      	beq.n	8009c02 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fd f9fd 	bl	8006fe0 <clust2sect>
 8009be6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <f_lseek+0x360>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	755a      	strb	r2, [r3, #21]
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e054      	b.n	8009ca2 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	0a5b      	lsrs	r3, r3, #9
 8009bfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bfe:	4413      	add	r3, r2
 8009c00:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699a      	ldr	r2, [r3, #24]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d90a      	bls.n	8009c24 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	699a      	ldr	r2, [r3, #24]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7d1b      	ldrb	r3, [r3, #20]
 8009c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d036      	beq.n	8009c9e <f_lseek+0x406>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d031      	beq.n	8009c9e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7d1b      	ldrb	r3, [r3, #20]
 8009c3e:	b25b      	sxtb	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	da18      	bge.n	8009c76 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	7858      	ldrb	r0, [r3, #1]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1a      	ldr	r2, [r3, #32]
 8009c52:	2301      	movs	r3, #1
 8009c54:	f7fc fe38 	bl	80068c8 <disk_write>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d004      	beq.n	8009c68 <f_lseek+0x3d0>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	755a      	strb	r2, [r3, #21]
 8009c64:	2301      	movs	r3, #1
 8009c66:	e01c      	b.n	8009ca2 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7d1b      	ldrb	r3, [r3, #20]
 8009c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	7858      	ldrb	r0, [r3, #1]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c80:	2301      	movs	r3, #1
 8009c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c84:	f7fc fe00 	bl	8006888 <disk_read>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d004      	beq.n	8009c98 <f_lseek+0x400>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	755a      	strb	r2, [r3, #21]
 8009c94:	2301      	movs	r3, #1
 8009c96:	e004      	b.n	8009ca2 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c9c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3740      	adds	r7, #64	@ 0x40
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cb6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009cba:	6018      	str	r0, [r3, #0]
 8009cbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cc0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009cc4:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009cc6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cca:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <f_opendir+0x2e>
 8009cd4:	2309      	movs	r3, #9
 8009cd6:	e0a0      	b.n	8009e1a <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 8009cd8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cdc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8009ce6:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8009cea:	463b      	mov	r3, r7
 8009cec:	2200      	movs	r2, #0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fe70 	bl	80089d4 <find_volume>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8009cfa:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f040 8081 	bne.w	8009e06 <f_opendir+0x15c>
		obj->fs = fs;
 8009d04:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009d08:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d0c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8009d0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009d12:	f107 020c 	add.w	r2, r7, #12
 8009d16:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009d18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d1c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d26:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f7fe fd45 	bl	80087bc <follow_path>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8009d38:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d15b      	bne.n	8009df8 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009d40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d44:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db1a      	blt.n	8009d8a <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009d54:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d58:	799b      	ldrb	r3, [r3, #6]
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d010      	beq.n	8009d84 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009d62:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8009d66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009d6a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	4619      	mov	r1, r3
 8009d74:	4610      	mov	r0, r2
 8009d76:	f7fd fd9b 	bl	80078b0 <ld_clust>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d80:	609a      	str	r2, [r3, #8]
 8009d82:	e002      	b.n	8009d8a <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009d84:	2305      	movs	r3, #5
 8009d86:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8009d8a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d132      	bne.n	8009df8 <f_opendir+0x14e>
				obj->id = fs->id;
 8009d92:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009d96:	88da      	ldrh	r2, [r3, #6]
 8009d98:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009d9c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009d9e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009da2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009da6:	2100      	movs	r1, #0
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	f7fd fbfa 	bl	80075a2 <dir_sdi>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009db4:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d11d      	bne.n	8009df8 <f_opendir+0x14e>
					if (obj->sclust) {
 8009dbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d014      	beq.n	8009df0 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009dc6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009dca:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009dce:	2100      	movs	r1, #0
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	f7fc ff37 	bl	8006c44 <inc_lock>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009ddc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009dde:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d107      	bne.n	8009df8 <f_opendir+0x14e>
 8009de8:	2312      	movs	r3, #18
 8009dea:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8009dee:	e003      	b.n	8009df8 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009df0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009df4:	2200      	movs	r2, #0
 8009df6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009df8:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	d102      	bne.n	8009e06 <f_opendir+0x15c>
 8009e00:	2305      	movs	r3, #5
 8009e02:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009e06:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <f_opendir+0x16c>
 8009e0e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e16:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f107 0208 	add.w	r2, r7, #8
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff f819 	bl	8008e6c <validate>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d110      	bne.n	8009e66 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d006      	beq.n	8009e5a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fc ff85 	bl	8006d60 <dec_lock>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009e7c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009e80:	6018      	str	r0, [r3, #0]
 8009e82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009e86:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8009e8a:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009e8c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009e90:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe ffe5 	bl	8008e6c <validate>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 8009ea8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d14b      	bne.n	8009f48 <f_readdir+0xd8>
		if (!fno) {
 8009eb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009eb4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10b      	bne.n	8009ed6 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009ebe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009ec2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	f7fd fb6a 	bl	80075a2 <dir_sdi>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8009ed4:	e038      	b.n	8009f48 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8009ed6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8009eda:	f107 0208 	add.w	r2, r7, #8
 8009ede:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8009ee0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009ee4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	f7fd ff21 	bl	8007d32 <dir_read>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009ef6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d102      	bne.n	8009f04 <f_readdir+0x94>
 8009efe:	2300      	movs	r3, #0
 8009f00:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8009f04:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d11d      	bne.n	8009f48 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009f0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009f10:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8009f14:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009f18:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009f1c:	6811      	ldr	r1, [r2, #0]
 8009f1e:	6818      	ldr	r0, [r3, #0]
 8009f20:	f7fe f966 	bl	80081f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009f24:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009f28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	f7fd fbb2 	bl	8007698 <dir_next>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009f3a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d102      	bne.n	8009f48 <f_readdir+0xd8>
 8009f42:	2300      	movs	r3, #0
 8009f44:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009f48:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	4613      	mov	r3, r2
 8009f64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009f70:	7a5b      	ldrb	r3, [r3, #9]
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d131      	bne.n	8009fdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f78:	4b1c      	ldr	r3, [pc, #112]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009f7a:	7a5b      	ldrb	r3, [r3, #9]
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4b1a      	ldr	r3, [pc, #104]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009f82:	2100      	movs	r1, #0
 8009f84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f86:	4b19      	ldr	r3, [pc, #100]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009f88:	7a5b      	ldrb	r3, [r3, #9]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	4a17      	ldr	r2, [pc, #92]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009f96:	4b15      	ldr	r3, [pc, #84]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009f98:	7a5b      	ldrb	r3, [r3, #9]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4b13      	ldr	r3, [pc, #76]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009fa0:	4413      	add	r3, r2
 8009fa2:	79fa      	ldrb	r2, [r7, #7]
 8009fa4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009fa6:	4b11      	ldr	r3, [pc, #68]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009fa8:	7a5b      	ldrb	r3, [r3, #9]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	b2d1      	uxtb	r1, r2
 8009fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8009fec <FATFS_LinkDriverEx+0x94>)
 8009fb2:	7251      	strb	r1, [r2, #9]
 8009fb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009fb6:	7dbb      	ldrb	r3, [r7, #22]
 8009fb8:	3330      	adds	r3, #48	@ 0x30
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	223a      	movs	r2, #58	@ 0x3a
 8009fc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	3302      	adds	r3, #2
 8009fcc:	222f      	movs	r2, #47	@ 0x2f
 8009fce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	3303      	adds	r3, #3
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20000f90 	.word	0x20000f90

08009ff0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff ffaa 	bl	8009f58 <FATFS_LinkDriverEx>
 800a004:	4603      	mov	r3, r0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a010:	b480      	push	{r7}
 800a012:	b089      	sub	sp, #36	@ 0x24
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800a01c:	88fb      	ldrh	r3, [r7, #6]
 800a01e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a020:	d802      	bhi.n	800a028 <ff_convert+0x18>
		c = chr;
 800a022:	88fb      	ldrh	r3, [r7, #6]
 800a024:	837b      	strh	r3, [r7, #26]
 800a026:	e045      	b.n	800a0b4 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d005      	beq.n	800a03a <ff_convert+0x2a>
			p = oem2uni;
 800a02e:	4b25      	ldr	r3, [pc, #148]	@ (800a0c4 <ff_convert+0xb4>)
 800a030:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800a032:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a036:	60bb      	str	r3, [r7, #8]
 800a038:	e004      	b.n	800a044 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800a03a:	4b23      	ldr	r3, [pc, #140]	@ (800a0c8 <ff_convert+0xb8>)
 800a03c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800a03e:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a042:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800a048:	2310      	movs	r3, #16
 800a04a:	613b      	str	r3, [r7, #16]
 800a04c:	e021      	b.n	800a092 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	0fda      	lsrs	r2, r3, #31
 800a056:	4413      	add	r3, r2
 800a058:	105b      	asrs	r3, r3, #1
 800a05a:	461a      	mov	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	4413      	add	r3, r2
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	88fa      	ldrh	r2, [r7, #6]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d013      	beq.n	800a09a <ff_convert+0x8a>
			if (chr > p[i * 2])
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	69fa      	ldr	r2, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	88fa      	ldrh	r2, [r7, #6]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d902      	bls.n	800a088 <ff_convert+0x78>
				li = i;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	e001      	b.n	800a08c <ff_convert+0x7c>
			else
				hi = i;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	3b01      	subs	r3, #1
 800a090:	613b      	str	r3, [r7, #16]
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1da      	bne.n	800a04e <ff_convert+0x3e>
 800a098:	e000      	b.n	800a09c <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800a09a:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <ff_convert+0xa0>
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	3302      	adds	r3, #2
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	e000      	b.n	800a0b2 <ff_convert+0xa2>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800a0b4:	8b7b      	ldrh	r3, [r7, #26]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3724      	adds	r7, #36	@ 0x24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	08020a70 	.word	0x08020a70
 800a0c8:	0800b5ec 	.word	0x0800b5ec

0800a0cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a0d6:	88fb      	ldrh	r3, [r7, #6]
 800a0d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0dc:	d201      	bcs.n	800a0e2 <ff_wtoupper+0x16>
 800a0de:	4b3e      	ldr	r3, [pc, #248]	@ (800a1d8 <ff_wtoupper+0x10c>)
 800a0e0:	e000      	b.n	800a0e4 <ff_wtoupper+0x18>
 800a0e2:	4b3e      	ldr	r3, [pc, #248]	@ (800a1dc <ff_wtoupper+0x110>)
 800a0e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	1c9a      	adds	r2, r3, #2
 800a0ea:	617a      	str	r2, [r7, #20]
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a0f0:	8a7b      	ldrh	r3, [r7, #18]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d068      	beq.n	800a1c8 <ff_wtoupper+0xfc>
 800a0f6:	88fa      	ldrh	r2, [r7, #6]
 800a0f8:	8a7b      	ldrh	r3, [r7, #18]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d364      	bcc.n	800a1c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	1c9a      	adds	r2, r3, #2
 800a102:	617a      	str	r2, [r7, #20]
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	823b      	strh	r3, [r7, #16]
 800a108:	8a3b      	ldrh	r3, [r7, #16]
 800a10a:	0a1b      	lsrs	r3, r3, #8
 800a10c:	81fb      	strh	r3, [r7, #14]
 800a10e:	8a3b      	ldrh	r3, [r7, #16]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a114:	88fa      	ldrh	r2, [r7, #6]
 800a116:	8a79      	ldrh	r1, [r7, #18]
 800a118:	8a3b      	ldrh	r3, [r7, #16]
 800a11a:	440b      	add	r3, r1
 800a11c:	429a      	cmp	r2, r3
 800a11e:	da49      	bge.n	800a1b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a120:	89fb      	ldrh	r3, [r7, #14]
 800a122:	2b08      	cmp	r3, #8
 800a124:	d84f      	bhi.n	800a1c6 <ff_wtoupper+0xfa>
 800a126:	a201      	add	r2, pc, #4	@ (adr r2, 800a12c <ff_wtoupper+0x60>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a151 	.word	0x0800a151
 800a130:	0800a163 	.word	0x0800a163
 800a134:	0800a179 	.word	0x0800a179
 800a138:	0800a181 	.word	0x0800a181
 800a13c:	0800a189 	.word	0x0800a189
 800a140:	0800a191 	.word	0x0800a191
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a1a1 	.word	0x0800a1a1
 800a14c:	0800a1a9 	.word	0x0800a1a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a150:	88fa      	ldrh	r2, [r7, #6]
 800a152:	8a7b      	ldrh	r3, [r7, #18]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	4413      	add	r3, r2
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	80fb      	strh	r3, [r7, #6]
 800a160:	e027      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a162:	88fa      	ldrh	r2, [r7, #6]
 800a164:	8a7b      	ldrh	r3, [r7, #18]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	b29b      	uxth	r3, r3
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	b29b      	uxth	r3, r3
 800a170:	88fa      	ldrh	r2, [r7, #6]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	80fb      	strh	r3, [r7, #6]
 800a176:	e01c      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a178:	88fb      	ldrh	r3, [r7, #6]
 800a17a:	3b10      	subs	r3, #16
 800a17c:	80fb      	strh	r3, [r7, #6]
 800a17e:	e018      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a180:	88fb      	ldrh	r3, [r7, #6]
 800a182:	3b20      	subs	r3, #32
 800a184:	80fb      	strh	r3, [r7, #6]
 800a186:	e014      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	3b30      	subs	r3, #48	@ 0x30
 800a18c:	80fb      	strh	r3, [r7, #6]
 800a18e:	e010      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a190:	88fb      	ldrh	r3, [r7, #6]
 800a192:	3b1a      	subs	r3, #26
 800a194:	80fb      	strh	r3, [r7, #6]
 800a196:	e00c      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	3308      	adds	r3, #8
 800a19c:	80fb      	strh	r3, [r7, #6]
 800a19e:	e008      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a1a0:	88fb      	ldrh	r3, [r7, #6]
 800a1a2:	3b50      	subs	r3, #80	@ 0x50
 800a1a4:	80fb      	strh	r3, [r7, #6]
 800a1a6:	e004      	b.n	800a1b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a1a8:	88fb      	ldrh	r3, [r7, #6]
 800a1aa:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a1ae:	80fb      	strh	r3, [r7, #6]
 800a1b0:	bf00      	nop
			}
			break;
 800a1b2:	e008      	b.n	800a1c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a1b4:	89fb      	ldrh	r3, [r7, #14]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d195      	bne.n	800a0e6 <ff_wtoupper+0x1a>
 800a1ba:	8a3b      	ldrh	r3, [r7, #16]
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a1c4:	e78f      	b.n	800a0e6 <ff_wtoupper+0x1a>
			break;
 800a1c6:	bf00      	nop
	}

	return chr;
 800a1c8:	88fb      	ldrh	r3, [r7, #6]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	08035ef4 	.word	0x08035ef4
 800a1dc:	080360e8 	.word	0x080360e8

0800a1e0 <std>:
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1ee:	6083      	str	r3, [r0, #8]
 800a1f0:	8181      	strh	r1, [r0, #12]
 800a1f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1f4:	81c2      	strh	r2, [r0, #14]
 800a1f6:	6183      	str	r3, [r0, #24]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	305c      	adds	r0, #92	@ 0x5c
 800a1fe:	f000 fa09 	bl	800a614 <memset>
 800a202:	4b0d      	ldr	r3, [pc, #52]	@ (800a238 <std+0x58>)
 800a204:	6263      	str	r3, [r4, #36]	@ 0x24
 800a206:	4b0d      	ldr	r3, [pc, #52]	@ (800a23c <std+0x5c>)
 800a208:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a20a:	4b0d      	ldr	r3, [pc, #52]	@ (800a240 <std+0x60>)
 800a20c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a20e:	4b0d      	ldr	r3, [pc, #52]	@ (800a244 <std+0x64>)
 800a210:	6323      	str	r3, [r4, #48]	@ 0x30
 800a212:	4b0d      	ldr	r3, [pc, #52]	@ (800a248 <std+0x68>)
 800a214:	6224      	str	r4, [r4, #32]
 800a216:	429c      	cmp	r4, r3
 800a218:	d006      	beq.n	800a228 <std+0x48>
 800a21a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a21e:	4294      	cmp	r4, r2
 800a220:	d002      	beq.n	800a228 <std+0x48>
 800a222:	33d0      	adds	r3, #208	@ 0xd0
 800a224:	429c      	cmp	r4, r3
 800a226:	d105      	bne.n	800a234 <std+0x54>
 800a228:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a230:	f000 ba68 	b.w	800a704 <__retarget_lock_init_recursive>
 800a234:	bd10      	pop	{r4, pc}
 800a236:	bf00      	nop
 800a238:	0800a445 	.word	0x0800a445
 800a23c:	0800a467 	.word	0x0800a467
 800a240:	0800a49f 	.word	0x0800a49f
 800a244:	0800a4c3 	.word	0x0800a4c3
 800a248:	20000f9c 	.word	0x20000f9c

0800a24c <stdio_exit_handler>:
 800a24c:	4a02      	ldr	r2, [pc, #8]	@ (800a258 <stdio_exit_handler+0xc>)
 800a24e:	4903      	ldr	r1, [pc, #12]	@ (800a25c <stdio_exit_handler+0x10>)
 800a250:	4803      	ldr	r0, [pc, #12]	@ (800a260 <stdio_exit_handler+0x14>)
 800a252:	f000 b869 	b.w	800a328 <_fwalk_sglue>
 800a256:	bf00      	nop
 800a258:	20000014 	.word	0x20000014
 800a25c:	0800afa1 	.word	0x0800afa1
 800a260:	20000024 	.word	0x20000024

0800a264 <cleanup_stdio>:
 800a264:	6841      	ldr	r1, [r0, #4]
 800a266:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <cleanup_stdio+0x34>)
 800a268:	4299      	cmp	r1, r3
 800a26a:	b510      	push	{r4, lr}
 800a26c:	4604      	mov	r4, r0
 800a26e:	d001      	beq.n	800a274 <cleanup_stdio+0x10>
 800a270:	f000 fe96 	bl	800afa0 <_fflush_r>
 800a274:	68a1      	ldr	r1, [r4, #8]
 800a276:	4b09      	ldr	r3, [pc, #36]	@ (800a29c <cleanup_stdio+0x38>)
 800a278:	4299      	cmp	r1, r3
 800a27a:	d002      	beq.n	800a282 <cleanup_stdio+0x1e>
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fe8f 	bl	800afa0 <_fflush_r>
 800a282:	68e1      	ldr	r1, [r4, #12]
 800a284:	4b06      	ldr	r3, [pc, #24]	@ (800a2a0 <cleanup_stdio+0x3c>)
 800a286:	4299      	cmp	r1, r3
 800a288:	d004      	beq.n	800a294 <cleanup_stdio+0x30>
 800a28a:	4620      	mov	r0, r4
 800a28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a290:	f000 be86 	b.w	800afa0 <_fflush_r>
 800a294:	bd10      	pop	{r4, pc}
 800a296:	bf00      	nop
 800a298:	20000f9c 	.word	0x20000f9c
 800a29c:	20001004 	.word	0x20001004
 800a2a0:	2000106c 	.word	0x2000106c

0800a2a4 <global_stdio_init.part.0>:
 800a2a4:	b510      	push	{r4, lr}
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d4 <global_stdio_init.part.0+0x30>)
 800a2a8:	4c0b      	ldr	r4, [pc, #44]	@ (800a2d8 <global_stdio_init.part.0+0x34>)
 800a2aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a2dc <global_stdio_init.part.0+0x38>)
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2104      	movs	r1, #4
 800a2b4:	f7ff ff94 	bl	800a1e0 <std>
 800a2b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2bc:	2201      	movs	r2, #1
 800a2be:	2109      	movs	r1, #9
 800a2c0:	f7ff ff8e 	bl	800a1e0 <std>
 800a2c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ce:	2112      	movs	r1, #18
 800a2d0:	f7ff bf86 	b.w	800a1e0 <std>
 800a2d4:	200010d4 	.word	0x200010d4
 800a2d8:	20000f9c 	.word	0x20000f9c
 800a2dc:	0800a24d 	.word	0x0800a24d

0800a2e0 <__sfp_lock_acquire>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	@ (800a2e8 <__sfp_lock_acquire+0x8>)
 800a2e2:	f000 ba10 	b.w	800a706 <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	200010dd 	.word	0x200010dd

0800a2ec <__sfp_lock_release>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	@ (800a2f4 <__sfp_lock_release+0x8>)
 800a2ee:	f000 ba0b 	b.w	800a708 <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	200010dd 	.word	0x200010dd

0800a2f8 <__sinit>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	f7ff fff0 	bl	800a2e0 <__sfp_lock_acquire>
 800a300:	6a23      	ldr	r3, [r4, #32]
 800a302:	b11b      	cbz	r3, 800a30c <__sinit+0x14>
 800a304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a308:	f7ff bff0 	b.w	800a2ec <__sfp_lock_release>
 800a30c:	4b04      	ldr	r3, [pc, #16]	@ (800a320 <__sinit+0x28>)
 800a30e:	6223      	str	r3, [r4, #32]
 800a310:	4b04      	ldr	r3, [pc, #16]	@ (800a324 <__sinit+0x2c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f5      	bne.n	800a304 <__sinit+0xc>
 800a318:	f7ff ffc4 	bl	800a2a4 <global_stdio_init.part.0>
 800a31c:	e7f2      	b.n	800a304 <__sinit+0xc>
 800a31e:	bf00      	nop
 800a320:	0800a265 	.word	0x0800a265
 800a324:	200010d4 	.word	0x200010d4

0800a328 <_fwalk_sglue>:
 800a328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4607      	mov	r7, r0
 800a32e:	4688      	mov	r8, r1
 800a330:	4614      	mov	r4, r2
 800a332:	2600      	movs	r6, #0
 800a334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a338:	f1b9 0901 	subs.w	r9, r9, #1
 800a33c:	d505      	bpl.n	800a34a <_fwalk_sglue+0x22>
 800a33e:	6824      	ldr	r4, [r4, #0]
 800a340:	2c00      	cmp	r4, #0
 800a342:	d1f7      	bne.n	800a334 <_fwalk_sglue+0xc>
 800a344:	4630      	mov	r0, r6
 800a346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d907      	bls.n	800a360 <_fwalk_sglue+0x38>
 800a350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a354:	3301      	adds	r3, #1
 800a356:	d003      	beq.n	800a360 <_fwalk_sglue+0x38>
 800a358:	4629      	mov	r1, r5
 800a35a:	4638      	mov	r0, r7
 800a35c:	47c0      	blx	r8
 800a35e:	4306      	orrs	r6, r0
 800a360:	3568      	adds	r5, #104	@ 0x68
 800a362:	e7e9      	b.n	800a338 <_fwalk_sglue+0x10>

0800a364 <iprintf>:
 800a364:	b40f      	push	{r0, r1, r2, r3}
 800a366:	b507      	push	{r0, r1, r2, lr}
 800a368:	4906      	ldr	r1, [pc, #24]	@ (800a384 <iprintf+0x20>)
 800a36a:	ab04      	add	r3, sp, #16
 800a36c:	6808      	ldr	r0, [r1, #0]
 800a36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a372:	6881      	ldr	r1, [r0, #8]
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	f000 faeb 	bl	800a950 <_vfiprintf_r>
 800a37a:	b003      	add	sp, #12
 800a37c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a380:	b004      	add	sp, #16
 800a382:	4770      	bx	lr
 800a384:	20000020 	.word	0x20000020

0800a388 <_puts_r>:
 800a388:	6a03      	ldr	r3, [r0, #32]
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	6884      	ldr	r4, [r0, #8]
 800a38e:	4605      	mov	r5, r0
 800a390:	460e      	mov	r6, r1
 800a392:	b90b      	cbnz	r3, 800a398 <_puts_r+0x10>
 800a394:	f7ff ffb0 	bl	800a2f8 <__sinit>
 800a398:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d405      	bmi.n	800a3aa <_puts_r+0x22>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	0598      	lsls	r0, r3, #22
 800a3a2:	d402      	bmi.n	800a3aa <_puts_r+0x22>
 800a3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3a6:	f000 f9ae 	bl	800a706 <__retarget_lock_acquire_recursive>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	0719      	lsls	r1, r3, #28
 800a3ae:	d502      	bpl.n	800a3b6 <_puts_r+0x2e>
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d135      	bne.n	800a422 <_puts_r+0x9a>
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f000 f8c5 	bl	800a548 <__swsetup_r>
 800a3be:	b380      	cbz	r0, 800a422 <_puts_r+0x9a>
 800a3c0:	f04f 35ff 	mov.w	r5, #4294967295
 800a3c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3c6:	07da      	lsls	r2, r3, #31
 800a3c8:	d405      	bmi.n	800a3d6 <_puts_r+0x4e>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	059b      	lsls	r3, r3, #22
 800a3ce:	d402      	bmi.n	800a3d6 <_puts_r+0x4e>
 800a3d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3d2:	f000 f999 	bl	800a708 <__retarget_lock_release_recursive>
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da04      	bge.n	800a3e8 <_puts_r+0x60>
 800a3de:	69a2      	ldr	r2, [r4, #24]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	dc17      	bgt.n	800a414 <_puts_r+0x8c>
 800a3e4:	290a      	cmp	r1, #10
 800a3e6:	d015      	beq.n	800a414 <_puts_r+0x8c>
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	1c5a      	adds	r2, r3, #1
 800a3ec:	6022      	str	r2, [r4, #0]
 800a3ee:	7019      	strb	r1, [r3, #0]
 800a3f0:	68a3      	ldr	r3, [r4, #8]
 800a3f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	60a3      	str	r3, [r4, #8]
 800a3fa:	2900      	cmp	r1, #0
 800a3fc:	d1ed      	bne.n	800a3da <_puts_r+0x52>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	da11      	bge.n	800a426 <_puts_r+0x9e>
 800a402:	4622      	mov	r2, r4
 800a404:	210a      	movs	r1, #10
 800a406:	4628      	mov	r0, r5
 800a408:	f000 f85f 	bl	800a4ca <__swbuf_r>
 800a40c:	3001      	adds	r0, #1
 800a40e:	d0d7      	beq.n	800a3c0 <_puts_r+0x38>
 800a410:	250a      	movs	r5, #10
 800a412:	e7d7      	b.n	800a3c4 <_puts_r+0x3c>
 800a414:	4622      	mov	r2, r4
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f857 	bl	800a4ca <__swbuf_r>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d1e7      	bne.n	800a3f0 <_puts_r+0x68>
 800a420:	e7ce      	b.n	800a3c0 <_puts_r+0x38>
 800a422:	3e01      	subs	r6, #1
 800a424:	e7e4      	b.n	800a3f0 <_puts_r+0x68>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	6022      	str	r2, [r4, #0]
 800a42c:	220a      	movs	r2, #10
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	e7ee      	b.n	800a410 <_puts_r+0x88>
	...

0800a434 <puts>:
 800a434:	4b02      	ldr	r3, [pc, #8]	@ (800a440 <puts+0xc>)
 800a436:	4601      	mov	r1, r0
 800a438:	6818      	ldr	r0, [r3, #0]
 800a43a:	f7ff bfa5 	b.w	800a388 <_puts_r>
 800a43e:	bf00      	nop
 800a440:	20000020 	.word	0x20000020

0800a444 <__sread>:
 800a444:	b510      	push	{r4, lr}
 800a446:	460c      	mov	r4, r1
 800a448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44c:	f000 f90c 	bl	800a668 <_read_r>
 800a450:	2800      	cmp	r0, #0
 800a452:	bfab      	itete	ge
 800a454:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a456:	89a3      	ldrhlt	r3, [r4, #12]
 800a458:	181b      	addge	r3, r3, r0
 800a45a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a45e:	bfac      	ite	ge
 800a460:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a462:	81a3      	strhlt	r3, [r4, #12]
 800a464:	bd10      	pop	{r4, pc}

0800a466 <__swrite>:
 800a466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46a:	461f      	mov	r7, r3
 800a46c:	898b      	ldrh	r3, [r1, #12]
 800a46e:	05db      	lsls	r3, r3, #23
 800a470:	4605      	mov	r5, r0
 800a472:	460c      	mov	r4, r1
 800a474:	4616      	mov	r6, r2
 800a476:	d505      	bpl.n	800a484 <__swrite+0x1e>
 800a478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47c:	2302      	movs	r3, #2
 800a47e:	2200      	movs	r2, #0
 800a480:	f000 f8e0 	bl	800a644 <_lseek_r>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a48a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	4632      	mov	r2, r6
 800a492:	463b      	mov	r3, r7
 800a494:	4628      	mov	r0, r5
 800a496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a49a:	f000 b8f7 	b.w	800a68c <_write_r>

0800a49e <__sseek>:
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a6:	f000 f8cd 	bl	800a644 <_lseek_r>
 800a4aa:	1c43      	adds	r3, r0, #1
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	bf15      	itete	ne
 800a4b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4ba:	81a3      	strheq	r3, [r4, #12]
 800a4bc:	bf18      	it	ne
 800a4be:	81a3      	strhne	r3, [r4, #12]
 800a4c0:	bd10      	pop	{r4, pc}

0800a4c2 <__sclose>:
 800a4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c6:	f000 b8ad 	b.w	800a624 <_close_r>

0800a4ca <__swbuf_r>:
 800a4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4cc:	460e      	mov	r6, r1
 800a4ce:	4614      	mov	r4, r2
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	b118      	cbz	r0, 800a4dc <__swbuf_r+0x12>
 800a4d4:	6a03      	ldr	r3, [r0, #32]
 800a4d6:	b90b      	cbnz	r3, 800a4dc <__swbuf_r+0x12>
 800a4d8:	f7ff ff0e 	bl	800a2f8 <__sinit>
 800a4dc:	69a3      	ldr	r3, [r4, #24]
 800a4de:	60a3      	str	r3, [r4, #8]
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	071a      	lsls	r2, r3, #28
 800a4e4:	d501      	bpl.n	800a4ea <__swbuf_r+0x20>
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	b943      	cbnz	r3, 800a4fc <__swbuf_r+0x32>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 f82b 	bl	800a548 <__swsetup_r>
 800a4f2:	b118      	cbz	r0, 800a4fc <__swbuf_r+0x32>
 800a4f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	6922      	ldr	r2, [r4, #16]
 800a500:	1a98      	subs	r0, r3, r2
 800a502:	6963      	ldr	r3, [r4, #20]
 800a504:	b2f6      	uxtb	r6, r6
 800a506:	4283      	cmp	r3, r0
 800a508:	4637      	mov	r7, r6
 800a50a:	dc05      	bgt.n	800a518 <__swbuf_r+0x4e>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 fd46 	bl	800afa0 <_fflush_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	d1ed      	bne.n	800a4f4 <__swbuf_r+0x2a>
 800a518:	68a3      	ldr	r3, [r4, #8]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	60a3      	str	r3, [r4, #8]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	6022      	str	r2, [r4, #0]
 800a524:	701e      	strb	r6, [r3, #0]
 800a526:	6962      	ldr	r2, [r4, #20]
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d004      	beq.n	800a538 <__swbuf_r+0x6e>
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	07db      	lsls	r3, r3, #31
 800a532:	d5e1      	bpl.n	800a4f8 <__swbuf_r+0x2e>
 800a534:	2e0a      	cmp	r6, #10
 800a536:	d1df      	bne.n	800a4f8 <__swbuf_r+0x2e>
 800a538:	4621      	mov	r1, r4
 800a53a:	4628      	mov	r0, r5
 800a53c:	f000 fd30 	bl	800afa0 <_fflush_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	d0d9      	beq.n	800a4f8 <__swbuf_r+0x2e>
 800a544:	e7d6      	b.n	800a4f4 <__swbuf_r+0x2a>
	...

0800a548 <__swsetup_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4b29      	ldr	r3, [pc, #164]	@ (800a5f0 <__swsetup_r+0xa8>)
 800a54c:	4605      	mov	r5, r0
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	460c      	mov	r4, r1
 800a552:	b118      	cbz	r0, 800a55c <__swsetup_r+0x14>
 800a554:	6a03      	ldr	r3, [r0, #32]
 800a556:	b90b      	cbnz	r3, 800a55c <__swsetup_r+0x14>
 800a558:	f7ff fece 	bl	800a2f8 <__sinit>
 800a55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a560:	0719      	lsls	r1, r3, #28
 800a562:	d422      	bmi.n	800a5aa <__swsetup_r+0x62>
 800a564:	06da      	lsls	r2, r3, #27
 800a566:	d407      	bmi.n	800a578 <__swsetup_r+0x30>
 800a568:	2209      	movs	r2, #9
 800a56a:	602a      	str	r2, [r5, #0]
 800a56c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	f04f 30ff 	mov.w	r0, #4294967295
 800a576:	e033      	b.n	800a5e0 <__swsetup_r+0x98>
 800a578:	0758      	lsls	r0, r3, #29
 800a57a:	d512      	bpl.n	800a5a2 <__swsetup_r+0x5a>
 800a57c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a57e:	b141      	cbz	r1, 800a592 <__swsetup_r+0x4a>
 800a580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a584:	4299      	cmp	r1, r3
 800a586:	d002      	beq.n	800a58e <__swsetup_r+0x46>
 800a588:	4628      	mov	r0, r5
 800a58a:	f000 f8bf 	bl	800a70c <_free_r>
 800a58e:	2300      	movs	r3, #0
 800a590:	6363      	str	r3, [r4, #52]	@ 0x34
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	2300      	movs	r3, #0
 800a59c:	6063      	str	r3, [r4, #4]
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f043 0308 	orr.w	r3, r3, #8
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	b94b      	cbnz	r3, 800a5c2 <__swsetup_r+0x7a>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5b8:	d003      	beq.n	800a5c2 <__swsetup_r+0x7a>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f000 fd3d 	bl	800b03c <__smakebuf_r>
 800a5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c6:	f013 0201 	ands.w	r2, r3, #1
 800a5ca:	d00a      	beq.n	800a5e2 <__swsetup_r+0x9a>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	60a2      	str	r2, [r4, #8]
 800a5d0:	6962      	ldr	r2, [r4, #20]
 800a5d2:	4252      	negs	r2, r2
 800a5d4:	61a2      	str	r2, [r4, #24]
 800a5d6:	6922      	ldr	r2, [r4, #16]
 800a5d8:	b942      	cbnz	r2, 800a5ec <__swsetup_r+0xa4>
 800a5da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5de:	d1c5      	bne.n	800a56c <__swsetup_r+0x24>
 800a5e0:	bd38      	pop	{r3, r4, r5, pc}
 800a5e2:	0799      	lsls	r1, r3, #30
 800a5e4:	bf58      	it	pl
 800a5e6:	6962      	ldrpl	r2, [r4, #20]
 800a5e8:	60a2      	str	r2, [r4, #8]
 800a5ea:	e7f4      	b.n	800a5d6 <__swsetup_r+0x8e>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e7f7      	b.n	800a5e0 <__swsetup_r+0x98>
 800a5f0:	20000020 	.word	0x20000020

0800a5f4 <memcmp>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	3901      	subs	r1, #1
 800a5f8:	4402      	add	r2, r0
 800a5fa:	4290      	cmp	r0, r2
 800a5fc:	d101      	bne.n	800a602 <memcmp+0xe>
 800a5fe:	2000      	movs	r0, #0
 800a600:	e005      	b.n	800a60e <memcmp+0x1a>
 800a602:	7803      	ldrb	r3, [r0, #0]
 800a604:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a608:	42a3      	cmp	r3, r4
 800a60a:	d001      	beq.n	800a610 <memcmp+0x1c>
 800a60c:	1b18      	subs	r0, r3, r4
 800a60e:	bd10      	pop	{r4, pc}
 800a610:	3001      	adds	r0, #1
 800a612:	e7f2      	b.n	800a5fa <memcmp+0x6>

0800a614 <memset>:
 800a614:	4402      	add	r2, r0
 800a616:	4603      	mov	r3, r0
 800a618:	4293      	cmp	r3, r2
 800a61a:	d100      	bne.n	800a61e <memset+0xa>
 800a61c:	4770      	bx	lr
 800a61e:	f803 1b01 	strb.w	r1, [r3], #1
 800a622:	e7f9      	b.n	800a618 <memset+0x4>

0800a624 <_close_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d06      	ldr	r5, [pc, #24]	@ (800a640 <_close_r+0x1c>)
 800a628:	2300      	movs	r3, #0
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	f7f6 fce1 	bl	8000ff6 <_close>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_close_r+0x1a>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_close_r+0x1a>
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	200010d8 	.word	0x200010d8

0800a644 <_lseek_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d07      	ldr	r5, [pc, #28]	@ (800a664 <_lseek_r+0x20>)
 800a648:	4604      	mov	r4, r0
 800a64a:	4608      	mov	r0, r1
 800a64c:	4611      	mov	r1, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	602a      	str	r2, [r5, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	f7f6 fcf6 	bl	8001044 <_lseek>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_lseek_r+0x1e>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_lseek_r+0x1e>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	200010d8 	.word	0x200010d8

0800a668 <_read_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d07      	ldr	r5, [pc, #28]	@ (800a688 <_read_r+0x20>)
 800a66c:	4604      	mov	r4, r0
 800a66e:	4608      	mov	r0, r1
 800a670:	4611      	mov	r1, r2
 800a672:	2200      	movs	r2, #0
 800a674:	602a      	str	r2, [r5, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	f7f6 fc84 	bl	8000f84 <_read>
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	d102      	bne.n	800a686 <_read_r+0x1e>
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	b103      	cbz	r3, 800a686 <_read_r+0x1e>
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	200010d8 	.word	0x200010d8

0800a68c <_write_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d07      	ldr	r5, [pc, #28]	@ (800a6ac <_write_r+0x20>)
 800a690:	4604      	mov	r4, r0
 800a692:	4608      	mov	r0, r1
 800a694:	4611      	mov	r1, r2
 800a696:	2200      	movs	r2, #0
 800a698:	602a      	str	r2, [r5, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	f7f6 fc8f 	bl	8000fbe <_write>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d102      	bne.n	800a6aa <_write_r+0x1e>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	b103      	cbz	r3, 800a6aa <_write_r+0x1e>
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	200010d8 	.word	0x200010d8

0800a6b0 <__errno>:
 800a6b0:	4b01      	ldr	r3, [pc, #4]	@ (800a6b8 <__errno+0x8>)
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	20000020 	.word	0x20000020

0800a6bc <__libc_init_array>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	4d0d      	ldr	r5, [pc, #52]	@ (800a6f4 <__libc_init_array+0x38>)
 800a6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a6f8 <__libc_init_array+0x3c>)
 800a6c2:	1b64      	subs	r4, r4, r5
 800a6c4:	10a4      	asrs	r4, r4, #2
 800a6c6:	2600      	movs	r6, #0
 800a6c8:	42a6      	cmp	r6, r4
 800a6ca:	d109      	bne.n	800a6e0 <__libc_init_array+0x24>
 800a6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a6fc <__libc_init_array+0x40>)
 800a6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a700 <__libc_init_array+0x44>)
 800a6d0:	f000 fd22 	bl	800b118 <_init>
 800a6d4:	1b64      	subs	r4, r4, r5
 800a6d6:	10a4      	asrs	r4, r4, #2
 800a6d8:	2600      	movs	r6, #0
 800a6da:	42a6      	cmp	r6, r4
 800a6dc:	d105      	bne.n	800a6ea <__libc_init_array+0x2e>
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e4:	4798      	blx	r3
 800a6e6:	3601      	adds	r6, #1
 800a6e8:	e7ee      	b.n	800a6c8 <__libc_init_array+0xc>
 800a6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ee:	4798      	blx	r3
 800a6f0:	3601      	adds	r6, #1
 800a6f2:	e7f2      	b.n	800a6da <__libc_init_array+0x1e>
 800a6f4:	080361e0 	.word	0x080361e0
 800a6f8:	080361e0 	.word	0x080361e0
 800a6fc:	080361e0 	.word	0x080361e0
 800a700:	080361e4 	.word	0x080361e4

0800a704 <__retarget_lock_init_recursive>:
 800a704:	4770      	bx	lr

0800a706 <__retarget_lock_acquire_recursive>:
 800a706:	4770      	bx	lr

0800a708 <__retarget_lock_release_recursive>:
 800a708:	4770      	bx	lr
	...

0800a70c <_free_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4605      	mov	r5, r0
 800a710:	2900      	cmp	r1, #0
 800a712:	d041      	beq.n	800a798 <_free_r+0x8c>
 800a714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a718:	1f0c      	subs	r4, r1, #4
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfb8      	it	lt
 800a71e:	18e4      	addlt	r4, r4, r3
 800a720:	f000 f8e0 	bl	800a8e4 <__malloc_lock>
 800a724:	4a1d      	ldr	r2, [pc, #116]	@ (800a79c <_free_r+0x90>)
 800a726:	6813      	ldr	r3, [r2, #0]
 800a728:	b933      	cbnz	r3, 800a738 <_free_r+0x2c>
 800a72a:	6063      	str	r3, [r4, #4]
 800a72c:	6014      	str	r4, [r2, #0]
 800a72e:	4628      	mov	r0, r5
 800a730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a734:	f000 b8dc 	b.w	800a8f0 <__malloc_unlock>
 800a738:	42a3      	cmp	r3, r4
 800a73a:	d908      	bls.n	800a74e <_free_r+0x42>
 800a73c:	6820      	ldr	r0, [r4, #0]
 800a73e:	1821      	adds	r1, r4, r0
 800a740:	428b      	cmp	r3, r1
 800a742:	bf01      	itttt	eq
 800a744:	6819      	ldreq	r1, [r3, #0]
 800a746:	685b      	ldreq	r3, [r3, #4]
 800a748:	1809      	addeq	r1, r1, r0
 800a74a:	6021      	streq	r1, [r4, #0]
 800a74c:	e7ed      	b.n	800a72a <_free_r+0x1e>
 800a74e:	461a      	mov	r2, r3
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	b10b      	cbz	r3, 800a758 <_free_r+0x4c>
 800a754:	42a3      	cmp	r3, r4
 800a756:	d9fa      	bls.n	800a74e <_free_r+0x42>
 800a758:	6811      	ldr	r1, [r2, #0]
 800a75a:	1850      	adds	r0, r2, r1
 800a75c:	42a0      	cmp	r0, r4
 800a75e:	d10b      	bne.n	800a778 <_free_r+0x6c>
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	4401      	add	r1, r0
 800a764:	1850      	adds	r0, r2, r1
 800a766:	4283      	cmp	r3, r0
 800a768:	6011      	str	r1, [r2, #0]
 800a76a:	d1e0      	bne.n	800a72e <_free_r+0x22>
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	6053      	str	r3, [r2, #4]
 800a772:	4408      	add	r0, r1
 800a774:	6010      	str	r0, [r2, #0]
 800a776:	e7da      	b.n	800a72e <_free_r+0x22>
 800a778:	d902      	bls.n	800a780 <_free_r+0x74>
 800a77a:	230c      	movs	r3, #12
 800a77c:	602b      	str	r3, [r5, #0]
 800a77e:	e7d6      	b.n	800a72e <_free_r+0x22>
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	1821      	adds	r1, r4, r0
 800a784:	428b      	cmp	r3, r1
 800a786:	bf04      	itt	eq
 800a788:	6819      	ldreq	r1, [r3, #0]
 800a78a:	685b      	ldreq	r3, [r3, #4]
 800a78c:	6063      	str	r3, [r4, #4]
 800a78e:	bf04      	itt	eq
 800a790:	1809      	addeq	r1, r1, r0
 800a792:	6021      	streq	r1, [r4, #0]
 800a794:	6054      	str	r4, [r2, #4]
 800a796:	e7ca      	b.n	800a72e <_free_r+0x22>
 800a798:	bd38      	pop	{r3, r4, r5, pc}
 800a79a:	bf00      	nop
 800a79c:	200010e4 	.word	0x200010e4

0800a7a0 <sbrk_aligned>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a7e0 <sbrk_aligned+0x40>)
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	6831      	ldr	r1, [r6, #0]
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	b911      	cbnz	r1, 800a7b2 <sbrk_aligned+0x12>
 800a7ac:	f000 fca4 	bl	800b0f8 <_sbrk_r>
 800a7b0:	6030      	str	r0, [r6, #0]
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f000 fc9f 	bl	800b0f8 <_sbrk_r>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d103      	bne.n	800a7c6 <sbrk_aligned+0x26>
 800a7be:	f04f 34ff 	mov.w	r4, #4294967295
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	bd70      	pop	{r4, r5, r6, pc}
 800a7c6:	1cc4      	adds	r4, r0, #3
 800a7c8:	f024 0403 	bic.w	r4, r4, #3
 800a7cc:	42a0      	cmp	r0, r4
 800a7ce:	d0f8      	beq.n	800a7c2 <sbrk_aligned+0x22>
 800a7d0:	1a21      	subs	r1, r4, r0
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 fc90 	bl	800b0f8 <_sbrk_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d1f2      	bne.n	800a7c2 <sbrk_aligned+0x22>
 800a7dc:	e7ef      	b.n	800a7be <sbrk_aligned+0x1e>
 800a7de:	bf00      	nop
 800a7e0:	200010e0 	.word	0x200010e0

0800a7e4 <_malloc_r>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	1ccd      	adds	r5, r1, #3
 800a7ea:	f025 0503 	bic.w	r5, r5, #3
 800a7ee:	3508      	adds	r5, #8
 800a7f0:	2d0c      	cmp	r5, #12
 800a7f2:	bf38      	it	cc
 800a7f4:	250c      	movcc	r5, #12
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	db01      	blt.n	800a800 <_malloc_r+0x1c>
 800a7fc:	42a9      	cmp	r1, r5
 800a7fe:	d904      	bls.n	800a80a <_malloc_r+0x26>
 800a800:	230c      	movs	r3, #12
 800a802:	6033      	str	r3, [r6, #0]
 800a804:	2000      	movs	r0, #0
 800a806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8e0 <_malloc_r+0xfc>
 800a80e:	f000 f869 	bl	800a8e4 <__malloc_lock>
 800a812:	f8d8 3000 	ldr.w	r3, [r8]
 800a816:	461c      	mov	r4, r3
 800a818:	bb44      	cbnz	r4, 800a86c <_malloc_r+0x88>
 800a81a:	4629      	mov	r1, r5
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff ffbf 	bl	800a7a0 <sbrk_aligned>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	4604      	mov	r4, r0
 800a826:	d158      	bne.n	800a8da <_malloc_r+0xf6>
 800a828:	f8d8 4000 	ldr.w	r4, [r8]
 800a82c:	4627      	mov	r7, r4
 800a82e:	2f00      	cmp	r7, #0
 800a830:	d143      	bne.n	800a8ba <_malloc_r+0xd6>
 800a832:	2c00      	cmp	r4, #0
 800a834:	d04b      	beq.n	800a8ce <_malloc_r+0xea>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	4639      	mov	r1, r7
 800a83a:	4630      	mov	r0, r6
 800a83c:	eb04 0903 	add.w	r9, r4, r3
 800a840:	f000 fc5a 	bl	800b0f8 <_sbrk_r>
 800a844:	4581      	cmp	r9, r0
 800a846:	d142      	bne.n	800a8ce <_malloc_r+0xea>
 800a848:	6821      	ldr	r1, [r4, #0]
 800a84a:	1a6d      	subs	r5, r5, r1
 800a84c:	4629      	mov	r1, r5
 800a84e:	4630      	mov	r0, r6
 800a850:	f7ff ffa6 	bl	800a7a0 <sbrk_aligned>
 800a854:	3001      	adds	r0, #1
 800a856:	d03a      	beq.n	800a8ce <_malloc_r+0xea>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	442b      	add	r3, r5
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	f8d8 3000 	ldr.w	r3, [r8]
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	bb62      	cbnz	r2, 800a8c0 <_malloc_r+0xdc>
 800a866:	f8c8 7000 	str.w	r7, [r8]
 800a86a:	e00f      	b.n	800a88c <_malloc_r+0xa8>
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	1b52      	subs	r2, r2, r5
 800a870:	d420      	bmi.n	800a8b4 <_malloc_r+0xd0>
 800a872:	2a0b      	cmp	r2, #11
 800a874:	d917      	bls.n	800a8a6 <_malloc_r+0xc2>
 800a876:	1961      	adds	r1, r4, r5
 800a878:	42a3      	cmp	r3, r4
 800a87a:	6025      	str	r5, [r4, #0]
 800a87c:	bf18      	it	ne
 800a87e:	6059      	strne	r1, [r3, #4]
 800a880:	6863      	ldr	r3, [r4, #4]
 800a882:	bf08      	it	eq
 800a884:	f8c8 1000 	streq.w	r1, [r8]
 800a888:	5162      	str	r2, [r4, r5]
 800a88a:	604b      	str	r3, [r1, #4]
 800a88c:	4630      	mov	r0, r6
 800a88e:	f000 f82f 	bl	800a8f0 <__malloc_unlock>
 800a892:	f104 000b 	add.w	r0, r4, #11
 800a896:	1d23      	adds	r3, r4, #4
 800a898:	f020 0007 	bic.w	r0, r0, #7
 800a89c:	1ac2      	subs	r2, r0, r3
 800a89e:	bf1c      	itt	ne
 800a8a0:	1a1b      	subne	r3, r3, r0
 800a8a2:	50a3      	strne	r3, [r4, r2]
 800a8a4:	e7af      	b.n	800a806 <_malloc_r+0x22>
 800a8a6:	6862      	ldr	r2, [r4, #4]
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	bf0c      	ite	eq
 800a8ac:	f8c8 2000 	streq.w	r2, [r8]
 800a8b0:	605a      	strne	r2, [r3, #4]
 800a8b2:	e7eb      	b.n	800a88c <_malloc_r+0xa8>
 800a8b4:	4623      	mov	r3, r4
 800a8b6:	6864      	ldr	r4, [r4, #4]
 800a8b8:	e7ae      	b.n	800a818 <_malloc_r+0x34>
 800a8ba:	463c      	mov	r4, r7
 800a8bc:	687f      	ldr	r7, [r7, #4]
 800a8be:	e7b6      	b.n	800a82e <_malloc_r+0x4a>
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	d1fb      	bne.n	800a8c0 <_malloc_r+0xdc>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	6053      	str	r3, [r2, #4]
 800a8cc:	e7de      	b.n	800a88c <_malloc_r+0xa8>
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	6033      	str	r3, [r6, #0]
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f000 f80c 	bl	800a8f0 <__malloc_unlock>
 800a8d8:	e794      	b.n	800a804 <_malloc_r+0x20>
 800a8da:	6005      	str	r5, [r0, #0]
 800a8dc:	e7d6      	b.n	800a88c <_malloc_r+0xa8>
 800a8de:	bf00      	nop
 800a8e0:	200010e4 	.word	0x200010e4

0800a8e4 <__malloc_lock>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	@ (800a8ec <__malloc_lock+0x8>)
 800a8e6:	f7ff bf0e 	b.w	800a706 <__retarget_lock_acquire_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	200010dc 	.word	0x200010dc

0800a8f0 <__malloc_unlock>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	@ (800a8f8 <__malloc_unlock+0x8>)
 800a8f2:	f7ff bf09 	b.w	800a708 <__retarget_lock_release_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	200010dc 	.word	0x200010dc

0800a8fc <__sfputc_r>:
 800a8fc:	6893      	ldr	r3, [r2, #8]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	2b00      	cmp	r3, #0
 800a902:	b410      	push	{r4}
 800a904:	6093      	str	r3, [r2, #8]
 800a906:	da08      	bge.n	800a91a <__sfputc_r+0x1e>
 800a908:	6994      	ldr	r4, [r2, #24]
 800a90a:	42a3      	cmp	r3, r4
 800a90c:	db01      	blt.n	800a912 <__sfputc_r+0x16>
 800a90e:	290a      	cmp	r1, #10
 800a910:	d103      	bne.n	800a91a <__sfputc_r+0x1e>
 800a912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a916:	f7ff bdd8 	b.w	800a4ca <__swbuf_r>
 800a91a:	6813      	ldr	r3, [r2, #0]
 800a91c:	1c58      	adds	r0, r3, #1
 800a91e:	6010      	str	r0, [r2, #0]
 800a920:	7019      	strb	r1, [r3, #0]
 800a922:	4608      	mov	r0, r1
 800a924:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <__sfputs_r>:
 800a92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92c:	4606      	mov	r6, r0
 800a92e:	460f      	mov	r7, r1
 800a930:	4614      	mov	r4, r2
 800a932:	18d5      	adds	r5, r2, r3
 800a934:	42ac      	cmp	r4, r5
 800a936:	d101      	bne.n	800a93c <__sfputs_r+0x12>
 800a938:	2000      	movs	r0, #0
 800a93a:	e007      	b.n	800a94c <__sfputs_r+0x22>
 800a93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a940:	463a      	mov	r2, r7
 800a942:	4630      	mov	r0, r6
 800a944:	f7ff ffda 	bl	800a8fc <__sfputc_r>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d1f3      	bne.n	800a934 <__sfputs_r+0xa>
 800a94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a950 <_vfiprintf_r>:
 800a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	460d      	mov	r5, r1
 800a956:	b09d      	sub	sp, #116	@ 0x74
 800a958:	4614      	mov	r4, r2
 800a95a:	4698      	mov	r8, r3
 800a95c:	4606      	mov	r6, r0
 800a95e:	b118      	cbz	r0, 800a968 <_vfiprintf_r+0x18>
 800a960:	6a03      	ldr	r3, [r0, #32]
 800a962:	b90b      	cbnz	r3, 800a968 <_vfiprintf_r+0x18>
 800a964:	f7ff fcc8 	bl	800a2f8 <__sinit>
 800a968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a96a:	07d9      	lsls	r1, r3, #31
 800a96c:	d405      	bmi.n	800a97a <_vfiprintf_r+0x2a>
 800a96e:	89ab      	ldrh	r3, [r5, #12]
 800a970:	059a      	lsls	r2, r3, #22
 800a972:	d402      	bmi.n	800a97a <_vfiprintf_r+0x2a>
 800a974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a976:	f7ff fec6 	bl	800a706 <__retarget_lock_acquire_recursive>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	071b      	lsls	r3, r3, #28
 800a97e:	d501      	bpl.n	800a984 <_vfiprintf_r+0x34>
 800a980:	692b      	ldr	r3, [r5, #16]
 800a982:	b99b      	cbnz	r3, 800a9ac <_vfiprintf_r+0x5c>
 800a984:	4629      	mov	r1, r5
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff fdde 	bl	800a548 <__swsetup_r>
 800a98c:	b170      	cbz	r0, 800a9ac <_vfiprintf_r+0x5c>
 800a98e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a990:	07dc      	lsls	r4, r3, #31
 800a992:	d504      	bpl.n	800a99e <_vfiprintf_r+0x4e>
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	b01d      	add	sp, #116	@ 0x74
 800a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99e:	89ab      	ldrh	r3, [r5, #12]
 800a9a0:	0598      	lsls	r0, r3, #22
 800a9a2:	d4f7      	bmi.n	800a994 <_vfiprintf_r+0x44>
 800a9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9a6:	f7ff feaf 	bl	800a708 <__retarget_lock_release_recursive>
 800a9aa:	e7f3      	b.n	800a994 <_vfiprintf_r+0x44>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9b0:	2320      	movs	r3, #32
 800a9b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ba:	2330      	movs	r3, #48	@ 0x30
 800a9bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab6c <_vfiprintf_r+0x21c>
 800a9c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9c4:	f04f 0901 	mov.w	r9, #1
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	469a      	mov	sl, r3
 800a9cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d0:	b10a      	cbz	r2, 800a9d6 <_vfiprintf_r+0x86>
 800a9d2:	2a25      	cmp	r2, #37	@ 0x25
 800a9d4:	d1f9      	bne.n	800a9ca <_vfiprintf_r+0x7a>
 800a9d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9da:	d00b      	beq.n	800a9f4 <_vfiprintf_r+0xa4>
 800a9dc:	465b      	mov	r3, fp
 800a9de:	4622      	mov	r2, r4
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7ff ffa1 	bl	800a92a <__sfputs_r>
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	f000 80a7 	beq.w	800ab3c <_vfiprintf_r+0x1ec>
 800a9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9f0:	445a      	add	r2, fp
 800a9f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 809f 	beq.w	800ab3c <_vfiprintf_r+0x1ec>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f04f 32ff 	mov.w	r2, #4294967295
 800aa04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa08:	f10a 0a01 	add.w	sl, sl, #1
 800aa0c:	9304      	str	r3, [sp, #16]
 800aa0e:	9307      	str	r3, [sp, #28]
 800aa10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa14:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa16:	4654      	mov	r4, sl
 800aa18:	2205      	movs	r2, #5
 800aa1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa1e:	4853      	ldr	r0, [pc, #332]	@ (800ab6c <_vfiprintf_r+0x21c>)
 800aa20:	f7f5 fbd6 	bl	80001d0 <memchr>
 800aa24:	9a04      	ldr	r2, [sp, #16]
 800aa26:	b9d8      	cbnz	r0, 800aa60 <_vfiprintf_r+0x110>
 800aa28:	06d1      	lsls	r1, r2, #27
 800aa2a:	bf44      	itt	mi
 800aa2c:	2320      	movmi	r3, #32
 800aa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa32:	0713      	lsls	r3, r2, #28
 800aa34:	bf44      	itt	mi
 800aa36:	232b      	movmi	r3, #43	@ 0x2b
 800aa38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa3c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa40:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa42:	d015      	beq.n	800aa70 <_vfiprintf_r+0x120>
 800aa44:	9a07      	ldr	r2, [sp, #28]
 800aa46:	4654      	mov	r4, sl
 800aa48:	2000      	movs	r0, #0
 800aa4a:	f04f 0c0a 	mov.w	ip, #10
 800aa4e:	4621      	mov	r1, r4
 800aa50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa54:	3b30      	subs	r3, #48	@ 0x30
 800aa56:	2b09      	cmp	r3, #9
 800aa58:	d94b      	bls.n	800aaf2 <_vfiprintf_r+0x1a2>
 800aa5a:	b1b0      	cbz	r0, 800aa8a <_vfiprintf_r+0x13a>
 800aa5c:	9207      	str	r2, [sp, #28]
 800aa5e:	e014      	b.n	800aa8a <_vfiprintf_r+0x13a>
 800aa60:	eba0 0308 	sub.w	r3, r0, r8
 800aa64:	fa09 f303 	lsl.w	r3, r9, r3
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	9304      	str	r3, [sp, #16]
 800aa6c:	46a2      	mov	sl, r4
 800aa6e:	e7d2      	b.n	800aa16 <_vfiprintf_r+0xc6>
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	1d19      	adds	r1, r3, #4
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	9103      	str	r1, [sp, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bfbb      	ittet	lt
 800aa7c:	425b      	neglt	r3, r3
 800aa7e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa82:	9307      	strge	r3, [sp, #28]
 800aa84:	9307      	strlt	r3, [sp, #28]
 800aa86:	bfb8      	it	lt
 800aa88:	9204      	strlt	r2, [sp, #16]
 800aa8a:	7823      	ldrb	r3, [r4, #0]
 800aa8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa8e:	d10a      	bne.n	800aaa6 <_vfiprintf_r+0x156>
 800aa90:	7863      	ldrb	r3, [r4, #1]
 800aa92:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa94:	d132      	bne.n	800aafc <_vfiprintf_r+0x1ac>
 800aa96:	9b03      	ldr	r3, [sp, #12]
 800aa98:	1d1a      	adds	r2, r3, #4
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	9203      	str	r2, [sp, #12]
 800aa9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaa2:	3402      	adds	r4, #2
 800aaa4:	9305      	str	r3, [sp, #20]
 800aaa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab7c <_vfiprintf_r+0x22c>
 800aaaa:	7821      	ldrb	r1, [r4, #0]
 800aaac:	2203      	movs	r2, #3
 800aaae:	4650      	mov	r0, sl
 800aab0:	f7f5 fb8e 	bl	80001d0 <memchr>
 800aab4:	b138      	cbz	r0, 800aac6 <_vfiprintf_r+0x176>
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	eba0 000a 	sub.w	r0, r0, sl
 800aabc:	2240      	movs	r2, #64	@ 0x40
 800aabe:	4082      	lsls	r2, r0
 800aac0:	4313      	orrs	r3, r2
 800aac2:	3401      	adds	r4, #1
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaca:	4829      	ldr	r0, [pc, #164]	@ (800ab70 <_vfiprintf_r+0x220>)
 800aacc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aad0:	2206      	movs	r2, #6
 800aad2:	f7f5 fb7d 	bl	80001d0 <memchr>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d03f      	beq.n	800ab5a <_vfiprintf_r+0x20a>
 800aada:	4b26      	ldr	r3, [pc, #152]	@ (800ab74 <_vfiprintf_r+0x224>)
 800aadc:	bb1b      	cbnz	r3, 800ab26 <_vfiprintf_r+0x1d6>
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	3307      	adds	r3, #7
 800aae2:	f023 0307 	bic.w	r3, r3, #7
 800aae6:	3308      	adds	r3, #8
 800aae8:	9303      	str	r3, [sp, #12]
 800aaea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaec:	443b      	add	r3, r7
 800aaee:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf0:	e76a      	b.n	800a9c8 <_vfiprintf_r+0x78>
 800aaf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	2001      	movs	r0, #1
 800aafa:	e7a8      	b.n	800aa4e <_vfiprintf_r+0xfe>
 800aafc:	2300      	movs	r3, #0
 800aafe:	3401      	adds	r4, #1
 800ab00:	9305      	str	r3, [sp, #20]
 800ab02:	4619      	mov	r1, r3
 800ab04:	f04f 0c0a 	mov.w	ip, #10
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab0e:	3a30      	subs	r2, #48	@ 0x30
 800ab10:	2a09      	cmp	r2, #9
 800ab12:	d903      	bls.n	800ab1c <_vfiprintf_r+0x1cc>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0c6      	beq.n	800aaa6 <_vfiprintf_r+0x156>
 800ab18:	9105      	str	r1, [sp, #20]
 800ab1a:	e7c4      	b.n	800aaa6 <_vfiprintf_r+0x156>
 800ab1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab20:	4604      	mov	r4, r0
 800ab22:	2301      	movs	r3, #1
 800ab24:	e7f0      	b.n	800ab08 <_vfiprintf_r+0x1b8>
 800ab26:	ab03      	add	r3, sp, #12
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	4b12      	ldr	r3, [pc, #72]	@ (800ab78 <_vfiprintf_r+0x228>)
 800ab2e:	a904      	add	r1, sp, #16
 800ab30:	4630      	mov	r0, r6
 800ab32:	f3af 8000 	nop.w
 800ab36:	4607      	mov	r7, r0
 800ab38:	1c78      	adds	r0, r7, #1
 800ab3a:	d1d6      	bne.n	800aaea <_vfiprintf_r+0x19a>
 800ab3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab3e:	07d9      	lsls	r1, r3, #31
 800ab40:	d405      	bmi.n	800ab4e <_vfiprintf_r+0x1fe>
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	059a      	lsls	r2, r3, #22
 800ab46:	d402      	bmi.n	800ab4e <_vfiprintf_r+0x1fe>
 800ab48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab4a:	f7ff fddd 	bl	800a708 <__retarget_lock_release_recursive>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	065b      	lsls	r3, r3, #25
 800ab52:	f53f af1f 	bmi.w	800a994 <_vfiprintf_r+0x44>
 800ab56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab58:	e71e      	b.n	800a998 <_vfiprintf_r+0x48>
 800ab5a:	ab03      	add	r3, sp, #12
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	462a      	mov	r2, r5
 800ab60:	4b05      	ldr	r3, [pc, #20]	@ (800ab78 <_vfiprintf_r+0x228>)
 800ab62:	a904      	add	r1, sp, #16
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 f879 	bl	800ac5c <_printf_i>
 800ab6a:	e7e4      	b.n	800ab36 <_vfiprintf_r+0x1e6>
 800ab6c:	080361a4 	.word	0x080361a4
 800ab70:	080361ae 	.word	0x080361ae
 800ab74:	00000000 	.word	0x00000000
 800ab78:	0800a92b 	.word	0x0800a92b
 800ab7c:	080361aa 	.word	0x080361aa

0800ab80 <_printf_common>:
 800ab80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	4616      	mov	r6, r2
 800ab86:	4698      	mov	r8, r3
 800ab88:	688a      	ldr	r2, [r1, #8]
 800ab8a:	690b      	ldr	r3, [r1, #16]
 800ab8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab90:	4293      	cmp	r3, r2
 800ab92:	bfb8      	it	lt
 800ab94:	4613      	movlt	r3, r2
 800ab96:	6033      	str	r3, [r6, #0]
 800ab98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	b10a      	cbz	r2, 800aba6 <_printf_common+0x26>
 800aba2:	3301      	adds	r3, #1
 800aba4:	6033      	str	r3, [r6, #0]
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	0699      	lsls	r1, r3, #26
 800abaa:	bf42      	ittt	mi
 800abac:	6833      	ldrmi	r3, [r6, #0]
 800abae:	3302      	addmi	r3, #2
 800abb0:	6033      	strmi	r3, [r6, #0]
 800abb2:	6825      	ldr	r5, [r4, #0]
 800abb4:	f015 0506 	ands.w	r5, r5, #6
 800abb8:	d106      	bne.n	800abc8 <_printf_common+0x48>
 800abba:	f104 0a19 	add.w	sl, r4, #25
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	6832      	ldr	r2, [r6, #0]
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	dc26      	bgt.n	800ac16 <_printf_common+0x96>
 800abc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abcc:	6822      	ldr	r2, [r4, #0]
 800abce:	3b00      	subs	r3, #0
 800abd0:	bf18      	it	ne
 800abd2:	2301      	movne	r3, #1
 800abd4:	0692      	lsls	r2, r2, #26
 800abd6:	d42b      	bmi.n	800ac30 <_printf_common+0xb0>
 800abd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abdc:	4641      	mov	r1, r8
 800abde:	4638      	mov	r0, r7
 800abe0:	47c8      	blx	r9
 800abe2:	3001      	adds	r0, #1
 800abe4:	d01e      	beq.n	800ac24 <_printf_common+0xa4>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	6922      	ldr	r2, [r4, #16]
 800abea:	f003 0306 	and.w	r3, r3, #6
 800abee:	2b04      	cmp	r3, #4
 800abf0:	bf02      	ittt	eq
 800abf2:	68e5      	ldreq	r5, [r4, #12]
 800abf4:	6833      	ldreq	r3, [r6, #0]
 800abf6:	1aed      	subeq	r5, r5, r3
 800abf8:	68a3      	ldr	r3, [r4, #8]
 800abfa:	bf0c      	ite	eq
 800abfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac00:	2500      	movne	r5, #0
 800ac02:	4293      	cmp	r3, r2
 800ac04:	bfc4      	itt	gt
 800ac06:	1a9b      	subgt	r3, r3, r2
 800ac08:	18ed      	addgt	r5, r5, r3
 800ac0a:	2600      	movs	r6, #0
 800ac0c:	341a      	adds	r4, #26
 800ac0e:	42b5      	cmp	r5, r6
 800ac10:	d11a      	bne.n	800ac48 <_printf_common+0xc8>
 800ac12:	2000      	movs	r0, #0
 800ac14:	e008      	b.n	800ac28 <_printf_common+0xa8>
 800ac16:	2301      	movs	r3, #1
 800ac18:	4652      	mov	r2, sl
 800ac1a:	4641      	mov	r1, r8
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	47c8      	blx	r9
 800ac20:	3001      	adds	r0, #1
 800ac22:	d103      	bne.n	800ac2c <_printf_common+0xac>
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295
 800ac28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	e7c6      	b.n	800abbe <_printf_common+0x3e>
 800ac30:	18e1      	adds	r1, r4, r3
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	2030      	movs	r0, #48	@ 0x30
 800ac36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac3a:	4422      	add	r2, r4
 800ac3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac44:	3302      	adds	r3, #2
 800ac46:	e7c7      	b.n	800abd8 <_printf_common+0x58>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	4622      	mov	r2, r4
 800ac4c:	4641      	mov	r1, r8
 800ac4e:	4638      	mov	r0, r7
 800ac50:	47c8      	blx	r9
 800ac52:	3001      	adds	r0, #1
 800ac54:	d0e6      	beq.n	800ac24 <_printf_common+0xa4>
 800ac56:	3601      	adds	r6, #1
 800ac58:	e7d9      	b.n	800ac0e <_printf_common+0x8e>
	...

0800ac5c <_printf_i>:
 800ac5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac60:	7e0f      	ldrb	r7, [r1, #24]
 800ac62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac64:	2f78      	cmp	r7, #120	@ 0x78
 800ac66:	4691      	mov	r9, r2
 800ac68:	4680      	mov	r8, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	469a      	mov	sl, r3
 800ac6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac72:	d807      	bhi.n	800ac84 <_printf_i+0x28>
 800ac74:	2f62      	cmp	r7, #98	@ 0x62
 800ac76:	d80a      	bhi.n	800ac8e <_printf_i+0x32>
 800ac78:	2f00      	cmp	r7, #0
 800ac7a:	f000 80d1 	beq.w	800ae20 <_printf_i+0x1c4>
 800ac7e:	2f58      	cmp	r7, #88	@ 0x58
 800ac80:	f000 80b8 	beq.w	800adf4 <_printf_i+0x198>
 800ac84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac8c:	e03a      	b.n	800ad04 <_printf_i+0xa8>
 800ac8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac92:	2b15      	cmp	r3, #21
 800ac94:	d8f6      	bhi.n	800ac84 <_printf_i+0x28>
 800ac96:	a101      	add	r1, pc, #4	@ (adr r1, 800ac9c <_printf_i+0x40>)
 800ac98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac9c:	0800acf5 	.word	0x0800acf5
 800aca0:	0800ad09 	.word	0x0800ad09
 800aca4:	0800ac85 	.word	0x0800ac85
 800aca8:	0800ac85 	.word	0x0800ac85
 800acac:	0800ac85 	.word	0x0800ac85
 800acb0:	0800ac85 	.word	0x0800ac85
 800acb4:	0800ad09 	.word	0x0800ad09
 800acb8:	0800ac85 	.word	0x0800ac85
 800acbc:	0800ac85 	.word	0x0800ac85
 800acc0:	0800ac85 	.word	0x0800ac85
 800acc4:	0800ac85 	.word	0x0800ac85
 800acc8:	0800ae07 	.word	0x0800ae07
 800accc:	0800ad33 	.word	0x0800ad33
 800acd0:	0800adc1 	.word	0x0800adc1
 800acd4:	0800ac85 	.word	0x0800ac85
 800acd8:	0800ac85 	.word	0x0800ac85
 800acdc:	0800ae29 	.word	0x0800ae29
 800ace0:	0800ac85 	.word	0x0800ac85
 800ace4:	0800ad33 	.word	0x0800ad33
 800ace8:	0800ac85 	.word	0x0800ac85
 800acec:	0800ac85 	.word	0x0800ac85
 800acf0:	0800adc9 	.word	0x0800adc9
 800acf4:	6833      	ldr	r3, [r6, #0]
 800acf6:	1d1a      	adds	r2, r3, #4
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6032      	str	r2, [r6, #0]
 800acfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad04:	2301      	movs	r3, #1
 800ad06:	e09c      	b.n	800ae42 <_printf_i+0x1e6>
 800ad08:	6833      	ldr	r3, [r6, #0]
 800ad0a:	6820      	ldr	r0, [r4, #0]
 800ad0c:	1d19      	adds	r1, r3, #4
 800ad0e:	6031      	str	r1, [r6, #0]
 800ad10:	0606      	lsls	r6, r0, #24
 800ad12:	d501      	bpl.n	800ad18 <_printf_i+0xbc>
 800ad14:	681d      	ldr	r5, [r3, #0]
 800ad16:	e003      	b.n	800ad20 <_printf_i+0xc4>
 800ad18:	0645      	lsls	r5, r0, #25
 800ad1a:	d5fb      	bpl.n	800ad14 <_printf_i+0xb8>
 800ad1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	da03      	bge.n	800ad2c <_printf_i+0xd0>
 800ad24:	232d      	movs	r3, #45	@ 0x2d
 800ad26:	426d      	negs	r5, r5
 800ad28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad2c:	4858      	ldr	r0, [pc, #352]	@ (800ae90 <_printf_i+0x234>)
 800ad2e:	230a      	movs	r3, #10
 800ad30:	e011      	b.n	800ad56 <_printf_i+0xfa>
 800ad32:	6821      	ldr	r1, [r4, #0]
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	0608      	lsls	r0, r1, #24
 800ad38:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad3c:	d402      	bmi.n	800ad44 <_printf_i+0xe8>
 800ad3e:	0649      	lsls	r1, r1, #25
 800ad40:	bf48      	it	mi
 800ad42:	b2ad      	uxthmi	r5, r5
 800ad44:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad46:	4852      	ldr	r0, [pc, #328]	@ (800ae90 <_printf_i+0x234>)
 800ad48:	6033      	str	r3, [r6, #0]
 800ad4a:	bf14      	ite	ne
 800ad4c:	230a      	movne	r3, #10
 800ad4e:	2308      	moveq	r3, #8
 800ad50:	2100      	movs	r1, #0
 800ad52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad56:	6866      	ldr	r6, [r4, #4]
 800ad58:	60a6      	str	r6, [r4, #8]
 800ad5a:	2e00      	cmp	r6, #0
 800ad5c:	db05      	blt.n	800ad6a <_printf_i+0x10e>
 800ad5e:	6821      	ldr	r1, [r4, #0]
 800ad60:	432e      	orrs	r6, r5
 800ad62:	f021 0104 	bic.w	r1, r1, #4
 800ad66:	6021      	str	r1, [r4, #0]
 800ad68:	d04b      	beq.n	800ae02 <_printf_i+0x1a6>
 800ad6a:	4616      	mov	r6, r2
 800ad6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad70:	fb03 5711 	mls	r7, r3, r1, r5
 800ad74:	5dc7      	ldrb	r7, [r0, r7]
 800ad76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad7a:	462f      	mov	r7, r5
 800ad7c:	42bb      	cmp	r3, r7
 800ad7e:	460d      	mov	r5, r1
 800ad80:	d9f4      	bls.n	800ad6c <_printf_i+0x110>
 800ad82:	2b08      	cmp	r3, #8
 800ad84:	d10b      	bne.n	800ad9e <_printf_i+0x142>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	07df      	lsls	r7, r3, #31
 800ad8a:	d508      	bpl.n	800ad9e <_printf_i+0x142>
 800ad8c:	6923      	ldr	r3, [r4, #16]
 800ad8e:	6861      	ldr	r1, [r4, #4]
 800ad90:	4299      	cmp	r1, r3
 800ad92:	bfde      	ittt	le
 800ad94:	2330      	movle	r3, #48	@ 0x30
 800ad96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad9e:	1b92      	subs	r2, r2, r6
 800ada0:	6122      	str	r2, [r4, #16]
 800ada2:	f8cd a000 	str.w	sl, [sp]
 800ada6:	464b      	mov	r3, r9
 800ada8:	aa03      	add	r2, sp, #12
 800adaa:	4621      	mov	r1, r4
 800adac:	4640      	mov	r0, r8
 800adae:	f7ff fee7 	bl	800ab80 <_printf_common>
 800adb2:	3001      	adds	r0, #1
 800adb4:	d14a      	bne.n	800ae4c <_printf_i+0x1f0>
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295
 800adba:	b004      	add	sp, #16
 800adbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	f043 0320 	orr.w	r3, r3, #32
 800adc6:	6023      	str	r3, [r4, #0]
 800adc8:	4832      	ldr	r0, [pc, #200]	@ (800ae94 <_printf_i+0x238>)
 800adca:	2778      	movs	r7, #120	@ 0x78
 800adcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	6831      	ldr	r1, [r6, #0]
 800add4:	061f      	lsls	r7, r3, #24
 800add6:	f851 5b04 	ldr.w	r5, [r1], #4
 800adda:	d402      	bmi.n	800ade2 <_printf_i+0x186>
 800addc:	065f      	lsls	r7, r3, #25
 800adde:	bf48      	it	mi
 800ade0:	b2ad      	uxthmi	r5, r5
 800ade2:	6031      	str	r1, [r6, #0]
 800ade4:	07d9      	lsls	r1, r3, #31
 800ade6:	bf44      	itt	mi
 800ade8:	f043 0320 	orrmi.w	r3, r3, #32
 800adec:	6023      	strmi	r3, [r4, #0]
 800adee:	b11d      	cbz	r5, 800adf8 <_printf_i+0x19c>
 800adf0:	2310      	movs	r3, #16
 800adf2:	e7ad      	b.n	800ad50 <_printf_i+0xf4>
 800adf4:	4826      	ldr	r0, [pc, #152]	@ (800ae90 <_printf_i+0x234>)
 800adf6:	e7e9      	b.n	800adcc <_printf_i+0x170>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	f023 0320 	bic.w	r3, r3, #32
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	e7f6      	b.n	800adf0 <_printf_i+0x194>
 800ae02:	4616      	mov	r6, r2
 800ae04:	e7bd      	b.n	800ad82 <_printf_i+0x126>
 800ae06:	6833      	ldr	r3, [r6, #0]
 800ae08:	6825      	ldr	r5, [r4, #0]
 800ae0a:	6961      	ldr	r1, [r4, #20]
 800ae0c:	1d18      	adds	r0, r3, #4
 800ae0e:	6030      	str	r0, [r6, #0]
 800ae10:	062e      	lsls	r6, r5, #24
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	d501      	bpl.n	800ae1a <_printf_i+0x1be>
 800ae16:	6019      	str	r1, [r3, #0]
 800ae18:	e002      	b.n	800ae20 <_printf_i+0x1c4>
 800ae1a:	0668      	lsls	r0, r5, #25
 800ae1c:	d5fb      	bpl.n	800ae16 <_printf_i+0x1ba>
 800ae1e:	8019      	strh	r1, [r3, #0]
 800ae20:	2300      	movs	r3, #0
 800ae22:	6123      	str	r3, [r4, #16]
 800ae24:	4616      	mov	r6, r2
 800ae26:	e7bc      	b.n	800ada2 <_printf_i+0x146>
 800ae28:	6833      	ldr	r3, [r6, #0]
 800ae2a:	1d1a      	adds	r2, r3, #4
 800ae2c:	6032      	str	r2, [r6, #0]
 800ae2e:	681e      	ldr	r6, [r3, #0]
 800ae30:	6862      	ldr	r2, [r4, #4]
 800ae32:	2100      	movs	r1, #0
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7f5 f9cb 	bl	80001d0 <memchr>
 800ae3a:	b108      	cbz	r0, 800ae40 <_printf_i+0x1e4>
 800ae3c:	1b80      	subs	r0, r0, r6
 800ae3e:	6060      	str	r0, [r4, #4]
 800ae40:	6863      	ldr	r3, [r4, #4]
 800ae42:	6123      	str	r3, [r4, #16]
 800ae44:	2300      	movs	r3, #0
 800ae46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae4a:	e7aa      	b.n	800ada2 <_printf_i+0x146>
 800ae4c:	6923      	ldr	r3, [r4, #16]
 800ae4e:	4632      	mov	r2, r6
 800ae50:	4649      	mov	r1, r9
 800ae52:	4640      	mov	r0, r8
 800ae54:	47d0      	blx	sl
 800ae56:	3001      	adds	r0, #1
 800ae58:	d0ad      	beq.n	800adb6 <_printf_i+0x15a>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	079b      	lsls	r3, r3, #30
 800ae5e:	d413      	bmi.n	800ae88 <_printf_i+0x22c>
 800ae60:	68e0      	ldr	r0, [r4, #12]
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	4298      	cmp	r0, r3
 800ae66:	bfb8      	it	lt
 800ae68:	4618      	movlt	r0, r3
 800ae6a:	e7a6      	b.n	800adba <_printf_i+0x15e>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4649      	mov	r1, r9
 800ae72:	4640      	mov	r0, r8
 800ae74:	47d0      	blx	sl
 800ae76:	3001      	adds	r0, #1
 800ae78:	d09d      	beq.n	800adb6 <_printf_i+0x15a>
 800ae7a:	3501      	adds	r5, #1
 800ae7c:	68e3      	ldr	r3, [r4, #12]
 800ae7e:	9903      	ldr	r1, [sp, #12]
 800ae80:	1a5b      	subs	r3, r3, r1
 800ae82:	42ab      	cmp	r3, r5
 800ae84:	dcf2      	bgt.n	800ae6c <_printf_i+0x210>
 800ae86:	e7eb      	b.n	800ae60 <_printf_i+0x204>
 800ae88:	2500      	movs	r5, #0
 800ae8a:	f104 0619 	add.w	r6, r4, #25
 800ae8e:	e7f5      	b.n	800ae7c <_printf_i+0x220>
 800ae90:	080361b5 	.word	0x080361b5
 800ae94:	080361c6 	.word	0x080361c6

0800ae98 <__sflush_r>:
 800ae98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea0:	0716      	lsls	r6, r2, #28
 800aea2:	4605      	mov	r5, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	d454      	bmi.n	800af52 <__sflush_r+0xba>
 800aea8:	684b      	ldr	r3, [r1, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dc02      	bgt.n	800aeb4 <__sflush_r+0x1c>
 800aeae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dd48      	ble.n	800af46 <__sflush_r+0xae>
 800aeb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	d045      	beq.n	800af46 <__sflush_r+0xae>
 800aeba:	2300      	movs	r3, #0
 800aebc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aec0:	682f      	ldr	r7, [r5, #0]
 800aec2:	6a21      	ldr	r1, [r4, #32]
 800aec4:	602b      	str	r3, [r5, #0]
 800aec6:	d030      	beq.n	800af2a <__sflush_r+0x92>
 800aec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	0759      	lsls	r1, r3, #29
 800aece:	d505      	bpl.n	800aedc <__sflush_r+0x44>
 800aed0:	6863      	ldr	r3, [r4, #4]
 800aed2:	1ad2      	subs	r2, r2, r3
 800aed4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aed6:	b10b      	cbz	r3, 800aedc <__sflush_r+0x44>
 800aed8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aeda:	1ad2      	subs	r2, r2, r3
 800aedc:	2300      	movs	r3, #0
 800aede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aee0:	6a21      	ldr	r1, [r4, #32]
 800aee2:	4628      	mov	r0, r5
 800aee4:	47b0      	blx	r6
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	d106      	bne.n	800aefa <__sflush_r+0x62>
 800aeec:	6829      	ldr	r1, [r5, #0]
 800aeee:	291d      	cmp	r1, #29
 800aef0:	d82b      	bhi.n	800af4a <__sflush_r+0xb2>
 800aef2:	4a2a      	ldr	r2, [pc, #168]	@ (800af9c <__sflush_r+0x104>)
 800aef4:	40ca      	lsrs	r2, r1
 800aef6:	07d6      	lsls	r6, r2, #31
 800aef8:	d527      	bpl.n	800af4a <__sflush_r+0xb2>
 800aefa:	2200      	movs	r2, #0
 800aefc:	6062      	str	r2, [r4, #4]
 800aefe:	04d9      	lsls	r1, r3, #19
 800af00:	6922      	ldr	r2, [r4, #16]
 800af02:	6022      	str	r2, [r4, #0]
 800af04:	d504      	bpl.n	800af10 <__sflush_r+0x78>
 800af06:	1c42      	adds	r2, r0, #1
 800af08:	d101      	bne.n	800af0e <__sflush_r+0x76>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b903      	cbnz	r3, 800af10 <__sflush_r+0x78>
 800af0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800af10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af12:	602f      	str	r7, [r5, #0]
 800af14:	b1b9      	cbz	r1, 800af46 <__sflush_r+0xae>
 800af16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af1a:	4299      	cmp	r1, r3
 800af1c:	d002      	beq.n	800af24 <__sflush_r+0x8c>
 800af1e:	4628      	mov	r0, r5
 800af20:	f7ff fbf4 	bl	800a70c <_free_r>
 800af24:	2300      	movs	r3, #0
 800af26:	6363      	str	r3, [r4, #52]	@ 0x34
 800af28:	e00d      	b.n	800af46 <__sflush_r+0xae>
 800af2a:	2301      	movs	r3, #1
 800af2c:	4628      	mov	r0, r5
 800af2e:	47b0      	blx	r6
 800af30:	4602      	mov	r2, r0
 800af32:	1c50      	adds	r0, r2, #1
 800af34:	d1c9      	bne.n	800aeca <__sflush_r+0x32>
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0c6      	beq.n	800aeca <__sflush_r+0x32>
 800af3c:	2b1d      	cmp	r3, #29
 800af3e:	d001      	beq.n	800af44 <__sflush_r+0xac>
 800af40:	2b16      	cmp	r3, #22
 800af42:	d11e      	bne.n	800af82 <__sflush_r+0xea>
 800af44:	602f      	str	r7, [r5, #0]
 800af46:	2000      	movs	r0, #0
 800af48:	e022      	b.n	800af90 <__sflush_r+0xf8>
 800af4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af4e:	b21b      	sxth	r3, r3
 800af50:	e01b      	b.n	800af8a <__sflush_r+0xf2>
 800af52:	690f      	ldr	r7, [r1, #16]
 800af54:	2f00      	cmp	r7, #0
 800af56:	d0f6      	beq.n	800af46 <__sflush_r+0xae>
 800af58:	0793      	lsls	r3, r2, #30
 800af5a:	680e      	ldr	r6, [r1, #0]
 800af5c:	bf08      	it	eq
 800af5e:	694b      	ldreq	r3, [r1, #20]
 800af60:	600f      	str	r7, [r1, #0]
 800af62:	bf18      	it	ne
 800af64:	2300      	movne	r3, #0
 800af66:	eba6 0807 	sub.w	r8, r6, r7
 800af6a:	608b      	str	r3, [r1, #8]
 800af6c:	f1b8 0f00 	cmp.w	r8, #0
 800af70:	dde9      	ble.n	800af46 <__sflush_r+0xae>
 800af72:	6a21      	ldr	r1, [r4, #32]
 800af74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af76:	4643      	mov	r3, r8
 800af78:	463a      	mov	r2, r7
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b0      	blx	r6
 800af7e:	2800      	cmp	r0, #0
 800af80:	dc08      	bgt.n	800af94 <__sflush_r+0xfc>
 800af82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295
 800af90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af94:	4407      	add	r7, r0
 800af96:	eba8 0800 	sub.w	r8, r8, r0
 800af9a:	e7e7      	b.n	800af6c <__sflush_r+0xd4>
 800af9c:	20400001 	.word	0x20400001

0800afa0 <_fflush_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	690b      	ldr	r3, [r1, #16]
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b913      	cbnz	r3, 800afb0 <_fflush_r+0x10>
 800afaa:	2500      	movs	r5, #0
 800afac:	4628      	mov	r0, r5
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	b118      	cbz	r0, 800afba <_fflush_r+0x1a>
 800afb2:	6a03      	ldr	r3, [r0, #32]
 800afb4:	b90b      	cbnz	r3, 800afba <_fflush_r+0x1a>
 800afb6:	f7ff f99f 	bl	800a2f8 <__sinit>
 800afba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f3      	beq.n	800afaa <_fflush_r+0xa>
 800afc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afc4:	07d0      	lsls	r0, r2, #31
 800afc6:	d404      	bmi.n	800afd2 <_fflush_r+0x32>
 800afc8:	0599      	lsls	r1, r3, #22
 800afca:	d402      	bmi.n	800afd2 <_fflush_r+0x32>
 800afcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afce:	f7ff fb9a 	bl	800a706 <__retarget_lock_acquire_recursive>
 800afd2:	4628      	mov	r0, r5
 800afd4:	4621      	mov	r1, r4
 800afd6:	f7ff ff5f 	bl	800ae98 <__sflush_r>
 800afda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afdc:	07da      	lsls	r2, r3, #31
 800afde:	4605      	mov	r5, r0
 800afe0:	d4e4      	bmi.n	800afac <_fflush_r+0xc>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	059b      	lsls	r3, r3, #22
 800afe6:	d4e1      	bmi.n	800afac <_fflush_r+0xc>
 800afe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afea:	f7ff fb8d 	bl	800a708 <__retarget_lock_release_recursive>
 800afee:	e7dd      	b.n	800afac <_fflush_r+0xc>

0800aff0 <__swhatbuf_r>:
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	460c      	mov	r4, r1
 800aff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff8:	2900      	cmp	r1, #0
 800affa:	b096      	sub	sp, #88	@ 0x58
 800affc:	4615      	mov	r5, r2
 800affe:	461e      	mov	r6, r3
 800b000:	da0d      	bge.n	800b01e <__swhatbuf_r+0x2e>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b008:	f04f 0100 	mov.w	r1, #0
 800b00c:	bf14      	ite	ne
 800b00e:	2340      	movne	r3, #64	@ 0x40
 800b010:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b014:	2000      	movs	r0, #0
 800b016:	6031      	str	r1, [r6, #0]
 800b018:	602b      	str	r3, [r5, #0]
 800b01a:	b016      	add	sp, #88	@ 0x58
 800b01c:	bd70      	pop	{r4, r5, r6, pc}
 800b01e:	466a      	mov	r2, sp
 800b020:	f000 f848 	bl	800b0b4 <_fstat_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	dbec      	blt.n	800b002 <__swhatbuf_r+0x12>
 800b028:	9901      	ldr	r1, [sp, #4]
 800b02a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b02e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b032:	4259      	negs	r1, r3
 800b034:	4159      	adcs	r1, r3
 800b036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b03a:	e7eb      	b.n	800b014 <__swhatbuf_r+0x24>

0800b03c <__smakebuf_r>:
 800b03c:	898b      	ldrh	r3, [r1, #12]
 800b03e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b040:	079d      	lsls	r5, r3, #30
 800b042:	4606      	mov	r6, r0
 800b044:	460c      	mov	r4, r1
 800b046:	d507      	bpl.n	800b058 <__smakebuf_r+0x1c>
 800b048:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	6123      	str	r3, [r4, #16]
 800b050:	2301      	movs	r3, #1
 800b052:	6163      	str	r3, [r4, #20]
 800b054:	b003      	add	sp, #12
 800b056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b058:	ab01      	add	r3, sp, #4
 800b05a:	466a      	mov	r2, sp
 800b05c:	f7ff ffc8 	bl	800aff0 <__swhatbuf_r>
 800b060:	9f00      	ldr	r7, [sp, #0]
 800b062:	4605      	mov	r5, r0
 800b064:	4639      	mov	r1, r7
 800b066:	4630      	mov	r0, r6
 800b068:	f7ff fbbc 	bl	800a7e4 <_malloc_r>
 800b06c:	b948      	cbnz	r0, 800b082 <__smakebuf_r+0x46>
 800b06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b072:	059a      	lsls	r2, r3, #22
 800b074:	d4ee      	bmi.n	800b054 <__smakebuf_r+0x18>
 800b076:	f023 0303 	bic.w	r3, r3, #3
 800b07a:	f043 0302 	orr.w	r3, r3, #2
 800b07e:	81a3      	strh	r3, [r4, #12]
 800b080:	e7e2      	b.n	800b048 <__smakebuf_r+0xc>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	6020      	str	r0, [r4, #0]
 800b086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b08a:	81a3      	strh	r3, [r4, #12]
 800b08c:	9b01      	ldr	r3, [sp, #4]
 800b08e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b092:	b15b      	cbz	r3, 800b0ac <__smakebuf_r+0x70>
 800b094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b098:	4630      	mov	r0, r6
 800b09a:	f000 f81d 	bl	800b0d8 <_isatty_r>
 800b09e:	b128      	cbz	r0, 800b0ac <__smakebuf_r+0x70>
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	f023 0303 	bic.w	r3, r3, #3
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	81a3      	strh	r3, [r4, #12]
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	431d      	orrs	r5, r3
 800b0b0:	81a5      	strh	r5, [r4, #12]
 800b0b2:	e7cf      	b.n	800b054 <__smakebuf_r+0x18>

0800b0b4 <_fstat_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d07      	ldr	r5, [pc, #28]	@ (800b0d4 <_fstat_r+0x20>)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	f7f5 ffa4 	bl	800100e <_fstat>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d102      	bne.n	800b0d0 <_fstat_r+0x1c>
 800b0ca:	682b      	ldr	r3, [r5, #0]
 800b0cc:	b103      	cbz	r3, 800b0d0 <_fstat_r+0x1c>
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	bf00      	nop
 800b0d4:	200010d8 	.word	0x200010d8

0800b0d8 <_isatty_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4d06      	ldr	r5, [pc, #24]	@ (800b0f4 <_isatty_r+0x1c>)
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	f7f5 ffa3 	bl	800102e <_isatty>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d102      	bne.n	800b0f2 <_isatty_r+0x1a>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	b103      	cbz	r3, 800b0f2 <_isatty_r+0x1a>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	200010d8 	.word	0x200010d8

0800b0f8 <_sbrk_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4d06      	ldr	r5, [pc, #24]	@ (800b114 <_sbrk_r+0x1c>)
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	4608      	mov	r0, r1
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	f7f5 ffac 	bl	8001060 <_sbrk>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_sbrk_r+0x1a>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_sbrk_r+0x1a>
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	200010d8 	.word	0x200010d8

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr
