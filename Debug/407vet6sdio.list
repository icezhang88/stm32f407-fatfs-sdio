
407vet6sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f340  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b0f0  0800f4d0  0800f4d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803a5c0  0803a5c0  0003c074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803a5c0  0803a5c0  0003b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803a5c8  0803a5c8  0003c074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803a5c8  0803a5c8  0003b5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803a5cc  0803a5cc  0003b5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0803a5d0  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003c074  2**0
                  CONTENTS
 10 .bss          00005aac  20000074  20000074  0003c074  2**2
                  ALLOC
 11 ._user_heap_stack 0000a000  20005b20  20005b20  0003c074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003c074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000262ff  00000000  00000000  0003c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e0b  00000000  00000000  000623a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa8  00000000  00000000  000681b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001846  00000000  00000000  0006a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298cf  00000000  00000000  0006b99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bd37  00000000  00000000  0009526d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16d7  00000000  00000000  000c0fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a267b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089b4  00000000  00000000  001a26c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001ab074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4b8 	.word	0x0800f4b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800f4b8 	.word	0x0800f4b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <MX_DMA_Init+0x78>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_DMA_Init+0x78>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_DMA_Init+0x78>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_DMA_Init+0x78>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2105      	movs	r1, #5
 80005de:	200f      	movs	r0, #15
 80005e0:	f001 f8e6 	bl	80017b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e4:	200f      	movs	r0, #15
 80005e6:	f001 f8ff 	bl	80017e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2106      	movs	r1, #6
 80005ee:	203b      	movs	r0, #59	@ 0x3b
 80005f0:	f001 f8de 	bl	80017b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f4:	203b      	movs	r0, #59	@ 0x3b
 80005f6:	f001 f8f7 	bl	80017e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2106      	movs	r1, #6
 80005fe:	2045      	movs	r0, #69	@ 0x45
 8000600:	f001 f8d6 	bl	80017b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000604:	2045      	movs	r0, #69	@ 0x45
 8000606:	f001 f8ef 	bl	80017e8 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <initFileManager>:

#define BUFFER_SIZE 2048



uint8_t initFileManager() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

	FRESULT retSD = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	4911      	ldr	r1, [pc, #68]	@ (8000668 <initFileManager+0x50>)
 8000622:	4812      	ldr	r0, [pc, #72]	@ (800066c <initFileManager+0x54>)
 8000624:	f008 ffd0 	bl	80095c8 <f_mount>
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]
	printf("%u\r\n", retSD);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4619      	mov	r1, r3
 8000630:	480f      	ldr	r0, [pc, #60]	@ (8000670 <initFileManager+0x58>)
 8000632:	f00d fffb 	bl	800e62c <iprintf>
	printf("Compilation Date: %s %s\n", __DATE__, __TIME__);
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <initFileManager+0x5c>)
 8000638:	490f      	ldr	r1, [pc, #60]	@ (8000678 <initFileManager+0x60>)
 800063a:	4810      	ldr	r0, [pc, #64]	@ (800067c <initFileManager+0x64>)
 800063c:	f00d fff6 	bl	800e62c <iprintf>
	// mount SD card
	//   int retSD = f_mount(&SDFatFS, (TCHAR const *)SDPath, 1);
	if (retSD == FR_OK) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d106      	bne.n	8000654 <initFileManager+0x3c>

		//
		SDCard_ShowInfo();
 8000646:	f000 f895 	bl	8000774 <SDCard_ShowInfo>
		ListFiles("/");
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <initFileManager+0x68>)
 800064c:	f000 f81c 	bl	8000688 <ListFiles>
		return 1;
 8000650:	2301      	movs	r3, #1
 8000652:	e005      	b.n	8000660 <initFileManager+0x48>

	} else {
		printf("!! SDcard mount filesystem error。(%d)\r\n", retSD);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <initFileManager+0x6c>)
 800065a:	f00d ffe7 	bl	800e62c <iprintf>
		return 0;
 800065e:	2300      	movs	r3, #0
	}
	// 不带fatfs调试函数

}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000d78 	.word	0x20000d78
 800066c:	20000d7c 	.word	0x20000d7c
 8000670:	0800f4d0 	.word	0x0800f4d0
 8000674:	0800f4d8 	.word	0x0800f4d8
 8000678:	0800f4e4 	.word	0x0800f4e4
 800067c:	0800f4f0 	.word	0x0800f4f0
 8000680:	0800f50c 	.word	0x0800f50c
 8000684:	0800f510 	.word	0x0800f510

08000688 <ListFiles>:
		}
	}
	printf("\r\n"); // 最后补一个换行
}

void ListFiles(const TCHAR *path) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b0d6      	sub	sp, #344	@ 0x158
 800068c:	af00      	add	r7, sp, #0
 800068e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000692:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000696:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dir;               // 目录对象
	FILINFO fno;           // 文件信息结构体

	// 打开目录
	res = f_opendir(&dir, path);
 8000698:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800069c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006a0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	4610      	mov	r0, r2
 80006a8:	f009 ff26 	bl	800a4f8 <f_opendir>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	if (res != FR_OK) {
 80006b2:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <ListFiles+0x40>
		printf("open dir failed err: %d\r\n", res);
 80006ba:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80006be:	4619      	mov	r1, r3
 80006c0:	4826      	ldr	r0, [pc, #152]	@ (800075c <ListFiles+0xd4>)
 80006c2:	f00d ffb3 	bl	800e62c <iprintf>
 80006c6:	e045      	b.n	8000754 <ListFiles+0xcc>
		return;
	}

	printf("\r\ndir %s file list : \r\n", path);
 80006c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006cc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	4823      	ldr	r0, [pc, #140]	@ (8000760 <ListFiles+0xd8>)
 80006d4:	f00d ffaa 	bl	800e62c <iprintf>
	printf("----------------------------------------\r\n");
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <ListFiles+0xdc>)
 80006da:	f00e f80f 	bl	800e6fc <puts>

	// 循环读取目录项（f_readdir返回FR_OK且fno.fname不为空时继续）
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 80006de:	e01c      	b.n	800071a <ListFiles+0x92>
		// 判断是否为子目录（文件名以'/'结尾，或fno.fattrib包含AM_DIR属性）
		if (fno.fattrib & AM_DIR) {
 80006e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80006e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80006e8:	7a1b      	ldrb	r3, [r3, #8]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <ListFiles+0x7a>
			printf(" [dir]  %s\r\n", fno.fname);  // 子目录
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	3316      	adds	r3, #22
 80006f8:	4619      	mov	r1, r3
 80006fa:	481b      	ldr	r0, [pc, #108]	@ (8000768 <ListFiles+0xe0>)
 80006fc:	f00d ff96 	bl	800e62c <iprintf>
 8000700:	e00b      	b.n	800071a <ListFiles+0x92>
		} else {
			// 普通文件：输出文件名和大小（单位：字节）
			printf(" [file]  %s  (size: %ld bytes)\r\n", fno.fname, fno.fsize);
 8000702:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000706:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	3316      	adds	r3, #22
 8000712:	4619      	mov	r1, r3
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <ListFiles+0xe4>)
 8000716:	f00d ff89 	bl	800e62c <iprintf>
	while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0) {
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f009 ffd7 	bl	800a6d8 <f_readdir>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <ListFiles+0xb6>
 8000730:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000734:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000738:	7d9b      	ldrb	r3, [r3, #22]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1d0      	bne.n	80006e0 <ListFiles+0x58>
		}
	}

	printf("----------------------------------------\r\n");
 800073e:	4809      	ldr	r0, [pc, #36]	@ (8000764 <ListFiles+0xdc>)
 8000740:	f00d ffdc 	bl	800e6fc <puts>
	printf("dir search success\r\n");
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <ListFiles+0xe8>)
 8000746:	f00d ffd9 	bl	800e6fc <puts>

	// 关闭目录
	f_closedir(&dir);
 800074a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800074e:	4618      	mov	r0, r3
 8000750:	f009 ff97 	bl	800a682 <f_closedir>
}
 8000754:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	0800f548 	.word	0x0800f548
 8000760:	0800f564 	.word	0x0800f564
 8000764:	0800f57c 	.word	0x0800f57c
 8000768:	0800f5a8 	.word	0x0800f5a8
 800076c:	0800f5b8 	.word	0x0800f5b8
 8000770:	0800f5dc 	.word	0x0800f5dc

08000774 <SDCard_ShowInfo>:

void SDCard_ShowInfo(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
	// SD卡信息结构体变量
	HAL_SD_CardInfoTypeDef cardInfo;
	HAL_StatusTypeDef res = HAL_SD_GetCardInfo(&hsd, &cardInfo);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4821      	ldr	r0, [pc, #132]	@ (8000804 <SDCard_ShowInfo+0x90>)
 8000780:	f003 feb4 	bl	80044ec <HAL_SD_GetCardInfo>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res != HAL_OK) {
 800078a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <SDCard_ShowInfo+0x26>
		printf("HAL_SD_GetCardInfo() error\r\n");
 8000792:	481d      	ldr	r0, [pc, #116]	@ (8000808 <SDCard_ShowInfo+0x94>)
 8000794:	f00d ffb2 	bl	800e6fc <puts>
 8000798:	e030      	b.n	80007fc <SDCard_ShowInfo+0x88>
		return;
	}
	printf("\r\n*** HAL_SD_GetCardInfo() info ***\r\n");
 800079a:	481c      	ldr	r0, [pc, #112]	@ (800080c <SDCard_ShowInfo+0x98>)
 800079c:	f00d ffae 	bl	800e6fc <puts>
	printf("Card Type= %ld\r\n", cardInfo.CardType);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	@ (8000810 <SDCard_ShowInfo+0x9c>)
 80007a6:	f00d ff41 	bl	800e62c <iprintf>
	printf("Card Version= %ld\r\n", cardInfo.CardVersion);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4819      	ldr	r0, [pc, #100]	@ (8000814 <SDCard_ShowInfo+0xa0>)
 80007b0:	f00d ff3c 	bl	800e62c <iprintf>
	printf("Card Class= %ld\r\n", cardInfo.Class);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4817      	ldr	r0, [pc, #92]	@ (8000818 <SDCard_ShowInfo+0xa4>)
 80007ba:	f00d ff37 	bl	800e62c <iprintf>
	printf("Relative Card Address= %ld\r\n", cardInfo.RelCardAdd);
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4816      	ldr	r0, [pc, #88]	@ (800081c <SDCard_ShowInfo+0xa8>)
 80007c4:	f00d ff32 	bl	800e62c <iprintf>
	printf("Block Count= %ld\r\n", cardInfo.BlockNbr);
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	@ (8000820 <SDCard_ShowInfo+0xac>)
 80007ce:	f00d ff2d 	bl	800e62c <iprintf>
	printf("Block Size(Bytes)= %ld\r\n", cardInfo.BlockSize);
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <SDCard_ShowInfo+0xb0>)
 80007d8:	f00d ff28 	bl	800e62c <iprintf>
	printf("LogiBlockCount= %ld\r\n", cardInfo.LogBlockNbr);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	4619      	mov	r1, r3
 80007e0:	4811      	ldr	r0, [pc, #68]	@ (8000828 <SDCard_ShowInfo+0xb4>)
 80007e2:	f00d ff23 	bl	800e62c <iprintf>
	printf("LogiBlockSize(Bytes)= %ld\r\n", cardInfo.LogBlockSize);
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <SDCard_ShowInfo+0xb8>)
 80007ec:	f00d ff1e 	bl	800e62c <iprintf>
	printf("SD Card Capacity(MB)= %ld\r\n", cardInfo.BlockNbr >> 1 >> 10);
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	0adb      	lsrs	r3, r3, #11
 80007f4:	4619      	mov	r1, r3
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <SDCard_ShowInfo+0xbc>)
 80007f8:	f00d ff18 	bl	800e62c <iprintf>
}
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000013c 	.word	0x2000013c
 8000808:	0800f5f0 	.word	0x0800f5f0
 800080c:	0800f60c 	.word	0x0800f60c
 8000810:	0800f634 	.word	0x0800f634
 8000814:	0800f648 	.word	0x0800f648
 8000818:	0800f65c 	.word	0x0800f65c
 800081c:	0800f670 	.word	0x0800f670
 8000820:	0800f690 	.word	0x0800f690
 8000824:	0800f6a4 	.word	0x0800f6a4
 8000828:	0800f6c0 	.word	0x0800f6c0
 800082c:	0800f6d8 	.word	0x0800f6d8
 8000830:	0800f6f4 	.word	0x0800f6f4

08000834 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <MX_FREERTOS_Init+0x18>)
 800083a:	2100      	movs	r1, #0
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_FREERTOS_Init+0x1c>)
 800083e:	f00a fa18 	bl	800ac72 <osThreadNew>
 8000842:	4603      	mov	r3, r0
 8000844:	4a03      	ldr	r2, [pc, #12]	@ (8000854 <MX_FREERTOS_Init+0x20>)
 8000846:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0800f96c 	.word	0x0800f96c
 8000850:	08000859 	.word	0x08000859
 8000854:	20000090 	.word	0x20000090

08000858 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	initFileManager();
 8000860:	f7ff feda 	bl	8000618 <initFileManager>
	testRead();
 8000864:	f000 fd68 	bl	8001338 <testRead>
  for(;;)
  {
    osDelay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f00a fa94 	bl	800ad96 <osDelay>
 800086e:	e7fb      	b.n	8000868 <StartDefaultTask+0x10>

08000870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b2a      	ldr	r3, [pc, #168]	@ (8000934 <MX_GPIO_Init+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a29      	ldr	r2, [pc, #164]	@ (8000934 <MX_GPIO_Init+0xc4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_GPIO_Init+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a14      	ldr	r2, [pc, #80]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_GPIO_Init+0xc4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <MX_GPIO_Init+0xc4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_GPIO_Init+0xc4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD15 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8000912:	f248 0308 	movw	r3, #32776	@ 0x8008
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091c:	2301      	movs	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_GPIO_Init+0xc8>)
 8000928:	f001 fb0a 	bl	8001f40 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020c00 	.word	0x40020c00

0800093c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_I2S2_Init+0x54>)
 8000942:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <MX_I2S2_Init+0x58>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_I2S2_Init+0x54>)
 8000948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800094c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_I2S2_Init+0x54>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_I2S2_Init+0x54>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_I2S2_Init+0x54>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_I2S2_Init+0x54>)
 8000962:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000966:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_I2S2_Init+0x54>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_I2S2_Init+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_I2S2_Init+0x54>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_I2S2_Init+0x54>)
 800097c:	f001 fc94 	bl	80022a8 <HAL_I2S_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000986:	f000 f989 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000094 	.word	0x20000094
 8000994:	40003800 	.word	0x40003800

08000998 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	@ 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a4d      	ldr	r2, [pc, #308]	@ (8000af8 <HAL_I2S_MspInit+0x160>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	f040 8092 	bne.w	8000aee <HAL_I2S_MspInit+0x156>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009ce:	23c0      	movs	r3, #192	@ 0xc0
 80009d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fea0 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80009e6:	f000 f959 	bl	8000c9c <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b43      	ldr	r3, [pc, #268]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a42      	ldr	r2, [pc, #264]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b40      	ldr	r3, [pc, #256]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a34      	ldr	r2, [pc, #208]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b32      	ldr	r3, [pc, #200]	@ (8000afc <HAL_I2S_MspInit+0x164>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4829      	ldr	r0, [pc, #164]	@ (8000b00 <HAL_I2S_MspInit+0x168>)
 8000a5a:	f001 fa71 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a70:	2305      	movs	r3, #5
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4822      	ldr	r0, [pc, #136]	@ (8000b04 <HAL_I2S_MspInit+0x16c>)
 8000a7c:	f001 fa60 	bl	8001f40 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000a82:	4a22      	ldr	r2, [pc, #136]	@ (8000b0c <HAL_I2S_MspInit+0x174>)
 8000a84:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a86:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000a8e:	2240      	movs	r2, #64	@ 0x40
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aa6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000aaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aae:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ac2:	4811      	ldr	r0, [pc, #68]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000ac4:	f000 fe9e 	bl	8001804 <HAL_DMA_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_I2S_MspInit+0x13a>
    {
      Error_Handler();
 8000ace:	f000 f8e5 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000ad6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_I2S_MspInit+0x170>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	2024      	movs	r0, #36	@ 0x24
 8000ae4:	f000 fe64 	bl	80017b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ae8:	2024      	movs	r0, #36	@ 0x24
 8000aea:	f000 fe7d 	bl	80017e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	@ 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40003800 	.word	0x40003800
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020400 	.word	0x40020400
 8000b08:	200000dc 	.word	0x200000dc
 8000b0c:	40026070 	.word	0x40026070

08000b10 <__io_putchar>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// WAV文件头部结构


int __io_putchar(int ch) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFFFFFF);
 8000b18:	1d39      	adds	r1, r7, #4
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <__io_putchar+0x20>)
 8000b22:	f004 fd5d 	bl	80055e0 <HAL_UART_Transmit>
	return ch;
 8000b26:	687b      	ldr	r3, [r7, #4]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200002cc 	.word	0x200002cc

08000b34 <__io_getchar>:

int __io_getchar(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	char rxChar;
	while (HAL_UART_Receive(&huart1, (uint8_t*) &rxChar, 1, 0xFFFFFFFF)
 8000b3a:	bf00      	nop
 8000b3c:	1df9      	adds	r1, r7, #7
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	2201      	movs	r2, #1
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <__io_getchar+0x28>)
 8000b46:	f004 fdd6 	bl	80056f6 <HAL_UART_Receive>
 8000b4a:	4603      	mov	r3, r0
			== HAL_TIMEOUT)
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d0f5      	beq.n	8000b3c <__io_getchar+0x8>
		;
	return rxChar;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002cc 	.word	0x200002cc

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f000 fd06 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f81c 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f7ff fe80 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b70:	f7ff fd14 	bl	800059c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000b74:	f000 f898 	bl	8000ca8 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000b78:	f000 fb62 	bl	8001240 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000b7c:	f005 fef6 	bl	800696c <MX_FATFS_Init>
  MX_I2S2_Init();
 8000b80:	f7ff fedc 	bl	800093c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
	printf("system init success，read play WAV file...\r\n");
 8000b84:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <main+0x40>)
 8000b86:	f00d fdb9 	bl	800e6fc <puts>
//		printf("cant play WAV file \r\n");
//	}
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b8a:	f009 fff1 	bl	800ab70 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b8e:	f7ff fe51 	bl	8000834 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b92:	f00a f833 	bl	800abfc <osKernelStart>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// 可以在这里添加其他处理逻辑
		HAL_Delay(1000);
 8000b96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b9a:	f000 fd2d 	bl	80015f8 <HAL_Delay>
 8000b9e:	e7fa      	b.n	8000b96 <main+0x36>
 8000ba0:	0800f7dc 	.word	0x0800f7dc

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	@ 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2230      	movs	r2, #48	@ 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00d fe92 	bl	800e8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <SystemClock_Config+0xcc>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	4a27      	ldr	r2, [pc, #156]	@ (8000c70 <SystemClock_Config+0xcc>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <SystemClock_Config+0xcc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <SystemClock_Config+0xd0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a21      	ldr	r2, [pc, #132]	@ (8000c74 <SystemClock_Config+0xd0>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <SystemClock_Config+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c18:	23a8      	movs	r3, #168	@ 0xa8
 8000c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c20:	2307      	movs	r3, #7
 8000c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 f8ef 	bl	8002e0c <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c34:	f000 f832 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c44:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2105      	movs	r1, #5
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fb50 	bl	80032fc <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c62:	f000 f81b 	bl	8000c9c <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	@ 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c8a:	f000 fc95 	bl	80015b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40001000 	.word	0x40001000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cae:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <MX_SDIO_SD_Init+0x44>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cca:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	@ (8000ce8 <MX_SDIO_SD_Init+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	2000013c 	.word	0x2000013c
 8000cec:	40012c00 	.word	0x40012c00

08000cf0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a69      	ldr	r2, [pc, #420]	@ (8000eb4 <HAL_SD_MspInit+0x1c4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	f040 80cb 	bne.w	8000eaa <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b67      	ldr	r3, [pc, #412]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1c:	4a66      	ldr	r2, [pc, #408]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d24:	4b64      	ldr	r3, [pc, #400]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b60      	ldr	r3, [pc, #384]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a5f      	ldr	r2, [pc, #380]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b5d      	ldr	r3, [pc, #372]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	4b59      	ldr	r3, [pc, #356]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	4a58      	ldr	r2, [pc, #352]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5c:	4b56      	ldr	r3, [pc, #344]	@ (8000eb8 <HAL_SD_MspInit+0x1c8>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d68:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000d6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	484d      	ldr	r0, [pc, #308]	@ (8000ebc <HAL_SD_MspInit+0x1cc>)
 8000d86:	f001 f8db 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4846      	ldr	r0, [pc, #280]	@ (8000ec0 <HAL_SD_MspInit+0x1d0>)
 8000da6:	f001 f8cb 	bl	8001f40 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000daa:	4b46      	ldr	r3, [pc, #280]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dac:	4a46      	ldr	r2, [pc, #280]	@ (8000ec8 <HAL_SD_MspInit+0x1d8>)
 8000dae:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000db0:	4b44      	ldr	r3, [pc, #272]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000db2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000db6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db8:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbe:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dca:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dda:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ddc:	4b39      	ldr	r3, [pc, #228]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dde:	2220      	movs	r2, #32
 8000de0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000de2:	4b38      	ldr	r3, [pc, #224]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000de4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000de8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dea:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000df0:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000df6:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000df8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000e00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e04:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000e06:	482f      	ldr	r0, [pc, #188]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000e08:	f000 fcfc 	bl	8001804 <HAL_DMA_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8000e12:	f7ff ff43 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a2a      	ldr	r2, [pc, #168]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000e1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e1c:	4a29      	ldr	r2, [pc, #164]	@ (8000ec4 <HAL_SD_MspInit+0x1d4>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e24:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed0 <HAL_SD_MspInit+0x1e0>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000e28:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e2e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e32:	2240      	movs	r2, #64	@ 0x40
 8000e34:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e36:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e42:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e44:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e4a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e52:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e56:	2220      	movs	r2, #32
 8000e58:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e60:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e64:	2204      	movs	r2, #4
 8000e66:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e78:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e7e:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e80:	f000 fcc0 	bl	8001804 <HAL_DMA_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8000e8a:	f7ff ff07 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a0e      	ldr	r2, [pc, #56]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <HAL_SD_MspInit+0x1dc>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 6, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2106      	movs	r1, #6
 8000e9e:	2031      	movs	r0, #49	@ 0x31
 8000ea0:	f000 fc86 	bl	80017b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ea4:	2031      	movs	r0, #49	@ 0x31
 8000ea6:	f000 fc9f 	bl	80017e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40012c00 	.word	0x40012c00
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	200001c0 	.word	0x200001c0
 8000ec8:	40026458 	.word	0x40026458
 8000ecc:	20000220 	.word	0x20000220
 8000ed0:	400264a0 	.word	0x400264a0

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_MspInit+0x54>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <HAL_MspInit+0x54>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_MspInit+0x54>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <HAL_MspInit+0x54>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <HAL_MspInit+0x54>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_MspInit+0x54>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	210f      	movs	r1, #15
 8000f16:	f06f 0001 	mvn.w	r0, #1
 8000f1a:	f000 fc49 	bl	80017b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	@ 0x38
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <HAL_InitTick+0xe4>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a32      	ldr	r2, [pc, #200]	@ (8001010 <HAL_InitTick+0xe4>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <HAL_InitTick+0xe4>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fbaa 	bl	80036bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d103      	bne.n	8000f7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f72:	f002 fb7b 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8000f76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f78:	e004      	b.n	8000f84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f7a:	f002 fb77 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f86:	4a23      	ldr	r2, [pc, #140]	@ (8001014 <HAL_InitTick+0xe8>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0c9b      	lsrs	r3, r3, #18
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <HAL_InitTick+0xec>)
 8000f94:	4a21      	ldr	r2, [pc, #132]	@ (800101c <HAL_InitTick+0xf0>)
 8000f96:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <HAL_InitTick+0xec>)
 8000f9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <HAL_InitTick+0xec>)
 8000fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <HAL_InitTick+0xec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_InitTick+0xec>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <HAL_InitTick+0xec>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fb8:	4817      	ldr	r0, [pc, #92]	@ (8001018 <HAL_InitTick+0xec>)
 8000fba:	f004 f825 	bl	8005008 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d11b      	bne.n	8001004 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fcc:	4812      	ldr	r0, [pc, #72]	@ (8001018 <HAL_InitTick+0xec>)
 8000fce:	f004 f875 	bl	80050bc <HAL_TIM_Base_Start_IT>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d111      	bne.n	8001004 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fe0:	2036      	movs	r0, #54	@ 0x36
 8000fe2:	f000 fc01 	bl	80017e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d808      	bhi.n	8000ffe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	2036      	movs	r0, #54	@ 0x36
 8000ff2:	f000 fbdd 	bl	80017b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <HAL_InitTick+0xf4>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e002      	b.n	8001004 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001004:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001008:	4618      	mov	r0, r3
 800100a:	3738      	adds	r7, #56	@ 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	431bde83 	.word	0x431bde83
 8001018:	20000280 	.word	0x20000280
 800101c:	40001000 	.word	0x40001000
 8001020:	2000000c 	.word	0x2000000c

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <MemManage_Handler+0x4>

0800103c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <UsageFault_Handler+0x4>

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA1_Stream4_IRQHandler+0x10>)
 8001062:	f000 fcf7 	bl	8001a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000dc 	.word	0x200000dc

08001070 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <SPI2_IRQHandler+0x10>)
 8001076:	f001 fafb 	bl	8002670 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000094 	.word	0x20000094

08001084 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <SDIO_IRQHandler+0x10>)
 800108a:	f002 fefb 	bl	8003e84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000013c 	.word	0x2000013c

08001098 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <TIM6_DAC_IRQHandler+0x10>)
 800109e:	f004 f87d 	bl	800519c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000280 	.word	0x20000280

080010ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <DMA2_Stream3_IRQHandler+0x10>)
 80010b2:	f000 fccf 	bl	8001a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001c0 	.word	0x200001c0

080010c0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <DMA2_Stream6_IRQHandler+0x10>)
 80010c6:	f000 fcc5 	bl	8001a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000220 	.word	0x20000220

080010d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e00a      	b.n	80010fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010e6:	f7ff fd25 	bl	8000b34 <__io_getchar>
 80010ea:	4601      	mov	r1, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	b2ca      	uxtb	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf0      	blt.n	80010e6 <_read+0x12>
  }

  return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e009      	b.n	8001134 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fcf1 	bl	8000b10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbf1      	blt.n	8001120 <_write+0x12>
  }
  return len;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_close>:

int _close(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800116e:	605a      	str	r2, [r3, #4]
  return 0;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_isatty>:

int _isatty(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	@ (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f00d fc28 	bl	800ea34 <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20020000 	.word	0x20020000
 8001210:	00006000 	.word	0x00006000
 8001214:	200002c8 	.word	0x200002c8
 8001218:	20005b20 	.word	0x20005b20

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <MX_USART1_UART_Init+0x50>)
 8001248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001278:	f004 f962 	bl	8005540 <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001282:	f7ff fd0b 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002cc 	.word	0x200002cc
 8001290:	40011000 	.word	0x40011000

08001294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a19      	ldr	r2, [pc, #100]	@ (8001318 <HAL_UART_MspInit+0x84>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12c      	bne.n	8001310 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a17      	ldr	r2, [pc, #92]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a10      	ldr	r2, [pc, #64]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001300:	2307      	movs	r3, #7
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_UART_MspInit+0x8c>)
 800130c:	f000 fe18 	bl	8001f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40011000 	.word	0x40011000
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <HAL_I2S_TxCpltCallback>:
#include "wavPlayer.h"




void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	//printf("HAL_I2S_TxCpltCallback\r\n");

	// res = f_read(&file, buffer, BUFFER_SIZE, &bytesRead);

	 //HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)buffer, bytesRead / sample_bytes);
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <testRead>:


void testRead() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0


	    // 1. 打开文件
	    res = f_open(&file, filename, FA_READ);
 800133e:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <testRead+0x19c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	4864      	ldr	r0, [pc, #400]	@ (80014d8 <testRead+0x1a0>)
 8001348:	f008 f9a2 	bl	8009690 <f_open>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b62      	ldr	r3, [pc, #392]	@ (80014dc <testRead+0x1a4>)
 8001352:	701a      	strb	r2, [r3, #0]
	    if (res != FR_OK) {
 8001354:	4b61      	ldr	r3, [pc, #388]	@ (80014dc <testRead+0x1a4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <testRead+0x36>
	        printf("open %s failed error code: %d\r\n", filename, res);
 800135c:	4b5d      	ldr	r3, [pc, #372]	@ (80014d4 <testRead+0x19c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <testRead+0x1a4>)
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	485e      	ldr	r0, [pc, #376]	@ (80014e0 <testRead+0x1a8>)
 8001368:	f00d f960 	bl	800e62c <iprintf>
	        return;
 800136c:	e0af      	b.n	80014ce <testRead+0x196>
	    }
	    printf("sizeof wavHead:%d\r\n",sizeof(wavHeader));
 800136e:	2124      	movs	r1, #36	@ 0x24
 8001370:	485c      	ldr	r0, [pc, #368]	@ (80014e4 <testRead+0x1ac>)
 8001372:	f00d f95b 	bl	800e62c <iprintf>
	    // 2. 解析WAV头部（关键：获取采样位数）
	    res = f_read(&file, &wavHeader, sizeof(WavHeader), &bytesRead);
 8001376:	4b5c      	ldr	r3, [pc, #368]	@ (80014e8 <testRead+0x1b0>)
 8001378:	2224      	movs	r2, #36	@ 0x24
 800137a:	495c      	ldr	r1, [pc, #368]	@ (80014ec <testRead+0x1b4>)
 800137c:	4856      	ldr	r0, [pc, #344]	@ (80014d8 <testRead+0x1a0>)
 800137e:	f008 fc42 	bl	8009c06 <f_read>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b55      	ldr	r3, [pc, #340]	@ (80014dc <testRead+0x1a4>)
 8001388:	701a      	strb	r2, [r3, #0]
	    if (res != FR_OK || bytesRead != sizeof(WavHeader)) {
 800138a:	4b54      	ldr	r3, [pc, #336]	@ (80014dc <testRead+0x1a4>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <testRead+0x62>
 8001392:	4b55      	ldr	r3, [pc, #340]	@ (80014e8 <testRead+0x1b0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b24      	cmp	r3, #36	@ 0x24
 8001398:	d009      	beq.n	80013ae <testRead+0x76>
	        printf("read WAV header failed! code: %d\r\n", res);
 800139a:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <testRead+0x1a4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	4853      	ldr	r0, [pc, #332]	@ (80014f0 <testRead+0x1b8>)
 80013a2:	f00d f943 	bl	800e62c <iprintf>
	        f_close(&file); // 修复：用f_close关闭文件
 80013a6:	484c      	ldr	r0, [pc, #304]	@ (80014d8 <testRead+0x1a0>)
 80013a8:	f008 fe24 	bl	8009ff4 <f_close>
	        return;
 80013ac:	e08f      	b.n	80014ce <testRead+0x196>
	    }
	    // 验证PCM格式
	    if (memcmp(wavHeader.riff, "RIFF", 4) != 0 || memcmp(wavHeader.wave, "WAVE", 4) != 0 || wavHeader.audio_format != 1) {
 80013ae:	2204      	movs	r2, #4
 80013b0:	4950      	ldr	r1, [pc, #320]	@ (80014f4 <testRead+0x1bc>)
 80013b2:	484e      	ldr	r0, [pc, #312]	@ (80014ec <testRead+0x1b4>)
 80013b4:	f00d fa82 	bl	800e8bc <memcmp>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10b      	bne.n	80013d6 <testRead+0x9e>
 80013be:	2204      	movs	r2, #4
 80013c0:	494d      	ldr	r1, [pc, #308]	@ (80014f8 <testRead+0x1c0>)
 80013c2:	484e      	ldr	r0, [pc, #312]	@ (80014fc <testRead+0x1c4>)
 80013c4:	f00d fa7a 	bl	800e8bc <memcmp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <testRead+0x9e>
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <testRead+0x1b4>)
 80013d0:	8a9b      	ldrh	r3, [r3, #20]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d006      	beq.n	80013e4 <testRead+0xac>
	        printf("not PCM WAV file!\r\n");
 80013d6:	484a      	ldr	r0, [pc, #296]	@ (8001500 <testRead+0x1c8>)
 80013d8:	f00d f990 	bl	800e6fc <puts>
	        f_close(&file);
 80013dc:	483e      	ldr	r0, [pc, #248]	@ (80014d8 <testRead+0x1a0>)
 80013de:	f008 fe09 	bl	8009ff4 <f_close>
	        return;
 80013e2:	e074      	b.n	80014ce <testRead+0x196>
	    }
	    // 更新每个采样的字节数（修复传输长度计算依据）
	    sample_bytes = wavHeader.bits_per_sample / 8;
 80013e4:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <testRead+0x1b4>)
 80013e6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b45      	ldr	r3, [pc, #276]	@ (8001504 <testRead+0x1cc>)
 80013f0:	701a      	strb	r2, [r3, #0]
	    printf("WAV info: sample rate=%d, bits=%d, sample bytes=%d\r\n",
 80013f2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ec <testRead+0x1b4>)
 80013f4:	6999      	ldr	r1, [r3, #24]
	           wavHeader.sample_rate, wavHeader.bits_per_sample, sample_bytes);
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <testRead+0x1b4>)
 80013f8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
	    printf("WAV info: sample rate=%d, bits=%d, sample bytes=%d\r\n",
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <testRead+0x1cc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4841      	ldr	r0, [pc, #260]	@ (8001508 <testRead+0x1d0>)
 8001402:	f00d f913 	bl	800e62c <iprintf>

	    // 3. 查找WAV数据块（跳过头部扩展信息，关键：避免读取无效数据）
	    uint8_t chunk_id[4];
	    uint32_t chunk_size;
	    while (1) {
	        res = f_read(&file, chunk_id, 4, &bytesRead);
 8001406:	1d39      	adds	r1, r7, #4
 8001408:	4b37      	ldr	r3, [pc, #220]	@ (80014e8 <testRead+0x1b0>)
 800140a:	2204      	movs	r2, #4
 800140c:	4832      	ldr	r0, [pc, #200]	@ (80014d8 <testRead+0x1a0>)
 800140e:	f008 fbfa 	bl	8009c06 <f_read>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <testRead+0x1a4>)
 8001418:	701a      	strb	r2, [r3, #0]
	        if (res != FR_OK || bytesRead != 4) break;
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <testRead+0x1a4>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d137      	bne.n	8001492 <testRead+0x15a>
 8001422:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <testRead+0x1b0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	d133      	bne.n	8001492 <testRead+0x15a>
	        res = f_read(&file, &chunk_size, 4, &bytesRead);
 800142a:	4639      	mov	r1, r7
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <testRead+0x1b0>)
 800142e:	2204      	movs	r2, #4
 8001430:	4829      	ldr	r0, [pc, #164]	@ (80014d8 <testRead+0x1a0>)
 8001432:	f008 fbe8 	bl	8009c06 <f_read>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <testRead+0x1a4>)
 800143c:	701a      	strb	r2, [r3, #0]
	        if (res != FR_OK || bytesRead != 4) break;
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <testRead+0x1a4>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d125      	bne.n	8001492 <testRead+0x15a>
 8001446:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <testRead+0x1b0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b04      	cmp	r3, #4
 800144c:	d121      	bne.n	8001492 <testRead+0x15a>
	        // 找到data块，跳出循环（后续读取的就是音频数据）
	        if (memcmp(chunk_id, "data", 4) == 0) {
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2204      	movs	r2, #4
 8001452:	492e      	ldr	r1, [pc, #184]	@ (800150c <testRead+0x1d4>)
 8001454:	4618      	mov	r0, r3
 8001456:	f00d fa31 	bl	800e8bc <memcmp>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <testRead+0x136>
	            printf("find data block, size=%ld bytes\r\n", chunk_size);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	482a      	ldr	r0, [pc, #168]	@ (8001510 <testRead+0x1d8>)
 8001466:	f00d f8e1 	bl	800e62c <iprintf>
	            break;
 800146a:	bf00      	nop
 800146c:	e011      	b.n	8001492 <testRead+0x15a>
	        }
	        // 跳过非data块（如LIST块）
	        printf("data block index:%d\r\n",( f_tell(&file) + chunk_size));
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <testRead+0x1a0>)
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	4413      	add	r3, r2
 8001476:	4619      	mov	r1, r3
 8001478:	4826      	ldr	r0, [pc, #152]	@ (8001514 <testRead+0x1dc>)
 800147a:	f00d f8d7 	bl	800e62c <iprintf>
	        f_lseek(&file, f_tell(&file) + chunk_size);
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <testRead+0x1a0>)
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4413      	add	r3, r2
 8001486:	4619      	mov	r1, r3
 8001488:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <testRead+0x1a0>)
 800148a:	f008 fde2 	bl	800a052 <f_lseek>
	        res = f_read(&file, chunk_id, 4, &bytesRead);
 800148e:	e7ba      	b.n	8001406 <testRead+0xce>
	        // 等待I2S空闲（避免DMA冲突）
//	        while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
//	            continue;
//	        }
	    	  while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
	    		            continue;
 8001490:	bf00      	nop
	    	  while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
 8001492:	4821      	ldr	r0, [pc, #132]	@ (8001518 <testRead+0x1e0>)
 8001494:	f001 f916 	bl	80026c4 <HAL_I2S_GetState>
 8001498:	4603      	mov	r3, r0
 800149a:	2b03      	cmp	r3, #3
 800149c:	d0f8      	beq.n	8001490 <testRead+0x158>
	    		        }

	        // 读取数据（用实际需要的字节数，而非固定BUFFER_SIZE）
	        res = f_read(&file, buffer, BUFFER_SIZE, &bytesRead);
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <testRead+0x1b0>)
 80014a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014a4:	491d      	ldr	r1, [pc, #116]	@ (800151c <testRead+0x1e4>)
 80014a6:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <testRead+0x1a0>)
 80014a8:	f008 fbad 	bl	8009c06 <f_read>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <testRead+0x1a4>)
 80014b2:	701a      	strb	r2, [r3, #0]
	        //totalRead += bytesRead;
	        //printf("read %d bytes, total=%ld\r\n", bytesRead, totalRead);

	        // 启动I2S DMA播放（修复：按采样位数计算传输个数）

	        HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)buffer, bytesRead / sample_bytes);
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <testRead+0x1b0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <testRead+0x1cc>)
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4915      	ldr	r1, [pc, #84]	@ (800151c <testRead+0x1e4>)
 80014c6:	4814      	ldr	r0, [pc, #80]	@ (8001518 <testRead+0x1e0>)
 80014c8:	f001 f82e 	bl	8002528 <HAL_I2S_Transmit_DMA>
	    	  while (HAL_I2S_GetState(&hi2s2) == HAL_I2S_STATE_BUSY_TX) {
 80014cc:	e7e1      	b.n	8001492 <testRead+0x15a>
	    }

	    // 5. 关闭文件（修复：用f_close）
	    f_close(&file);

}
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000318 	.word	0x20000318
 80014dc:	20000314 	.word	0x20000314
 80014e0:	0800f814 	.word	0x0800f814
 80014e4:	0800f834 	.word	0x0800f834
 80014e8:	20000548 	.word	0x20000548
 80014ec:	20000d4c 	.word	0x20000d4c
 80014f0:	0800f848 	.word	0x0800f848
 80014f4:	0800f86c 	.word	0x0800f86c
 80014f8:	0800f874 	.word	0x0800f874
 80014fc:	20000d54 	.word	0x20000d54
 8001500:	0800f87c 	.word	0x0800f87c
 8001504:	20000008 	.word	0x20000008
 8001508:	0800f890 	.word	0x0800f890
 800150c:	0800f8c8 	.word	0x0800f8c8
 8001510:	0800f8d0 	.word	0x0800f8d0
 8001514:	0800f8f4 	.word	0x0800f8f4
 8001518:	20000094 	.word	0x20000094
 800151c:	2000054c 	.word	0x2000054c

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001558 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001524:	f7ff fe7a 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	@ (8001560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	@ (800156c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154e:	f00d fa77 	bl	800ea40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff fb05 	bl	8000b60 <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001564:	0803a5d0 	.word	0x0803a5d0
  ldr r2, =_sbss
 8001568:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800156c:	20005b20 	.word	0x20005b20

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001584:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800158e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f8fc 	bl	800179a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f7ff fcc2 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fc94 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_IncTick+0x20>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_IncTick+0x24>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <HAL_IncTick+0x24>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000010 	.word	0x20000010
 80015dc:	20000d70 	.word	0x20000d70

080015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <HAL_GetTick+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000d70 	.word	0x20000d70

080015f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff ffee 	bl	80015e0 <HAL_GetTick>
 8001604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d005      	beq.n	800161e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_Delay+0x44>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161e:	bf00      	nop
 8001620:	f7ff ffde 	bl	80015e0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8f7      	bhi.n	8001620 <HAL_Delay+0x28>
  {
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000010 	.word	0x20000010

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4907      	ldr	r1, [pc, #28]	@ (80016dc <__NVIC_EnableIRQ+0x38>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	@ (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	@ (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	@ 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	@ 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff4c 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c2:	f7ff ff61 	bl	8001688 <__NVIC_GetPriorityGrouping>
 80017c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	6978      	ldr	r0, [r7, #20]
 80017ce:	f7ff ffb1 	bl	8001734 <NVIC_EncodePriority>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff80 	bl	80016e0 <__NVIC_SetPriority>
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff54 	bl	80016a4 <__NVIC_EnableIRQ>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff fee6 	bl	80015e0 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e099      	b.n	8001954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001840:	e00f      	b.n	8001862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001842:	f7ff fecd 	bl	80015e0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b05      	cmp	r3, #5
 800184e:	d908      	bls.n	8001862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2220      	movs	r2, #32
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e078      	b.n	8001954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1e8      	bne.n	8001842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4b38      	ldr	r3, [pc, #224]	@ (800195c <HAL_DMA_Init+0x158>)
 800187c:	4013      	ands	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800188e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d107      	bne.n	80018cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	4313      	orrs	r3, r2
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f023 0307 	bic.w	r3, r3, #7
 80018e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d117      	bne.n	8001926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00e      	beq.n	8001926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fa9d 	bl	8001e48 <DMA_CheckFifoParam>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2240      	movs	r2, #64	@ 0x40
 8001918:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001922:	2301      	movs	r3, #1
 8001924:	e016      	b.n	8001954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa54 	bl	8001ddc <DMA_CalcBaseAndBitshift>
 8001934:	4603      	mov	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193c:	223f      	movs	r2, #63	@ 0x3f
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	f010803f 	.word	0xf010803f

08001960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_DMA_Start_IT+0x26>
 8001982:	2302      	movs	r3, #2
 8001984:	e040      	b.n	8001a08 <HAL_DMA_Start_IT+0xa8>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d12f      	bne.n	80019fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f9e6 	bl	8001d80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b8:	223f      	movs	r2, #63	@ 0x3f
 80019ba:	409a      	lsls	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0216 	orr.w	r2, r2, #22
 80019ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d007      	beq.n	80019e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0208 	orr.w	r2, r2, #8
 80019e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e005      	b.n	8001a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a02:	2302      	movs	r3, #2
 8001a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d004      	beq.n	8001a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2280      	movs	r2, #128	@ 0x80
 8001a28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00c      	b.n	8001a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2205      	movs	r2, #5
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a60:	4b8e      	ldr	r3, [pc, #568]	@ (8001c9c <HAL_DMA_IRQHandler+0x248>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a8e      	ldr	r2, [pc, #568]	@ (8001ca0 <HAL_DMA_IRQHandler+0x24c>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0a9b      	lsrs	r3, r3, #10
 8001a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7e:	2208      	movs	r2, #8
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01a      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0204 	bic.w	r2, r2, #4
 8001aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aac:	2208      	movs	r2, #8
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d012      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aee:	f043 0202 	orr.w	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	2204      	movs	r2, #4
 8001afc:	409a      	lsls	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d012      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b18:	2204      	movs	r2, #4
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	f043 0204 	orr.w	r2, r3, #4
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b30:	2210      	movs	r2, #16
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d043      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d03c      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4e:	2210      	movs	r2, #16
 8001b50:	409a      	lsls	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d018      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d108      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d024      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
 8001b82:	e01f      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
 8001b94:	e016      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d107      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0208 	bic.w	r2, r2, #8
 8001bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc8:	2220      	movs	r2, #32
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 808f 	beq.w	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8087 	beq.w	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bea:	2220      	movs	r2, #32
 8001bec:	409a      	lsls	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d136      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0216 	bic.w	r2, r2, #22
 8001c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <HAL_DMA_IRQHandler+0x1da>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0208 	bic.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	223f      	movs	r2, #63	@ 0x3f
 8001c44:	409a      	lsls	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d07e      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
        }
        return;
 8001c6a:	e079      	b.n	8001d60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01d      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d031      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e02c      	b.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d023      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
 8001cb4:	e01e      	b.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0210 	bic.w	r2, r2, #16
 8001cd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d032      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d022      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2205      	movs	r2, #5
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d307      	bcc.n	8001d3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f2      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x2cc>
 8001d3a:	e000      	b.n	8001d3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
 8001d5e:	e000      	b.n	8001d62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d60:	bf00      	nop
    }
  }
}
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b40      	cmp	r3, #64	@ 0x40
 8001dac:	d108      	bne.n	8001dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dbe:	e007      	b.n	8001dd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	60da      	str	r2, [r3, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3b10      	subs	r3, #16
 8001dec:	4a14      	ldr	r2, [pc, #80]	@ (8001e40 <DMA_CalcBaseAndBitshift+0x64>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001df6:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <DMA_CalcBaseAndBitshift+0x68>)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d909      	bls.n	8001e1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	1d1a      	adds	r2, r3, #4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e1c:	e007      	b.n	8001e2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	aaaaaaab 	.word	0xaaaaaaab
 8001e44:	0800f9a8 	.word	0x0800f9a8

08001e48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d11f      	bne.n	8001ea2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d856      	bhi.n	8001f16 <DMA_CheckFifoParam+0xce>
 8001e68:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <DMA_CheckFifoParam+0x28>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e93 	.word	0x08001e93
 8001e78:	08001e81 	.word	0x08001e81
 8001e7c:	08001f17 	.word	0x08001f17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d046      	beq.n	8001f1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e90:	e043      	b.n	8001f1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e9a:	d140      	bne.n	8001f1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea0:	e03d      	b.n	8001f1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eaa:	d121      	bne.n	8001ef0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d837      	bhi.n	8001f22 <DMA_CheckFifoParam+0xda>
 8001eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb8 <DMA_CheckFifoParam+0x70>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ecf 	.word	0x08001ecf
 8001ec0:	08001ec9 	.word	0x08001ec9
 8001ec4:	08001ee1 	.word	0x08001ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ecc:	e030      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d025      	beq.n	8001f26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ede:	e022      	b.n	8001f26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ee8:	d11f      	bne.n	8001f2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eee:	e01c      	b.n	8001f2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d903      	bls.n	8001efe <DMA_CheckFifoParam+0xb6>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d003      	beq.n	8001f04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001efc:	e018      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
      break;
 8001f02:	e015      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
      break;
 8001f14:	e00b      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      break;
 8001f16:	bf00      	nop
 8001f18:	e00a      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e008      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e006      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      break;
 8001f22:	bf00      	nop
 8001f24:	e004      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      break;
 8001f26:	bf00      	nop
 8001f28:	e002      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f2a:	bf00      	nop
 8001f2c:	e000      	b.n	8001f30 <DMA_CheckFifoParam+0xe8>
      break;
 8001f2e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e16b      	b.n	8002234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f040 815a 	bne.w	800222e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d005      	beq.n	8001f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d130      	bne.n	8001ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 0201 	and.w	r2, r3, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d017      	beq.n	8002030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d123      	bne.n	8002084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	69b9      	ldr	r1, [r7, #24]
 8002080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80b4 	beq.w	800222e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b60      	ldr	r3, [pc, #384]	@ (800224c <HAL_GPIO_Init+0x30c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	4a5f      	ldr	r2, [pc, #380]	@ (800224c <HAL_GPIO_Init+0x30c>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d6:	4b5d      	ldr	r3, [pc, #372]	@ (800224c <HAL_GPIO_Init+0x30c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002250 <HAL_GPIO_Init+0x310>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a52      	ldr	r2, [pc, #328]	@ (8002254 <HAL_GPIO_Init+0x314>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02b      	beq.n	8002166 <HAL_GPIO_Init+0x226>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a51      	ldr	r2, [pc, #324]	@ (8002258 <HAL_GPIO_Init+0x318>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d025      	beq.n	8002162 <HAL_GPIO_Init+0x222>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a50      	ldr	r2, [pc, #320]	@ (800225c <HAL_GPIO_Init+0x31c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01f      	beq.n	800215e <HAL_GPIO_Init+0x21e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4f      	ldr	r2, [pc, #316]	@ (8002260 <HAL_GPIO_Init+0x320>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x21a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4e      	ldr	r2, [pc, #312]	@ (8002264 <HAL_GPIO_Init+0x324>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x216>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4d      	ldr	r2, [pc, #308]	@ (8002268 <HAL_GPIO_Init+0x328>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x212>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4c      	ldr	r2, [pc, #304]	@ (800226c <HAL_GPIO_Init+0x32c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x20e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4b      	ldr	r2, [pc, #300]	@ (8002270 <HAL_GPIO_Init+0x330>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x20a>
 8002146:	2307      	movs	r3, #7
 8002148:	e00e      	b.n	8002168 <HAL_GPIO_Init+0x228>
 800214a:	2308      	movs	r3, #8
 800214c:	e00c      	b.n	8002168 <HAL_GPIO_Init+0x228>
 800214e:	2306      	movs	r3, #6
 8002150:	e00a      	b.n	8002168 <HAL_GPIO_Init+0x228>
 8002152:	2305      	movs	r3, #5
 8002154:	e008      	b.n	8002168 <HAL_GPIO_Init+0x228>
 8002156:	2304      	movs	r3, #4
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x228>
 800215a:	2303      	movs	r3, #3
 800215c:	e004      	b.n	8002168 <HAL_GPIO_Init+0x228>
 800215e:	2302      	movs	r3, #2
 8002160:	e002      	b.n	8002168 <HAL_GPIO_Init+0x228>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x228>
 8002166:	2300      	movs	r3, #0
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f002 0203 	and.w	r2, r2, #3
 800216e:	0092      	lsls	r2, r2, #2
 8002170:	4093      	lsls	r3, r2
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002178:	4935      	ldr	r1, [pc, #212]	@ (8002250 <HAL_GPIO_Init+0x310>)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002186:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <HAL_GPIO_Init+0x334>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021aa:	4a32      	ldr	r2, [pc, #200]	@ (8002274 <HAL_GPIO_Init+0x334>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_GPIO_Init+0x334>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d4:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <HAL_GPIO_Init+0x334>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021da:	4b26      	ldr	r3, [pc, #152]	@ (8002274 <HAL_GPIO_Init+0x334>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002274 <HAL_GPIO_Init+0x334>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <HAL_GPIO_Init+0x334>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002228:	4a12      	ldr	r2, [pc, #72]	@ (8002274 <HAL_GPIO_Init+0x334>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3301      	adds	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2b0f      	cmp	r3, #15
 8002238:	f67f ae90 	bls.w	8001f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	@ 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40021400 	.word	0x40021400
 800226c:	40021800 	.word	0x40021800
 8002270:	40021c00 	.word	0x40021c00
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e001      	b.n	800229a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e128      	b.n	800250c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a90      	ldr	r2, [pc, #576]	@ (8002514 <HAL_I2S_Init+0x26c>)
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe fb5f 	bl	8000998 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80022f0:	f023 030f 	bic.w	r3, r3, #15
 80022f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d060      	beq.n	80023c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800230e:	2310      	movs	r3, #16
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e001      	b.n	8002318 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002314:	2320      	movs	r3, #32
 8002316:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b20      	cmp	r3, #32
 800231e:	d802      	bhi.n	8002326 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002326:	2001      	movs	r0, #1
 8002328:	f001 fadc 	bl	80038e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800232c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002336:	d125      	bne.n	8002384 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	fbb2 f2f3 	udiv	r2, r2, r3
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	3305      	adds	r3, #5
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e01f      	b.n	80023a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	fbb2 f2f3 	udiv	r2, r2, r3
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	461a      	mov	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	3305      	adds	r3, #5
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e00e      	b.n	80023a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fbb2 f2f3 	udiv	r2, r2, r3
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	461a      	mov	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	3305      	adds	r3, #5
 80023a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4a5c      	ldr	r2, [pc, #368]	@ (8002518 <HAL_I2S_Init+0x270>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	e003      	b.n	80023d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d902      	bls.n	80023dc <HAL_I2S_Init+0x134>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2bff      	cmp	r3, #255	@ 0xff
 80023da:	d907      	bls.n	80023ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	f043 0210 	orr.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e08f      	b.n	800250c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800240a:	f023 030f 	bic.w	r3, r3, #15
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6851      	ldr	r1, [r2, #4]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6892      	ldr	r2, [r2, #8]
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68d2      	ldr	r2, [r2, #12]
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6992      	ldr	r2, [r2, #24]
 8002422:	430a      	orrs	r2, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800242e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d161      	bne.n	80024fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a38      	ldr	r2, [pc, #224]	@ (800251c <HAL_I2S_Init+0x274>)
 800243c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a37      	ldr	r2, [pc, #220]	@ (8002520 <HAL_I2S_Init+0x278>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_I2S_Init+0x1a4>
 8002448:	4b36      	ldr	r3, [pc, #216]	@ (8002524 <HAL_I2S_Init+0x27c>)
 800244a:	e001      	b.n	8002450 <HAL_I2S_Init+0x1a8>
 800244c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4932      	ldr	r1, [pc, #200]	@ (8002520 <HAL_I2S_Init+0x278>)
 8002458:	428a      	cmp	r2, r1
 800245a:	d101      	bne.n	8002460 <HAL_I2S_Init+0x1b8>
 800245c:	4a31      	ldr	r2, [pc, #196]	@ (8002524 <HAL_I2S_Init+0x27c>)
 800245e:	e001      	b.n	8002464 <HAL_I2S_Init+0x1bc>
 8002460:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002464:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002468:	f023 030f 	bic.w	r3, r3, #15
 800246c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2b      	ldr	r2, [pc, #172]	@ (8002520 <HAL_I2S_Init+0x278>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_I2S_Init+0x1d4>
 8002478:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <HAL_I2S_Init+0x27c>)
 800247a:	e001      	b.n	8002480 <HAL_I2S_Init+0x1d8>
 800247c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002480:	2202      	movs	r2, #2
 8002482:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a25      	ldr	r2, [pc, #148]	@ (8002520 <HAL_I2S_Init+0x278>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_I2S_Init+0x1ea>
 800248e:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <HAL_I2S_Init+0x27c>)
 8002490:	e001      	b.n	8002496 <HAL_I2S_Init+0x1ee>
 8002492:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024a2:	d003      	beq.n	80024ac <HAL_I2S_Init+0x204>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80024ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	e001      	b.n	80024b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b29a      	uxth	r2, r3
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	4313      	orrs	r3, r2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <HAL_I2S_Init+0x278>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_I2S_Init+0x24c>
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <HAL_I2S_Init+0x27c>)
 80024f2:	e001      	b.n	80024f8 <HAL_I2S_Init+0x250>
 80024f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024f8:	897a      	ldrh	r2, [r7, #10]
 80024fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	08002845 	.word	0x08002845
 8002518:	cccccccd 	.word	0xcccccccd
 800251c:	08002959 	.word	0x08002959
 8002520:	40003800 	.word	0x40003800
 8002524:	40003400 	.word	0x40003400

08002528 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_I2S_Transmit_DMA+0x1a>
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e08a      	b.n	800265c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d001      	beq.n	8002556 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	e082      	b.n	800265c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_I2S_Transmit_DMA+0x3e>
 8002562:	2302      	movs	r3, #2
 8002564:	e07a      	b.n	800265c <HAL_I2S_Transmit_DMA+0x134>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2203      	movs	r2, #3
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d002      	beq.n	800259a <HAL_I2S_Transmit_DMA+0x72>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d10a      	bne.n	80025b0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025ae:	e005      	b.n	80025bc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	4a28      	ldr	r2, [pc, #160]	@ (8002664 <HAL_I2S_Transmit_DMA+0x13c>)
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	4a27      	ldr	r2, [pc, #156]	@ (8002668 <HAL_I2S_Transmit_DMA+0x140>)
 80025ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	4a26      	ldr	r2, [pc, #152]	@ (800266c <HAL_I2S_Transmit_DMA+0x144>)
 80025d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80025dc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80025e4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80025ec:	f7ff f9b8 	bl	8001960 <HAL_DMA_Start_IT>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00f      	beq.n	8002616 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0208 	orr.w	r2, r3, #8
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e022      	b.n	800265c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0202 	orr.w	r2, r2, #2
 800263a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002658:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	08002723 	.word	0x08002723
 8002668:	080026e1 	.word	0x080026e1
 800266c:	0800273f 	.word	0x0800273f

08002670 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(const I2S_HandleTypeDef *hi2s)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d2:	b2db      	uxtb	r3, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0202 	bic.w	r2, r2, #2
 8002704:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7fe fe05 	bl	8001324 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ffa9 	bl	8002688 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0203 	bic.w	r2, r2, #3
 800275a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	f043 0208 	orr.w	r2, r3, #8
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ff97 	bl	80026b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	881a      	ldrh	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	1c9a      	adds	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10e      	bne.n	80027de <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80027ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fe fda3 	bl	8001324 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	b292      	uxth	r2, r2
 80027fa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10e      	bne.n	800283c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800282c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff30 	bl	800269c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b04      	cmp	r3, #4
 800285e:	d13a      	bne.n	80028d6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d109      	bne.n	800287e <I2S_IRQHandler+0x3a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002874:	2b40      	cmp	r3, #64	@ 0x40
 8002876:	d102      	bne.n	800287e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ffb4 	bl	80027e6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002884:	2b40      	cmp	r3, #64	@ 0x40
 8002886:	d126      	bne.n	80028d6 <I2S_IRQHandler+0x92>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b20      	cmp	r3, #32
 8002894:	d11f      	bne.n	80028d6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028a4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	f043 0202 	orr.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff feed 	bl	80026b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d136      	bne.n	8002950 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d109      	bne.n	8002900 <I2S_IRQHandler+0xbc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f6:	2b80      	cmp	r3, #128	@ 0x80
 80028f8:	d102      	bne.n	8002900 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff45 	bl	800278a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d122      	bne.n	8002950 <I2S_IRQHandler+0x10c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b20      	cmp	r3, #32
 8002916:	d11b      	bne.n	8002950 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002926:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff feb0 	bl	80026b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002950:	bf00      	nop
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a92      	ldr	r2, [pc, #584]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002972:	4b92      	ldr	r3, [pc, #584]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002974:	e001      	b.n	800297a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a8b      	ldr	r2, [pc, #556]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002990:	4b8a      	ldr	r3, [pc, #552]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002992:	e001      	b.n	8002998 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029a4:	d004      	beq.n	80029b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 8099 	bne.w	8002ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f925 	bl	8002c14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9c8 	bl	8002d74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ea:	2b40      	cmp	r3, #64	@ 0x40
 80029ec:	d13a      	bne.n	8002a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d035      	beq.n	8002a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002a02:	4b6e      	ldr	r3, [pc, #440]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a04:	e001      	b.n	8002a0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002a06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4969      	ldr	r1, [pc, #420]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a12:	428b      	cmp	r3, r1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a16:	4b69      	ldr	r3, [pc, #420]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a18:	e001      	b.n	8002a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f043 0202 	orr.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fe26 	bl	80026b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	f040 80c3 	bne.w	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80bd 	beq.w	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a49      	ldr	r2, [pc, #292]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a96:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a98:	e001      	b.n	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4944      	ldr	r1, [pc, #272]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002aa6:	428b      	cmp	r3, r1
 8002aa8:	d101      	bne.n	8002aae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002aaa:	4b44      	ldr	r3, [pc, #272]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002aac:	e001      	b.n	8002ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002aae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ab2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ab6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fde8 	bl	80026b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ae0:	e089      	b.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d107      	bne.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8be 	bl	8002c78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8fd 	bl	8002d10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d12f      	bne.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02a      	beq.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b46:	e001      	b.n	8002b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4919      	ldr	r1, [pc, #100]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d101      	bne.n	8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b58:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b5a:	e001      	b.n	8002b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fd98 	bl	80026b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d136      	bne.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d031      	beq.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a07      	ldr	r2, [pc, #28]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ba0:	e001      	b.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ba2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4902      	ldr	r1, [pc, #8]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bae:	428b      	cmp	r3, r1
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002bb2:	4b02      	ldr	r3, [pc, #8]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bb4:	e006      	b.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002bb6:	bf00      	nop
 8002bb8:	40003800 	.word	0x40003800
 8002bbc:	40003400 	.word	0x40003400
 8002bc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bc8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fd5e 	bl	80026b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bf4:	e000      	b.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bf6:	bf00      	nop
}
 8002bf8:	bf00      	nop
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c99      	adds	r1, r3, #2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6251      	str	r1, [r2, #36]	@ 0x24
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d113      	bne.n	8002c6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffc9 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	1c99      	adds	r1, r3, #2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6251      	str	r1, [r2, #36]	@ 0x24
 8002c8a:	8819      	ldrh	r1, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <I2SEx_TxISR_I2SExt+0x90>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <I2SEx_TxISR_I2SExt+0x22>
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <I2SEx_TxISR_I2SExt+0x94>)
 8002c98:	e001      	b.n	8002c9e <I2SEx_TxISR_I2SExt+0x26>
 8002c9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c9e:	460a      	mov	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d121      	bne.n	8002cfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <I2SEx_TxISR_I2SExt+0x90>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <I2SEx_TxISR_I2SExt+0x50>
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <I2SEx_TxISR_I2SExt+0x94>)
 8002cc6:	e001      	b.n	8002ccc <I2SEx_TxISR_I2SExt+0x54>
 8002cc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	490d      	ldr	r1, [pc, #52]	@ (8002d08 <I2SEx_TxISR_I2SExt+0x90>)
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	d101      	bne.n	8002cdc <I2SEx_TxISR_I2SExt+0x64>
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <I2SEx_TxISR_I2SExt+0x94>)
 8002cda:	e001      	b.n	8002ce0 <I2SEx_TxISR_I2SExt+0x68>
 8002cdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ce0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ce4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff81 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40003800 	.word	0x40003800
 8002d0c:	40003400 	.word	0x40003400

08002d10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68d8      	ldr	r0, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	1c99      	adds	r1, r3, #2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002d28:	b282      	uxth	r2, r0
 8002d2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d113      	bne.n	8002d6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ff4a 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a20      	ldr	r2, [pc, #128]	@ (8002e04 <I2SEx_RxISR_I2SExt+0x90>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <I2SEx_RxISR_I2SExt+0x16>
 8002d86:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <I2SEx_RxISR_I2SExt+0x94>)
 8002d88:	e001      	b.n	8002d8e <I2SEx_RxISR_I2SExt+0x1a>
 8002d8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d8e:	68d8      	ldr	r0, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	1c99      	adds	r1, r3, #2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002d9a:	b282      	uxth	r2, r0
 8002d9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d121      	bne.n	8002dfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <I2SEx_RxISR_I2SExt+0x90>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d101      	bne.n	8002dc4 <I2SEx_RxISR_I2SExt+0x50>
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <I2SEx_RxISR_I2SExt+0x94>)
 8002dc2:	e001      	b.n	8002dc8 <I2SEx_RxISR_I2SExt+0x54>
 8002dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	490d      	ldr	r1, [pc, #52]	@ (8002e04 <I2SEx_RxISR_I2SExt+0x90>)
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d101      	bne.n	8002dd8 <I2SEx_RxISR_I2SExt+0x64>
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <I2SEx_RxISR_I2SExt+0x94>)
 8002dd6:	e001      	b.n	8002ddc <I2SEx_RxISR_I2SExt+0x68>
 8002dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ddc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002de0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff03 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40003800 	.word	0x40003800
 8002e08:	40003400 	.word	0x40003400

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e267      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d075      	beq.n	8002f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e2a:	4b88      	ldr	r3, [pc, #544]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d00c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e36:	4b85      	ldr	r3, [pc, #532]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d112      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e42:	4b82      	ldr	r3, [pc, #520]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4e:	d10b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4b7e      	ldr	r3, [pc, #504]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d05b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x108>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d157      	bne.n	8002f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e242      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x74>
 8002e72:	4b76      	ldr	r3, [pc, #472]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x98>
 8002e8a:	4b70      	ldr	r3, [pc, #448]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6d      	ldr	r3, [pc, #436]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002ea4:	4b69      	ldr	r3, [pc, #420]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a68      	ldr	r2, [pc, #416]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a65      	ldr	r2, [pc, #404]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fb8c 	bl	80015e0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fb88 	bl	80015e0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e207      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5b      	ldr	r3, [pc, #364]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xc0>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fb78 	bl	80015e0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fb74 	bl	80015e0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1f3      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b51      	ldr	r3, [pc, #324]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xe8>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f22:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2e:	4b47      	ldr	r3, [pc, #284]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b44      	ldr	r3, [pc, #272]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b41      	ldr	r3, [pc, #260]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c7      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4937      	ldr	r1, [pc, #220]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x244>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fb2d 	bl	80015e0 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fb29 	bl	80015e0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a8      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b28      	ldr	r3, [pc, #160]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4925      	ldr	r1, [pc, #148]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b24      	ldr	r3, [pc, #144]	@ (8003050 <HAL_RCC_OscConfig+0x244>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fb0c 	bl	80015e0 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fb08 	bl	80015e0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e187      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d036      	beq.n	8003064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <HAL_RCC_OscConfig+0x248>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe faec 	bl	80015e0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fe fae8 	bl	80015e0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e167      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8003020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x200>
 800302a:	e01b      	b.n	8003064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCC_OscConfig+0x248>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe fad5 	bl	80015e0 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	e00e      	b.n	8003058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe fad1 	bl	80015e0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d907      	bls.n	8003058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e150      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
 800304c:	40023800 	.word	0x40023800
 8003050:	42470000 	.word	0x42470000
 8003054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	4b88      	ldr	r3, [pc, #544]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800305a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ea      	bne.n	800303a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8097 	beq.w	80031a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003076:	4b81      	ldr	r3, [pc, #516]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	4b7d      	ldr	r3, [pc, #500]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	4a7c      	ldr	r2, [pc, #496]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003090:	6413      	str	r3, [r2, #64]	@ 0x40
 8003092:	4b7a      	ldr	r3, [pc, #488]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b77      	ldr	r3, [pc, #476]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d118      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b74      	ldr	r3, [pc, #464]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a73      	ldr	r2, [pc, #460]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fa91 	bl	80015e0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fe fa8d 	bl	80015e0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e10c      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2ea>
 80030e8:	4b64      	ldr	r3, [pc, #400]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4a63      	ldr	r2, [pc, #396]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f4:	e01c      	b.n	8003130 <HAL_RCC_OscConfig+0x324>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x30c>
 80030fe:	4b5f      	ldr	r3, [pc, #380]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003102:	4a5e      	ldr	r2, [pc, #376]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6713      	str	r3, [r2, #112]	@ 0x70
 800310a:	4b5c      	ldr	r3, [pc, #368]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310e:	4a5b      	ldr	r2, [pc, #364]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6713      	str	r3, [r2, #112]	@ 0x70
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0x324>
 8003118:	4b58      	ldr	r3, [pc, #352]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	4a57      	ldr	r2, [pc, #348]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6713      	str	r3, [r2, #112]	@ 0x70
 8003124:	4b55      	ldr	r3, [pc, #340]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	4a54      	ldr	r2, [pc, #336]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800312a:	f023 0304 	bic.w	r3, r3, #4
 800312e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d015      	beq.n	8003164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe fa52 	bl	80015e0 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe fa4e 	bl	80015e0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0cb      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	4b49      	ldr	r3, [pc, #292]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ee      	beq.n	8003140 <HAL_RCC_OscConfig+0x334>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fe fa3c 	bl	80015e0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fe fa38 	bl	80015e0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0b5      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	4b3e      	ldr	r3, [pc, #248]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ee      	bne.n	800316c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003194:	4b39      	ldr	r3, [pc, #228]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	4a38      	ldr	r2, [pc, #224]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a1 	beq.w	80032ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031aa:	4b34      	ldr	r3, [pc, #208]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d05c      	beq.n	8003270 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d141      	bne.n	8003242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe fa0c 	bl	80015e0 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe fa08 	bl	80015e0 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e087      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b27      	ldr	r3, [pc, #156]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	019b      	lsls	r3, r3, #6
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	3b01      	subs	r3, #1
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	491b      	ldr	r1, [pc, #108]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003214:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe f9e1 	bl	80015e0 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe f9dd 	bl	80015e0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e05c      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	4b11      	ldr	r3, [pc, #68]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x416>
 8003240:	e054      	b.n	80032ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe f9ca 	bl	80015e0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fe f9c6 	bl	80015e0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e045      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	4b06      	ldr	r3, [pc, #24]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x444>
 800326e:	e03d      	b.n	80032ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e038      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000
 8003284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x4ec>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d028      	beq.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d121      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d11a      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d111      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	3b01      	subs	r3, #1
 80032d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0cc      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b68      	ldr	r3, [pc, #416]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d90c      	bls.n	8003338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b65      	ldr	r3, [pc, #404]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b63      	ldr	r3, [pc, #396]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003350:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800335a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003368:	4b53      	ldr	r3, [pc, #332]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b50      	ldr	r3, [pc, #320]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	494d      	ldr	r1, [pc, #308]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d044      	beq.n	800341c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b47      	ldr	r3, [pc, #284]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d119      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	4b3b      	ldr	r3, [pc, #236]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e067      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4934      	ldr	r1, [pc, #208]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7fe f8f8 	bl	80015e0 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fe f8f4 	bl	80015e0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e04f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d20c      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e032      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4916      	ldr	r1, [pc, #88]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	490e      	ldr	r1, [pc, #56]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	4602      	mov	r2, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	490a      	ldr	r1, [pc, #40]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	4a09      	ldr	r2, [pc, #36]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800349e:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fd42 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	0800f990 	.word	0x0800f990
 80034c0:	20000000 	.word	0x20000000
 80034c4:	2000000c 	.word	0x2000000c

080034c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b090      	sub	sp, #64	@ 0x40
 80034ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e0:	4b59      	ldr	r3, [pc, #356]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d00d      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x40>
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	f200 80a1 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x16c>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x34>
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fa:	e09b      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b53      	ldr	r3, [pc, #332]	@ (800364c <HAL_RCC_GetSysClockFreq+0x184>)
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003500:	e09b      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003502:	4b53      	ldr	r3, [pc, #332]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x188>)
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003506:	e098      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003508:	4b4f      	ldr	r3, [pc, #316]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003510:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003512:	4b4d      	ldr	r3, [pc, #308]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d028      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351e:	4b4a      	ldr	r3, [pc, #296]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	2200      	movs	r2, #0
 8003526:	623b      	str	r3, [r7, #32]
 8003528:	627a      	str	r2, [r7, #36]	@ 0x24
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003530:	2100      	movs	r1, #0
 8003532:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x188>)
 8003534:	fb03 f201 	mul.w	r2, r3, r1
 8003538:	2300      	movs	r3, #0
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	4413      	add	r3, r2
 8003540:	4a43      	ldr	r2, [pc, #268]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x188>)
 8003542:	fba0 1202 	umull	r1, r2, r0, r2
 8003546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003548:	460a      	mov	r2, r1
 800354a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800354c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800354e:	4413      	add	r3, r2
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	2200      	movs	r2, #0
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	61fa      	str	r2, [r7, #28]
 800355a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003562:	f7fc fe85 	bl	8000270 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4613      	mov	r3, r2
 800356c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800356e:	e053      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003570:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	2200      	movs	r2, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	617a      	str	r2, [r7, #20]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003582:	f04f 0b00 	mov.w	fp, #0
 8003586:	4652      	mov	r2, sl
 8003588:	465b      	mov	r3, fp
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	0159      	lsls	r1, r3, #5
 8003594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003598:	0150      	lsls	r0, r2, #5
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	ebb2 080a 	subs.w	r8, r2, sl
 80035a2:	eb63 090b 	sbc.w	r9, r3, fp
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ba:	ebb2 0408 	subs.w	r4, r2, r8
 80035be:	eb63 0509 	sbc.w	r5, r3, r9
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	00eb      	lsls	r3, r5, #3
 80035cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d0:	00e2      	lsls	r2, r4, #3
 80035d2:	4614      	mov	r4, r2
 80035d4:	461d      	mov	r5, r3
 80035d6:	eb14 030a 	adds.w	r3, r4, sl
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	eb45 030b 	adc.w	r3, r5, fp
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ee:	4629      	mov	r1, r5
 80035f0:	028b      	lsls	r3, r1, #10
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f8:	4621      	mov	r1, r4
 80035fa:	028a      	lsls	r2, r1, #10
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	2200      	movs	r2, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800360c:	f7fc fe30 	bl	8000270 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4613      	mov	r3, r2
 8003616:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800362a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003632:	e002      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCC_GetSysClockFreq+0x184>)
 8003636:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800363c:	4618      	mov	r0, r3
 800363e:	3740      	adds	r7, #64	@ 0x40
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	00f42400 	.word	0x00f42400
 8003650:	017d7840 	.word	0x017d7840

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b03      	ldr	r3, [pc, #12]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003670:	f7ff fff0 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0a9b      	lsrs	r3, r3, #10
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	@ (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	0800f9a0 	.word	0x0800f9a0

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003698:	f7ff ffdc 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0b5b      	lsrs	r3, r3, #13
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	@ (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800f9a0 	.word	0x0800f9a0

080036bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	220f      	movs	r2, #15
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036f0:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_RCC_GetClockConfig+0x60>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0207 	and.w	r2, r3, #7
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40023c00 	.word	0x40023c00

08003720 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003744:	2b00      	cmp	r3, #0
 8003746:	d035      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003748:	4b62      	ldr	r3, [pc, #392]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800374e:	f7fd ff47 	bl	80015e0 <HAL_GetTick>
 8003752:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003756:	f7fd ff43 	bl	80015e0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0b0      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003768:	4b5b      	ldr	r3, [pc, #364]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	019a      	lsls	r2, r3, #6
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	071b      	lsls	r3, r3, #28
 8003780:	4955      	ldr	r1, [pc, #340]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003788:	4b52      	ldr	r3, [pc, #328]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800378e:	f7fd ff27 	bl	80015e0 <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003796:	f7fd ff23 	bl	80015e0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e090      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037a8:	4b4b      	ldr	r3, [pc, #300]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8083 	beq.w	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b44      	ldr	r3, [pc, #272]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	4a43      	ldr	r2, [pc, #268]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d2:	4b41      	ldr	r3, [pc, #260]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037de:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3e      	ldr	r2, [pc, #248]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ea:	f7fd fef9 	bl	80015e0 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f2:	f7fd fef5 	bl	80015e0 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e062      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003804:	4b35      	ldr	r3, [pc, #212]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003810:	4b31      	ldr	r3, [pc, #196]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003818:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02f      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d028      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382e:	4b2a      	ldr	r3, [pc, #168]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003836:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003838:	4b29      	ldr	r3, [pc, #164]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383e:	4b28      	ldr	r3, [pc, #160]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003844:	4a24      	ldr	r2, [pc, #144]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800384a:	4b23      	ldr	r3, [pc, #140]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d114      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003856:	f7fd fec3 	bl	80015e0 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fd febf 	bl	80015e0 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e02a      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003874:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ee      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003888:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388c:	d10d      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800388e:	4b12      	ldr	r3, [pc, #72]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800389e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a2:	490d      	ldr	r1, [pc, #52]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]
 80038a8:	e005      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038aa:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038b4:	6093      	str	r3, [r2, #8]
 80038b6:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	4905      	ldr	r1, [pc, #20]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	42470068 	.word	0x42470068
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40007000 	.word	0x40007000
 80038e0:	42470e40 	.word	0x42470e40

080038e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d13f      	bne.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003902:	4b24      	ldr	r3, [pc, #144]	@ (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800390a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d006      	beq.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003918:	d12f      	bne.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800391a:	4b1f      	ldr	r3, [pc, #124]	@ (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800391c:	617b      	str	r3, [r7, #20]
          break;
 800391e:	e02f      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003920:	4b1c      	ldr	r3, [pc, #112]	@ (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392c:	d108      	bne.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800392e:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003936:	4a19      	ldr	r2, [pc, #100]	@ (800399c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e007      	b.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003948:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003950:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396a:	0f1b      	lsrs	r3, r3, #28
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	617b      	str	r3, [r7, #20]
          break;
 8003978:	e002      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
          break;
 800397e:	bf00      	nop
        }
      }
      break;
 8003980:	e000      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003982:	bf00      	nop
    }
  }
  return frequency;
 8003984:	697b      	ldr	r3, [r7, #20]
}
 8003986:	4618      	mov	r0, r3
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	00bb8000 	.word	0x00bb8000
 800399c:	017d7840 	.word	0x017d7840
 80039a0:	00f42400 	.word	0x00f42400

080039a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e022      	b.n	80039fc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd f991 	bl	8000cf0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2203      	movs	r2, #3
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f814 	bl	8003a04 <HAL_SD_InitCard>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e00a      	b.n	80039fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	b08e      	sub	sp, #56	@ 0x38
 8003a08:	af04      	add	r7, sp, #16
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003a20:	2376      	movs	r3, #118	@ 0x76
 8003a22:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681d      	ldr	r5, [r3, #0]
 8003a28:	466c      	mov	r4, sp
 8003a2a:	f107 0318 	add.w	r3, r7, #24
 8003a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a36:	f107 030c 	add.w	r3, r7, #12
 8003a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f002 fa21 	bl	8005e84 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003a42:	4b2a      	ldr	r3, [pc, #168]	@ (8003aec <HAL_SD_InitCard+0xe8>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f002 fa62 	bl	8005f16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003a52:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <HAL_SD_InitCard+0xe8>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f7fd fdcd 	bl	80015f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f001 f806 	bl	8004a70 <SD_PowerON>
 8003a64:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e02e      	b.n	8003ae2 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 ff25 	bl	80048d4 <SD_InitCard>
 8003a8a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e01b      	b.n	8003ae2 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 fac1 	bl	800603a <SDMMC_CmdBlockLength>
 8003ab8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00f      	beq.n	8003ae0 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <HAL_SD_InitCard+0xec>)
 8003ac6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3728      	adds	r7, #40	@ 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	422580a0 	.word	0x422580a0
 8003af0:	004005ff 	.word	0x004005ff

08003af4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	@ 0x30
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d107      	bne.n	8003b1c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0c0      	b.n	8003c9e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 80b9 	bne.w	8003c9c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	441a      	add	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d907      	bls.n	8003b4e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0a7      	b.n	8003c9e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2203      	movs	r2, #3
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	4a4c      	ldr	r2, [pc, #304]	@ (8003ca8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003b78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8003cac <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003b80:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2200      	movs	r2, #0
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3380      	adds	r3, #128	@ 0x80
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	025b      	lsls	r3, r3, #9
 8003bc0:	089b      	lsrs	r3, r3, #2
 8003bc2:	f7fd fecd 	bl	8001960 <HAL_DMA_Start_IT>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d017      	beq.n	8003bfc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003bda:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a33      	ldr	r2, [pc, #204]	@ (8003cb0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003be2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e050      	b.n	8003c9e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d002      	beq.n	8003c10 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	025b      	lsls	r3, r3, #9
 8003c1a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003c1c:	2390      	movs	r3, #144	@ 0x90
 8003c1e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003c20:	2302      	movs	r3, #2
 8003c22:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f107 0210 	add.w	r2, r7, #16
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f002 f9d3 	bl	8005fe2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d90a      	bls.n	8003c58 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2282      	movs	r2, #130	@ 0x82
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f002 fa37 	bl	80060c2 <SDMMC_CmdReadMultiBlock>
 8003c54:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003c56:	e009      	b.n	8003c6c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2281      	movs	r2, #129	@ 0x81
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 fa0a 	bl	800607e <SDMMC_CmdReadSingleBlock>
 8003c6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a0e      	ldr	r2, [pc, #56]	@ (8003cb0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003c78:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e002      	b.n	8003c9e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3730      	adds	r7, #48	@ 0x30
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	080046e3 	.word	0x080046e3
 8003cac:	08004755 	.word	0x08004755
 8003cb0:	004005ff 	.word	0x004005ff
 8003cb4:	4225858c 	.word	0x4225858c

08003cb8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	@ 0x30
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d107      	bne.n	8003ce0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0c5      	b.n	8003e6c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 80be 	bne.w	8003e6a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003cf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d907      	bls.n	8003d12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e0ac      	b.n	8003e6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8003e74 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d42:	4a4d      	ldr	r2, [pc, #308]	@ (8003e78 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003d44:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d002      	beq.n	8003d5c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d58:	025b      	lsls	r3, r3, #9
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d90a      	bls.n	8003d78 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	22a0      	movs	r2, #160	@ 0xa0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f002 f9eb 	bl	800614a <SDMMC_CmdWriteMultiBlock>
 8003d74:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003d76:	e009      	b.n	8003d8c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2290      	movs	r2, #144	@ 0x90
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d84:	4618      	mov	r0, r3
 8003d86:	f002 f9be 	bl	8006106 <SDMMC_CmdWriteSingleBlock>
 8003d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a39      	ldr	r2, [pc, #228]	@ (8003e7c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003d98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e059      	b.n	8003e6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003db8:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	2240      	movs	r2, #64	@ 0x40
 8003dc4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3380      	adds	r3, #128	@ 0x80
 8003dee:	461a      	mov	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	025b      	lsls	r3, r3, #9
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	f7fd fdb3 	bl	8001960 <HAL_DMA_Start_IT>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01c      	beq.n	8003e3a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8003e0e:	f023 0302 	bic.w	r3, r3, #2
 8003e12:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e018      	b.n	8003e6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	025b      	lsls	r3, r3, #9
 8003e44:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003e46:	2390      	movs	r3, #144	@ 0x90
 8003e48:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f107 0210 	add.w	r2, r7, #16
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f002 f8be 	bl	8005fe2 <SDIO_ConfigData>

      return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e000      	b.n	8003e6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	080046b9 	.word	0x080046b9
 8003e78:	08004755 	.word	0x08004755
 8003e7c:	004005ff 	.word	0x004005ff
 8003e80:	4225858c 	.word	0x4225858c

08003e84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_SD_IRQHandler+0x2e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f001 f806 	bl	8004ebc <SD_Read_IT>
 8003eb0:	e165      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 808f 	beq.w	8003fe0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eca:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003eda:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003ede:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d039      	beq.n	8003f6e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <HAL_SD_IRQHandler+0x8a>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d011      	beq.n	8003f32 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f002 f93c 	bl	8006190 <SDMMC_CmdStopTransfer>
 8003f18:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f92f 	bl	8004190 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_SD_IRQHandler+0xda>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f002 fdaa 	bl	8006ab8 <HAL_SD_RxCpltCallback>
 8003f64:	e10b      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f002 fd9c 	bl	8006aa4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f6c:	e107      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8102 	beq.w	800417e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d011      	beq.n	8003fa8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f002 f901 	bl	8006190 <SDMMC_CmdStopTransfer>
 8003f8e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8f4 	bl	8004190 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 80e5 	bne.w	800417e <HAL_SD_IRQHandler+0x2fa>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 80df 	bne.w	800417e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0208 	bic.w	r2, r2, #8
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f002 fd63 	bl	8006aa4 <HAL_SD_TxCpltCallback>
}
 8003fde:	e0ce      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_SD_IRQHandler+0x17c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 ffb0 	bl	8004f5e <SD_Write_IT>
 8003ffe:	e0be      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004006:	f240 233a 	movw	r3, #570	@ 0x23a
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80b6 	beq.w	800417e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	f043 0202 	orr.w	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	f043 0208 	orr.w	r2, r3, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	f043 0210 	orr.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	f043 0208 	orr.w	r2, r3, #8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f240 723a 	movw	r2, #1850	@ 0x73a
 800409c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80040ac:	f023 0302 	bic.w	r3, r3, #2
 80040b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 f86a 	bl	8006190 <SDMMC_CmdStopTransfer>
 80040bc:	4602      	mov	r2, r0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f855 	bl	8004190 <HAL_SD_ErrorCallback>
}
 80040e6:	e04a      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d045      	beq.n	800417e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <HAL_SD_IRQHandler+0x282>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d011      	beq.n	800412a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	4a1f      	ldr	r2, [pc, #124]	@ (8004188 <HAL_SD_IRQHandler+0x304>)
 800410c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fc7c 	bl	8001a10 <HAL_DMA_Abort_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d02f      	beq.n	800417e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fb68 	bl	80047f8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004128:	e029      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d104      	bne.n	800413e <HAL_SD_IRQHandler+0x2ba>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	4a12      	ldr	r2, [pc, #72]	@ (800418c <HAL_SD_IRQHandler+0x308>)
 8004144:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fc60 	bl	8001a10 <HAL_DMA_Abort_IT>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fb83 	bl	8004866 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004160:	e00d      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f002 fc8a 	bl	8006a90 <HAL_SD_AbortCallback>
}
 800417c:	e7ff      	b.n	800417e <HAL_SD_IRQHandler+0x2fa>
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	080047f9 	.word	0x080047f9
 800418c:	08004867 	.word	0x08004867

08004190 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b2:	0f9b      	lsrs	r3, r3, #30
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041be:	0e9b      	lsrs	r3, r3, #26
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004204:	0d1b      	lsrs	r3, r3, #20
 8004206:	b29a      	uxth	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	b2da      	uxtb	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004222:	0bdb      	lsrs	r3, r3, #15
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004234:	0b9b      	lsrs	r3, r3, #14
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	b2da      	uxtb	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004246:	0b5b      	lsrs	r3, r3, #13
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004258:	0b1b      	lsrs	r3, r3, #12
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004270:	2b00      	cmp	r3, #0
 8004272:	d163      	bne.n	800433c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004278:	009a      	lsls	r2, r3, #2
 800427a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004284:	0f92      	lsrs	r2, r2, #30
 8004286:	431a      	orrs	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004290:	0edb      	lsrs	r3, r3, #27
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	b2da      	uxtb	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042b4:	0d5b      	lsrs	r3, r3, #21
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d8:	0bdb      	lsrs	r3, r3, #15
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	7e1b      	ldrb	r3, [r3, #24]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	3302      	adds	r3, #2
 80042fc:	2201      	movs	r2, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004306:	fb03 f202 	mul.w	r2, r3, r2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	7a1b      	ldrb	r3, [r3, #8]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	2201      	movs	r2, #1
 800431a:	409a      	lsls	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004328:	0a52      	lsrs	r2, r2, #9
 800432a:	fb03 f202 	mul.w	r2, r3, r2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004338:	661a      	str	r2, [r3, #96]	@ 0x60
 800433a:	e031      	b.n	80043a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	2b01      	cmp	r3, #1
 8004342:	d11d      	bne.n	8004380 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	431a      	orrs	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	3301      	adds	r3, #1
 8004360:	029a      	lsls	r2, r3, #10
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004374:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	661a      	str	r2, [r3, #96]	@ 0x60
 800437e:	e00f      	b.n	80043a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a58      	ldr	r2, [pc, #352]	@ (80044e8 <HAL_SD_GetCardCSD+0x344>)
 8004386:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e09d      	b.n	80044dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a4:	0b9b      	lsrs	r3, r3, #14
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b6:	09db      	lsrs	r3, r3, #7
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	0fdb      	lsrs	r3, r3, #31
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	0f5b      	lsrs	r3, r3, #29
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	0e9b      	lsrs	r3, r3, #26
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004408:	0d9b      	lsrs	r3, r3, #22
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	b2da      	uxtb	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	0d5b      	lsrs	r3, r3, #21
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444a:	0bdb      	lsrs	r3, r3, #15
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	0b9b      	lsrs	r3, r3, #14
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004472:	0b5b      	lsrs	r3, r3, #13
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	0b1b      	lsrs	r3, r3, #12
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	0a9b      	lsrs	r3, r3, #10
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	004005ff 	.word	0x004005ff

080044ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004544:	b5b0      	push	{r4, r5, r7, lr}
 8004546:	b08e      	sub	sp, #56	@ 0x38
 8004548:	af04      	add	r7, sp, #16
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2203      	movs	r2, #3
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	2b03      	cmp	r3, #3
 8004562:	d02e      	beq.n	80045c2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456a:	d106      	bne.n	800457a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	@ 0x38
 8004578:	e029      	b.n	80045ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004580:	d10a      	bne.n	8004598 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fb2a 	bl	8004bdc <SD_WideBus_Enable>
 8004588:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	@ 0x38
 8004596:	e01a      	b.n	80045ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fb67 	bl	8004c72 <SD_WideBus_Disable>
 80045a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80045b2:	e00c      	b.n	80045ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
 80045c0:	e005      	b.n	80045ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <HAL_SD_ConfigWideBusOperation+0x130>)
 80045dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80045ec:	e01f      	b.n	800462e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681d      	ldr	r5, [r3, #0]
 8004614:	466c      	mov	r4, sp
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800461e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004628:	4628      	mov	r0, r5
 800462a:	f001 fc2b 	bl	8005e84 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004636:	4618      	mov	r0, r3
 8004638:	f001 fcff 	bl	800603a <SDMMC_CmdBlockLength>
 800463c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00c      	beq.n	800465e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <HAL_SD_ConfigWideBusOperation+0x130>)
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800466a:	4618      	mov	r0, r3
 800466c:	3728      	adds	r7, #40	@ 0x28
 800466e:	46bd      	mov	sp, r7
 8004670:	bdb0      	pop	{r4, r5, r7, pc}
 8004672:	bf00      	nop
 8004674:	004005ff 	.word	0x004005ff

08004678 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa7e 	bl	8004b8c <SD_SendStatus>
 8004690:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	0a5b      	lsrs	r3, r3, #9
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80046ae:	693b      	ldr	r3, [r7, #16]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	2b82      	cmp	r3, #130	@ 0x82
 80046f6:	d111      	bne.n	800471c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fd47 	bl	8006190 <SDMMC_CmdStopTransfer>
 8004702:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff fd3a 	bl	8004190 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0208 	bic.w	r2, r2, #8
 800472a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f002 f9b7 	bl	8006ab8 <HAL_SD_RxCpltCallback>
#endif
}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fb00 	bl	8001d68 <HAL_DMA_GetError>
 8004768:	4603      	mov	r3, r0
 800476a:	2b02      	cmp	r3, #2
 800476c:	d03e      	beq.n	80047ec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004774:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d002      	beq.n	800478a <SD_DMAError+0x36>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d12d      	bne.n	80047e6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <SD_DMAError+0xa0>)
 8004790:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80047a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80047ae:	6978      	ldr	r0, [r7, #20]
 80047b0:	f7ff ff62 	bl	8004678 <HAL_SD_GetCardState>
 80047b4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d002      	beq.n	80047c2 <SD_DMAError+0x6e>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b05      	cmp	r3, #5
 80047c0:	d10a      	bne.n	80047d8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 fce2 	bl	8006190 <SDMMC_CmdStopTransfer>
 80047cc:	4602      	mov	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	431a      	orrs	r2, r3
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	f7ff fcd2 	bl	8004190 <HAL_SD_ErrorCallback>
#endif
  }
}
 80047ec:	bf00      	nop
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	004005ff 	.word	0x004005ff

080047f8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800480e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff ff31 	bl	8004678 <HAL_SD_GetCardState>
 8004816:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b06      	cmp	r3, #6
 800482a:	d002      	beq.n	8004832 <SD_DMATxAbort+0x3a>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b05      	cmp	r3, #5
 8004830:	d10a      	bne.n	8004848 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f001 fcaa 	bl	8006190 <SDMMC_CmdStopTransfer>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	431a      	orrs	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f002 f91d 	bl	8006a90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004856:	e002      	b.n	800485e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fc99 	bl	8004190 <HAL_SD_ErrorCallback>
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f240 523a 	movw	r2, #1338	@ 0x53a
 800487c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fefa 	bl	8004678 <HAL_SD_GetCardState>
 8004884:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b06      	cmp	r3, #6
 8004898:	d002      	beq.n	80048a0 <SD_DMARxAbort+0x3a>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b05      	cmp	r3, #5
 800489e:	d10a      	bne.n	80048b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fc73 	bl	8006190 <SDMMC_CmdStopTransfer>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f002 f8e6 	bl	8006a90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80048c4:	e002      	b.n	80048cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fc62 	bl	8004190 <HAL_SD_ErrorCallback>
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048d4:	b5b0      	push	{r4, r5, r7, lr}
 80048d6:	b094      	sub	sp, #80	@ 0x50
 80048d8:	af04      	add	r7, sp, #16
 80048da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80048dc:	2301      	movs	r3, #1
 80048de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 fb24 	bl	8005f32 <SDIO_GetPowerState>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048f0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80048f4:	e0b8      	b.n	8004a68 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d02f      	beq.n	800495e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fd4e 	bl	80063a4 <SDMMC_CmdSendCID>
 8004908:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800490a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <SD_InitCard+0x40>
    {
      return errorstate;
 8004910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004912:	e0a9      	b.n	8004a68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fb4e 	bl	8005fbc <SDIO_GetResponse>
 8004920:	4602      	mov	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2104      	movs	r1, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fb45 	bl	8005fbc <SDIO_GetResponse>
 8004932:	4602      	mov	r2, r0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2108      	movs	r1, #8
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fb3c 	bl	8005fbc <SDIO_GetResponse>
 8004944:	4602      	mov	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	210c      	movs	r1, #12
 8004950:	4618      	mov	r0, r3
 8004952:	f001 fb33 	bl	8005fbc <SDIO_GetResponse>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	2b03      	cmp	r3, #3
 8004964:	d00d      	beq.n	8004982 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f107 020e 	add.w	r2, r7, #14
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fd54 	bl	800641e <SDMMC_CmdSetRelAdd>
 8004976:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <SD_InitCard+0xae>
    {
      return errorstate;
 800497e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004980:	e072      	b.n	8004a68 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	2b03      	cmp	r3, #3
 8004988:	d036      	beq.n	80049f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f001 fd1e 	bl	80063e0 <SDMMC_CmdSendCSD>
 80049a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80049ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ae:	e05b      	b.n	8004a68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fb00 	bl	8005fbc <SDIO_GetResponse>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2104      	movs	r1, #4
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 faf7 	bl	8005fbc <SDIO_GetResponse>
 80049ce:	4602      	mov	r2, r0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2108      	movs	r1, #8
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 faee 	bl	8005fbc <SDIO_GetResponse>
 80049e0:	4602      	mov	r2, r0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	210c      	movs	r1, #12
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fae5 	bl	8005fbc <SDIO_GetResponse>
 80049f2:	4602      	mov	r2, r0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2104      	movs	r1, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 fadc 	bl	8005fbc <SDIO_GetResponse>
 8004a04:	4603      	mov	r3, r0
 8004a06:	0d1a      	lsrs	r2, r3, #20
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a0c:	f107 0310 	add.w	r3, r7, #16
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fbc6 	bl	80041a4 <HAL_SD_GetCardCSD>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004a22:	e021      	b.n	8004a68 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	2200      	movs	r2, #0
 8004a30:	461c      	mov	r4, r3
 8004a32:	4615      	mov	r5, r2
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	4608      	mov	r0, r1
 8004a3a:	f001 fbcb 	bl	80061d4 <SDMMC_CmdSelDesel>
 8004a3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <SD_InitCard+0x176>
  {
    return errorstate;
 8004a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a48:	e00e      	b.n	8004a68 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	466c      	mov	r4, sp
 8004a52:	f103 0210 	add.w	r2, r3, #16
 8004a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a60:	4628      	mov	r0, r5
 8004a62:	f001 fa0f 	bl	8005e84 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3740      	adds	r7, #64	@ 0x40
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bdb0      	pop	{r4, r5, r7, pc}

08004a70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fbc6 	bl	800621a <SDMMC_CmdGoIdleState>
 8004a8e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	e072      	b.n	8004b80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 fbd9 	bl	8006256 <SDMMC_CmdOperCond>
 8004aa4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 fbaf 	bl	800621a <SDMMC_CmdGoIdleState>
 8004abc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <SD_PowerON+0x5e>
    {
      return errorstate;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	e05b      	b.n	8004b80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d137      	bne.n	8004b46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 fbd9 	bl	8006294 <SDMMC_CmdAppCommand>
 8004ae2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d02d      	beq.n	8004b46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004aea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004aee:	e047      	b.n	8004b80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fbcc 	bl	8006294 <SDMMC_CmdAppCommand>
 8004afc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <SD_PowerON+0x98>
    {
      return errorstate;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	e03b      	b.n	8004b80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	491e      	ldr	r1, [pc, #120]	@ (8004b88 <SD_PowerON+0x118>)
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 fbe2 	bl	80062d8 <SDMMC_CmdAppOperCommand>
 8004b14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b20:	e02e      	b.n	8004b80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 fa47 	bl	8005fbc <SDIO_GetResponse>
 8004b2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	0fdb      	lsrs	r3, r3, #31
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <SD_PowerON+0xcc>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <SD_PowerON+0xce>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]

    count++;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d802      	bhi.n	8004b56 <SD_PowerON+0xe6>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0cc      	beq.n	8004af0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d902      	bls.n	8004b66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b64:	e00c      	b.n	8004b80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b76:	e002      	b.n	8004b7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	c1100000 	.word	0xc1100000

08004b8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ba0:	e018      	b.n	8004bd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f001 fc56 	bl	8006460 <SDMMC_CmdSendStatus>
 8004bb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	e009      	b.n	8004bd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 f9f8 	bl	8005fbc <SDIO_GetResponse>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 f9e2 	bl	8005fbc <SDIO_GetResponse>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c02:	d102      	bne.n	8004c0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c08:	e02f      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c0a:	f107 030c 	add.w	r3, r7, #12
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f879 	bl	8004d08 <SD_FindSCR>
 8004c16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	e023      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01c      	beq.n	8004c66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f001 fb2b 	bl	8006294 <SDMMC_CmdAppCommand>
 8004c3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	e00f      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2102      	movs	r1, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 fb64 	bl	800631e <SDMMC_CmdBusWidth>
 8004c56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	e003      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e001      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c66:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 f997 	bl	8005fbc <SDIO_GetResponse>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c98:	d102      	bne.n	8004ca0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c9e:	e02f      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ca0:	f107 030c 	add.w	r3, r7, #12
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f82e 	bl	8004d08 <SD_FindSCR>
 8004cac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	e023      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01c      	beq.n	8004cfc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f001 fae0 	bl	8006294 <SDMMC_CmdAppCommand>
 8004cd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	e00f      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 fb19 	bl	800631e <SDMMC_CmdBusWidth>
 8004cec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	e003      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e001      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cfc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b08f      	sub	sp, #60	@ 0x3c
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d12:	f7fc fc65 	bl	80015e0 <HAL_GetTick>
 8004d16:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f983 	bl	800603a <SDMMC_CmdBlockLength>
 8004d34:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	e0b9      	b.n	8004eb4 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f001 faa1 	bl	8006294 <SDMMC_CmdAppCommand>
 8004d52:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	e0aa      	b.n	8004eb4 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d64:	2308      	movs	r3, #8
 8004d66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004d68:	2330      	movs	r3, #48	@ 0x30
 8004d6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f107 0210 	add.w	r2, r7, #16
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 f92d 	bl	8005fe2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 fae8 	bl	8006362 <SDMMC_CmdSendSCR>
 8004d92:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d02a      	beq.n	8004df0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	e08a      	b.n	8004eb4 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00f      	beq.n	8004dcc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	f107 0208 	add.w	r2, r7, #8
 8004db8:	18d4      	adds	r4, r2, r3
 8004dba:	4608      	mov	r0, r1
 8004dbc:	f001 f88d 	bl	8005eda <SDIO_ReadFIFO>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	6023      	str	r3, [r4, #0]
      index++;
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dca:	e006      	b.n	8004dda <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004dda:	f7fc fc01 	bl	80015e0 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d102      	bne.n	8004df0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004dea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004dee:	e061      	b.n	8004eb4 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0cf      	beq.n	8004d9e <SD_FindSCR+0x96>
 8004dfe:	e000      	b.n	8004e02 <SD_FindSCR+0xfa>
      break;
 8004e00:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <SD_FindSCR+0x116>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2208      	movs	r2, #8
 8004e24:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e26:	2308      	movs	r3, #8
 8004e28:	e044      	b.n	8004eb4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e40:	2302      	movs	r3, #2
 8004e42:	e037      	b.n	8004eb4 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2220      	movs	r2, #32
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	e02a      	b.n	8004eb4 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004e66:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	061a      	lsls	r2, r3, #24
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	0e1b      	lsrs	r3, r3, #24
 8004e84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	601a      	str	r2, [r3, #0]
    scr++;
 8004e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	061a      	lsls	r2, r3, #24
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ea6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	0e1b      	lsrs	r3, r3, #24
 8004eac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	373c      	adds	r7, #60	@ 0x3c
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}

08004ebc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d03f      	beq.n	8004f56 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e033      	b.n	8004f44 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fffa 	bl	8005eda <SDIO_ReadFIFO>
 8004ee6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	0e1b      	lsrs	r3, r3, #24
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	3301      	adds	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b07      	cmp	r3, #7
 8004f48:	d9c8      	bls.n	8004edc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004f56:	bf00      	nop
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d043      	beq.n	8005000 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e037      	b.n	8004fee <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	021a      	lsls	r2, r3, #8
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	041a      	lsls	r2, r3, #16
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	061a      	lsls	r2, r3, #24
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f107 0208 	add.w	r2, r7, #8
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 ff86 	bl	8005ef4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3301      	adds	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b07      	cmp	r3, #7
 8004ff2:	d9c4      	bls.n	8004f7e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e041      	b.n	800509e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f839 	bl	80050a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f000 f9c0 	bl	80053cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e04e      	b.n	8005172 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a23      	ldr	r2, [pc, #140]	@ (8005180 <HAL_TIM_Base_Start_IT+0xc4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d022      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x80>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fe:	d01d      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x80>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <HAL_TIM_Base_Start_IT+0xc8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d018      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x80>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_TIM_Base_Start_IT+0xcc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x80>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_TIM_Base_Start_IT+0xd0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x80>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_TIM_Base_Start_IT+0xd4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d009      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x80>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <HAL_TIM_Base_Start_IT+0xd8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x80>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a18      	ldr	r2, [pc, #96]	@ (8005198 <HAL_TIM_Base_Start_IT+0xdc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d111      	bne.n	8005160 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d010      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515e:	e007      	b.n	8005170 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40010400 	.word	0x40010400
 8005194:	40014000 	.word	0x40014000
 8005198:	40001800 	.word	0x40001800

0800519c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d020      	beq.n	8005200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01b      	beq.n	8005200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0202 	mvn.w	r2, #2
 80051d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8d2 	bl	8005390 <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8c4 	bl	800537c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8d5 	bl	80053a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d020      	beq.n	800524c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0204 	mvn.w	r2, #4
 800521c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8ac 	bl	8005390 <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f89e 	bl	800537c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8af 	bl	80053a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d020      	beq.n	8005298 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0208 	mvn.w	r2, #8
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f886 	bl	8005390 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f878 	bl	800537c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f889 	bl	80053a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0210 	mvn.w	r2, #16
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2208      	movs	r2, #8
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f860 	bl	8005390 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f852 	bl	800537c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f863 	bl	80053a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0201 	mvn.w	r2, #1
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fb fcb8 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f900 	bl	800552c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f834 	bl	80053b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0220 	mvn.w	r2, #32
 800536c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8d2 	bl	8005518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a43      	ldr	r2, [pc, #268]	@ (80054ec <TIM_Base_SetConfig+0x120>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ea:	d00f      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a40      	ldr	r2, [pc, #256]	@ (80054f0 <TIM_Base_SetConfig+0x124>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00b      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3f      	ldr	r2, [pc, #252]	@ (80054f4 <TIM_Base_SetConfig+0x128>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3e      	ldr	r2, [pc, #248]	@ (80054f8 <TIM_Base_SetConfig+0x12c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3d      	ldr	r2, [pc, #244]	@ (80054fc <TIM_Base_SetConfig+0x130>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a32      	ldr	r2, [pc, #200]	@ (80054ec <TIM_Base_SetConfig+0x120>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d02b      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d027      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2f      	ldr	r2, [pc, #188]	@ (80054f0 <TIM_Base_SetConfig+0x124>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d023      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2e      	ldr	r2, [pc, #184]	@ (80054f4 <TIM_Base_SetConfig+0x128>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01f      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2d      	ldr	r2, [pc, #180]	@ (80054f8 <TIM_Base_SetConfig+0x12c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01b      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2c      	ldr	r2, [pc, #176]	@ (80054fc <TIM_Base_SetConfig+0x130>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d017      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2b      	ldr	r2, [pc, #172]	@ (8005500 <TIM_Base_SetConfig+0x134>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2a      	ldr	r2, [pc, #168]	@ (8005504 <TIM_Base_SetConfig+0x138>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00f      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a29      	ldr	r2, [pc, #164]	@ (8005508 <TIM_Base_SetConfig+0x13c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00b      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a28      	ldr	r2, [pc, #160]	@ (800550c <TIM_Base_SetConfig+0x140>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d007      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a27      	ldr	r2, [pc, #156]	@ (8005510 <TIM_Base_SetConfig+0x144>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a26      	ldr	r2, [pc, #152]	@ (8005514 <TIM_Base_SetConfig+0x148>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <TIM_Base_SetConfig+0x120>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_Base_SetConfig+0xf2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a10      	ldr	r2, [pc, #64]	@ (80054fc <TIM_Base_SetConfig+0x130>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d103      	bne.n	80054c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f043 0204 	orr.w	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800
 800550c:	40001800 	.word	0x40001800
 8005510:	40001c00 	.word	0x40001c00
 8005514:	40002000 	.word	0x40002000

08005518 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e042      	b.n	80055d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fb fe94 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	@ 0x24
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fa09 	bl	800599c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	@ 0x28
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d175      	bne.n	80056ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Transmit+0x2c>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e06e      	b.n	80056ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2221      	movs	r2, #33	@ 0x21
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561e:	f7fb ffdf 	bl	80015e0 <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005638:	d108      	bne.n	800564c <HAL_UART_Transmit+0x6c>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e003      	b.n	8005654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005654:	e02e      	b.n	80056b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	2180      	movs	r1, #128	@ 0x80
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f8df 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e03a      	b.n	80056ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3302      	adds	r3, #2
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e007      	b.n	80056a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1cb      	bne.n	8005656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2140      	movs	r1, #64	@ 0x40
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f8ab 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e006      	b.n	80056ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b08a      	sub	sp, #40	@ 0x28
 80056fa:	af02      	add	r7, sp, #8
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b20      	cmp	r3, #32
 8005714:	f040 8081 	bne.w	800581a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Receive+0x2e>
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e079      	b.n	800581c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2222      	movs	r2, #34	@ 0x22
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573c:	f7fb ff50 	bl	80015e0 <HAL_GetTick>
 8005740:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	88fa      	ldrh	r2, [r7, #6]
 8005746:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005756:	d108      	bne.n	800576a <HAL_UART_Receive+0x74>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	e003      	b.n	8005772 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005772:	e047      	b.n	8005804 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2200      	movs	r2, #0
 800577c:	2120      	movs	r1, #32
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f850 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e042      	b.n	800581c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10c      	bne.n	80057b6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3302      	adds	r3, #2
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e01f      	b.n	80057f6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	d007      	beq.n	80057d0 <HAL_UART_Receive+0xda>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <HAL_UART_Receive+0xe8>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e008      	b.n	80057f0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1b2      	bne.n	8005774 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800581a:	2302      	movs	r3, #2
  }
}
 800581c:	4618      	mov	r0, r3
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005834:	e03b      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d037      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fb fecf 	bl	80015e0 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <UART_WaitOnFlagUntilTimeout+0x30>
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e03a      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d023      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b80      	cmp	r3, #128	@ 0x80
 800586a:	d020      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b40      	cmp	r3, #64	@ 0x40
 8005870:	d01d      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b08      	cmp	r3, #8
 800587e:	d116      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f81d 	bl	80058d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2208      	movs	r2, #8
 80058a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e00f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4013      	ands	r3, r2
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	bf0c      	ite	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	2300      	movne	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d0b4      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b095      	sub	sp, #84	@ 0x54
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8005900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800590c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e5      	bne.n	80058de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3314      	adds	r3, #20
 8005918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	61fb      	str	r3, [r7, #28]
   return(result);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	2b01      	cmp	r3, #1
 800594c:	d119      	bne.n	8005982 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	60bb      	str	r3, [r7, #8]
   return(result);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f023 0310 	bic.w	r3, r3, #16
 8005964:	647b      	str	r3, [r7, #68]	@ 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800596e:	61ba      	str	r2, [r7, #24]
 8005970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6979      	ldr	r1, [r7, #20]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	613b      	str	r3, [r7, #16]
   return(result);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005990:	bf00      	nop
 8005992:	3754      	adds	r7, #84	@ 0x54
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800599c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a0:	b0c0      	sub	sp, #256	@ 0x100
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	68d9      	ldr	r1, [r3, #12]
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	ea40 0301 	orr.w	r3, r0, r1
 80059c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	431a      	orrs	r2, r3
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059f4:	f021 010c 	bic.w	r1, r1, #12
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a02:	430b      	orrs	r3, r1
 8005a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a16:	6999      	ldr	r1, [r3, #24]
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	ea40 0301 	orr.w	r3, r0, r1
 8005a22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b8f      	ldr	r3, [pc, #572]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d005      	beq.n	8005a3c <UART_SetConfig+0xa0>
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b8d      	ldr	r3, [pc, #564]	@ (8005c6c <UART_SetConfig+0x2d0>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d104      	bne.n	8005a46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a3c:	f7fd fe2a 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 8005a40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a44:	e003      	b.n	8005a4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a46:	f7fd fe11 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8005a4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a58:	f040 810c 	bne.w	8005c74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a6e:	4622      	mov	r2, r4
 8005a70:	462b      	mov	r3, r5
 8005a72:	1891      	adds	r1, r2, r2
 8005a74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a76:	415b      	adcs	r3, r3
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a7e:	4621      	mov	r1, r4
 8005a80:	eb12 0801 	adds.w	r8, r2, r1
 8005a84:	4629      	mov	r1, r5
 8005a86:	eb43 0901 	adc.w	r9, r3, r1
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a9e:	4690      	mov	r8, r2
 8005aa0:	4699      	mov	r9, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	eb18 0303 	adds.w	r3, r8, r3
 8005aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aac:	462b      	mov	r3, r5
 8005aae:	eb49 0303 	adc.w	r3, r9, r3
 8005ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ac2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aca:	460b      	mov	r3, r1
 8005acc:	18db      	adds	r3, r3, r3
 8005ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	eb42 0303 	adc.w	r3, r2, r3
 8005ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005adc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ae0:	f7fa fbc6 	bl	8000270 <__aeabi_uldivmod>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4b61      	ldr	r3, [pc, #388]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005aea:	fba3 2302 	umull	r2, r3, r3, r2
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	011c      	lsls	r4, r3, #4
 8005af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005afc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	1891      	adds	r1, r2, r2
 8005b0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b0c:	415b      	adcs	r3, r3
 8005b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b14:	4641      	mov	r1, r8
 8005b16:	eb12 0a01 	adds.w	sl, r2, r1
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b34:	4692      	mov	sl, r2
 8005b36:	469b      	mov	fp, r3
 8005b38:	4643      	mov	r3, r8
 8005b3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b42:	464b      	mov	r3, r9
 8005b44:	eb4b 0303 	adc.w	r3, fp, r3
 8005b48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b60:	460b      	mov	r3, r1
 8005b62:	18db      	adds	r3, r3, r3
 8005b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b66:	4613      	mov	r3, r2
 8005b68:	eb42 0303 	adc.w	r3, r2, r3
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b76:	f7fa fb7b 	bl	8000270 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4b3b      	ldr	r3, [pc, #236]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005b82:	fba3 2301 	umull	r2, r3, r3, r1
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2264      	movs	r2, #100	@ 0x64
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	1acb      	subs	r3, r1, r3
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b96:	4b36      	ldr	r3, [pc, #216]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005b98:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ba4:	441c      	add	r4, r3
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	1891      	adds	r1, r2, r2
 8005bbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bc0:	415b      	adcs	r3, r3
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bc8:	4641      	mov	r1, r8
 8005bca:	1851      	adds	r1, r2, r1
 8005bcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bce:	4649      	mov	r1, r9
 8005bd0:	414b      	adcs	r3, r1
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005be0:	4659      	mov	r1, fp
 8005be2:	00cb      	lsls	r3, r1, #3
 8005be4:	4651      	mov	r1, sl
 8005be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bea:	4651      	mov	r1, sl
 8005bec:	00ca      	lsls	r2, r1, #3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	18db      	adds	r3, r3, r3
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c22:	4613      	mov	r3, r2
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c32:	f7fa fb1d 	bl	8000270 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	2164      	movs	r1, #100	@ 0x64
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	3332      	adds	r3, #50	@ 0x32
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	f003 0207 	and.w	r2, r3, #7
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4422      	add	r2, r4
 8005c62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c64:	e106      	b.n	8005e74 <UART_SetConfig+0x4d8>
 8005c66:	bf00      	nop
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	40011400 	.word	0x40011400
 8005c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c86:	4642      	mov	r2, r8
 8005c88:	464b      	mov	r3, r9
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	6239      	str	r1, [r7, #32]
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c96:	4641      	mov	r1, r8
 8005c98:	1854      	adds	r4, r2, r1
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	eb43 0501 	adc.w	r5, r3, r1
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	00eb      	lsls	r3, r5, #3
 8005caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cae:	00e2      	lsls	r2, r4, #3
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	18e3      	adds	r3, r4, r3
 8005cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	eb45 0303 	adc.w	r3, r5, r3
 8005cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	008b      	lsls	r3, r1, #2
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cec:	4621      	mov	r1, r4
 8005cee:	008a      	lsls	r2, r1, #2
 8005cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cf4:	f7fa fabc 	bl	8000270 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4b60      	ldr	r3, [pc, #384]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	011c      	lsls	r4, r3, #4
 8005d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	61b9      	str	r1, [r7, #24]
 8005d20:	415b      	adcs	r3, r3
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d28:	4641      	mov	r1, r8
 8005d2a:	1851      	adds	r1, r2, r1
 8005d2c:	6139      	str	r1, [r7, #16]
 8005d2e:	4649      	mov	r1, r9
 8005d30:	414b      	adcs	r3, r1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d40:	4659      	mov	r1, fp
 8005d42:	00cb      	lsls	r3, r1, #3
 8005d44:	4651      	mov	r1, sl
 8005d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	00ca      	lsls	r2, r1, #3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	4642      	mov	r2, r8
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	460a      	mov	r2, r1
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d80:	4649      	mov	r1, r9
 8005d82:	008b      	lsls	r3, r1, #2
 8005d84:	4641      	mov	r1, r8
 8005d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	008a      	lsls	r2, r1, #2
 8005d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d92:	f7fa fa6d 	bl	8000270 <__aeabi_uldivmod>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4b38      	ldr	r3, [pc, #224]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2264      	movs	r2, #100	@ 0x64
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	1acb      	subs	r3, r1, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	@ 0x32
 8005db0:	4a33      	ldr	r2, [pc, #204]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dbc:	441c      	add	r4, r3
 8005dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ddc:	4641      	mov	r1, r8
 8005dde:	1851      	adds	r1, r2, r1
 8005de0:	6039      	str	r1, [r7, #0]
 8005de2:	4649      	mov	r1, r9
 8005de4:	414b      	adcs	r3, r1
 8005de6:	607b      	str	r3, [r7, #4]
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005df4:	4659      	mov	r1, fp
 8005df6:	00cb      	lsls	r3, r1, #3
 8005df8:	4651      	mov	r1, sl
 8005dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfe:	4651      	mov	r1, sl
 8005e00:	00ca      	lsls	r2, r1, #3
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e0e:	464b      	mov	r3, r9
 8005e10:	460a      	mov	r2, r1
 8005e12:	eb42 0303 	adc.w	r3, r2, r3
 8005e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e22:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e30:	4649      	mov	r1, r9
 8005e32:	008b      	lsls	r3, r1, #2
 8005e34:	4641      	mov	r1, r8
 8005e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	008a      	lsls	r2, r1, #2
 8005e3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e42:	f7fa fa15 	bl	8000270 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	2164      	movs	r1, #100	@ 0x64
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	3332      	adds	r3, #50	@ 0x32
 8005e5e:	4a08      	ldr	r2, [pc, #32]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	f003 020f 	and.w	r2, r3, #15
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4422      	add	r2, r4
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e80:	51eb851f 	.word	0x51eb851f

08005e84 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005e84:	b084      	sub	sp, #16
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	f107 001c 	add.w	r0, r7, #28
 8005e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005e9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005e9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005ea2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005ea6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005eaa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005eae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005ebe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	b004      	add	sp, #16
 8005ed8:	4770      	bx	lr

08005eda <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2203      	movs	r2, #3
 8005f22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005f72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005f78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005f88:	f023 030f 	bic.w	r3, r3, #15
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	b2db      	uxtb	r3, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3314      	adds	r3, #20
 8005fca:	461a      	mov	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	4413      	add	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
}  
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006008:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800600e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006014:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800602c:	2300      	movs	r3, #0

}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006048:	2310      	movs	r3, #16
 800604a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800604c:	2340      	movs	r3, #64	@ 0x40
 800604e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006058:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800605a:	f107 0308 	add.w	r3, r7, #8
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff ff74 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606a:	2110      	movs	r1, #16
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa19 	bl	80064a4 <SDMMC_GetCmdResp1>
 8006072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006074:	69fb      	ldr	r3, [r7, #28]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b088      	sub	sp, #32
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800608c:	2311      	movs	r3, #17
 800608e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006090:	2340      	movs	r3, #64	@ 0x40
 8006092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800609c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800609e:	f107 0308 	add.w	r3, r7, #8
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ff52 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80060aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ae:	2111      	movs	r1, #17
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f9f7 	bl	80064a4 <SDMMC_GetCmdResp1>
 80060b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060b8:	69fb      	ldr	r3, [r7, #28]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b088      	sub	sp, #32
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80060d0:	2312      	movs	r3, #18
 80060d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060d4:	2340      	movs	r3, #64	@ 0x40
 80060d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ff30 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80060ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f2:	2112      	movs	r1, #18
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f9d5 	bl	80064a4 <SDMMC_GetCmdResp1>
 80060fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060fc:	69fb      	ldr	r3, [r7, #28]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3720      	adds	r7, #32
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b088      	sub	sp, #32
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006114:	2318      	movs	r3, #24
 8006116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006118:	2340      	movs	r3, #64	@ 0x40
 800611a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006124:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006126:	f107 0308 	add.w	r3, r7, #8
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff0e 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006136:	2118      	movs	r1, #24
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f9b3 	bl	80064a4 <SDMMC_GetCmdResp1>
 800613e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006140:	69fb      	ldr	r3, [r7, #28]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b088      	sub	sp, #32
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006158:	2319      	movs	r3, #25
 800615a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800615c:	2340      	movs	r3, #64	@ 0x40
 800615e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006168:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff feec 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617a:	2119      	movs	r1, #25
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f991 	bl	80064a4 <SDMMC_GetCmdResp1>
 8006182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006184:	69fb      	ldr	r3, [r7, #28]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800619c:	230c      	movs	r3, #12
 800619e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061a0:	2340      	movs	r3, #64	@ 0x40
 80061a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ae:	f107 0308 	add.w	r3, r7, #8
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff feca 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80061ba:	4a05      	ldr	r2, [pc, #20]	@ (80061d0 <SDMMC_CmdStopTransfer+0x40>)
 80061bc:	210c      	movs	r1, #12
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f970 	bl	80064a4 <SDMMC_GetCmdResp1>
 80061c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061c6:	69fb      	ldr	r3, [r7, #28]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	05f5e100 	.word	0x05f5e100

080061d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	@ 0x28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80061e4:	2307      	movs	r3, #7
 80061e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061e8:	2340      	movs	r3, #64	@ 0x40
 80061ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061f4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061f6:	f107 0310 	add.w	r3, r7, #16
 80061fa:	4619      	mov	r1, r3
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff fea6 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006206:	2107      	movs	r1, #7
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f94b 	bl	80064a4 <SDMMC_GetCmdResp1>
 800620e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006212:	4618      	mov	r0, r3
 8006214:	3728      	adds	r7, #40	@ 0x28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b088      	sub	sp, #32
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006236:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006238:	f107 0308 	add.w	r3, r7, #8
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fe85 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb65 	bl	8006914 <SDMMC_GetCmdError>
 800624a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800624c:	69fb      	ldr	r3, [r7, #28]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b088      	sub	sp, #32
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800625e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006264:	2308      	movs	r3, #8
 8006266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006268:	2340      	movs	r3, #64	@ 0x40
 800626a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006274:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006276:	f107 0308 	add.w	r3, r7, #8
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fe66 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 faf8 	bl	8006878 <SDMMC_GetCmdResp7>
 8006288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800628a:	69fb      	ldr	r3, [r7, #28]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80062a2:	2337      	movs	r3, #55	@ 0x37
 80062a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062a6:	2340      	movs	r3, #64	@ 0x40
 80062a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062b4:	f107 0308 	add.w	r3, r7, #8
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fe47 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80062c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062c4:	2137      	movs	r1, #55	@ 0x37
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8ec 	bl	80064a4 <SDMMC_GetCmdResp1>
 80062cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ce:	69fb      	ldr	r3, [r7, #28]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80062ee:	2329      	movs	r3, #41	@ 0x29
 80062f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062f2:	2340      	movs	r3, #64	@ 0x40
 80062f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006300:	f107 0308 	add.w	r3, r7, #8
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fe21 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f9ff 	bl	8006710 <SDMMC_GetCmdResp3>
 8006312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006314:	69fb      	ldr	r3, [r7, #28]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b088      	sub	sp, #32
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800632c:	2306      	movs	r3, #6
 800632e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006330:	2340      	movs	r3, #64	@ 0x40
 8006332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800633c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800633e:	f107 0308 	add.w	r3, r7, #8
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fe02 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800634a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800634e:	2106      	movs	r1, #6
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f8a7 	bl	80064a4 <SDMMC_GetCmdResp1>
 8006356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006358:	69fb      	ldr	r3, [r7, #28]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800636e:	2333      	movs	r3, #51	@ 0x33
 8006370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006372:	2340      	movs	r3, #64	@ 0x40
 8006374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800637a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800637e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006380:	f107 0308 	add.w	r3, r7, #8
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fde1 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800638c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006390:	2133      	movs	r1, #51	@ 0x33
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f886 	bl	80064a4 <SDMMC_GetCmdResp1>
 8006398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800639a:	69fb      	ldr	r3, [r7, #28]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3720      	adds	r7, #32
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80063b0:	2302      	movs	r3, #2
 80063b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80063b4:	23c0      	movs	r3, #192	@ 0xc0
 80063b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fdc0 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f956 	bl	8006680 <SDMMC_GetCmdResp2>
 80063d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063d6:	69fb      	ldr	r3, [r7, #28]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80063ee:	2309      	movs	r3, #9
 80063f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80063f2:	23c0      	movs	r3, #192	@ 0xc0
 80063f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006400:	f107 0308 	add.w	r3, r7, #8
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fda1 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f937 	bl	8006680 <SDMMC_GetCmdResp2>
 8006412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006414:	69fb      	ldr	r3, [r7, #28]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b088      	sub	sp, #32
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800642c:	2303      	movs	r3, #3
 800642e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006430:	2340      	movs	r3, #64	@ 0x40
 8006432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800643c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fd82 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	2103      	movs	r1, #3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f99c 	bl	800678c <SDMMC_GetCmdResp6>
 8006454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006456:	69fb      	ldr	r3, [r7, #28]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800646e:	230d      	movs	r3, #13
 8006470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006472:	2340      	movs	r3, #64	@ 0x40
 8006474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800647a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800647e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fd61 	bl	8005f4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800648c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006490:	210d      	movs	r1, #13
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f806 	bl	80064a4 <SDMMC_GetCmdResp1>
 8006498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800649a:	69fb      	ldr	r3, [r7, #28]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	460b      	mov	r3, r1
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064b2:	4b70      	ldr	r3, [pc, #448]	@ (8006674 <SDMMC_GetCmdResp1+0x1d0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a70      	ldr	r2, [pc, #448]	@ (8006678 <SDMMC_GetCmdResp1+0x1d4>)
 80064b8:	fba2 2303 	umull	r2, r3, r2, r3
 80064bc:	0a5a      	lsrs	r2, r3, #9
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
 80064c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	1e5a      	subs	r2, r3, #1
 80064ca:	61fa      	str	r2, [r7, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064d4:	e0c9      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0ef      	beq.n	80064c6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ea      	bne.n	80064c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2204      	movs	r2, #4
 8006500:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006502:	2304      	movs	r3, #4
 8006504:	e0b1      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006518:	2301      	movs	r3, #1
 800651a:	e0a6      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	22c5      	movs	r2, #197	@ 0xc5
 8006520:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fd3d 	bl	8005fa2 <SDIO_GetCommandResponse>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	4293      	cmp	r3, r2
 8006530:	d001      	beq.n	8006536 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006532:	2301      	movs	r3, #1
 8006534:	e099      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006536:	2100      	movs	r1, #0
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff fd3f 	bl	8005fbc <SDIO_GetResponse>
 800653e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4b4e      	ldr	r3, [pc, #312]	@ (800667c <SDMMC_GetCmdResp1+0x1d8>)
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800654a:	2300      	movs	r3, #0
 800654c:	e08d      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	da02      	bge.n	800655a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006554:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006558:	e087      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006564:	2340      	movs	r3, #64	@ 0x40
 8006566:	e080      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	e079      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006584:	e071      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006594:	e069      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80065a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065a4:	e061      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80065b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065b4:	e059      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065c4:	e051      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80065d4:	e049      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80065e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065e4:	e041      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80065f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065f4:	e039      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006600:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006604:	e031      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006610:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006614:	e029      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006620:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006624:	e021      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006630:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006634:	e019      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006640:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006644:	e011      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006650:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006654:	e009      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006660:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006664:	e001      	b.n	800666a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000000 	.word	0x20000000
 8006678:	10624dd3 	.word	0x10624dd3
 800667c:	fdffe008 	.word	0xfdffe008

08006680 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006688:	4b1f      	ldr	r3, [pc, #124]	@ (8006708 <SDMMC_GetCmdResp2+0x88>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <SDMMC_GetCmdResp2+0x8c>)
 800668e:	fba2 2303 	umull	r2, r3, r2, r3
 8006692:	0a5b      	lsrs	r3, r3, #9
 8006694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006698:	fb02 f303 	mul.w	r3, r2, r3
 800669c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1e5a      	subs	r2, r3, #1
 80066a2:	60fa      	str	r2, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80066ac:	e026      	b.n	80066fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ef      	beq.n	800669e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ea      	bne.n	800669e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2204      	movs	r2, #4
 80066d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066da:	2304      	movs	r3, #4
 80066dc:	e00e      	b.n	80066fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e003      	b.n	80066fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	22c5      	movs	r2, #197	@ 0xc5
 80066f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20000000 	.word	0x20000000
 800670c:	10624dd3 	.word	0x10624dd3

08006710 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006718:	4b1a      	ldr	r3, [pc, #104]	@ (8006784 <SDMMC_GetCmdResp3+0x74>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <SDMMC_GetCmdResp3+0x78>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0a5b      	lsrs	r3, r3, #9
 8006724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1e5a      	subs	r2, r3, #1
 8006732:	60fa      	str	r2, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006738:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800673c:	e01b      	b.n	8006776 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006742:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ef      	beq.n	800672e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1ea      	bne.n	800672e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2204      	movs	r2, #4
 8006768:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800676a:	2304      	movs	r3, #4
 800676c:	e003      	b.n	8006776 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	22c5      	movs	r2, #197	@ 0xc5
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000000 	.word	0x20000000
 8006788:	10624dd3 	.word	0x10624dd3

0800678c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	460b      	mov	r3, r1
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800679a:	4b35      	ldr	r3, [pc, #212]	@ (8006870 <SDMMC_GetCmdResp6+0xe4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a35      	ldr	r2, [pc, #212]	@ (8006874 <SDMMC_GetCmdResp6+0xe8>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	0a5b      	lsrs	r3, r3, #9
 80067a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	1e5a      	subs	r2, r3, #1
 80067b4:	61fa      	str	r2, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80067be:	e052      	b.n	8006866 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ef      	beq.n	80067b0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1ea      	bne.n	80067b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2204      	movs	r2, #4
 80067ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067ec:	2304      	movs	r3, #4
 80067ee:	e03a      	b.n	8006866 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006802:	2301      	movs	r3, #1
 8006804:	e02f      	b.n	8006866 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff fbcb 	bl	8005fa2 <SDIO_GetCommandResponse>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	4293      	cmp	r3, r2
 8006814:	d001      	beq.n	800681a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006816:	2301      	movs	r3, #1
 8006818:	e025      	b.n	8006866 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	22c5      	movs	r2, #197	@ 0xc5
 800681e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006820:	2100      	movs	r1, #0
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff fbca 	bl	8005fbc <SDIO_GetResponse>
 8006828:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800683e:	2300      	movs	r3, #0
 8006840:	e011      	b.n	8006866 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800684c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006850:	e009      	b.n	8006866 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800685c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006860:	e001      	b.n	8006866 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006862:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000000 	.word	0x20000000
 8006874:	10624dd3 	.word	0x10624dd3

08006878 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006880:	4b22      	ldr	r3, [pc, #136]	@ (800690c <SDMMC_GetCmdResp7+0x94>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a22      	ldr	r2, [pc, #136]	@ (8006910 <SDMMC_GetCmdResp7+0x98>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	0a5b      	lsrs	r3, r3, #9
 800688c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006890:	fb02 f303 	mul.w	r3, r2, r3
 8006894:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1e5a      	subs	r2, r3, #1
 800689a:	60fa      	str	r2, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d102      	bne.n	80068a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80068a4:	e02c      	b.n	8006900 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ef      	beq.n	8006896 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ea      	bne.n	8006896 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2204      	movs	r2, #4
 80068d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068d2:	2304      	movs	r3, #4
 80068d4:	e014      	b.n	8006900 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e009      	b.n	8006900 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2240      	movs	r2, #64	@ 0x40
 80068fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80068fe:	2300      	movs	r3, #0
  
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000000 	.word	0x20000000
 8006910:	10624dd3 	.word	0x10624dd3

08006914 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800691c:	4b11      	ldr	r3, [pc, #68]	@ (8006964 <SDMMC_GetCmdError+0x50>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a11      	ldr	r2, [pc, #68]	@ (8006968 <SDMMC_GetCmdError+0x54>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	0a5b      	lsrs	r3, r3, #9
 8006928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692c:	fb02 f303 	mul.w	r3, r2, r3
 8006930:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1e5a      	subs	r2, r3, #1
 8006936:	60fa      	str	r2, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800693c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006940:	e009      	b.n	8006956 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f1      	beq.n	8006932 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	22c5      	movs	r2, #197	@ 0xc5
 8006952:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000000 	.word	0x20000000
 8006968:	10624dd3 	.word	0x10624dd3

0800696c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006970:	4904      	ldr	r1, [pc, #16]	@ (8006984 <MX_FATFS_Init+0x18>)
 8006972:	4805      	ldr	r0, [pc, #20]	@ (8006988 <MX_FATFS_Init+0x1c>)
 8006974:	f003 ff78 	bl	800a868 <FATFS_LinkDriver>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	4b03      	ldr	r3, [pc, #12]	@ (800698c <MX_FATFS_Init+0x20>)
 800697e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006980:	bf00      	nop
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000d78 	.word	0x20000d78
 8006988:	0800f9b0 	.word	0x0800f9b0
 800698c:	20000d74 	.word	0x20000d74

08006990 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006994:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006996:	4618      	mov	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80069aa:	f000 f896 	bl	8006ada <BSP_SD_IsDetected>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d001      	beq.n	80069b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e012      	b.n	80069de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80069b8:	480b      	ldr	r0, [pc, #44]	@ (80069e8 <BSP_SD_Init+0x48>)
 80069ba:	f7fc fff3 	bl	80039a4 <HAL_SD_Init>
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80069c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80069cc:	4806      	ldr	r0, [pc, #24]	@ (80069e8 <BSP_SD_Init+0x48>)
 80069ce:	f7fd fdb9 	bl	8004544 <HAL_SD_ConfigWideBusOperation>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80069dc:	79fb      	ldrb	r3, [r7, #7]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000013c 	.word	0x2000013c

080069ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	68f9      	ldr	r1, [r7, #12]
 8006a02:	4806      	ldr	r0, [pc, #24]	@ (8006a1c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006a04:	f7fd f876 	bl	8003af4 <HAL_SD_ReadBlocks_DMA>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2000013c 	.word	0x2000013c

08006a20 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	4806      	ldr	r0, [pc, #24]	@ (8006a50 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006a38:	f7fd f93e 	bl	8003cb8 <HAL_SD_WriteBlocks_DMA>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	2000013c 	.word	0x2000013c

08006a54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006a58:	4805      	ldr	r0, [pc, #20]	@ (8006a70 <BSP_SD_GetCardState+0x1c>)
 8006a5a:	f7fd fe0d 	bl	8004678 <HAL_SD_GetCardState>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	bf14      	ite	ne
 8006a64:	2301      	movne	r3, #1
 8006a66:	2300      	moveq	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	2000013c 	.word	0x2000013c

08006a74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	4803      	ldr	r0, [pc, #12]	@ (8006a8c <BSP_SD_GetCardInfo+0x18>)
 8006a80:	f7fd fd34 	bl	80044ec <HAL_SD_GetCardInfo>
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2000013c 	.word	0x2000013c

08006a90 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006a98:	f000 f818 	bl	8006acc <BSP_SD_AbortCallback>
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006aac:	f000 f9b4 	bl	8006e18 <BSP_SD_WriteCpltCallback>
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006ac0:	f000 f9bc 	bl	8006e3c <BSP_SD_ReadCpltCallback>
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0

}
 8006ad0:	bf00      	nop
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006ae4:	f000 f80c 	bl	8006b00 <BSP_PlatformIsDetected>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006aee:	2300      	movs	r3, #0
 8006af0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	b2db      	uxtb	r3, r3
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006b06:	2301      	movs	r3, #1
 8006b08:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006b0a:	2108      	movs	r1, #8
 8006b0c:	4806      	ldr	r0, [pc, #24]	@ (8006b28 <BSP_PlatformIsDetected+0x28>)
 8006b0e:	f7fb fbb3 	bl	8002278 <HAL_GPIO_ReadPin>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40020c00 	.word	0x40020c00

08006b2c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8006b34:	f004 f888 	bl	800ac48 <osKernelGetTickCount>
 8006b38:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8006b3a:	e006      	b.n	8006b4a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b3c:	f7ff ff8a 	bl	8006a54 <BSP_SD_GetCardState>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e009      	b.n	8006b5e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8006b4a:	f004 f87d 	bl	800ac48 <osKernelGetTickCount>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d8f0      	bhi.n	8006b3c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006b72:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <SD_CheckStatus+0x38>)
 8006b74:	2201      	movs	r2, #1
 8006b76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b78:	f7ff ff6c 	bl	8006a54 <BSP_SD_GetCardState>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006b82:	4b07      	ldr	r3, [pc, #28]	@ (8006ba0 <SD_CheckStatus+0x38>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <SD_CheckStatus+0x38>)
 8006b90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006b92:	4b03      	ldr	r3, [pc, #12]	@ (8006ba0 <SD_CheckStatus+0x38>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	b2db      	uxtb	r3, r3
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000011 	.word	0x20000011

08006ba4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006bae:	4b1c      	ldr	r3, [pc, #112]	@ (8006c20 <SD_initialize+0x7c>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006bb4:	f004 f800 	bl	800abb8 <osKernelGetState>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d129      	bne.n	8006c12 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006bbe:	f7ff feef 	bl	80069a0 <BSP_SD_Init>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d107      	bne.n	8006bd8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff ffcc 	bl	8006b68 <SD_CheckStatus>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <SD_initialize+0x7c>)
 8006bd6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006bd8:	4b11      	ldr	r3, [pc, #68]	@ (8006c20 <SD_initialize+0x7c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d017      	beq.n	8006c12 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8006be2:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <SD_initialize+0x80>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d107      	bne.n	8006bfa <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2102      	movs	r1, #2
 8006bee:	200a      	movs	r0, #10
 8006bf0:	f004 fa30 	bl	800b054 <osMessageQueueNew>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8006c24 <SD_initialize+0x80>)
 8006bf8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <SD_initialize+0x80>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006c02:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <SD_initialize+0x7c>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	4b04      	ldr	r3, [pc, #16]	@ (8006c20 <SD_initialize+0x7c>)
 8006c10:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006c12:	4b03      	ldr	r3, [pc, #12]	@ (8006c20 <SD_initialize+0x7c>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	b2db      	uxtb	r3, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000011 	.word	0x20000011
 8006c24:	20000fb4 	.word	0x20000fb4

08006c28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff ff97 	bl	8006b68 <SD_CheckStatus>
 8006c3a:	4603      	mov	r3, r0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006c58:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006c5c:	f7ff ff66 	bl	8006b2c <SD_CheckStatusWithTimeout>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	da01      	bge.n	8006c6a <SD_read+0x26>
  {
    return res;
 8006c66:	7ffb      	ldrb	r3, [r7, #31]
 8006c68:	e02f      	b.n	8006cca <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	68b8      	ldr	r0, [r7, #8]
 8006c70:	f7ff febc 	bl	80069ec <BSP_SD_ReadBlocks_DMA>
 8006c74:	4603      	mov	r3, r0
 8006c76:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8006c78:	7fbb      	ldrb	r3, [r7, #30]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d124      	bne.n	8006cc8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006c7e:	4b15      	ldr	r3, [pc, #84]	@ (8006cd4 <SD_read+0x90>)
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	f107 0112 	add.w	r1, r7, #18
 8006c86:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f004 fab6 	bl	800b1fc <osMessageQueueGet>
 8006c90:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d117      	bne.n	8006cc8 <SD_read+0x84>
 8006c98:	8a7b      	ldrh	r3, [r7, #18]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d114      	bne.n	8006cc8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8006c9e:	f003 ffd3 	bl	800ac48 <osKernelGetTickCount>
 8006ca2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006ca4:	e007      	b.n	8006cb6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006ca6:	f7ff fed5 	bl	8006a54 <BSP_SD_GetCardState>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <SD_read+0x72>
              {
                res = RES_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006cb4:	e008      	b.n	8006cc8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006cb6:	f003 ffc7 	bl	800ac48 <osKernelGetTickCount>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d9ee      	bls.n	8006ca6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000fb4 	.word	0x20000fb4

08006cd8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006cec:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006cf0:	f7ff ff1c 	bl	8006b2c <SD_CheckStatusWithTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da01      	bge.n	8006cfe <SD_write+0x26>
  {
    return res;
 8006cfa:	7ffb      	ldrb	r3, [r7, #31]
 8006cfc:	e02d      	b.n	8006d5a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	68b8      	ldr	r0, [r7, #8]
 8006d04:	f7ff fe8c 	bl	8006a20 <BSP_SD_WriteBlocks_DMA>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d124      	bne.n	8006d58 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006d0e:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <SD_write+0x8c>)
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	f107 0112 	add.w	r1, r7, #18
 8006d16:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f004 fa6e 	bl	800b1fc <osMessageQueueGet>
 8006d20:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d117      	bne.n	8006d58 <SD_write+0x80>
 8006d28:	8a7b      	ldrh	r3, [r7, #18]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d114      	bne.n	8006d58 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8006d2e:	f003 ff8b 	bl	800ac48 <osKernelGetTickCount>
 8006d32:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006d34:	e007      	b.n	8006d46 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006d36:	f7ff fe8d 	bl	8006a54 <BSP_SD_GetCardState>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <SD_write+0x6e>
          {
            res = RES_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	77fb      	strb	r3, [r7, #31]
            break;
 8006d44:	e008      	b.n	8006d58 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006d46:	f003 ff7f 	bl	800ac48 <osKernelGetTickCount>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d9ee      	bls.n	8006d36 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8006d58:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3720      	adds	r7, #32
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000fb4 	.word	0x20000fb4

08006d68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08c      	sub	sp, #48	@ 0x30
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	603a      	str	r2, [r7, #0]
 8006d72:	71fb      	strb	r3, [r7, #7]
 8006d74:	460b      	mov	r3, r1
 8006d76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006d7e:	4b25      	ldr	r3, [pc, #148]	@ (8006e14 <SD_ioctl+0xac>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <SD_ioctl+0x28>
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e03c      	b.n	8006e0a <SD_ioctl+0xa2>

  switch (cmd)
 8006d90:	79bb      	ldrb	r3, [r7, #6]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d834      	bhi.n	8006e00 <SD_ioctl+0x98>
 8006d96:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <SD_ioctl+0x34>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006db5 	.word	0x08006db5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006de7 	.word	0x08006de7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006db2:	e028      	b.n	8006e06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fe5b 	bl	8006a74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006dca:	e01c      	b.n	8006e06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006dcc:	f107 030c 	add.w	r3, r7, #12
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff fe4f 	bl	8006a74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006de4:	e00f      	b.n	8006e06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006de6:	f107 030c 	add.w	r3, r7, #12
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fe42 	bl	8006a74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	0a5a      	lsrs	r2, r3, #9
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006dfe:	e002      	b.n	8006e06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006e00:	2304      	movs	r3, #4
 8006e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006e06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3730      	adds	r7, #48	@ 0x30
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000011 	.word	0x20000011

08006e18 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8006e22:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <BSP_SD_WriteCpltCallback+0x20>)
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	1db9      	adds	r1, r7, #6
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f004 f986 	bl	800b13c <osMessageQueuePut>
#endif
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000fb4 	.word	0x20000fb4

08006e3c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8006e42:	2301      	movs	r3, #1
 8006e44:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8006e46:	4b05      	ldr	r3, [pc, #20]	@ (8006e5c <BSP_SD_ReadCpltCallback+0x20>)
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	1db9      	adds	r1, r7, #6
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f004 f974 	bl	800b13c <osMessageQueuePut>
#endif
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000fb4 	.word	0x20000fb4

08006e60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <disk_status+0x30>)
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	79fa      	ldrb	r2, [r7, #7]
 8006e78:	4905      	ldr	r1, [pc, #20]	@ (8006e90 <disk_status+0x30>)
 8006e7a:	440a      	add	r2, r1
 8006e7c:	7a12      	ldrb	r2, [r2, #8]
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4798      	blx	r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000fe0 	.word	0x20000fe0

08006e94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee0 <disk_initialize+0x4c>)
 8006ea6:	5cd3      	ldrb	r3, [r2, r3]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d114      	bne.n	8006ed6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee0 <disk_initialize+0x4c>)
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	79fa      	ldrb	r2, [r7, #7]
 8006eba:	4909      	ldr	r1, [pc, #36]	@ (8006ee0 <disk_initialize+0x4c>)
 8006ebc:	440a      	add	r2, r1
 8006ebe:	7a12      	ldrb	r2, [r2, #8]
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	4a03      	ldr	r2, [pc, #12]	@ (8006ee0 <disk_initialize+0x4c>)
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000fe0 	.word	0x20000fe0

08006ee4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ee4:	b590      	push	{r4, r7, lr}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8006f20 <disk_read+0x3c>)
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	689c      	ldr	r4, [r3, #8]
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	4a07      	ldr	r2, [pc, #28]	@ (8006f20 <disk_read+0x3c>)
 8006f04:	4413      	add	r3, r2
 8006f06:	7a18      	ldrb	r0, [r3, #8]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	47a0      	blx	r4
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd90      	pop	{r4, r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000fe0 	.word	0x20000fe0

08006f24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006f24:	b590      	push	{r4, r7, lr}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	4a0a      	ldr	r2, [pc, #40]	@ (8006f60 <disk_write+0x3c>)
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	68dc      	ldr	r4, [r3, #12]
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	4a07      	ldr	r2, [pc, #28]	@ (8006f60 <disk_write+0x3c>)
 8006f44:	4413      	add	r3, r2
 8006f46:	7a18      	ldrb	r0, [r3, #8]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	47a0      	blx	r4
 8006f50:	4603      	mov	r3, r0
 8006f52:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd90      	pop	{r4, r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000fe0 	.word	0x20000fe0

08006f64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	603a      	str	r2, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
 8006f70:	460b      	mov	r3, r1
 8006f72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	4a09      	ldr	r2, [pc, #36]	@ (8006f9c <disk_ioctl+0x38>)
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	79fa      	ldrb	r2, [r7, #7]
 8006f82:	4906      	ldr	r1, [pc, #24]	@ (8006f9c <disk_ioctl+0x38>)
 8006f84:	440a      	add	r2, r1
 8006f86:	7a10      	ldrb	r0, [r2, #8]
 8006f88:	79b9      	ldrb	r1, [r7, #6]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4798      	blx	r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73fb      	strb	r3, [r7, #15]
  return res;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20000fe0 	.word	0x20000fe0

08006fa0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3301      	adds	r3, #1
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006fb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	b21a      	sxth	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	b21b      	sxth	r3, r3
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006fc4:	89fb      	ldrh	r3, [r7, #14]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3303      	adds	r3, #3
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	3202      	adds	r2, #2
 8006fea:	7812      	ldrb	r2, [r2, #0]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	3201      	adds	r2, #1
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	7812      	ldrb	r2, [r2, #0]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
	return rv;
 800700a:	68fb      	ldr	r3, [r7, #12]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	887a      	ldrh	r2, [r7, #2]
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	887b      	ldrh	r3, [r7, #2]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	887a      	ldrh	r2, [r7, #2]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	0a1b      	lsrs	r3, r3, #8
 800708c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80070a6:	b480      	push	{r7}
 80070a8:	b087      	sub	sp, #28
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	1c53      	adds	r3, r2, #1
 80070c4:	613b      	str	r3, [r7, #16]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	1c59      	adds	r1, r3, #1
 80070ca:	6179      	str	r1, [r7, #20]
 80070cc:	7812      	ldrb	r2, [r2, #0]
 80070ce:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f1      	bne.n	80070c0 <mem_cpy+0x1a>
	}
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	617a      	str	r2, [r7, #20]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3b01      	subs	r3, #1
 8007108:	607b      	str	r3, [r7, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f3      	bne.n	80070f8 <mem_set+0x10>
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800711e:	b480      	push	{r7}
 8007120:	b089      	sub	sp, #36	@ 0x24
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	61fb      	str	r3, [r7, #28]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	61fa      	str	r2, [r7, #28]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	4619      	mov	r1, r3
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	61ba      	str	r2, [r7, #24]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	1acb      	subs	r3, r1, r3
 800714a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3b01      	subs	r3, #1
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <mem_cmp+0x40>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0eb      	beq.n	8007136 <mem_cmp+0x18>

	return r;
 800715e:	697b      	ldr	r3, [r7, #20]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3724      	adds	r7, #36	@ 0x24
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007176:	e002      	b.n	800717e <chk_chr+0x12>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3301      	adds	r3, #1
 800717c:	607b      	str	r3, [r7, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <chk_chr+0x26>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	4293      	cmp	r3, r2
 8007190:	d1f2      	bne.n	8007178 <chk_chr+0xc>
	return *str;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	781b      	ldrb	r3, [r3, #0]
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d009      	beq.n	80071c4 <lock_fs+0x22>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f003 fc76 	bl	800aaa6 <ff_req_grant>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <lock_fs+0x22>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <lock_fs+0x24>
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00d      	beq.n	80071fc <unlock_fs+0x2e>
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	2b0c      	cmp	r3, #12
 80071e4:	d00a      	beq.n	80071fc <unlock_fs+0x2e>
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	2b0b      	cmp	r3, #11
 80071ea:	d007      	beq.n	80071fc <unlock_fs+0x2e>
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d004      	beq.n	80071fc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f003 fc6a 	bl	800aad0 <ff_rel_grant>
	}
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800720e:	2300      	movs	r3, #0
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e029      	b.n	800726c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007218:	4a27      	ldr	r2, [pc, #156]	@ (80072b8 <chk_lock+0xb4>)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	4413      	add	r3, r2
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01d      	beq.n	8007262 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007226:	4a24      	ldr	r2, [pc, #144]	@ (80072b8 <chk_lock+0xb4>)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	4413      	add	r3, r2
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d116      	bne.n	8007266 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007238:	4a1f      	ldr	r2, [pc, #124]	@ (80072b8 <chk_lock+0xb4>)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	4413      	add	r3, r2
 8007240:	3304      	adds	r3, #4
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007248:	429a      	cmp	r2, r3
 800724a:	d10c      	bne.n	8007266 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800724c:	4a1a      	ldr	r2, [pc, #104]	@ (80072b8 <chk_lock+0xb4>)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	4413      	add	r3, r2
 8007254:	3308      	adds	r3, #8
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800725c:	429a      	cmp	r2, r3
 800725e:	d102      	bne.n	8007266 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007260:	e007      	b.n	8007272 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007262:	2301      	movs	r3, #1
 8007264:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d9d2      	bls.n	8007218 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d109      	bne.n	800728c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <chk_lock+0x80>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d101      	bne.n	8007288 <chk_lock+0x84>
 8007284:	2300      	movs	r3, #0
 8007286:	e010      	b.n	80072aa <chk_lock+0xa6>
 8007288:	2312      	movs	r3, #18
 800728a:	e00e      	b.n	80072aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d108      	bne.n	80072a4 <chk_lock+0xa0>
 8007292:	4a09      	ldr	r2, [pc, #36]	@ (80072b8 <chk_lock+0xb4>)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	4413      	add	r3, r2
 800729a:	330c      	adds	r3, #12
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a2:	d101      	bne.n	80072a8 <chk_lock+0xa4>
 80072a4:	2310      	movs	r3, #16
 80072a6:	e000      	b.n	80072aa <chk_lock+0xa6>
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000fc0 	.word	0x20000fc0

080072bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072c2:	2300      	movs	r3, #0
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	e002      	b.n	80072ce <enq_lock+0x12>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3301      	adds	r3, #1
 80072cc:	607b      	str	r3, [r7, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d806      	bhi.n	80072e2 <enq_lock+0x26>
 80072d4:	4a09      	ldr	r2, [pc, #36]	@ (80072fc <enq_lock+0x40>)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	4413      	add	r3, r2
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f2      	bne.n	80072c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	bf14      	ite	ne
 80072e8:	2301      	movne	r3, #1
 80072ea:	2300      	moveq	r3, #0
 80072ec:	b2db      	uxtb	r3, r3
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20000fc0 	.word	0x20000fc0

08007300 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e01f      	b.n	8007350 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007310:	4a41      	ldr	r2, [pc, #260]	@ (8007418 <inc_lock+0x118>)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	4413      	add	r3, r2
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d113      	bne.n	800734a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007322:	4a3d      	ldr	r2, [pc, #244]	@ (8007418 <inc_lock+0x118>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	4413      	add	r3, r2
 800732a:	3304      	adds	r3, #4
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007332:	429a      	cmp	r2, r3
 8007334:	d109      	bne.n	800734a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007336:	4a38      	ldr	r2, [pc, #224]	@ (8007418 <inc_lock+0x118>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	4413      	add	r3, r2
 800733e:	3308      	adds	r3, #8
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007346:	429a      	cmp	r2, r3
 8007348:	d006      	beq.n	8007358 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d9dc      	bls.n	8007310 <inc_lock+0x10>
 8007356:	e000      	b.n	800735a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007358:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d132      	bne.n	80073c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e002      	b.n	800736c <inc_lock+0x6c>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d806      	bhi.n	8007380 <inc_lock+0x80>
 8007372:	4a29      	ldr	r2, [pc, #164]	@ (8007418 <inc_lock+0x118>)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	4413      	add	r3, r2
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f2      	bne.n	8007366 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d101      	bne.n	800738a <inc_lock+0x8a>
 8007386:	2300      	movs	r3, #0
 8007388:	e040      	b.n	800740c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4922      	ldr	r1, [pc, #136]	@ (8007418 <inc_lock+0x118>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	440b      	add	r3, r1
 8007396:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	491e      	ldr	r1, [pc, #120]	@ (8007418 <inc_lock+0x118>)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	440b      	add	r3, r1
 80073a4:	3304      	adds	r3, #4
 80073a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	695a      	ldr	r2, [r3, #20]
 80073ac:	491a      	ldr	r1, [pc, #104]	@ (8007418 <inc_lock+0x118>)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	440b      	add	r3, r1
 80073b4:	3308      	adds	r3, #8
 80073b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80073b8:	4a17      	ldr	r2, [pc, #92]	@ (8007418 <inc_lock+0x118>)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	4413      	add	r3, r2
 80073c0:	330c      	adds	r3, #12
 80073c2:	2200      	movs	r2, #0
 80073c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d009      	beq.n	80073e0 <inc_lock+0xe0>
 80073cc:	4a12      	ldr	r2, [pc, #72]	@ (8007418 <inc_lock+0x118>)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	4413      	add	r3, r2
 80073d4:	330c      	adds	r3, #12
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <inc_lock+0xe0>
 80073dc:	2300      	movs	r3, #0
 80073de:	e015      	b.n	800740c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d108      	bne.n	80073f8 <inc_lock+0xf8>
 80073e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007418 <inc_lock+0x118>)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	4413      	add	r3, r2
 80073ee:	330c      	adds	r3, #12
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	3301      	adds	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	e001      	b.n	80073fc <inc_lock+0xfc>
 80073f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073fc:	4906      	ldr	r1, [pc, #24]	@ (8007418 <inc_lock+0x118>)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	440b      	add	r3, r1
 8007404:	330c      	adds	r3, #12
 8007406:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	20000fc0 	.word	0x20000fc0

0800741c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3b01      	subs	r3, #1
 8007428:	607b      	str	r3, [r7, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d825      	bhi.n	800747c <dec_lock+0x60>
		n = Files[i].ctr;
 8007430:	4a17      	ldr	r2, [pc, #92]	@ (8007490 <dec_lock+0x74>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	4413      	add	r3, r2
 8007438:	330c      	adds	r3, #12
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800743e:	89fb      	ldrh	r3, [r7, #14]
 8007440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007444:	d101      	bne.n	800744a <dec_lock+0x2e>
 8007446:	2300      	movs	r3, #0
 8007448:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800744a:	89fb      	ldrh	r3, [r7, #14]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <dec_lock+0x3a>
 8007450:	89fb      	ldrh	r3, [r7, #14]
 8007452:	3b01      	subs	r3, #1
 8007454:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007456:	4a0e      	ldr	r2, [pc, #56]	@ (8007490 <dec_lock+0x74>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	4413      	add	r3, r2
 800745e:	330c      	adds	r3, #12
 8007460:	89fa      	ldrh	r2, [r7, #14]
 8007462:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007464:	89fb      	ldrh	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <dec_lock+0x5a>
 800746a:	4a09      	ldr	r2, [pc, #36]	@ (8007490 <dec_lock+0x74>)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	4413      	add	r3, r2
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	737b      	strb	r3, [r7, #13]
 800747a:	e001      	b.n	8007480 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800747c:	2302      	movs	r3, #2
 800747e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007480:	7b7b      	ldrb	r3, [r7, #13]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000fc0 	.word	0x20000fc0

08007494 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e010      	b.n	80074c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80074a2:	4a0d      	ldr	r2, [pc, #52]	@ (80074d8 <clear_lock+0x44>)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	4413      	add	r3, r2
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d105      	bne.n	80074be <clear_lock+0x2a>
 80074b2:	4a09      	ldr	r2, [pc, #36]	@ (80074d8 <clear_lock+0x44>)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4413      	add	r3, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d9eb      	bls.n	80074a2 <clear_lock+0xe>
	}
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000fc0 	.word	0x20000fc0

080074dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	78db      	ldrb	r3, [r3, #3]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d034      	beq.n	800755a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7858      	ldrb	r0, [r3, #1]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007500:	2301      	movs	r3, #1
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	f7ff fd0e 	bl	8006f24 <disk_write>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <sync_window+0x38>
			res = FR_DISK_ERR;
 800750e:	2301      	movs	r3, #1
 8007510:	73fb      	strb	r3, [r7, #15]
 8007512:	e022      	b.n	800755a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	1ad2      	subs	r2, r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	429a      	cmp	r2, r3
 8007528:	d217      	bcs.n	800755a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	789b      	ldrb	r3, [r3, #2]
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	e010      	b.n	8007554 <sync_window+0x78>
					wsect += fs->fsize;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7858      	ldrb	r0, [r3, #1]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007546:	2301      	movs	r3, #1
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	f7ff fceb 	bl	8006f24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3b01      	subs	r3, #1
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d8eb      	bhi.n	8007532 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800755a:	7bfb      	ldrb	r3, [r7, #15]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d01b      	beq.n	80075b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ffad 	bl	80074dc <sync_window>
 8007582:	4603      	mov	r3, r0
 8007584:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d113      	bne.n	80075b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	7858      	ldrb	r0, [r3, #1]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007596:	2301      	movs	r3, #1
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	f7ff fca3 	bl	8006ee4 <disk_read>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80075a4:	f04f 33ff 	mov.w	r3, #4294967295
 80075a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff ff87 	bl	80074dc <sync_window>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d158      	bne.n	800768a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d148      	bne.n	8007672 <sync_fs+0xb2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	791b      	ldrb	r3, [r3, #4]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d144      	bne.n	8007672 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3338      	adds	r3, #56	@ 0x38
 80075ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fd78 	bl	80070e8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3338      	adds	r3, #56	@ 0x38
 80075fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007600:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fd07 	bl	8007018 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3338      	adds	r3, #56	@ 0x38
 800760e:	4921      	ldr	r1, [pc, #132]	@ (8007694 <sync_fs+0xd4>)
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff fd1c 	bl	800704e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3338      	adds	r3, #56	@ 0x38
 800761a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800761e:	491e      	ldr	r1, [pc, #120]	@ (8007698 <sync_fs+0xd8>)
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fd14 	bl	800704e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3338      	adds	r3, #56	@ 0x38
 800762a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f7ff fd0a 	bl	800704e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3338      	adds	r3, #56	@ 0x38
 800763e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f7ff fd00 	bl	800704e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	7858      	ldrb	r0, [r3, #1]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007666:	2301      	movs	r3, #1
 8007668:	f7ff fc5c 	bl	8006f24 <disk_write>
			fs->fsi_flag = 0;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fc72 	bl	8006f64 <disk_ioctl>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <sync_fs+0xca>
 8007686:	2301      	movs	r3, #1
 8007688:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	41615252 	.word	0x41615252
 8007698:	61417272 	.word	0x61417272

0800769c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	3b02      	subs	r3, #2
 80076aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	3b02      	subs	r3, #2
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d301      	bcc.n	80076bc <clust2sect+0x20>
 80076b8:	2300      	movs	r3, #0
 80076ba:	e008      	b.n	80076ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	895b      	ldrh	r3, [r3, #10]
 80076c0:	461a      	mov	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	fb03 f202 	mul.w	r2, r3, r2
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	4413      	add	r3, r2
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d904      	bls.n	80076fa <get_fat+0x20>
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d302      	bcc.n	8007700 <get_fat+0x26>
		val = 1;	/* Internal error */
 80076fa:	2301      	movs	r3, #1
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	e08e      	b.n	800781e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007700:	f04f 33ff 	mov.w	r3, #4294967295
 8007704:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d061      	beq.n	80077d2 <get_fat+0xf8>
 800770e:	2b03      	cmp	r3, #3
 8007710:	dc7b      	bgt.n	800780a <get_fat+0x130>
 8007712:	2b01      	cmp	r3, #1
 8007714:	d002      	beq.n	800771c <get_fat+0x42>
 8007716:	2b02      	cmp	r3, #2
 8007718:	d041      	beq.n	800779e <get_fat+0xc4>
 800771a:	e076      	b.n	800780a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	085b      	lsrs	r3, r3, #1
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	0a5b      	lsrs	r3, r3, #9
 8007732:	4413      	add	r3, r2
 8007734:	4619      	mov	r1, r3
 8007736:	6938      	ldr	r0, [r7, #16]
 8007738:	f7ff ff14 	bl	8007564 <move_window>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d166      	bne.n	8007810 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	60fa      	str	r2, [r7, #12]
 8007748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4413      	add	r3, r2
 8007750:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007754:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	0a5b      	lsrs	r3, r3, #9
 800775e:	4413      	add	r3, r2
 8007760:	4619      	mov	r1, r3
 8007762:	6938      	ldr	r0, [r7, #16]
 8007764:	f7ff fefe 	bl	8007564 <move_window>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d152      	bne.n	8007814 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4313      	orrs	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <get_fat+0xba>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	e002      	b.n	800779a <get_fat+0xc0>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800779a:	617b      	str	r3, [r7, #20]
			break;
 800779c:	e03f      	b.n	800781e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	0a1b      	lsrs	r3, r3, #8
 80077a6:	4413      	add	r3, r2
 80077a8:	4619      	mov	r1, r3
 80077aa:	6938      	ldr	r0, [r7, #16]
 80077ac:	f7ff feda 	bl	8007564 <move_window>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d130      	bne.n	8007818 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80077c4:	4413      	add	r3, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff fbea 	bl	8006fa0 <ld_word>
 80077cc:	4603      	mov	r3, r0
 80077ce:	617b      	str	r3, [r7, #20]
			break;
 80077d0:	e025      	b.n	800781e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	09db      	lsrs	r3, r3, #7
 80077da:	4413      	add	r3, r2
 80077dc:	4619      	mov	r1, r3
 80077de:	6938      	ldr	r0, [r7, #16]
 80077e0:	f7ff fec0 	bl	8007564 <move_window>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d118      	bne.n	800781c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80077f8:	4413      	add	r3, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fbe9 	bl	8006fd2 <ld_dword>
 8007800:	4603      	mov	r3, r0
 8007802:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007806:	617b      	str	r3, [r7, #20]
			break;
 8007808:	e009      	b.n	800781e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800780a:	2301      	movs	r3, #1
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e006      	b.n	800781e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007810:	bf00      	nop
 8007812:	e004      	b.n	800781e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007814:	bf00      	nop
 8007816:	e002      	b.n	800781e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007818:	bf00      	nop
 800781a:	e000      	b.n	800781e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800781c:	bf00      	nop
		}
	}

	return val;
 800781e:	697b      	ldr	r3, [r7, #20]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b089      	sub	sp, #36	@ 0x24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007834:	2302      	movs	r3, #2
 8007836:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b01      	cmp	r3, #1
 800783c:	f240 80d9 	bls.w	80079f2 <put_fat+0x1ca>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	f080 80d3 	bcs.w	80079f2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b03      	cmp	r3, #3
 8007852:	f000 8096 	beq.w	8007982 <put_fat+0x15a>
 8007856:	2b03      	cmp	r3, #3
 8007858:	f300 80cb 	bgt.w	80079f2 <put_fat+0x1ca>
 800785c:	2b01      	cmp	r3, #1
 800785e:	d002      	beq.n	8007866 <put_fat+0x3e>
 8007860:	2b02      	cmp	r3, #2
 8007862:	d06e      	beq.n	8007942 <put_fat+0x11a>
 8007864:	e0c5      	b.n	80079f2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	61bb      	str	r3, [r7, #24]
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	085b      	lsrs	r3, r3, #1
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4413      	add	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	0a5b      	lsrs	r3, r3, #9
 800787c:	4413      	add	r3, r2
 800787e:	4619      	mov	r1, r3
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fe6f 	bl	8007564 <move_window>
 8007886:	4603      	mov	r3, r0
 8007888:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800788a:	7ffb      	ldrb	r3, [r7, #31]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 80a9 	bne.w	80079e4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	1c59      	adds	r1, r3, #1
 800789c:	61b9      	str	r1, [r7, #24]
 800789e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a2:	4413      	add	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00d      	beq.n	80078cc <put_fat+0xa4>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	b25b      	sxtb	r3, r3
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	b25a      	sxtb	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	4313      	orrs	r3, r2
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e001      	b.n	80078d0 <put_fat+0xa8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	0a5b      	lsrs	r3, r3, #9
 80078e2:	4413      	add	r3, r2
 80078e4:	4619      	mov	r1, r3
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fe3c 	bl	8007564 <move_window>
 80078ec:	4603      	mov	r3, r0
 80078ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078f0:	7ffb      	ldrb	r3, [r7, #31]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d178      	bne.n	80079e8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007902:	4413      	add	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <put_fat+0xf0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	b2db      	uxtb	r3, r3
 8007916:	e00e      	b.n	8007936 <put_fat+0x10e>
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b25b      	sxtb	r3, r3
 800791e:	f023 030f 	bic.w	r3, r3, #15
 8007922:	b25a      	sxtb	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	b25b      	sxtb	r3, r3
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	b25b      	sxtb	r3, r3
 8007930:	4313      	orrs	r3, r2
 8007932:	b25b      	sxtb	r3, r3
 8007934:	b2db      	uxtb	r3, r3
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	70da      	strb	r2, [r3, #3]
			break;
 8007940:	e057      	b.n	80079f2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	0a1b      	lsrs	r3, r3, #8
 800794a:	4413      	add	r3, r2
 800794c:	4619      	mov	r1, r3
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff fe08 	bl	8007564 <move_window>
 8007954:	4603      	mov	r3, r0
 8007956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007958:	7ffb      	ldrb	r3, [r7, #31]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d146      	bne.n	80079ec <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800796c:	4413      	add	r3, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	b292      	uxth	r2, r2
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fb4f 	bl	8007018 <st_word>
			fs->wflag = 1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	70da      	strb	r2, [r3, #3]
			break;
 8007980:	e037      	b.n	80079f2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	09db      	lsrs	r3, r3, #7
 800798a:	4413      	add	r3, r2
 800798c:	4619      	mov	r1, r3
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f7ff fde8 	bl	8007564 <move_window>
 8007994:	4603      	mov	r3, r0
 8007996:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007998:	7ffb      	ldrb	r3, [r7, #31]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d128      	bne.n	80079f0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80079b2:	4413      	add	r3, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fb0c 	bl	8006fd2 <ld_dword>
 80079ba:	4603      	mov	r3, r0
 80079bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80079c0:	4323      	orrs	r3, r4
 80079c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80079d2:	4413      	add	r3, r2
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff fb39 	bl	800704e <st_dword>
			fs->wflag = 1;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	70da      	strb	r2, [r3, #3]
			break;
 80079e2:	e006      	b.n	80079f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80079e4:	bf00      	nop
 80079e6:	e004      	b.n	80079f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80079e8:	bf00      	nop
 80079ea:	e002      	b.n	80079f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80079ec:	bf00      	nop
 80079ee:	e000      	b.n	80079f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80079f0:	bf00      	nop
		}
	}
	return res;
 80079f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3724      	adds	r7, #36	@ 0x24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd90      	pop	{r4, r7, pc}

080079fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d904      	bls.n	8007a22 <remove_chain+0x26>
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d301      	bcc.n	8007a26 <remove_chain+0x2a>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e04b      	b.n	8007abe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00c      	beq.n	8007a46 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	69b8      	ldr	r0, [r7, #24]
 8007a34:	f7ff fef8 	bl	8007828 <put_fat>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007a3c:	7ffb      	ldrb	r3, [r7, #31]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <remove_chain+0x4a>
 8007a42:	7ffb      	ldrb	r3, [r7, #31]
 8007a44:	e03b      	b.n	8007abe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff fe46 	bl	80076da <get_fat>
 8007a4e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d031      	beq.n	8007aba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <remove_chain+0x64>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e02e      	b.n	8007abe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d101      	bne.n	8007a6c <remove_chain+0x70>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e028      	b.n	8007abe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	69b8      	ldr	r0, [r7, #24]
 8007a72:	f7ff fed9 	bl	8007828 <put_fat>
 8007a76:	4603      	mov	r3, r0
 8007a78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007a7a:	7ffb      	ldrb	r3, [r7, #31]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <remove_chain+0x88>
 8007a80:	7ffb      	ldrb	r3, [r7, #31]
 8007a82:	e01c      	b.n	8007abe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	699a      	ldr	r2, [r3, #24]
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	3b02      	subs	r3, #2
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d20b      	bcs.n	8007aaa <remove_chain+0xae>
			fs->free_clst++;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	791b      	ldrb	r3, [r3, #4]
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d3c6      	bcc.n	8007a46 <remove_chain+0x4a>
 8007ab8:	e000      	b.n	8007abc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007aba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b088      	sub	sp, #32
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10d      	bne.n	8007af8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <create_chain+0x2c>
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d31b      	bcc.n	8007b2a <create_chain+0x64>
 8007af2:	2301      	movs	r3, #1
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	e018      	b.n	8007b2a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff fded 	bl	80076da <get_fat>
 8007b00:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d801      	bhi.n	8007b0c <create_chain+0x46>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e070      	b.n	8007bee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d101      	bne.n	8007b18 <create_chain+0x52>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	e06a      	b.n	8007bee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d201      	bcs.n	8007b26 <create_chain+0x60>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	e063      	b.n	8007bee <create_chain+0x128>
		scl = clst;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	3301      	adds	r3, #1
 8007b32:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d307      	bcc.n	8007b4e <create_chain+0x88>
				ncl = 2;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d901      	bls.n	8007b4e <create_chain+0x88>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e04f      	b.n	8007bee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007b4e:	69f9      	ldr	r1, [r7, #28]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fdc2 	bl	80076da <get_fat>
 8007b56:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00e      	beq.n	8007b7c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d003      	beq.n	8007b6c <create_chain+0xa6>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6a:	d101      	bne.n	8007b70 <create_chain+0xaa>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	e03e      	b.n	8007bee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1da      	bne.n	8007b2e <create_chain+0x68>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	e038      	b.n	8007bee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007b7c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b82:	69f9      	ldr	r1, [r7, #28]
 8007b84:	6938      	ldr	r0, [r7, #16]
 8007b86:	f7ff fe4f 	bl	8007828 <put_fat>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <create_chain+0xe2>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6938      	ldr	r0, [r7, #16]
 8007ba0:	f7ff fe42 	bl	8007828 <put_fat>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d116      	bne.n	8007bdc <create_chain+0x116>
		fs->last_clst = ncl;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	699a      	ldr	r2, [r3, #24]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	3b02      	subs	r3, #2
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d804      	bhi.n	8007bcc <create_chain+0x106>
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	1e5a      	subs	r2, r3, #1
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	f043 0301 	orr.w	r3, r3, #1
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	711a      	strb	r2, [r3, #4]
 8007bda:	e007      	b.n	8007bec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d102      	bne.n	8007be8 <create_chain+0x122>
 8007be2:	f04f 33ff 	mov.w	r3, #4294967295
 8007be6:	e000      	b.n	8007bea <create_chain+0x124>
 8007be8:	2301      	movs	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007bec:	69fb      	ldr	r3, [r7, #28]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	0a5b      	lsrs	r3, r3, #9
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	8952      	ldrh	r2, [r2, #10]
 8007c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	613a      	str	r2, [r7, #16]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <clmt_clust+0x3a>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e010      	b.n	8007c52 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d307      	bcc.n	8007c48 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	3304      	adds	r3, #4
 8007c44:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c46:	e7e9      	b.n	8007c1c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007c48:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b086      	sub	sp, #24
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c74:	d204      	bcs.n	8007c80 <dir_sdi+0x22>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007c80:	2302      	movs	r3, #2
 8007c82:	e063      	b.n	8007d4c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <dir_sdi+0x46>
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d902      	bls.n	8007ca4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10c      	bne.n	8007cc4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	8912      	ldrh	r2, [r2, #8]
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d301      	bcc.n	8007cba <dir_sdi+0x5c>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e048      	b.n	8007d4c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	61da      	str	r2, [r3, #28]
 8007cc2:	e029      	b.n	8007d18 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	895b      	ldrh	r3, [r3, #10]
 8007cc8:	025b      	lsls	r3, r3, #9
 8007cca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ccc:	e019      	b.n	8007d02 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6979      	ldr	r1, [r7, #20]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fd01 	bl	80076da <get_fat>
 8007cd8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce0:	d101      	bne.n	8007ce6 <dir_sdi+0x88>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e032      	b.n	8007d4c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d904      	bls.n	8007cf6 <dir_sdi+0x98>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d301      	bcc.n	8007cfa <dir_sdi+0x9c>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e028      	b.n	8007d4c <dir_sdi+0xee>
			ofs -= csz;
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d2e1      	bcs.n	8007cce <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	6938      	ldr	r0, [r7, #16]
 8007d0e:	f7ff fcc5 	bl	800769c <clust2sect>
 8007d12:	4602      	mov	r2, r0
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <dir_sdi+0xcc>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e010      	b.n	8007d4c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	0a5b      	lsrs	r3, r3, #9
 8007d32:	441a      	add	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d44:	441a      	add	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	3320      	adds	r3, #32
 8007d6a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <dir_next+0x28>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d7a:	d301      	bcc.n	8007d80 <dir_next+0x2c>
 8007d7c:	2304      	movs	r3, #4
 8007d7e:	e0aa      	b.n	8007ed6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 8098 	bne.w	8007ebc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10b      	bne.n	8007db6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	8912      	ldrh	r2, [r2, #8]
 8007da6:	4293      	cmp	r3, r2
 8007da8:	f0c0 8088 	bcc.w	8007ebc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	61da      	str	r2, [r3, #28]
 8007db2:	2304      	movs	r3, #4
 8007db4:	e08f      	b.n	8007ed6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	0a5b      	lsrs	r3, r3, #9
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	8952      	ldrh	r2, [r2, #10]
 8007dbe:	3a01      	subs	r2, #1
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d17a      	bne.n	8007ebc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7ff fc83 	bl	80076da <get_fat>
 8007dd4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d801      	bhi.n	8007de0 <dir_next+0x8c>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e07a      	b.n	8007ed6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d101      	bne.n	8007dec <dir_next+0x98>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e074      	b.n	8007ed6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d358      	bcc.n	8007ea8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	61da      	str	r2, [r3, #28]
 8007e02:	2304      	movs	r3, #4
 8007e04:	e067      	b.n	8007ed6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7ff fe59 	bl	8007ac6 <create_chain>
 8007e14:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <dir_next+0xcc>
 8007e1c:	2307      	movs	r3, #7
 8007e1e:	e05a      	b.n	8007ed6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <dir_next+0xd6>
 8007e26:	2302      	movs	r3, #2
 8007e28:	e055      	b.n	8007ed6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e30:	d101      	bne.n	8007e36 <dir_next+0xe2>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e04f      	b.n	8007ed6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff fb50 	bl	80074dc <sync_window>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <dir_next+0xf2>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e047      	b.n	8007ed6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3338      	adds	r3, #56	@ 0x38
 8007e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff f949 	bl	80070e8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007e56:	2300      	movs	r3, #0
 8007e58:	613b      	str	r3, [r7, #16]
 8007e5a:	6979      	ldr	r1, [r7, #20]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7ff fc1d 	bl	800769c <clust2sect>
 8007e62:	4602      	mov	r2, r0
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	635a      	str	r2, [r3, #52]	@ 0x34
 8007e68:	e012      	b.n	8007e90 <dir_next+0x13c>
						fs->wflag = 1;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7ff fb33 	bl	80074dc <sync_window>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <dir_next+0x12c>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e02a      	b.n	8007ed6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	3301      	adds	r3, #1
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	895b      	ldrh	r3, [r3, #10]
 8007e94:	461a      	mov	r2, r3
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d3e6      	bcc.n	8007e6a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007eae:	6979      	ldr	r1, [r7, #20]
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7ff fbf3 	bl	800769c <clust2sect>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ece:	441a      	add	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007eee:	2100      	movs	r1, #0
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff feb4 	bl	8007c5e <dir_sdi>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d12b      	bne.n	8007f58 <dir_alloc+0x7a>
		n = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff fb2a 	bl	8007564 <move_window>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d11d      	bne.n	8007f56 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2be5      	cmp	r3, #229	@ 0xe5
 8007f22:	d004      	beq.n	8007f2e <dir_alloc+0x50>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d107      	bne.n	8007f3e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3301      	adds	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d102      	bne.n	8007f42 <dir_alloc+0x64>
 8007f3c:	e00c      	b.n	8007f58 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f3e:	2300      	movs	r3, #0
 8007f40:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007f42:	2101      	movs	r1, #1
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff ff05 	bl	8007d54 <dir_next>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0d7      	beq.n	8007f04 <dir_alloc+0x26>
 8007f54:	e000      	b.n	8007f58 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007f56:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d101      	bne.n	8007f62 <dir_alloc+0x84>
 8007f5e:	2307      	movs	r3, #7
 8007f60:	75fb      	strb	r3, [r7, #23]
	return res;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	331a      	adds	r3, #26
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff f810 	bl	8006fa0 <ld_word>
 8007f80:	4603      	mov	r3, r0
 8007f82:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d109      	bne.n	8007fa0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff f805 	bl	8006fa0 <ld_word>
 8007f96:	4603      	mov	r3, r0
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	331a      	adds	r3, #26
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	b292      	uxth	r2, r2
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff f829 	bl	8007018 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d109      	bne.n	8007fe2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f103 0214 	add.w	r2, r3, #20
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	f7ff f81b 	bl	8007018 <st_word>
	}
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	331a      	adds	r3, #26
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe ffd0 	bl	8006fa0 <ld_word>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <cmp_lfn+0x1e>
 8008006:	2300      	movs	r3, #0
 8008008:	e059      	b.n	80080be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008012:	1e5a      	subs	r2, r3, #1
 8008014:	4613      	mov	r3, r2
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008020:	2301      	movs	r3, #1
 8008022:	81fb      	strh	r3, [r7, #14]
 8008024:	2300      	movs	r3, #0
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	e033      	b.n	8008092 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800802a:	4a27      	ldr	r2, [pc, #156]	@ (80080c8 <cmp_lfn+0xdc>)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4413      	add	r3, r2
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	4413      	add	r3, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe ffb1 	bl	8006fa0 <ld_word>
 800803e:	4603      	mov	r3, r0
 8008040:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008042:	89fb      	ldrh	r3, [r7, #14]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01a      	beq.n	800807e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2bfe      	cmp	r3, #254	@ 0xfe
 800804c:	d812      	bhi.n	8008074 <cmp_lfn+0x88>
 800804e:	89bb      	ldrh	r3, [r7, #12]
 8008050:	4618      	mov	r0, r3
 8008052:	f002 fc77 	bl	800a944 <ff_wtoupper>
 8008056:	4603      	mov	r3, r0
 8008058:	461c      	mov	r4, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	617a      	str	r2, [r7, #20]
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	4618      	mov	r0, r3
 800806a:	f002 fc6b 	bl	800a944 <ff_wtoupper>
 800806e:	4603      	mov	r3, r0
 8008070:	429c      	cmp	r4, r3
 8008072:	d001      	beq.n	8008078 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008074:	2300      	movs	r3, #0
 8008076:	e022      	b.n	80080be <cmp_lfn+0xd2>
			}
			wc = uc;
 8008078:	89bb      	ldrh	r3, [r7, #12]
 800807a:	81fb      	strh	r3, [r7, #14]
 800807c:	e006      	b.n	800808c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800807e:	89bb      	ldrh	r3, [r7, #12]
 8008080:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008084:	4293      	cmp	r3, r2
 8008086:	d001      	beq.n	800808c <cmp_lfn+0xa0>
 8008088:	2300      	movs	r3, #0
 800808a:	e018      	b.n	80080be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3301      	adds	r3, #1
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d9c8      	bls.n	800802a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <cmp_lfn+0xd0>
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <cmp_lfn+0xd0>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <cmp_lfn+0xd0>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e000      	b.n	80080be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80080bc:	2301      	movs	r3, #1
}
 80080be:	4618      	mov	r0, r3
 80080c0:	371c      	adds	r7, #28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd90      	pop	{r4, r7, pc}
 80080c6:	bf00      	nop
 80080c8:	0800f9c4 	.word	0x0800f9c4

080080cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	331a      	adds	r3, #26
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe ff60 	bl	8006fa0 <ld_word>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <pick_lfn+0x1e>
 80080e6:	2300      	movs	r3, #0
 80080e8:	e04d      	b.n	8008186 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080f2:	1e5a      	subs	r2, r3, #1
 80080f4:	4613      	mov	r3, r2
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008100:	2301      	movs	r3, #1
 8008102:	81fb      	strh	r3, [r7, #14]
 8008104:	2300      	movs	r3, #0
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	e028      	b.n	800815c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800810a:	4a21      	ldr	r2, [pc, #132]	@ (8008190 <pick_lfn+0xc4>)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	4413      	add	r3, r2
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	4413      	add	r3, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe ff41 	bl	8006fa0 <ld_word>
 800811e:	4603      	mov	r3, r0
 8008120:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008122:	89fb      	ldrh	r3, [r7, #14]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00f      	beq.n	8008148 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2bfe      	cmp	r3, #254	@ 0xfe
 800812c:	d901      	bls.n	8008132 <pick_lfn+0x66>
 800812e:	2300      	movs	r3, #0
 8008130:	e029      	b.n	8008186 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008132:	89bb      	ldrh	r3, [r7, #12]
 8008134:	81fb      	strh	r3, [r7, #14]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	617a      	str	r2, [r7, #20]
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	89fa      	ldrh	r2, [r7, #14]
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	e006      	b.n	8008156 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008148:	89bb      	ldrh	r3, [r7, #12]
 800814a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800814e:	4293      	cmp	r3, r2
 8008150:	d001      	beq.n	8008156 <pick_lfn+0x8a>
 8008152:	2300      	movs	r3, #0
 8008154:	e017      	b.n	8008186 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	3301      	adds	r3, #1
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2b0c      	cmp	r3, #12
 8008160:	d9d3      	bls.n	800810a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2bfe      	cmp	r3, #254	@ 0xfe
 8008172:	d901      	bls.n	8008178 <pick_lfn+0xac>
 8008174:	2300      	movs	r3, #0
 8008176:	e006      	b.n	8008186 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	4413      	add	r3, r2
 8008180:	2200      	movs	r2, #0
 8008182:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8008184:	2301      	movs	r3, #1
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	0800f9c4 	.word	0x0800f9c4

08008194 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4611      	mov	r1, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	460b      	mov	r3, r1
 80081a4:	71fb      	strb	r3, [r7, #7]
 80081a6:	4613      	mov	r3, r2
 80081a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	330d      	adds	r3, #13
 80081ae:	79ba      	ldrb	r2, [r7, #6]
 80081b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	330b      	adds	r3, #11
 80081b6:	220f      	movs	r2, #15
 80081b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	330c      	adds	r3, #12
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	331a      	adds	r3, #26
 80081c6:	2100      	movs	r1, #0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe ff25 	bl	8007018 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	1e5a      	subs	r2, r3, #1
 80081d2:	4613      	mov	r3, r2
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	82fb      	strh	r3, [r7, #22]
 80081e2:	2300      	movs	r3, #0
 80081e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80081e6:	8afb      	ldrh	r3, [r7, #22]
 80081e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d007      	beq.n	8008200 <put_lfn+0x6c>
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	61fa      	str	r2, [r7, #28]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008200:	4a17      	ldr	r2, [pc, #92]	@ (8008260 <put_lfn+0xcc>)
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	4413      	add	r3, r2
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	4413      	add	r3, r2
 800820e:	8afa      	ldrh	r2, [r7, #22]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe ff00 	bl	8007018 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008218:	8afb      	ldrh	r3, [r7, #22]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <put_lfn+0x90>
 800821e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008222:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	3301      	adds	r3, #1
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d9da      	bls.n	80081e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008230:	8afb      	ldrh	r3, [r7, #22]
 8008232:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008236:	4293      	cmp	r3, r2
 8008238:	d006      	beq.n	8008248 <put_lfn+0xb4>
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <put_lfn+0xbc>
 8008248:	79fb      	ldrb	r3, [r7, #7]
 800824a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	79fa      	ldrb	r2, [r7, #7]
 8008254:	701a      	strb	r2, [r3, #0]
}
 8008256:	bf00      	nop
 8008258:	3720      	adds	r7, #32
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	0800f9c4 	.word	0x0800f9c4

08008264 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08c      	sub	sp, #48	@ 0x30
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008272:	220b      	movs	r2, #11
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7fe ff15 	bl	80070a6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b05      	cmp	r3, #5
 8008280:	d92b      	bls.n	80082da <gen_numname+0x76>
		sr = seq;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008286:	e022      	b.n	80082ce <gen_numname+0x6a>
			wc = *lfn++;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	1c9a      	adds	r2, r3, #2
 800828c:	607a      	str	r2, [r7, #4]
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008292:	2300      	movs	r3, #0
 8008294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008296:	e017      	b.n	80082c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	005a      	lsls	r2, r3, #1
 800829c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	4413      	add	r3, r2
 80082a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80082a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082a8:	085b      	lsrs	r3, r3, #1
 80082aa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <gen_numname+0x5e>
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80082bc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80082c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80082c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c4:	3301      	adds	r3, #1
 80082c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	2b0f      	cmp	r3, #15
 80082cc:	d9e4      	bls.n	8008298 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1d8      	bne.n	8008288 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80082da:	2307      	movs	r3, #7
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3330      	adds	r3, #48	@ 0x30
 80082ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80082ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082f2:	2b39      	cmp	r3, #57	@ 0x39
 80082f4:	d904      	bls.n	8008300 <gen_numname+0x9c>
 80082f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082fa:	3307      	adds	r3, #7
 80082fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	1e5a      	subs	r2, r3, #1
 8008304:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008306:	3330      	adds	r3, #48	@ 0x30
 8008308:	443b      	add	r3, r7
 800830a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800830e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	091b      	lsrs	r3, r3, #4
 8008316:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1df      	bne.n	80082de <gen_numname+0x7a>
	ns[i] = '~';
 800831e:	f107 0214 	add.w	r2, r7, #20
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	4413      	add	r3, r2
 8008326:	227e      	movs	r2, #126	@ 0x7e
 8008328:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800832a:	2300      	movs	r3, #0
 800832c:	627b      	str	r3, [r7, #36]	@ 0x24
 800832e:	e016      	b.n	800835e <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	4413      	add	r3, r2
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b80      	cmp	r3, #128	@ 0x80
 800833a:	d90d      	bls.n	8008358 <gen_numname+0xf4>
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	4413      	add	r3, r2
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2bff      	cmp	r3, #255	@ 0xff
 8008346:	d007      	beq.n	8008358 <gen_numname+0xf4>
			if (j == i - 1) break;
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	3b01      	subs	r3, #1
 800834c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800834e:	429a      	cmp	r2, r3
 8008350:	d010      	beq.n	8008374 <gen_numname+0x110>
			j++;
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	3301      	adds	r3, #1
 8008356:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	3301      	adds	r3, #1
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
 800835e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008362:	429a      	cmp	r2, r3
 8008364:	d207      	bcs.n	8008376 <gen_numname+0x112>
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	4413      	add	r3, r2
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b20      	cmp	r3, #32
 8008370:	d1de      	bne.n	8008330 <gen_numname+0xcc>
 8008372:	e000      	b.n	8008376 <gen_numname+0x112>
			if (j == i - 1) break;
 8008374:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008378:	2b07      	cmp	r3, #7
 800837a:	d807      	bhi.n	800838c <gen_numname+0x128>
 800837c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008382:	3330      	adds	r3, #48	@ 0x30
 8008384:	443b      	add	r3, r7
 8008386:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800838a:	e000      	b.n	800838e <gen_numname+0x12a>
 800838c:	2120      	movs	r1, #32
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	627a      	str	r2, [r7, #36]	@ 0x24
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	460a      	mov	r2, r1
 800839a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	2b07      	cmp	r3, #7
 80083a0:	d9e9      	bls.n	8008376 <gen_numname+0x112>
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	3730      	adds	r7, #48	@ 0x30
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80083b8:	230b      	movs	r3, #11
 80083ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	0852      	lsrs	r2, r2, #1
 80083c2:	01db      	lsls	r3, r3, #7
 80083c4:	4313      	orrs	r3, r2
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	1c59      	adds	r1, r3, #1
 80083cc:	6079      	str	r1, [r7, #4]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	4413      	add	r3, r2
 80083d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1ed      	bne.n	80083bc <sum_sfn+0x10>
	return sum;
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b086      	sub	sp, #24
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80083f8:	2304      	movs	r3, #4
 80083fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8008402:	23ff      	movs	r3, #255	@ 0xff
 8008404:	757b      	strb	r3, [r7, #21]
 8008406:	23ff      	movs	r3, #255	@ 0xff
 8008408:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800840a:	e081      	b.n	8008510 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	4619      	mov	r1, r3
 8008412:	6938      	ldr	r0, [r7, #16]
 8008414:	f7ff f8a6 	bl	8007564 <move_window>
 8008418:	4603      	mov	r3, r0
 800841a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d17c      	bne.n	800851c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800842a:	7dbb      	ldrb	r3, [r7, #22]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008430:	2304      	movs	r3, #4
 8008432:	75fb      	strb	r3, [r7, #23]
 8008434:	e077      	b.n	8008526 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	330b      	adds	r3, #11
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008442:	73fb      	strb	r3, [r7, #15]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	7bfa      	ldrb	r2, [r7, #15]
 8008448:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800844a:	7dbb      	ldrb	r3, [r7, #22]
 800844c:	2be5      	cmp	r3, #229	@ 0xe5
 800844e:	d00e      	beq.n	800846e <dir_read+0x80>
 8008450:	7dbb      	ldrb	r3, [r7, #22]
 8008452:	2b2e      	cmp	r3, #46	@ 0x2e
 8008454:	d00b      	beq.n	800846e <dir_read+0x80>
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	f023 0320 	bic.w	r3, r3, #32
 800845c:	2b08      	cmp	r3, #8
 800845e:	bf0c      	ite	eq
 8008460:	2301      	moveq	r3, #1
 8008462:	2300      	movne	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	4293      	cmp	r3, r2
 800846c:	d002      	beq.n	8008474 <dir_read+0x86>
				ord = 0xFF;
 800846e:	23ff      	movs	r3, #255	@ 0xff
 8008470:	757b      	strb	r3, [r7, #21]
 8008472:	e044      	b.n	80084fe <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	2b0f      	cmp	r3, #15
 8008478:	d12f      	bne.n	80084da <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800847a:	7dbb      	ldrb	r3, [r7, #22]
 800847c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00d      	beq.n	80084a0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	7b5b      	ldrb	r3, [r3, #13]
 800848a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800848c:	7dbb      	ldrb	r3, [r7, #22]
 800848e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008492:	75bb      	strb	r3, [r7, #22]
 8008494:	7dbb      	ldrb	r3, [r7, #22]
 8008496:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695a      	ldr	r2, [r3, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80084a0:	7dba      	ldrb	r2, [r7, #22]
 80084a2:	7d7b      	ldrb	r3, [r7, #21]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d115      	bne.n	80084d4 <dir_read+0xe6>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	330d      	adds	r3, #13
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	7d3a      	ldrb	r2, [r7, #20]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d10e      	bne.n	80084d4 <dir_read+0xe6>
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	4619      	mov	r1, r3
 80084c0:	4610      	mov	r0, r2
 80084c2:	f7ff fe03 	bl	80080cc <pick_lfn>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <dir_read+0xe6>
 80084cc:	7d7b      	ldrb	r3, [r7, #21]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	e000      	b.n	80084d6 <dir_read+0xe8>
 80084d4:	23ff      	movs	r3, #255	@ 0xff
 80084d6:	757b      	strb	r3, [r7, #21]
 80084d8:	e011      	b.n	80084fe <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80084da:	7d7b      	ldrb	r3, [r7, #21]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <dir_read+0x106>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff ff61 	bl	80083ac <sum_sfn>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	7d3b      	ldrb	r3, [r7, #20]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d015      	beq.n	8008520 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f04f 32ff 	mov.w	r2, #4294967295
 80084fa:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80084fc:	e010      	b.n	8008520 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80084fe:	2100      	movs	r1, #0
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff fc27 	bl	8007d54 <dir_next>
 8008506:	4603      	mov	r3, r0
 8008508:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <dir_read+0x136>
	while (dp->sect) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	2b00      	cmp	r3, #0
 8008516:	f47f af79 	bne.w	800840c <dir_read+0x1e>
 800851a:	e004      	b.n	8008526 <dir_read+0x138>
		if (res != FR_OK) break;
 800851c:	bf00      	nop
 800851e:	e002      	b.n	8008526 <dir_read+0x138>
					break;
 8008520:	bf00      	nop
 8008522:	e000      	b.n	8008526 <dir_read+0x138>
		if (res != FR_OK) break;
 8008524:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <dir_read+0x144>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	61da      	str	r2, [r3, #28]
	return res;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800854a:	2100      	movs	r1, #0
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fb86 	bl	8007c5e <dir_sdi>
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <dir_find+0x24>
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	e0a9      	b.n	80086b4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008560:	23ff      	movs	r3, #255	@ 0xff
 8008562:	753b      	strb	r3, [r7, #20]
 8008564:	7d3b      	ldrb	r3, [r7, #20]
 8008566:	757b      	strb	r3, [r7, #21]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f04f 32ff 	mov.w	r2, #4294967295
 800856e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	4619      	mov	r1, r3
 8008576:	6938      	ldr	r0, [r7, #16]
 8008578:	f7fe fff4 	bl	8007564 <move_window>
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 8090 	bne.w	80086a8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008590:	7dbb      	ldrb	r3, [r7, #22]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d102      	bne.n	800859c <dir_find+0x60>
 8008596:	2304      	movs	r3, #4
 8008598:	75fb      	strb	r3, [r7, #23]
 800859a:	e08a      	b.n	80086b2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	330b      	adds	r3, #11
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085a8:	73fb      	strb	r3, [r7, #15]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7bfa      	ldrb	r2, [r7, #15]
 80085ae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80085b0:	7dbb      	ldrb	r3, [r7, #22]
 80085b2:	2be5      	cmp	r3, #229	@ 0xe5
 80085b4:	d007      	beq.n	80085c6 <dir_find+0x8a>
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	f003 0308 	and.w	r3, r3, #8
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <dir_find+0x98>
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b0f      	cmp	r3, #15
 80085c4:	d006      	beq.n	80085d4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80085c6:	23ff      	movs	r3, #255	@ 0xff
 80085c8:	757b      	strb	r3, [r7, #21]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f04f 32ff 	mov.w	r2, #4294967295
 80085d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80085d2:	e05e      	b.n	8008692 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	2b0f      	cmp	r3, #15
 80085d8:	d136      	bne.n	8008648 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80085e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d154      	bne.n	8008692 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80085e8:	7dbb      	ldrb	r3, [r7, #22]
 80085ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00d      	beq.n	800860e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	7b5b      	ldrb	r3, [r3, #13]
 80085f8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80085fa:	7dbb      	ldrb	r3, [r7, #22]
 80085fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008600:	75bb      	strb	r3, [r7, #22]
 8008602:	7dbb      	ldrb	r3, [r7, #22]
 8008604:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695a      	ldr	r2, [r3, #20]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800860e:	7dba      	ldrb	r2, [r7, #22]
 8008610:	7d7b      	ldrb	r3, [r7, #21]
 8008612:	429a      	cmp	r2, r3
 8008614:	d115      	bne.n	8008642 <dir_find+0x106>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	330d      	adds	r3, #13
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	7d3a      	ldrb	r2, [r7, #20]
 8008620:	429a      	cmp	r2, r3
 8008622:	d10e      	bne.n	8008642 <dir_find+0x106>
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f7ff fcdc 	bl	8007fec <cmp_lfn>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <dir_find+0x106>
 800863a:	7d7b      	ldrb	r3, [r7, #21]
 800863c:	3b01      	subs	r3, #1
 800863e:	b2db      	uxtb	r3, r3
 8008640:	e000      	b.n	8008644 <dir_find+0x108>
 8008642:	23ff      	movs	r3, #255	@ 0xff
 8008644:	757b      	strb	r3, [r7, #21]
 8008646:	e024      	b.n	8008692 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008648:	7d7b      	ldrb	r3, [r7, #21]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <dir_find+0x126>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff feaa 	bl	80083ac <sum_sfn>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	7d3b      	ldrb	r3, [r7, #20]
 800865e:	4293      	cmp	r3, r2
 8008660:	d024      	beq.n	80086ac <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <dir_find+0x14a>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a18      	ldr	r0, [r3, #32]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3324      	adds	r3, #36	@ 0x24
 8008678:	220b      	movs	r2, #11
 800867a:	4619      	mov	r1, r3
 800867c:	f7fe fd4f 	bl	800711e <mem_cmp>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d014      	beq.n	80086b0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008686:	23ff      	movs	r3, #255	@ 0xff
 8008688:	757b      	strb	r3, [r7, #21]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f04f 32ff 	mov.w	r2, #4294967295
 8008690:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008692:	2100      	movs	r1, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff fb5d 	bl	8007d54 <dir_next>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f43f af65 	beq.w	8008570 <dir_find+0x34>
 80086a6:	e004      	b.n	80086b2 <dir_find+0x176>
		if (res != FR_OK) break;
 80086a8:	bf00      	nop
 80086aa:	e002      	b.n	80086b2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80086b0:	bf00      	nop

	return res;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08c      	sub	sp, #48	@ 0x30
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80086d0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <dir_register+0x20>
 80086d8:	2306      	movs	r3, #6
 80086da:	e0e0      	b.n	800889e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80086dc:	2300      	movs	r3, #0
 80086de:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e0:	e002      	b.n	80086e8 <dir_register+0x2c>
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	3301      	adds	r3, #1
 80086e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	4413      	add	r3, r2
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1f4      	bne.n	80086e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80086fe:	f107 030c 	add.w	r3, r7, #12
 8008702:	220c      	movs	r2, #12
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fcce 	bl	80070a6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d032      	beq.n	800877a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2240      	movs	r2, #64	@ 0x40
 8008718:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800871c:	2301      	movs	r3, #1
 800871e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008720:	e016      	b.n	8008750 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	68da      	ldr	r2, [r3, #12]
 800872c:	f107 010c 	add.w	r1, r7, #12
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	f7ff fd97 	bl	8008264 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff ff00 	bl	800853c <dir_find>
 800873c:	4603      	mov	r3, r0
 800873e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d106      	bne.n	8008758 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800874a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874c:	3301      	adds	r3, #1
 800874e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008752:	2b63      	cmp	r3, #99	@ 0x63
 8008754:	d9e5      	bls.n	8008722 <dir_register+0x66>
 8008756:	e000      	b.n	800875a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008758:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800875a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875c:	2b64      	cmp	r3, #100	@ 0x64
 800875e:	d101      	bne.n	8008764 <dir_register+0xa8>
 8008760:	2307      	movs	r3, #7
 8008762:	e09c      	b.n	800889e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008768:	2b04      	cmp	r3, #4
 800876a:	d002      	beq.n	8008772 <dir_register+0xb6>
 800876c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008770:	e095      	b.n	800889e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008772:	7dfa      	ldrb	r2, [r7, #23]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d007      	beq.n	8008794 <dir_register+0xd8>
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	330c      	adds	r3, #12
 8008788:	4a47      	ldr	r2, [pc, #284]	@ (80088a8 <dir_register+0x1ec>)
 800878a:	fba2 2303 	umull	r2, r3, r2, r3
 800878e:	089b      	lsrs	r3, r3, #2
 8008790:	3301      	adds	r3, #1
 8008792:	e000      	b.n	8008796 <dir_register+0xda>
 8008794:	2301      	movs	r3, #1
 8008796:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008798:	6a39      	ldr	r1, [r7, #32]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff fb9f 	bl	8007ede <dir_alloc>
 80087a0:	4603      	mov	r3, r0
 80087a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80087a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d148      	bne.n	8008840 <dir_register+0x184>
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	623b      	str	r3, [r7, #32]
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d042      	beq.n	8008840 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	015b      	lsls	r3, r3, #5
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fa49 	bl	8007c5e <dir_sdi>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80087d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d132      	bne.n	8008840 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3324      	adds	r3, #36	@ 0x24
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff fde4 	bl	80083ac <sum_sfn>
 80087e4:	4603      	mov	r3, r0
 80087e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	4619      	mov	r1, r3
 80087ee:	69f8      	ldr	r0, [r7, #28]
 80087f0:	f7fe feb8 	bl	8007564 <move_window>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80087fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d11d      	bne.n	800883e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	68d8      	ldr	r0, [r3, #12]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a19      	ldr	r1, [r3, #32]
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	b2da      	uxtb	r2, r3
 800880e:	7efb      	ldrb	r3, [r7, #27]
 8008810:	f7ff fcc0 	bl	8008194 <put_lfn>
				fs->wflag = 1;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	2201      	movs	r2, #1
 8008818:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800881a:	2100      	movs	r1, #0
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fa99 	bl	8007d54 <dir_next>
 8008822:	4603      	mov	r3, r0
 8008824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800882c:	2b00      	cmp	r3, #0
 800882e:	d107      	bne.n	8008840 <dir_register+0x184>
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	3b01      	subs	r3, #1
 8008834:	623b      	str	r3, [r7, #32]
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1d5      	bne.n	80087e8 <dir_register+0x12c>
 800883c:	e000      	b.n	8008840 <dir_register+0x184>
				if (res != FR_OK) break;
 800883e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008840:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008844:	2b00      	cmp	r3, #0
 8008846:	d128      	bne.n	800889a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	4619      	mov	r1, r3
 800884e:	69f8      	ldr	r0, [r7, #28]
 8008850:	f7fe fe88 	bl	8007564 <move_window>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800885a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800885e:	2b00      	cmp	r3, #0
 8008860:	d11b      	bne.n	800889a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	2220      	movs	r2, #32
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fc3c 	bl	80070e8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a18      	ldr	r0, [r3, #32]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3324      	adds	r3, #36	@ 0x24
 8008878:	220b      	movs	r2, #11
 800887a:	4619      	mov	r1, r3
 800887c:	f7fe fc13 	bl	80070a6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	330c      	adds	r3, #12
 800888c:	f002 0218 	and.w	r2, r2, #24
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2201      	movs	r2, #1
 8008898:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800889a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3730      	adds	r7, #48	@ 0x30
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	4ec4ec4f 	.word	0x4ec4ec4f

080088ac <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80d8 	beq.w	8008a7c <get_fileinfo+0x1d0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d040      	beq.n	8008958 <get_fileinfo+0xac>
			i = j = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80088de:	e029      	b.n	8008934 <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80088e0:	89fb      	ldrh	r3, [r7, #14]
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 ffcf 	bl	800a888 <ff_convert>
 80088ea:	4603      	mov	r3, r0
 80088ec:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80088ee:	89fb      	ldrh	r3, [r7, #14]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d102      	bne.n	80088fa <get_fileinfo+0x4e>
 80088f4:	2300      	movs	r3, #0
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	e028      	b.n	800894c <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 80088fa:	89fb      	ldrh	r3, [r7, #14]
 80088fc:	2bff      	cmp	r3, #255	@ 0xff
 80088fe:	d90a      	bls.n	8008916 <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 8008900:	89fb      	ldrh	r3, [r7, #14]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	b299      	uxth	r1, r3
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	61fa      	str	r2, [r7, #28]
 800890c:	b2c9      	uxtb	r1, r1
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4413      	add	r3, r2
 8008912:	460a      	mov	r2, r1
 8008914:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	2bfe      	cmp	r3, #254	@ 0xfe
 800891a:	d902      	bls.n	8008922 <get_fileinfo+0x76>
 800891c:	2300      	movs	r3, #0
 800891e:	61fb      	str	r3, [r7, #28]
 8008920:	e014      	b.n	800894c <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	61fa      	str	r2, [r7, #28]
 8008928:	89fa      	ldrh	r2, [r7, #14]
 800892a:	b2d1      	uxtb	r1, r2
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	4413      	add	r3, r2
 8008930:	460a      	mov	r2, r1
 8008932:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	1c59      	adds	r1, r3, #1
 800893c:	61b9      	str	r1, [r7, #24]
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	81fb      	strh	r3, [r7, #14]
 8008946:	89fb      	ldrh	r3, [r7, #14]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1c9      	bne.n	80088e0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	3316      	adds	r3, #22
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	3316      	adds	r3, #22
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800896c:	e04d      	b.n	8008a0a <get_fileinfo+0x15e>
		c = (TCHAR)dp->dir[i++];
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1a      	ldr	r2, [r3, #32]
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	1c59      	adds	r1, r3, #1
 8008976:	61f9      	str	r1, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	2b20      	cmp	r3, #32
 8008982:	d041      	beq.n	8008a08 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008984:	7dfb      	ldrb	r3, [r7, #23]
 8008986:	2b05      	cmp	r3, #5
 8008988:	d101      	bne.n	800898e <get_fileinfo+0xe2>
 800898a:	23e5      	movs	r3, #229	@ 0xe5
 800898c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	2b09      	cmp	r3, #9
 8008992:	d10f      	bne.n	80089b4 <get_fileinfo+0x108>
			if (!lfv) fno->fname[j] = '.';
 8008994:	89bb      	ldrh	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <get_fileinfo+0xfa>
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	4413      	add	r3, r2
 80089a0:	3316      	adds	r3, #22
 80089a2:	222e      	movs	r2, #46	@ 0x2e
 80089a4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	61ba      	str	r2, [r7, #24]
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	4413      	add	r3, r2
 80089b0:	222e      	movs	r2, #46	@ 0x2e
 80089b2:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	4413      	add	r3, r2
 80089ba:	3309      	adds	r3, #9
 80089bc:	7dfa      	ldrb	r2, [r7, #23]
 80089be:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80089c0:	89bb      	ldrh	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d11c      	bne.n	8008a00 <get_fileinfo+0x154>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	2b40      	cmp	r3, #64	@ 0x40
 80089ca:	d913      	bls.n	80089f4 <get_fileinfo+0x148>
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	2b5a      	cmp	r3, #90	@ 0x5a
 80089d0:	d810      	bhi.n	80089f4 <get_fileinfo+0x148>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	330c      	adds	r3, #12
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d901      	bls.n	80089e6 <get_fileinfo+0x13a>
 80089e2:	2310      	movs	r3, #16
 80089e4:	e000      	b.n	80089e8 <get_fileinfo+0x13c>
 80089e6:	2308      	movs	r3, #8
 80089e8:	4013      	ands	r3, r2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <get_fileinfo+0x148>
				c += 0x20;			/* To lower */
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	3320      	adds	r3, #32
 80089f2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	4413      	add	r3, r2
 80089fa:	3316      	adds	r3, #22
 80089fc:	7dfa      	ldrb	r2, [r7, #23]
 80089fe:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	3301      	adds	r3, #1
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	e000      	b.n	8008a0a <get_fileinfo+0x15e>
		if (c == ' ') continue;				/* Skip padding spaces */
 8008a08:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	2b0a      	cmp	r3, #10
 8008a0e:	d9ae      	bls.n	800896e <get_fileinfo+0xc2>
	}
	if (!lfv) {
 8008a10:	89bb      	ldrh	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10d      	bne.n	8008a32 <get_fileinfo+0x186>
		fno->fname[j] = 0;
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3316      	adds	r3, #22
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	330c      	adds	r3, #12
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <get_fileinfo+0x186>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	4413      	add	r3, r2
 8008a38:	3309      	adds	r3, #9
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	7ada      	ldrb	r2, [r3, #11]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	331c      	adds	r3, #28
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fabf 	bl	8006fd2 <ld_dword>
 8008a54:	4602      	mov	r2, r0
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	3316      	adds	r3, #22
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe fab6 	bl	8006fd2 <ld_dword>
 8008a66:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	80da      	strh	r2, [r3, #6]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	809a      	strh	r2, [r3, #4]
 8008a7a:	e000      	b.n	8008a7e <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008a7c:	bf00      	nop
}
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08a      	sub	sp, #40	@ 0x28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	61ba      	str	r2, [r7, #24]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4413      	add	r3, r2
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008ab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ab4:	2b1f      	cmp	r3, #31
 8008ab6:	d96a      	bls.n	8008b8e <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008ab8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aba:	2b2f      	cmp	r3, #47	@ 0x2f
 8008abc:	d006      	beq.n	8008acc <create_name+0x48>
 8008abe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ac0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ac2:	d110      	bne.n	8008ae6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008ac4:	e002      	b.n	8008acc <create_name+0x48>
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ad6:	d0f6      	beq.n	8008ac6 <create_name+0x42>
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4413      	add	r3, r2
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ae2:	d0f0      	beq.n	8008ac6 <create_name+0x42>
			break;
 8008ae4:	e054      	b.n	8008b90 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2bfe      	cmp	r3, #254	@ 0xfe
 8008aea:	d901      	bls.n	8008af0 <create_name+0x6c>
 8008aec:	2306      	movs	r3, #6
 8008aee:	e1bf      	b.n	8008e70 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008af0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8008af6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b80      	cmp	r3, #128	@ 0x80
 8008afc:	d925      	bls.n	8008b4a <create_name+0xc6>
 8008afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2bff      	cmp	r3, #255	@ 0xff
 8008b04:	d021      	beq.n	8008b4a <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	61ba      	str	r2, [r7, #24]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	4413      	add	r3, r2
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8008b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b18:	021b      	lsls	r3, r3, #8
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	4413      	add	r3, r2
 8008b24:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8008b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b2c:	d903      	bls.n	8008b36 <create_name+0xb2>
 8008b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b32:	2b7e      	cmp	r3, #126	@ 0x7e
 8008b34:	d909      	bls.n	8008b4a <create_name+0xc6>
 8008b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	da03      	bge.n	8008b46 <create_name+0xc2>
 8008b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b42:	2bff      	cmp	r3, #255	@ 0xff
 8008b44:	d101      	bne.n	8008b4a <create_name+0xc6>
 8008b46:	2306      	movs	r3, #6
 8008b48:	e192      	b.n	8008e70 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008b4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fe9a 	bl	800a888 <ff_convert>
 8008b54:	4603      	mov	r3, r0
 8008b56:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008b58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <create_name+0xde>
 8008b5e:	2306      	movs	r3, #6
 8008b60:	e186      	b.n	8008e70 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b66:	d809      	bhi.n	8008b7c <create_name+0xf8>
 8008b68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	489a      	ldr	r0, [pc, #616]	@ (8008dd8 <create_name+0x354>)
 8008b6e:	f7fe fafd 	bl	800716c <chk_chr>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <create_name+0xf8>
 8008b78:	2306      	movs	r3, #6
 8008b7a:	e179      	b.n	8008e70 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	617a      	str	r2, [r7, #20]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008b8c:	e78a      	b.n	8008aa4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008b8e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	441a      	add	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008b9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b9c:	2b1f      	cmp	r3, #31
 8008b9e:	d801      	bhi.n	8008ba4 <create_name+0x120>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	e000      	b.n	8008ba6 <create_name+0x122>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008baa:	e011      	b.n	8008bd0 <create_name+0x14c>
		w = lfn[di - 1];
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008bbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d002      	beq.n	8008bca <create_name+0x146>
 8008bc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc8:	d106      	bne.n	8008bd8 <create_name+0x154>
		di--;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1ea      	bne.n	8008bac <create_name+0x128>
 8008bd6:	e000      	b.n	8008bda <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8008bd8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <create_name+0x16c>
 8008bec:	2306      	movs	r3, #6
 8008bee:	e13f      	b.n	8008e70 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3324      	adds	r3, #36	@ 0x24
 8008bf4:	220b      	movs	r2, #11
 8008bf6:	2120      	movs	r1, #32
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fa75 	bl	80070e8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e002      	b.n	8008c0a <create_name+0x186>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	3301      	adds	r3, #1
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d0f5      	beq.n	8008c04 <create_name+0x180>
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c24:	d0ee      	beq.n	8008c04 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <create_name+0x1bc>
 8008c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c30:	f043 0303 	orr.w	r3, r3, #3
 8008c34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008c38:	e002      	b.n	8008c40 <create_name+0x1bc>
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d009      	beq.n	8008c5a <create_name+0x1d6>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c58:	d1ef      	bne.n	8008c3a <create_name+0x1b6>

	i = b = 0; ni = 8;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c60:	2300      	movs	r3, #0
 8008c62:	623b      	str	r3, [r7, #32]
 8008c64:	2308      	movs	r3, #8
 8008c66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	61ba      	str	r2, [r7, #24]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008c78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 80aa 	beq.w	8008dd4 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008c80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d006      	beq.n	8008c94 <create_name+0x210>
 8008c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c8a:	d10a      	bne.n	8008ca2 <create_name+0x21e>
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d006      	beq.n	8008ca2 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8008c94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c98:	f043 0303 	orr.w	r3, r3, #3
 8008c9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008ca0:	e097      	b.n	8008dd2 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008ca2:	6a3a      	ldr	r2, [r7, #32]
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d203      	bcs.n	8008cb2 <create_name+0x22e>
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d123      	bne.n	8008cfa <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	2b0b      	cmp	r3, #11
 8008cb6:	d106      	bne.n	8008cc6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8008cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cbc:	f043 0303 	orr.w	r3, r3, #3
 8008cc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cc4:	e08d      	b.n	8008de2 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d005      	beq.n	8008cda <create_name+0x256>
 8008cce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cd2:	f043 0303 	orr.w	r3, r3, #3
 8008cd6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d87e      	bhi.n	8008de0 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	623b      	str	r3, [r7, #32]
 8008cea:	230b      	movs	r3, #11
 8008cec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008cf8:	e06b      	b.n	8008dd2 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cfe:	d910      	bls.n	8008d22 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8008d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d02:	4618      	mov	r0, r3
 8008d04:	f001 fe1e 	bl	800a944 <ff_wtoupper>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 fdbb 	bl	800a888 <ff_convert>
 8008d12:	4603      	mov	r3, r0
 8008d14:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008d16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d1a:	f043 0302 	orr.w	r3, r3, #2
 8008d1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8008d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d24:	2bff      	cmp	r3, #255	@ 0xff
 8008d26:	d91a      	bls.n	8008d5e <create_name+0x2da>
			if (i >= ni - 1) {
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6a3a      	ldr	r2, [r7, #32]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d308      	bcc.n	8008d44 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8008d32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d36:	f043 0303 	orr.w	r3, r3, #3
 8008d3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	623b      	str	r3, [r7, #32]
 8008d42:	e046      	b.n	8008dd2 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8008d44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d46:	0a1b      	lsrs	r3, r3, #8
 8008d48:	b299      	uxth	r1, r3
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	623a      	str	r2, [r7, #32]
 8008d50:	b2c9      	uxtb	r1, r1
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	460a      	mov	r2, r1
 8008d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008d5c:	e02f      	b.n	8008dbe <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008d5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d007      	beq.n	8008d74 <create_name+0x2f0>
 8008d64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d66:	4619      	mov	r1, r3
 8008d68:	481c      	ldr	r0, [pc, #112]	@ (8008ddc <create_name+0x358>)
 8008d6a:	f7fe f9ff 	bl	800716c <chk_chr>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d008      	beq.n	8008d86 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008d74:	235f      	movs	r3, #95	@ 0x5f
 8008d76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d7c:	f043 0303 	orr.w	r3, r3, #3
 8008d80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d84:	e01b      	b.n	8008dbe <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008d86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d88:	2b40      	cmp	r3, #64	@ 0x40
 8008d8a:	d909      	bls.n	8008da0 <create_name+0x31c>
 8008d8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d8e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008d90:	d806      	bhi.n	8008da0 <create_name+0x31c>
					b |= 2;
 8008d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d96:	f043 0302 	orr.w	r3, r3, #2
 8008d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d9e:	e00e      	b.n	8008dbe <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008da2:	2b60      	cmp	r3, #96	@ 0x60
 8008da4:	d90b      	bls.n	8008dbe <create_name+0x33a>
 8008da6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008da8:	2b7a      	cmp	r3, #122	@ 0x7a
 8008daa:	d808      	bhi.n	8008dbe <create_name+0x33a>
						b |= 1; w -= 0x20;
 8008dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008db8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008dba:	3b20      	subs	r3, #32
 8008dbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	623a      	str	r2, [r7, #32]
 8008dc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008dc6:	b2d1      	uxtb	r1, r2
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4413      	add	r3, r2
 8008dcc:	460a      	mov	r2, r1
 8008dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008dd2:	e749      	b.n	8008c68 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8008dd4:	bf00      	nop
 8008dd6:	e004      	b.n	8008de2 <create_name+0x35e>
 8008dd8:	0800f90c 	.word	0x0800f90c
 8008ddc:	0800f918 	.word	0x0800f918
			if (si > di) break;			/* No extension */
 8008de0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008de8:	2be5      	cmp	r3, #229	@ 0xe5
 8008dea:	d103      	bne.n	8008df4 <create_name+0x370>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2205      	movs	r2, #5
 8008df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	2b08      	cmp	r3, #8
 8008df8:	d104      	bne.n	8008e04 <create_name+0x380>
 8008dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e08:	f003 030c 	and.w	r3, r3, #12
 8008e0c:	2b0c      	cmp	r3, #12
 8008e0e:	d005      	beq.n	8008e1c <create_name+0x398>
 8008e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d105      	bne.n	8008e28 <create_name+0x3a4>
 8008e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e20:	f043 0302 	orr.w	r3, r3, #2
 8008e24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d117      	bne.n	8008e64 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d105      	bne.n	8008e4c <create_name+0x3c8>
 8008e40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e44:	f043 0310 	orr.w	r3, r3, #16
 8008e48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e50:	f003 030c 	and.w	r3, r3, #12
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d105      	bne.n	8008e64 <create_name+0x3e0>
 8008e58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e5c:	f043 0308 	orr.w	r3, r3, #8
 8008e60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008e6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008e6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3728      	adds	r7, #40	@ 0x28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e8c:	e002      	b.n	8008e94 <follow_path+0x1c>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e9a:	d0f8      	beq.n	8008e8e <follow_path+0x16>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ea2:	d0f4      	beq.n	8008e8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b1f      	cmp	r3, #31
 8008eb0:	d80a      	bhi.n	8008ec8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2280      	movs	r2, #128	@ 0x80
 8008eb6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008eba:	2100      	movs	r1, #0
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fe fece 	bl	8007c5e <dir_sdi>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	75fb      	strb	r3, [r7, #23]
 8008ec6:	e043      	b.n	8008f50 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ec8:	463b      	mov	r3, r7
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fdd9 	bl	8008a84 <create_name>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d134      	bne.n	8008f46 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff fb2d 	bl	800853c <dir_find>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008eec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d127      	bne.n	8008f4a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d122      	bne.n	8008f4a <follow_path+0xd2>
 8008f04:	2305      	movs	r3, #5
 8008f06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008f08:	e01f      	b.n	8008f4a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f0a:	7afb      	ldrb	r3, [r7, #11]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d11c      	bne.n	8008f4e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	799b      	ldrb	r3, [r3, #6]
 8008f18:	f003 0310 	and.w	r3, r3, #16
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008f20:	2305      	movs	r3, #5
 8008f22:	75fb      	strb	r3, [r7, #23]
 8008f24:	e014      	b.n	8008f50 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f34:	4413      	add	r3, r2
 8008f36:	4619      	mov	r1, r3
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff f817 	bl	8007f6c <ld_clust>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f44:	e7c0      	b.n	8008ec8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008f46:	bf00      	nop
 8008f48:	e002      	b.n	8008f50 <follow_path+0xd8>
				break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f4e:	bf00      	nop
			}
		}
	}

	return res;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b087      	sub	sp, #28
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d031      	beq.n	8008fd4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	e002      	b.n	8008f7e <get_ldnumber+0x24>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b1f      	cmp	r3, #31
 8008f84:	d903      	bls.n	8008f8e <get_ldnumber+0x34>
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f8c:	d1f4      	bne.n	8008f78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f94:	d11c      	bne.n	8008fd0 <get_ldnumber+0x76>
			tp = *path;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	60fa      	str	r2, [r7, #12]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	3b30      	subs	r3, #48	@ 0x30
 8008fa6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b09      	cmp	r3, #9
 8008fac:	d80e      	bhi.n	8008fcc <get_ldnumber+0x72>
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d10a      	bne.n	8008fcc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d107      	bne.n	8008fcc <get_ldnumber+0x72>
					vol = (int)i;
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	e002      	b.n	8008fd6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008fd4:	693b      	ldr	r3, [r7, #16]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	70da      	strb	r2, [r3, #3]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7fe fab0 	bl	8007564 <move_window>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <check_fs+0x2a>
 800900a:	2304      	movs	r3, #4
 800900c:	e038      	b.n	8009080 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3338      	adds	r3, #56	@ 0x38
 8009012:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd ffc2 	bl	8006fa0 <ld_word>
 800901c:	4603      	mov	r3, r0
 800901e:	461a      	mov	r2, r3
 8009020:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009024:	429a      	cmp	r2, r3
 8009026:	d001      	beq.n	800902c <check_fs+0x48>
 8009028:	2303      	movs	r3, #3
 800902a:	e029      	b.n	8009080 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009032:	2be9      	cmp	r3, #233	@ 0xe9
 8009034:	d009      	beq.n	800904a <check_fs+0x66>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800903c:	2beb      	cmp	r3, #235	@ 0xeb
 800903e:	d11e      	bne.n	800907e <check_fs+0x9a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009046:	2b90      	cmp	r3, #144	@ 0x90
 8009048:	d119      	bne.n	800907e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3338      	adds	r3, #56	@ 0x38
 800904e:	3336      	adds	r3, #54	@ 0x36
 8009050:	4618      	mov	r0, r3
 8009052:	f7fd ffbe 	bl	8006fd2 <ld_dword>
 8009056:	4603      	mov	r3, r0
 8009058:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800905c:	4a0a      	ldr	r2, [pc, #40]	@ (8009088 <check_fs+0xa4>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d101      	bne.n	8009066 <check_fs+0x82>
 8009062:	2300      	movs	r3, #0
 8009064:	e00c      	b.n	8009080 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3338      	adds	r3, #56	@ 0x38
 800906a:	3352      	adds	r3, #82	@ 0x52
 800906c:	4618      	mov	r0, r3
 800906e:	f7fd ffb0 	bl	8006fd2 <ld_dword>
 8009072:	4603      	mov	r3, r0
 8009074:	4a05      	ldr	r2, [pc, #20]	@ (800908c <check_fs+0xa8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d101      	bne.n	800907e <check_fs+0x9a>
 800907a:	2300      	movs	r3, #0
 800907c:	e000      	b.n	8009080 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800907e:	2302      	movs	r3, #2
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	00544146 	.word	0x00544146
 800908c:	33544146 	.word	0x33544146

08009090 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b096      	sub	sp, #88	@ 0x58
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff ff58 	bl	8008f5a <get_ldnumber>
 80090aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80090ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da01      	bge.n	80090b6 <find_volume+0x26>
 80090b2:	230b      	movs	r3, #11
 80090b4:	e235      	b.n	8009522 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80090b6:	4aa5      	ldr	r2, [pc, #660]	@ (800934c <find_volume+0x2bc>)
 80090b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <find_volume+0x3a>
 80090c6:	230c      	movs	r3, #12
 80090c8:	e22b      	b.n	8009522 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80090ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090cc:	f7fe f869 	bl	80071a2 <lock_fs>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <find_volume+0x4a>
 80090d6:	230f      	movs	r3, #15
 80090d8:	e223      	b.n	8009522 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	f023 0301 	bic.w	r3, r3, #1
 80090e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01a      	beq.n	8009126 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80090f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd feb3 	bl	8006e60 <disk_status>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009100:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10c      	bne.n	8009126 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <find_volume+0x92>
 8009112:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800911e:	230a      	movs	r3, #10
 8009120:	e1ff      	b.n	8009522 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009122:	2300      	movs	r3, #0
 8009124:	e1fd      	b.n	8009522 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	2200      	movs	r2, #0
 800912a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800912c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912e:	b2da      	uxtb	r2, r3
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	4618      	mov	r0, r3
 800913a:	f7fd feab 	bl	8006e94 <disk_initialize>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009150:	2303      	movs	r3, #3
 8009152:	e1e6      	b.n	8009522 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <find_volume+0xda>
 800915a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800915e:	f003 0304 	and.w	r3, r3, #4
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009166:	230a      	movs	r3, #10
 8009168:	e1db      	b.n	8009522 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800916e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009170:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009172:	f7ff ff37 	bl	8008fe4 <check_fs>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800917c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009180:	2b02      	cmp	r3, #2
 8009182:	d149      	bne.n	8009218 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009184:	2300      	movs	r3, #0
 8009186:	643b      	str	r3, [r7, #64]	@ 0x40
 8009188:	e01e      	b.n	80091c8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009198:	4413      	add	r3, r2
 800919a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	3304      	adds	r3, #4
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d006      	beq.n	80091b4 <find_volume+0x124>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	3308      	adds	r3, #8
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd ff11 	bl	8006fd2 <ld_dword>
 80091b0:	4602      	mov	r2, r0
 80091b2:	e000      	b.n	80091b6 <find_volume+0x126>
 80091b4:	2200      	movs	r2, #0
 80091b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	3358      	adds	r3, #88	@ 0x58
 80091bc:	443b      	add	r3, r7
 80091be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80091c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091c4:	3301      	adds	r3, #1
 80091c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80091c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d9dd      	bls.n	800918a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80091ce:	2300      	movs	r3, #0
 80091d0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80091d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <find_volume+0x14e>
 80091d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091da:	3b01      	subs	r3, #1
 80091dc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80091de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	3358      	adds	r3, #88	@ 0x58
 80091e4:	443b      	add	r3, r7
 80091e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091ea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80091ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <find_volume+0x16e>
 80091f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091f6:	f7ff fef5 	bl	8008fe4 <check_fs>
 80091fa:	4603      	mov	r3, r0
 80091fc:	e000      	b.n	8009200 <find_volume+0x170>
 80091fe:	2303      	movs	r3, #3
 8009200:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009204:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009208:	2b01      	cmp	r3, #1
 800920a:	d905      	bls.n	8009218 <find_volume+0x188>
 800920c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800920e:	3301      	adds	r3, #1
 8009210:	643b      	str	r3, [r7, #64]	@ 0x40
 8009212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009214:	2b03      	cmp	r3, #3
 8009216:	d9e2      	bls.n	80091de <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009218:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800921c:	2b04      	cmp	r3, #4
 800921e:	d101      	bne.n	8009224 <find_volume+0x194>
 8009220:	2301      	movs	r3, #1
 8009222:	e17e      	b.n	8009522 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009224:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009228:	2b01      	cmp	r3, #1
 800922a:	d901      	bls.n	8009230 <find_volume+0x1a0>
 800922c:	230d      	movs	r3, #13
 800922e:	e178      	b.n	8009522 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	3338      	adds	r3, #56	@ 0x38
 8009234:	330b      	adds	r3, #11
 8009236:	4618      	mov	r0, r3
 8009238:	f7fd feb2 	bl	8006fa0 <ld_word>
 800923c:	4603      	mov	r3, r0
 800923e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009242:	d001      	beq.n	8009248 <find_volume+0x1b8>
 8009244:	230d      	movs	r3, #13
 8009246:	e16c      	b.n	8009522 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924a:	3338      	adds	r3, #56	@ 0x38
 800924c:	3316      	adds	r3, #22
 800924e:	4618      	mov	r0, r3
 8009250:	f7fd fea6 	bl	8006fa0 <ld_word>
 8009254:	4603      	mov	r3, r0
 8009256:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <find_volume+0x1dc>
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	3338      	adds	r3, #56	@ 0x38
 8009262:	3324      	adds	r3, #36	@ 0x24
 8009264:	4618      	mov	r0, r3
 8009266:	f7fd feb4 	bl	8006fd2 <ld_dword>
 800926a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800926c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009270:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009274:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927e:	789b      	ldrb	r3, [r3, #2]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d005      	beq.n	8009290 <find_volume+0x200>
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	789b      	ldrb	r3, [r3, #2]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d001      	beq.n	8009290 <find_volume+0x200>
 800928c:	230d      	movs	r3, #13
 800928e:	e148      	b.n	8009522 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009292:	789b      	ldrb	r3, [r3, #2]
 8009294:	461a      	mov	r2, r3
 8009296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009298:	fb02 f303 	mul.w	r3, r2, r3
 800929c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800929e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092a4:	461a      	mov	r2, r3
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	895b      	ldrh	r3, [r3, #10]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d008      	beq.n	80092c4 <find_volume+0x234>
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	895b      	ldrh	r3, [r3, #10]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ba:	895b      	ldrh	r3, [r3, #10]
 80092bc:	3b01      	subs	r3, #1
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <find_volume+0x238>
 80092c4:	230d      	movs	r3, #13
 80092c6:	e12c      	b.n	8009522 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80092c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ca:	3338      	adds	r3, #56	@ 0x38
 80092cc:	3311      	adds	r3, #17
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fd fe66 	bl	8006fa0 <ld_word>
 80092d4:	4603      	mov	r3, r0
 80092d6:	461a      	mov	r2, r3
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80092dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092de:	891b      	ldrh	r3, [r3, #8]
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <find_volume+0x25e>
 80092ea:	230d      	movs	r3, #13
 80092ec:	e119      	b.n	8009522 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80092ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f0:	3338      	adds	r3, #56	@ 0x38
 80092f2:	3313      	adds	r3, #19
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fd fe53 	bl	8006fa0 <ld_word>
 80092fa:	4603      	mov	r3, r0
 80092fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80092fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <find_volume+0x282>
 8009304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009306:	3338      	adds	r3, #56	@ 0x38
 8009308:	3320      	adds	r3, #32
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd fe61 	bl	8006fd2 <ld_dword>
 8009310:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	3338      	adds	r3, #56	@ 0x38
 8009316:	330e      	adds	r3, #14
 8009318:	4618      	mov	r0, r3
 800931a:	f7fd fe41 	bl	8006fa0 <ld_word>
 800931e:	4603      	mov	r3, r0
 8009320:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009322:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <find_volume+0x29c>
 8009328:	230d      	movs	r3, #13
 800932a:	e0fa      	b.n	8009522 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800932c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800932e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009330:	4413      	add	r3, r2
 8009332:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009334:	8912      	ldrh	r2, [r2, #8]
 8009336:	0912      	lsrs	r2, r2, #4
 8009338:	b292      	uxth	r2, r2
 800933a:	4413      	add	r3, r2
 800933c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800933e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	429a      	cmp	r2, r3
 8009344:	d204      	bcs.n	8009350 <find_volume+0x2c0>
 8009346:	230d      	movs	r3, #13
 8009348:	e0eb      	b.n	8009522 <find_volume+0x492>
 800934a:	bf00      	nop
 800934c:	20000fb8 	.word	0x20000fb8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009358:	8952      	ldrh	r2, [r2, #10]
 800935a:	fbb3 f3f2 	udiv	r3, r3, r2
 800935e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <find_volume+0x2da>
 8009366:	230d      	movs	r3, #13
 8009368:	e0db      	b.n	8009522 <find_volume+0x492>
		fmt = FS_FAT32;
 800936a:	2303      	movs	r3, #3
 800936c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009372:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009376:	4293      	cmp	r3, r2
 8009378:	d802      	bhi.n	8009380 <find_volume+0x2f0>
 800937a:	2302      	movs	r3, #2
 800937c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009386:	4293      	cmp	r3, r2
 8009388:	d802      	bhi.n	8009390 <find_volume+0x300>
 800938a:	2301      	movs	r3, #1
 800938c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	1c9a      	adds	r2, r3, #2
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800939c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800939e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80093a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a2:	441a      	add	r2, r3
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80093a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ac:	441a      	add	r2, r3
 80093ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b0:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80093b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d11e      	bne.n	80093f8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80093ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093bc:	3338      	adds	r3, #56	@ 0x38
 80093be:	332a      	adds	r3, #42	@ 0x2a
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fd fded 	bl	8006fa0 <ld_word>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <find_volume+0x340>
 80093cc:	230d      	movs	r3, #13
 80093ce:	e0a8      	b.n	8009522 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	891b      	ldrh	r3, [r3, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <find_volume+0x34c>
 80093d8:	230d      	movs	r3, #13
 80093da:	e0a2      	b.n	8009522 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	3338      	adds	r3, #56	@ 0x38
 80093e0:	332c      	adds	r3, #44	@ 0x2c
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fd fdf5 	bl	8006fd2 <ld_dword>
 80093e8:	4602      	mov	r2, r0
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80093ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093f6:	e01f      	b.n	8009438 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80093f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fa:	891b      	ldrh	r3, [r3, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <find_volume+0x374>
 8009400:	230d      	movs	r3, #13
 8009402:	e08e      	b.n	8009522 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800940a:	441a      	add	r2, r3
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009410:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009414:	2b02      	cmp	r3, #2
 8009416:	d103      	bne.n	8009420 <find_volume+0x390>
 8009418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	e00a      	b.n	8009436 <find_volume+0x3a6>
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	4613      	mov	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	4413      	add	r3, r2
 800942a:	085a      	lsrs	r2, r3, #1
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009436:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	6a1a      	ldr	r2, [r3, #32]
 800943c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800943e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009442:	0a5b      	lsrs	r3, r3, #9
 8009444:	429a      	cmp	r2, r3
 8009446:	d201      	bcs.n	800944c <find_volume+0x3bc>
 8009448:	230d      	movs	r3, #13
 800944a:	e06a      	b.n	8009522 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800944c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944e:	f04f 32ff 	mov.w	r2, #4294967295
 8009452:	619a      	str	r2, [r3, #24]
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	699a      	ldr	r2, [r3, #24]
 8009458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	2280      	movs	r2, #128	@ 0x80
 8009460:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009462:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009466:	2b03      	cmp	r3, #3
 8009468:	d149      	bne.n	80094fe <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	3338      	adds	r3, #56	@ 0x38
 800946e:	3330      	adds	r3, #48	@ 0x30
 8009470:	4618      	mov	r0, r3
 8009472:	f7fd fd95 	bl	8006fa0 <ld_word>
 8009476:	4603      	mov	r3, r0
 8009478:	2b01      	cmp	r3, #1
 800947a:	d140      	bne.n	80094fe <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800947c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800947e:	3301      	adds	r3, #1
 8009480:	4619      	mov	r1, r3
 8009482:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009484:	f7fe f86e 	bl	8007564 <move_window>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d137      	bne.n	80094fe <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009490:	2200      	movs	r2, #0
 8009492:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009496:	3338      	adds	r3, #56	@ 0x38
 8009498:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800949c:	4618      	mov	r0, r3
 800949e:	f7fd fd7f 	bl	8006fa0 <ld_word>
 80094a2:	4603      	mov	r3, r0
 80094a4:	461a      	mov	r2, r3
 80094a6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d127      	bne.n	80094fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80094ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b0:	3338      	adds	r3, #56	@ 0x38
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fd fd8d 	bl	8006fd2 <ld_dword>
 80094b8:	4603      	mov	r3, r0
 80094ba:	4a1c      	ldr	r2, [pc, #112]	@ (800952c <find_volume+0x49c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d11e      	bne.n	80094fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80094c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c2:	3338      	adds	r3, #56	@ 0x38
 80094c4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fd fd82 	bl	8006fd2 <ld_dword>
 80094ce:	4603      	mov	r3, r0
 80094d0:	4a17      	ldr	r2, [pc, #92]	@ (8009530 <find_volume+0x4a0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d113      	bne.n	80094fe <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80094d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d8:	3338      	adds	r3, #56	@ 0x38
 80094da:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fd fd77 	bl	8006fd2 <ld_dword>
 80094e4:	4602      	mov	r2, r0
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	3338      	adds	r3, #56	@ 0x38
 80094ee:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd fd6d 	bl	8006fd2 <ld_dword>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80094fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009500:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009504:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009506:	4b0b      	ldr	r3, [pc, #44]	@ (8009534 <find_volume+0x4a4>)
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	3301      	adds	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	4b09      	ldr	r3, [pc, #36]	@ (8009534 <find_volume+0x4a4>)
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	4b08      	ldr	r3, [pc, #32]	@ (8009534 <find_volume+0x4a4>)
 8009514:	881a      	ldrh	r2, [r3, #0]
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800951a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800951c:	f7fd ffba 	bl	8007494 <clear_lock>
#endif
	return FR_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3758      	adds	r7, #88	@ 0x58
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	41615252 	.word	0x41615252
 8009530:	61417272 	.word	0x61417272
 8009534:	20000fbc 	.word	0x20000fbc

08009538 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009542:	2309      	movs	r3, #9
 8009544:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d02e      	beq.n	80095aa <validate+0x72>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d02a      	beq.n	80095aa <validate+0x72>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d025      	beq.n	80095aa <validate+0x72>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	889a      	ldrh	r2, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	88db      	ldrh	r3, [r3, #6]
 8009568:	429a      	cmp	r2, r3
 800956a:	d11e      	bne.n	80095aa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4618      	mov	r0, r3
 8009572:	f7fd fe16 	bl	80071a2 <lock_fs>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d014      	beq.n	80095a6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	785b      	ldrb	r3, [r3, #1]
 8009582:	4618      	mov	r0, r3
 8009584:	f7fd fc6c 	bl	8006e60 <disk_status>
 8009588:	4603      	mov	r3, r0
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <validate+0x60>
				res = FR_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
 8009596:	e008      	b.n	80095aa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fd fe15 	bl	80071ce <unlock_fs>
 80095a4:	e001      	b.n	80095aa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80095a6:	230f      	movs	r3, #15
 80095a8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <validate+0x7e>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	e000      	b.n	80095b8 <validate+0x80>
 80095b6:	2300      	movs	r3, #0
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	6013      	str	r3, [r2, #0]
	return res;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4613      	mov	r3, r2
 80095d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095da:	f107 0310 	add.w	r3, r7, #16
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff fcbb 	bl	8008f5a <get_ldnumber>
 80095e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da01      	bge.n	80095f0 <f_mount+0x28>
 80095ec:	230b      	movs	r3, #11
 80095ee:	e048      	b.n	8009682 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095f0:	4a26      	ldr	r2, [pc, #152]	@ (800968c <f_mount+0xc4>)
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00f      	beq.n	8009620 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009600:	69b8      	ldr	r0, [r7, #24]
 8009602:	f7fd ff47 	bl	8007494 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	4618      	mov	r0, r3
 800960c:	f001 fa3f 	bl	800aa8e <ff_del_syncobj>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <f_mount+0x52>
 8009616:	2302      	movs	r3, #2
 8009618:	e033      	b.n	8009682 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00f      	beq.n	8009646 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	b2da      	uxtb	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3310      	adds	r3, #16
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f001 fa0e 	bl	800aa58 <ff_cre_syncobj>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <f_mount+0x7e>
 8009642:	2302      	movs	r3, #2
 8009644:	e01d      	b.n	8009682 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	4910      	ldr	r1, [pc, #64]	@ (800968c <f_mount+0xc4>)
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <f_mount+0x94>
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d001      	beq.n	8009660 <f_mount+0x98>
 800965c:	2300      	movs	r3, #0
 800965e:	e010      	b.n	8009682 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009660:	f107 010c 	add.w	r1, r7, #12
 8009664:	f107 0308 	add.w	r3, r7, #8
 8009668:	2200      	movs	r2, #0
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff fd10 	bl	8009090 <find_volume>
 8009670:	4603      	mov	r3, r0
 8009672:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	7dfa      	ldrb	r2, [r7, #23]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7fd fda7 	bl	80071ce <unlock_fs>
 8009680:	7dfb      	ldrb	r3, [r7, #23]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20000fb8 	.word	0x20000fb8

08009690 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8009696:	af00      	add	r7, sp, #0
 8009698:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800969c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80096a0:	6018      	str	r0, [r3, #0]
 80096a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096a6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80096aa:	6019      	str	r1, [r3, #0]
 80096ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096b0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096b4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80096b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <f_open+0x38>
 80096c4:	2309      	movs	r3, #9
 80096c6:	e299      	b.n	8009bfc <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80096c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096cc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096d0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80096d4:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80096d8:	7812      	ldrb	r2, [r2, #0]
 80096da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80096de:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80096e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096e4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096e8:	781a      	ldrb	r2, [r3, #0]
 80096ea:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fccc 	bl	8009090 <find_volume>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 80096fe:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009702:	2b00      	cmp	r3, #0
 8009704:	f040 8265 	bne.w	8009bd2 <f_open+0x542>
		dj.obj.fs = fs;
 8009708:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800970c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8009710:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009714:	f107 0214 	add.w	r2, r7, #20
 8009718:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800971a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800971e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fba4 	bl	8008e78 <follow_path>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009736:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11c      	bne.n	8009778 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800973e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8009742:	b25b      	sxtb	r3, r3
 8009744:	2b00      	cmp	r3, #0
 8009746:	da03      	bge.n	8009750 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8009748:	2306      	movs	r3, #6
 800974a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800974e:	e013      	b.n	8009778 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009750:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009754:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b01      	cmp	r3, #1
 800975c:	bf8c      	ite	hi
 800975e:	2301      	movhi	r3, #1
 8009760:	2300      	movls	r3, #0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7fd fd49 	bl	8007204 <chk_lock>
 8009772:	4603      	mov	r3, r0
 8009774:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009778:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800977c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	f003 031c 	and.w	r3, r3, #28
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80a7 	beq.w	80098da <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800978c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01f      	beq.n	80097d4 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009794:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009798:	2b04      	cmp	r3, #4
 800979a:	d10e      	bne.n	80097ba <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800979c:	f7fd fd8e 	bl	80072bc <enq_lock>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d006      	beq.n	80097b4 <f_open+0x124>
 80097a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe ff86 	bl	80086bc <dir_register>
 80097b0:	4603      	mov	r3, r0
 80097b2:	e000      	b.n	80097b6 <f_open+0x126>
 80097b4:	2312      	movs	r3, #18
 80097b6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80097ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097be:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80097c2:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80097c6:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	f042 0208 	orr.w	r2, r2, #8
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	e015      	b.n	8009800 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80097d4:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80097d8:	f003 0311 	and.w	r3, r3, #17
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <f_open+0x158>
					res = FR_DENIED;
 80097e0:	2307      	movs	r3, #7
 80097e2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80097e6:	e00b      	b.n	8009800 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80097e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097ec:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <f_open+0x170>
 80097fa:	2308      	movs	r3, #8
 80097fc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009800:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009804:	2b00      	cmp	r3, #0
 8009806:	f040 8088 	bne.w	800991a <f_open+0x28a>
 800980a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800980e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 0308 	and.w	r3, r3, #8
 8009818:	2b00      	cmp	r3, #0
 800981a:	d07e      	beq.n	800991a <f_open+0x28a>
				dw = GET_FATTIME();
 800981c:	f7fd f8b8 	bl	8006990 <get_fattime>
 8009820:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009824:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009828:	330e      	adds	r3, #14
 800982a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800982e:	4618      	mov	r0, r3
 8009830:	f7fd fc0d 	bl	800704e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009834:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009838:	3316      	adds	r3, #22
 800983a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800983e:	4618      	mov	r0, r3
 8009840:	f7fd fc05 	bl	800704e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009844:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009848:	330b      	adds	r3, #11
 800984a:	2220      	movs	r2, #32
 800984c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800984e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009852:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009856:	4611      	mov	r1, r2
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe fb87 	bl	8007f6c <ld_clust>
 800985e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009862:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009866:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800986a:	2200      	movs	r2, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fb9c 	bl	8007faa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009872:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009876:	331c      	adds	r3, #28
 8009878:	2100      	movs	r1, #0
 800987a:	4618      	mov	r0, r3
 800987c:	f7fd fbe7 	bl	800704e <st_dword>
					fs->wflag = 1;
 8009880:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009884:	2201      	movs	r2, #1
 8009886:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009888:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800988c:	2b00      	cmp	r3, #0
 800988e:	d044      	beq.n	800991a <f_open+0x28a>
						dw = fs->winsect;
 8009890:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009896:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800989a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800989e:	2200      	movs	r2, #0
 80098a0:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe f8a9 	bl	80079fc <remove_chain>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 80098b0:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d130      	bne.n	800991a <f_open+0x28a>
							res = move_window(fs, dw);
 80098b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80098bc:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fd fe4f 	bl	8007564 <move_window>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80098cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80098d0:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80098d4:	3a01      	subs	r2, #1
 80098d6:	615a      	str	r2, [r3, #20]
 80098d8:	e01f      	b.n	800991a <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80098da:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d11b      	bne.n	800991a <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80098e2:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <f_open+0x266>
					res = FR_NO_FILE;
 80098ee:	2304      	movs	r3, #4
 80098f0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80098f4:	e011      	b.n	800991a <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80098f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098fa:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <f_open+0x28a>
 8009908:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <f_open+0x28a>
						res = FR_DENIED;
 8009914:	2307      	movs	r3, #7
 8009916:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800991a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800991e:	2b00      	cmp	r3, #0
 8009920:	d148      	bne.n	80099b4 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009922:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009926:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	f003 0308 	and.w	r3, r3, #8
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8009934:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009938:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800993c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009940:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009944:	7812      	ldrb	r2, [r2, #0]
 8009946:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800994a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800994c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009952:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009956:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800995e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009962:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009966:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800996e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009972:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b01      	cmp	r3, #1
 800997a:	bf8c      	ite	hi
 800997c:	2301      	movhi	r3, #1
 800997e:	2300      	movls	r3, #0
 8009980:	b2db      	uxtb	r3, r3
 8009982:	461a      	mov	r2, r3
 8009984:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7fd fcb8 	bl	8007300 <inc_lock>
 8009990:	4602      	mov	r2, r0
 8009992:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009996:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800999e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099a2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <f_open+0x324>
 80099ae:	2302      	movs	r3, #2
 80099b0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80099b4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f040 810a 	bne.w	8009bd2 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80099be:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80099c2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80099c6:	4611      	mov	r1, r2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe facf 	bl	8007f6c <ld_clust>
 80099ce:	4602      	mov	r2, r0
 80099d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099d4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80099dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80099e0:	331c      	adds	r3, #28
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fd faf5 	bl	8006fd2 <ld_dword>
 80099e8:	4602      	mov	r2, r0
 80099ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099ee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80099f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099fa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2200      	movs	r2, #0
 8009a02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009a04:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009a08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a0c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009a14:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009a18:	88da      	ldrh	r2, [r3, #6]
 8009a1a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a1e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009a26:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a2a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009a34:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009a38:	7812      	ldrb	r2, [r2, #0]
 8009a3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009a3c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a40:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009a4a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a4e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2200      	movs	r2, #0
 8009a56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009a58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a5c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009a66:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a6a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3330      	adds	r3, #48	@ 0x30
 8009a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fd fb35 	bl	80070e8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009a7e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a82:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 80a0 	beq.w	8009bd2 <f_open+0x542>
 8009a92:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a96:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 8097 	beq.w	8009bd2 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009aa4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009aa8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68da      	ldr	r2, [r3, #12]
 8009ab0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ab4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009abc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009ac0:	895b      	ldrh	r3, [r3, #10]
 8009ac2:	025b      	lsls	r3, r3, #9
 8009ac4:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009ac8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009acc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ad8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009adc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009ae8:	e021      	b.n	8009b2e <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 8009aea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009aee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fd fdee 	bl	80076da <get_fat>
 8009afe:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8009b02:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d802      	bhi.n	8009b10 <f_open+0x480>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b10:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b18:	d102      	bne.n	8009b20 <f_open+0x490>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b20:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009b24:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009b2e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d105      	bne.n	8009b42 <f_open+0x4b2>
 8009b36:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009b3a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d8d3      	bhi.n	8009aea <f_open+0x45a>
				}
				fp->clust = clst;
 8009b42:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009b46:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009b50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009b52:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d13b      	bne.n	8009bd2 <f_open+0x542>
 8009b5a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d035      	beq.n	8009bd2 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009b66:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009b6a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fd fd94 	bl	800769c <clust2sect>
 8009b74:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8009b78:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d103      	bne.n	8009b88 <f_open+0x4f8>
						res = FR_INT_ERR;
 8009b80:	2302      	movs	r3, #2
 8009b82:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009b86:	e024      	b.n	8009bd2 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009b88:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009b8c:	0a5a      	lsrs	r2, r3, #9
 8009b8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009b92:	441a      	add	r2, r3
 8009b94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009b98:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ba0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009ba4:	7858      	ldrb	r0, [r3, #1]
 8009ba6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009baa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009bb4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009bb8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6a1a      	ldr	r2, [r3, #32]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f7fd f98f 	bl	8006ee4 <disk_read>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <f_open+0x542>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009bd2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d006      	beq.n	8009be8 <f_open+0x558>
 8009bda:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009bde:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009be8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009bec:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fd faeb 	bl	80071ce <unlock_fs>
 8009bf8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b08e      	sub	sp, #56	@ 0x38
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	607a      	str	r2, [r7, #4]
 8009c12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f107 0214 	add.w	r2, r7, #20
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff fc86 	bl	8009538 <validate>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009c32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d107      	bne.n	8009c4a <f_read+0x44>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	7d5b      	ldrb	r3, [r3, #21]
 8009c3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009c42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <f_read+0x58>
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fd fabb 	bl	80071ce <unlock_fs>
 8009c58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c5c:	e13d      	b.n	8009eda <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	7d1b      	ldrb	r3, [r3, #20]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <f_read+0x72>
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2107      	movs	r1, #7
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fd faad 	bl	80071ce <unlock_fs>
 8009c74:	2307      	movs	r3, #7
 8009c76:	e130      	b.n	8009eda <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	f240 811c 	bls.w	8009ec6 <f_read+0x2c0>
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009c92:	e118      	b.n	8009ec6 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 80e4 	bne.w	8009e6a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	0a5b      	lsrs	r3, r3, #9
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	8952      	ldrh	r2, [r2, #10]
 8009cac:	3a01      	subs	r2, #1
 8009cae:	4013      	ands	r3, r2
 8009cb0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d139      	bne.n	8009d2c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d103      	bne.n	8009cc8 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cc6:	e013      	b.n	8009cf0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7fd ff8d 	bl	8007bf6 <clmt_clust>
 8009cdc:	6338      	str	r0, [r7, #48]	@ 0x30
 8009cde:	e007      	b.n	8009cf0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fd fcf6 	bl	80076da <get_fat>
 8009cee:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d809      	bhi.n	8009d0a <f_read+0x104>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	755a      	strb	r2, [r3, #21]
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2102      	movs	r1, #2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fd fa64 	bl	80071ce <unlock_fs>
 8009d06:	2302      	movs	r3, #2
 8009d08:	e0e7      	b.n	8009eda <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d10:	d109      	bne.n	8009d26 <f_read+0x120>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	755a      	strb	r2, [r3, #21]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fd fa56 	bl	80071ce <unlock_fs>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e0d9      	b.n	8009eda <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d2a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fd fcb1 	bl	800769c <clust2sect>
 8009d3a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <f_read+0x150>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2202      	movs	r2, #2
 8009d46:	755a      	strb	r2, [r3, #21]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2102      	movs	r1, #2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fd fa3e 	bl	80071ce <unlock_fs>
 8009d52:	2302      	movs	r3, #2
 8009d54:	e0c1      	b.n	8009eda <f_read+0x2d4>
			sect += csect;
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	0a5b      	lsrs	r3, r3, #9
 8009d62:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d03e      	beq.n	8009de8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6e:	4413      	add	r3, r2
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	8952      	ldrh	r2, [r2, #10]
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d905      	bls.n	8009d84 <f_read+0x17e>
					cc = fs->csize - csect;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	895b      	ldrh	r3, [r3, #10]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	7858      	ldrb	r0, [r3, #1]
 8009d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d8e:	f7fd f8a9 	bl	8006ee4 <disk_read>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d009      	beq.n	8009dac <f_read+0x1a6>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	755a      	strb	r2, [r3, #21]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2101      	movs	r1, #1
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fd fa13 	bl	80071ce <unlock_fs>
 8009da8:	2301      	movs	r3, #1
 8009daa:	e096      	b.n	8009eda <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	7d1b      	ldrb	r3, [r3, #20]
 8009db0:	b25b      	sxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	da14      	bge.n	8009de0 <f_read+0x1da>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a1a      	ldr	r2, [r3, #32]
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d90d      	bls.n	8009de0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6a1a      	ldr	r2, [r3, #32]
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	025b      	lsls	r3, r3, #9
 8009dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dd0:	18d0      	adds	r0, r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3330      	adds	r3, #48	@ 0x30
 8009dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dda:	4619      	mov	r1, r3
 8009ddc:	f7fd f963 	bl	80070a6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	025b      	lsls	r3, r3, #9
 8009de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009de6:	e05a      	b.n	8009e9e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d038      	beq.n	8009e64 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	7d1b      	ldrb	r3, [r3, #20]
 8009df6:	b25b      	sxtb	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da1d      	bge.n	8009e38 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	7858      	ldrb	r0, [r3, #1]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a1a      	ldr	r2, [r3, #32]
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f7fd f88a 	bl	8006f24 <disk_write>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d009      	beq.n	8009e2a <f_read+0x224>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	755a      	strb	r2, [r3, #21]
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2101      	movs	r1, #1
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fd f9d4 	bl	80071ce <unlock_fs>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e057      	b.n	8009eda <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	7d1b      	ldrb	r3, [r3, #20]
 8009e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	7858      	ldrb	r0, [r3, #1]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e42:	2301      	movs	r3, #1
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	f7fd f84d 	bl	8006ee4 <disk_read>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d009      	beq.n	8009e64 <f_read+0x25e>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2201      	movs	r2, #1
 8009e54:	755a      	strb	r2, [r3, #21]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2101      	movs	r1, #1
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fd f9b7 	bl	80071ce <unlock_fs>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e03a      	b.n	8009eda <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e72:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d901      	bls.n	8009e84 <f_read+0x27e>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e92:	4413      	add	r3, r2
 8009e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e96:	4619      	mov	r1, r3
 8009e98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e9a:	f7fd f904 	bl	80070a6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea2:	4413      	add	r3, r2
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	699a      	ldr	r2, [r3, #24]
 8009eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eac:	441a      	add	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	619a      	str	r2, [r3, #24]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb8:	441a      	add	r2, r3
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f47f aee3 	bne.w	8009c94 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fd f97b 	bl	80071ce <unlock_fs>
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3738      	adds	r7, #56	@ 0x38
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b086      	sub	sp, #24
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f107 0208 	add.w	r2, r7, #8
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff fb20 	bl	8009538 <validate>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d16d      	bne.n	8009fde <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7d1b      	ldrb	r3, [r3, #20]
 8009f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d067      	beq.n	8009fde <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	7d1b      	ldrb	r3, [r3, #20]
 8009f12:	b25b      	sxtb	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	da1a      	bge.n	8009f4e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	7858      	ldrb	r0, [r3, #1]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1a      	ldr	r2, [r3, #32]
 8009f26:	2301      	movs	r3, #1
 8009f28:	f7fc fffc 	bl	8006f24 <disk_write>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d006      	beq.n	8009f40 <f_sync+0x5e>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2101      	movs	r1, #1
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fd f949 	bl	80071ce <unlock_fs>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e055      	b.n	8009fec <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	7d1b      	ldrb	r3, [r3, #20]
 8009f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009f4e:	f7fc fd1f 	bl	8006990 <get_fattime>
 8009f52:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	f7fd fb01 	bl	8007564 <move_window>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d138      	bne.n	8009fde <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f70:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	330b      	adds	r3, #11
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	330b      	adds	r3, #11
 8009f7c:	f042 0220 	orr.w	r2, r2, #32
 8009f80:	b2d2      	uxtb	r2, r2
 8009f82:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	68f9      	ldr	r1, [r7, #12]
 8009f90:	f7fe f80b 	bl	8007faa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f103 021c 	add.w	r2, r3, #28
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7fd f854 	bl	800704e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3316      	adds	r3, #22
 8009faa:	6939      	ldr	r1, [r7, #16]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fd f84e 	bl	800704e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3312      	adds	r3, #18
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fd f82d 	bl	8007018 <st_word>
					fs->wflag = 1;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fd fafa 	bl	80075c0 <sync_fs>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7d1b      	ldrb	r3, [r3, #20]
 8009fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	7dfa      	ldrb	r2, [r7, #23]
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fd f8f2 	bl	80071ce <unlock_fs>
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff70 	bl	8009ee2 <f_sync>
 800a002:	4603      	mov	r3, r0
 800a004:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d11d      	bne.n	800a048 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f107 0208 	add.w	r2, r7, #8
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff fa8f 	bl	8009538 <validate>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d111      	bne.n	800a048 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fd f9f7 	bl	800741c <dec_lock>
 800a02e:	4603      	mov	r3, r0
 800a030:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2100      	movs	r1, #0
 800a042:	4618      	mov	r0, r3
 800a044:	f7fd f8c3 	bl	80071ce <unlock_fs>
#endif
		}
	}
	return res;
 800a048:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b090      	sub	sp, #64	@ 0x40
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f107 0208 	add.w	r2, r7, #8
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fa67 	bl	8009538 <validate>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a070:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a074:	2b00      	cmp	r3, #0
 800a076:	d103      	bne.n	800a080 <f_lseek+0x2e>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	7d5b      	ldrb	r3, [r3, #21]
 800a07c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a080:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a084:	2b00      	cmp	r3, #0
 800a086:	d009      	beq.n	800a09c <f_lseek+0x4a>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800a08e:	4611      	mov	r1, r2
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd f89c 	bl	80071ce <unlock_fs>
 800a096:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a09a:	e229      	b.n	800a4f0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 80ea 	beq.w	800a27a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ac:	d164      	bne.n	800a178 <f_lseek+0x126>
			tbl = fp->cltbl;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	1d1a      	adds	r2, r3, #4
 800a0b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	2302      	movs	r3, #2
 800a0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d044      	beq.n	800a158 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d0:	613b      	str	r3, [r7, #16]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d8:	3302      	adds	r3, #2
 800a0da:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fd faf5 	bl	80076da <get_fat>
 800a0f0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d809      	bhi.n	800a10c <f_lseek+0xba>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	755a      	strb	r2, [r3, #21]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2102      	movs	r1, #2
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd f863 	bl	80071ce <unlock_fs>
 800a108:	2302      	movs	r3, #2
 800a10a:	e1f1      	b.n	800a4f0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a112:	d109      	bne.n	800a128 <f_lseek+0xd6>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	755a      	strb	r2, [r3, #21]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2101      	movs	r1, #1
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fd f855 	bl	80071ce <unlock_fs>
 800a124:	2301      	movs	r3, #1
 800a126:	e1e3      	b.n	800a4f0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3301      	adds	r3, #1
 800a12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a12e:	429a      	cmp	r2, r3
 800a130:	d0d4      	beq.n	800a0dc <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	429a      	cmp	r2, r3
 800a138:	d809      	bhi.n	800a14e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	1d1a      	adds	r2, r3, #4
 800a148:	627a      	str	r2, [r7, #36]	@ 0x24
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a154:	429a      	cmp	r2, r3
 800a156:	d3ba      	bcc.n	800a0ce <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a15e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	429a      	cmp	r2, r3
 800a166:	d803      	bhi.n	800a170 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	e1b6      	b.n	800a4de <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a170:	2311      	movs	r3, #17
 800a172:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a176:	e1b2      	b.n	800a4de <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d902      	bls.n	800a188 <f_lseek+0x136>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 81a4 	beq.w	800a4de <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	3b01      	subs	r3, #1
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fd fd2a 	bl	8007bf6 <clmt_clust>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f7fd fa73 	bl	800769c <clust2sect>
 800a1b6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d109      	bne.n	800a1d2 <f_lseek+0x180>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	755a      	strb	r2, [r3, #21]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2102      	movs	r1, #2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fd f800 	bl	80071ce <unlock_fs>
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e18e      	b.n	800a4f0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	0a5b      	lsrs	r3, r3, #9
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	8952      	ldrh	r2, [r2, #10]
 800a1dc:	3a01      	subs	r2, #1
 800a1de:	4013      	ands	r3, r2
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 8175 	beq.w	800a4de <f_lseek+0x48c>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	f000 816f 	beq.w	800a4de <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7d1b      	ldrb	r3, [r3, #20]
 800a204:	b25b      	sxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	da1d      	bge.n	800a246 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	7858      	ldrb	r0, [r3, #1]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1a      	ldr	r2, [r3, #32]
 800a218:	2301      	movs	r3, #1
 800a21a:	f7fc fe83 	bl	8006f24 <disk_write>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d009      	beq.n	800a238 <f_lseek+0x1e6>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	755a      	strb	r2, [r3, #21]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2101      	movs	r1, #1
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fc ffcd 	bl	80071ce <unlock_fs>
 800a234:	2301      	movs	r3, #1
 800a236:	e15b      	b.n	800a4f0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7d1b      	ldrb	r3, [r3, #20]
 800a23c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a240:	b2da      	uxtb	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	7858      	ldrb	r0, [r3, #1]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a250:	2301      	movs	r3, #1
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	f7fc fe46 	bl	8006ee4 <disk_read>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <f_lseek+0x220>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	755a      	strb	r2, [r3, #21]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2101      	movs	r1, #1
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fc ffb0 	bl	80071ce <unlock_fs>
 800a26e:	2301      	movs	r3, #1
 800a270:	e13e      	b.n	800a4f0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	621a      	str	r2, [r3, #32]
 800a278:	e131      	b.n	800a4de <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d908      	bls.n	800a296 <f_lseek+0x244>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7d1b      	ldrb	r3, [r3, #20]
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2a4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 80c0 	beq.w	800a42e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	895b      	ldrh	r3, [r3, #10]
 800a2b2:	025b      	lsls	r3, r3, #9
 800a2b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01b      	beq.n	800a2f4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	1e5a      	subs	r2, r3, #1
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	1e59      	subs	r1, r3, #1
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d30f      	bcc.n	800a2f4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	1e5a      	subs	r2, r3, #1
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	425b      	negs	r3, r3
 800a2dc:	401a      	ands	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2f2:	e02c      	b.n	800a34e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d123      	bne.n	800a348 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2100      	movs	r1, #0
 800a304:	4618      	mov	r0, r3
 800a306:	f7fd fbde 	bl	8007ac6 <create_chain>
 800a30a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d109      	bne.n	800a326 <f_lseek+0x2d4>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2202      	movs	r2, #2
 800a316:	755a      	strb	r2, [r3, #21]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2102      	movs	r1, #2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fc ff56 	bl	80071ce <unlock_fs>
 800a322:	2302      	movs	r3, #2
 800a324:	e0e4      	b.n	800a4f0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32c:	d109      	bne.n	800a342 <f_lseek+0x2f0>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	755a      	strb	r2, [r3, #21]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2101      	movs	r1, #1
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fc ff48 	bl	80071ce <unlock_fs>
 800a33e:	2301      	movs	r3, #1
 800a340:	e0d6      	b.n	800a4f0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a346:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a34c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	2b00      	cmp	r3, #0
 800a352:	d06c      	beq.n	800a42e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800a354:	e044      	b.n	800a3e0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	603b      	str	r3, [r7, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	441a      	add	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	7d1b      	ldrb	r3, [r3, #20]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fd fba3 	bl	8007ac6 <create_chain>
 800a380:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	d108      	bne.n	800a39a <f_lseek+0x348>
							ofs = 0; break;
 800a388:	2300      	movs	r3, #0
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	e02c      	b.n	800a3e8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd f9a1 	bl	80076da <get_fat>
 800a398:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a0:	d109      	bne.n	800a3b6 <f_lseek+0x364>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	755a      	strb	r2, [r3, #21]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fc ff0e 	bl	80071ce <unlock_fs>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e09c      	b.n	800a4f0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d904      	bls.n	800a3c6 <f_lseek+0x374>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d309      	bcc.n	800a3da <f_lseek+0x388>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	755a      	strb	r2, [r3, #21]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2102      	movs	r1, #2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fc fefc 	bl	80071ce <unlock_fs>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e08a      	b.n	800a4f0 <f_lseek+0x49e>
					fp->clust = clst;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3de:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d8b6      	bhi.n	800a356 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699a      	ldr	r2, [r3, #24]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	441a      	add	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d017      	beq.n	800a42e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a402:	4618      	mov	r0, r3
 800a404:	f7fd f94a 	bl	800769c <clust2sect>
 800a408:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d109      	bne.n	800a424 <f_lseek+0x3d2>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	755a      	strb	r2, [r3, #21]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2102      	movs	r1, #2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fc fed7 	bl	80071ce <unlock_fs>
 800a420:	2302      	movs	r3, #2
 800a422:	e065      	b.n	800a4f0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	0a5b      	lsrs	r3, r3, #9
 800a428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a42a:	4413      	add	r3, r2
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	429a      	cmp	r2, r3
 800a438:	d90a      	bls.n	800a450 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7d1b      	ldrb	r3, [r3, #20]
 800a446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d040      	beq.n	800a4de <f_lseek+0x48c>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a462:	429a      	cmp	r2, r3
 800a464:	d03b      	beq.n	800a4de <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7d1b      	ldrb	r3, [r3, #20]
 800a46a:	b25b      	sxtb	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	da1d      	bge.n	800a4ac <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	7858      	ldrb	r0, [r3, #1]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1a      	ldr	r2, [r3, #32]
 800a47e:	2301      	movs	r3, #1
 800a480:	f7fc fd50 	bl	8006f24 <disk_write>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <f_lseek+0x44c>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	755a      	strb	r2, [r3, #21]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2101      	movs	r1, #1
 800a494:	4618      	mov	r0, r3
 800a496:	f7fc fe9a 	bl	80071ce <unlock_fs>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e028      	b.n	800a4f0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	7d1b      	ldrb	r3, [r3, #20]
 800a4a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	7858      	ldrb	r0, [r3, #1]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4ba:	f7fc fd13 	bl	8006ee4 <disk_read>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d009      	beq.n	800a4d8 <f_lseek+0x486>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	755a      	strb	r2, [r3, #21]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fc fe7d 	bl	80071ce <unlock_fs>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e00b      	b.n	800a4f0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4dc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fc fe71 	bl	80071ce <unlock_fs>
 800a4ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3740      	adds	r7, #64	@ 0x40
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a504:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a508:	6018      	str	r0, [r3, #0]
 800a50a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a50e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800a512:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a514:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a518:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <f_opendir+0x2e>
 800a522:	2309      	movs	r3, #9
 800a524:	e0a8      	b.n	800a678 <f_opendir+0x180>

	/* Get logical drive */
	obj = &dp->obj;
 800a526:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a52a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 800a534:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800a538:	463b      	mov	r3, r7
 800a53a:	2200      	movs	r2, #0
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fe fda7 	bl	8009090 <find_volume>
 800a542:	4603      	mov	r3, r0
 800a544:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 800a548:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 8081 	bne.w	800a654 <f_opendir+0x15c>
		obj->fs = fs;
 800a552:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800a556:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a55a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800a55c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a560:	f107 020c 	add.w	r2, r7, #12
 800a564:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a566:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a56a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a574:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a578:	4611      	mov	r1, r2
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	f7fe fc7c 	bl	8008e78 <follow_path>
 800a580:	4603      	mov	r3, r0
 800a582:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 800a586:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d15b      	bne.n	800a646 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a58e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a592:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a59c:	b25b      	sxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	db1a      	blt.n	800a5d8 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a5a2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a5a6:	799b      	ldrb	r3, [r3, #6]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d010      	beq.n	800a5d2 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a5b0:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800a5b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a5b8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f7fd fcd2 	bl	8007f6c <ld_clust>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a5ce:	609a      	str	r2, [r3, #8]
 800a5d0:	e002      	b.n	800a5d8 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a5d2:	2305      	movs	r3, #5
 800a5d4:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 800a5d8:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d132      	bne.n	800a646 <f_opendir+0x14e>
				obj->id = fs->id;
 800a5e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a5e4:	88da      	ldrh	r2, [r3, #6]
 800a5e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a5ea:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a5ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a5f0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	f7fd fb31 	bl	8007c5e <dir_sdi>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a602:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a606:	2b00      	cmp	r3, #0
 800a608:	d11d      	bne.n	800a646 <f_opendir+0x14e>
					if (obj->sclust) {
 800a60a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d014      	beq.n	800a63e <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a614:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a618:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a61c:	2100      	movs	r1, #0
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	f7fc fe6e 	bl	8007300 <inc_lock>
 800a624:	4602      	mov	r2, r0
 800a626:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a62a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a62c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d107      	bne.n	800a646 <f_opendir+0x14e>
 800a636:	2312      	movs	r3, #18
 800a638:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800a63c:	e003      	b.n	800a646 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a63e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a642:	2200      	movs	r2, #0
 800a644:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a646:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d102      	bne.n	800a654 <f_opendir+0x15c>
 800a64e:	2305      	movs	r3, #5
 800a650:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a654:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <f_opendir+0x16c>
 800a65c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a664:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a668:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fc fdad 	bl	80071ce <unlock_fs>
 800a674:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 800a678:	4618      	mov	r0, r3
 800a67a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f107 0208 	add.w	r2, r7, #8
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe ff50 	bl	8009538 <validate>
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d115      	bne.n	800a6ce <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d006      	beq.n	800a6b8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fc feb4 	bl	800741c <dec_lock>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fc fd80 	bl	80071ce <unlock_fs>
#endif
	}
	return res;
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a6e4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a6e8:	6018      	str	r0, [r3, #0]
 800a6ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a6ee:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a6f2:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a6f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a6f8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800a702:	4611      	mov	r1, r2
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe ff17 	bl	8009538 <validate>
 800a70a:	4603      	mov	r3, r0
 800a70c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 800a710:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a714:	2b00      	cmp	r3, #0
 800a716:	d14b      	bne.n	800a7b0 <f_readdir+0xd8>
		if (!fno) {
 800a718:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a71c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10b      	bne.n	800a73e <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a726:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a72a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a72e:	2100      	movs	r1, #0
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f7fd fa94 	bl	8007c5e <dir_sdi>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800a73c:	e038      	b.n	800a7b0 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800a73e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800a742:	f107 0208 	add.w	r2, r7, #8
 800a746:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800a748:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a74c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a750:	2100      	movs	r1, #0
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	f7fd fe4b 	bl	80083ee <dir_read>
 800a758:	4603      	mov	r3, r0
 800a75a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a75e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a762:	2b04      	cmp	r3, #4
 800a764:	d102      	bne.n	800a76c <f_readdir+0x94>
 800a766:	2300      	movs	r3, #0
 800a768:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800a76c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11d      	bne.n	800a7b0 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a774:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a778:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800a77c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a780:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a784:	6811      	ldr	r1, [r2, #0]
 800a786:	6818      	ldr	r0, [r3, #0]
 800a788:	f7fe f890 	bl	80088ac <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a78c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a790:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a794:	2100      	movs	r1, #0
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	f7fd fadc 	bl	8007d54 <dir_next>
 800a79c:	4603      	mov	r3, r0
 800a79e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a7a2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d102      	bne.n	800a7b0 <f_readdir+0xd8>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a7b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800a7b4:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fc fd07 	bl	80071ce <unlock_fs>
 800a7c0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a7e6:	4b1f      	ldr	r3, [pc, #124]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a7e8:	7a5b      	ldrb	r3, [r3, #9]
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d131      	bne.n	800a854 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a7f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a7f2:	7a5b      	ldrb	r3, [r3, #9]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a7fe:	4b19      	ldr	r3, [pc, #100]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a800:	7a5b      	ldrb	r3, [r3, #9]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	4a17      	ldr	r2, [pc, #92]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a80e:	4b15      	ldr	r3, [pc, #84]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a810:	7a5b      	ldrb	r3, [r3, #9]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	461a      	mov	r2, r3
 800a816:	4b13      	ldr	r3, [pc, #76]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a818:	4413      	add	r3, r2
 800a81a:	79fa      	ldrb	r2, [r7, #7]
 800a81c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a81e:	4b11      	ldr	r3, [pc, #68]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a820:	7a5b      	ldrb	r3, [r3, #9]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	b2d1      	uxtb	r1, r2
 800a828:	4a0e      	ldr	r2, [pc, #56]	@ (800a864 <FATFS_LinkDriverEx+0x94>)
 800a82a:	7251      	strb	r1, [r2, #9]
 800a82c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a82e:	7dbb      	ldrb	r3, [r7, #22]
 800a830:	3330      	adds	r3, #48	@ 0x30
 800a832:	b2da      	uxtb	r2, r3
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	3301      	adds	r3, #1
 800a83c:	223a      	movs	r2, #58	@ 0x3a
 800a83e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	3302      	adds	r3, #2
 800a844:	222f      	movs	r2, #47	@ 0x2f
 800a846:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	3303      	adds	r3, #3
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a854:	7dfb      	ldrb	r3, [r7, #23]
}
 800a856:	4618      	mov	r0, r3
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	20000fe0 	.word	0x20000fe0

0800a868 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a872:	2200      	movs	r2, #0
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff ffaa 	bl	800a7d0 <FATFS_LinkDriverEx>
 800a87c:	4603      	mov	r3, r0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a888:	b480      	push	{r7}
 800a88a:	b089      	sub	sp, #36	@ 0x24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	6039      	str	r1, [r7, #0]
 800a892:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	2b7f      	cmp	r3, #127	@ 0x7f
 800a898:	d802      	bhi.n	800a8a0 <ff_convert+0x18>
		c = chr;
 800a89a:	88fb      	ldrh	r3, [r7, #6]
 800a89c:	837b      	strh	r3, [r7, #26]
 800a89e:	e045      	b.n	800a92c <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d005      	beq.n	800a8b2 <ff_convert+0x2a>
			p = oem2uni;
 800a8a6:	4b25      	ldr	r3, [pc, #148]	@ (800a93c <ff_convert+0xb4>)
 800a8a8:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800a8aa:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a8ae:	60bb      	str	r3, [r7, #8]
 800a8b0:	e004      	b.n	800a8bc <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800a8b2:	4b23      	ldr	r3, [pc, #140]	@ (800a940 <ff_convert+0xb8>)
 800a8b4:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800a8b6:	f245 5320 	movw	r3, #21792	@ 0x5520
 800a8ba:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800a8c0:	2310      	movs	r3, #16
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	e021      	b.n	800a90a <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	0fda      	lsrs	r2, r3, #31
 800a8ce:	4413      	add	r3, r2
 800a8d0:	105b      	asrs	r3, r3, #1
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	69fa      	ldr	r2, [r7, #28]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	88fa      	ldrh	r2, [r7, #6]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d013      	beq.n	800a912 <ff_convert+0x8a>
			if (chr > p[i * 2])
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	88fa      	ldrh	r2, [r7, #6]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d902      	bls.n	800a900 <ff_convert+0x78>
				li = i;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	e001      	b.n	800a904 <ff_convert+0x7c>
			else
				hi = i;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	3b01      	subs	r3, #1
 800a908:	613b      	str	r3, [r7, #16]
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1da      	bne.n	800a8c6 <ff_convert+0x3e>
 800a910:	e000      	b.n	800a914 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800a912:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d006      	beq.n	800a928 <ff_convert+0xa0>
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	3302      	adds	r3, #2
 800a920:	69fa      	ldr	r2, [r7, #28]
 800a922:	4413      	add	r3, r2
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	e000      	b.n	800a92a <ff_convert+0xa2>
 800a928:	2300      	movs	r3, #0
 800a92a:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800a92c:	8b7b      	ldrh	r3, [r7, #26]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3724      	adds	r7, #36	@ 0x24
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	08024e58 	.word	0x08024e58
 800a940:	0800f9d4 	.word	0x0800f9d4

0800a944 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a954:	d201      	bcs.n	800a95a <ff_wtoupper+0x16>
 800a956:	4b3e      	ldr	r3, [pc, #248]	@ (800aa50 <ff_wtoupper+0x10c>)
 800a958:	e000      	b.n	800a95c <ff_wtoupper+0x18>
 800a95a:	4b3e      	ldr	r3, [pc, #248]	@ (800aa54 <ff_wtoupper+0x110>)
 800a95c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	1c9a      	adds	r2, r3, #2
 800a962:	617a      	str	r2, [r7, #20]
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a968:	8a7b      	ldrh	r3, [r7, #18]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d068      	beq.n	800aa40 <ff_wtoupper+0xfc>
 800a96e:	88fa      	ldrh	r2, [r7, #6]
 800a970:	8a7b      	ldrh	r3, [r7, #18]
 800a972:	429a      	cmp	r2, r3
 800a974:	d364      	bcc.n	800aa40 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	1c9a      	adds	r2, r3, #2
 800a97a:	617a      	str	r2, [r7, #20]
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	823b      	strh	r3, [r7, #16]
 800a980:	8a3b      	ldrh	r3, [r7, #16]
 800a982:	0a1b      	lsrs	r3, r3, #8
 800a984:	81fb      	strh	r3, [r7, #14]
 800a986:	8a3b      	ldrh	r3, [r7, #16]
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a98c:	88fa      	ldrh	r2, [r7, #6]
 800a98e:	8a79      	ldrh	r1, [r7, #18]
 800a990:	8a3b      	ldrh	r3, [r7, #16]
 800a992:	440b      	add	r3, r1
 800a994:	429a      	cmp	r2, r3
 800a996:	da49      	bge.n	800aa2c <ff_wtoupper+0xe8>
			switch (cmd) {
 800a998:	89fb      	ldrh	r3, [r7, #14]
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d84f      	bhi.n	800aa3e <ff_wtoupper+0xfa>
 800a99e:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a4 <ff_wtoupper+0x60>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800a9c9 	.word	0x0800a9c9
 800a9a8:	0800a9db 	.word	0x0800a9db
 800a9ac:	0800a9f1 	.word	0x0800a9f1
 800a9b0:	0800a9f9 	.word	0x0800a9f9
 800a9b4:	0800aa01 	.word	0x0800aa01
 800a9b8:	0800aa09 	.word	0x0800aa09
 800a9bc:	0800aa11 	.word	0x0800aa11
 800a9c0:	0800aa19 	.word	0x0800aa19
 800a9c4:	0800aa21 	.word	0x0800aa21
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a9c8:	88fa      	ldrh	r2, [r7, #6]
 800a9ca:	8a7b      	ldrh	r3, [r7, #18]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	80fb      	strh	r3, [r7, #6]
 800a9d8:	e027      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a9da:	88fa      	ldrh	r2, [r7, #6]
 800a9dc:	8a7b      	ldrh	r3, [r7, #18]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	88fa      	ldrh	r2, [r7, #6]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	80fb      	strh	r3, [r7, #6]
 800a9ee:	e01c      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	3b10      	subs	r3, #16
 800a9f4:	80fb      	strh	r3, [r7, #6]
 800a9f6:	e018      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a9f8:	88fb      	ldrh	r3, [r7, #6]
 800a9fa:	3b20      	subs	r3, #32
 800a9fc:	80fb      	strh	r3, [r7, #6]
 800a9fe:	e014      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800aa00:	88fb      	ldrh	r3, [r7, #6]
 800aa02:	3b30      	subs	r3, #48	@ 0x30
 800aa04:	80fb      	strh	r3, [r7, #6]
 800aa06:	e010      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800aa08:	88fb      	ldrh	r3, [r7, #6]
 800aa0a:	3b1a      	subs	r3, #26
 800aa0c:	80fb      	strh	r3, [r7, #6]
 800aa0e:	e00c      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	3308      	adds	r3, #8
 800aa14:	80fb      	strh	r3, [r7, #6]
 800aa16:	e008      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800aa18:	88fb      	ldrh	r3, [r7, #6]
 800aa1a:	3b50      	subs	r3, #80	@ 0x50
 800aa1c:	80fb      	strh	r3, [r7, #6]
 800aa1e:	e004      	b.n	800aa2a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800aa20:	88fb      	ldrh	r3, [r7, #6]
 800aa22:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800aa26:	80fb      	strh	r3, [r7, #6]
 800aa28:	bf00      	nop
			}
			break;
 800aa2a:	e008      	b.n	800aa3e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aa2c:	89fb      	ldrh	r3, [r7, #14]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d195      	bne.n	800a95e <ff_wtoupper+0x1a>
 800aa32:	8a3b      	ldrh	r3, [r7, #16]
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	4413      	add	r3, r2
 800aa3a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800aa3c:	e78f      	b.n	800a95e <ff_wtoupper+0x1a>
			break;
 800aa3e:	bf00      	nop
	}

	return chr;
 800aa40:	88fb      	ldrh	r3, [r7, #6]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	0803a2dc 	.word	0x0803a2dc
 800aa54:	0803a4d0 	.word	0x0803a4d0

0800aa58 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800aa64:	2200      	movs	r2, #0
 800aa66:	2101      	movs	r1, #1
 800aa68:	2001      	movs	r0, #1
 800aa6a:	f000 f9af 	bl	800adcc <osSemaphoreNew>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bf14      	ite	ne
 800aa7c:	2301      	movne	r3, #1
 800aa7e:	2300      	moveq	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	60fb      	str	r3, [r7, #12]

    return ret;
 800aa84:	68fb      	ldr	r3, [r7, #12]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fab8 	bl	800b00c <osSemaphoreDelete>
#endif
    return 1;
 800aa9c:	2301      	movs	r3, #1
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800aab2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fa12 	bl	800aee0 <osSemaphoreAcquire>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800aac2:	2301      	movs	r3, #1
 800aac4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aac6:	68fb      	ldr	r3, [r7, #12]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fa53 	bl	800af84 <osSemaphoreRelease>
#endif
}
 800aade:	bf00      	nop
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <__NVIC_SetPriority>:
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	6039      	str	r1, [r7, #0]
 800aaf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aaf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	db0a      	blt.n	800ab12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	490c      	ldr	r1, [pc, #48]	@ (800ab34 <__NVIC_SetPriority+0x4c>)
 800ab02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab06:	0112      	lsls	r2, r2, #4
 800ab08:	b2d2      	uxtb	r2, r2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ab10:	e00a      	b.n	800ab28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	4908      	ldr	r1, [pc, #32]	@ (800ab38 <__NVIC_SetPriority+0x50>)
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	f003 030f 	and.w	r3, r3, #15
 800ab1e:	3b04      	subs	r3, #4
 800ab20:	0112      	lsls	r2, r2, #4
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	440b      	add	r3, r1
 800ab26:	761a      	strb	r2, [r3, #24]
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	e000e100 	.word	0xe000e100
 800ab38:	e000ed00 	.word	0xe000ed00

0800ab3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ab40:	4b05      	ldr	r3, [pc, #20]	@ (800ab58 <SysTick_Handler+0x1c>)
 800ab42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ab44:	f002 fb36 	bl	800d1b4 <xTaskGetSchedulerState>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d001      	beq.n	800ab52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ab4e:	f003 fa2b 	bl	800dfa8 <xPortSysTickHandler>
  }
}
 800ab52:	bf00      	nop
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	e000e010 	.word	0xe000e010

0800ab5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ab60:	2100      	movs	r1, #0
 800ab62:	f06f 0004 	mvn.w	r0, #4
 800ab66:	f7ff ffbf 	bl	800aae8 <__NVIC_SetPriority>
#endif
}
 800ab6a:	bf00      	nop
 800ab6c:	bd80      	pop	{r7, pc}
	...

0800ab70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab76:	f3ef 8305 	mrs	r3, IPSR
 800ab7a:	603b      	str	r3, [r7, #0]
  return(result);
 800ab7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ab82:	f06f 0305 	mvn.w	r3, #5
 800ab86:	607b      	str	r3, [r7, #4]
 800ab88:	e00c      	b.n	800aba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ab8a:	4b0a      	ldr	r3, [pc, #40]	@ (800abb4 <osKernelInitialize+0x44>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d105      	bne.n	800ab9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ab92:	4b08      	ldr	r3, [pc, #32]	@ (800abb4 <osKernelInitialize+0x44>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	607b      	str	r3, [r7, #4]
 800ab9c:	e002      	b.n	800aba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aba4:	687b      	ldr	r3, [r7, #4]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20000fec 	.word	0x20000fec

0800abb8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800abbe:	f002 faf9 	bl	800d1b4 <xTaskGetSchedulerState>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d004      	beq.n	800abd2 <osKernelGetState+0x1a>
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d105      	bne.n	800abd8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800abcc:	2302      	movs	r3, #2
 800abce:	607b      	str	r3, [r7, #4]
      break;
 800abd0:	e00c      	b.n	800abec <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800abd2:	2303      	movs	r3, #3
 800abd4:	607b      	str	r3, [r7, #4]
      break;
 800abd6:	e009      	b.n	800abec <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800abd8:	4b07      	ldr	r3, [pc, #28]	@ (800abf8 <osKernelGetState+0x40>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d102      	bne.n	800abe6 <osKernelGetState+0x2e>
        state = osKernelReady;
 800abe0:	2301      	movs	r3, #1
 800abe2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800abe4:	e001      	b.n	800abea <osKernelGetState+0x32>
        state = osKernelInactive;
 800abe6:	2300      	movs	r3, #0
 800abe8:	607b      	str	r3, [r7, #4]
      break;
 800abea:	bf00      	nop
  }

  return (state);
 800abec:	687b      	ldr	r3, [r7, #4]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000fec 	.word	0x20000fec

0800abfc <osKernelStart>:

osStatus_t osKernelStart (void) {
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac02:	f3ef 8305 	mrs	r3, IPSR
 800ac06:	603b      	str	r3, [r7, #0]
  return(result);
 800ac08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ac0e:	f06f 0305 	mvn.w	r3, #5
 800ac12:	607b      	str	r3, [r7, #4]
 800ac14:	e010      	b.n	800ac38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <osKernelStart+0x48>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d109      	bne.n	800ac32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac1e:	f7ff ff9d 	bl	800ab5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac22:	4b08      	ldr	r3, [pc, #32]	@ (800ac44 <osKernelStart+0x48>)
 800ac24:	2202      	movs	r2, #2
 800ac26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac28:	f001 fe4e 	bl	800c8c8 <vTaskStartScheduler>
      stat = osOK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	607b      	str	r3, [r7, #4]
 800ac30:	e002      	b.n	800ac38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac32:	f04f 33ff 	mov.w	r3, #4294967295
 800ac36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac38:	687b      	ldr	r3, [r7, #4]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20000fec 	.word	0x20000fec

0800ac48 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac4e:	f3ef 8305 	mrs	r3, IPSR
 800ac52:	603b      	str	r3, [r7, #0]
  return(result);
 800ac54:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ac5a:	f001 ff61 	bl	800cb20 <xTaskGetTickCountFromISR>
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	e002      	b.n	800ac68 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ac62:	f001 ff4d 	bl	800cb00 <xTaskGetTickCount>
 800ac66:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ac68:	687b      	ldr	r3, [r7, #4]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b08e      	sub	sp, #56	@ 0x38
 800ac76:	af04      	add	r7, sp, #16
 800ac78:	60f8      	str	r0, [r7, #12]
 800ac7a:	60b9      	str	r1, [r7, #8]
 800ac7c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac82:	f3ef 8305 	mrs	r3, IPSR
 800ac86:	617b      	str	r3, [r7, #20]
  return(result);
 800ac88:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d17e      	bne.n	800ad8c <osThreadNew+0x11a>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d07b      	beq.n	800ad8c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ac94:	2380      	movs	r3, #128	@ 0x80
 800ac96:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ac98:	2318      	movs	r3, #24
 800ac9a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d045      	beq.n	800ad38 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <osThreadNew+0x48>
        name = attr->name;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d008      	beq.n	800ace0 <osThreadNew+0x6e>
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	2b38      	cmp	r3, #56	@ 0x38
 800acd2:	d805      	bhi.n	800ace0 <osThreadNew+0x6e>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <osThreadNew+0x72>
        return (NULL);
 800ace0:	2300      	movs	r3, #0
 800ace2:	e054      	b.n	800ad8e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	089b      	lsrs	r3, r3, #2
 800acf2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00e      	beq.n	800ad1a <osThreadNew+0xa8>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	2ba7      	cmp	r3, #167	@ 0xa7
 800ad02:	d90a      	bls.n	800ad1a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d006      	beq.n	800ad1a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <osThreadNew+0xa8>
        mem = 1;
 800ad14:	2301      	movs	r3, #1
 800ad16:	61bb      	str	r3, [r7, #24]
 800ad18:	e010      	b.n	800ad3c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10c      	bne.n	800ad3c <osThreadNew+0xca>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d108      	bne.n	800ad3c <osThreadNew+0xca>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d104      	bne.n	800ad3c <osThreadNew+0xca>
          mem = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	e001      	b.n	800ad3c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d110      	bne.n	800ad64 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad4a:	9202      	str	r2, [sp, #8]
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	6a3a      	ldr	r2, [r7, #32]
 800ad56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f001 fbc1 	bl	800c4e0 <xTaskCreateStatic>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	613b      	str	r3, [r7, #16]
 800ad62:	e013      	b.n	800ad8c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d110      	bne.n	800ad8c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	f107 0310 	add.w	r3, r7, #16
 800ad72:	9301      	str	r3, [sp, #4]
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f001 fc0f 	bl	800c5a0 <xTaskCreate>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d001      	beq.n	800ad8c <osThreadNew+0x11a>
            hTask = NULL;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ad8c:	693b      	ldr	r3, [r7, #16]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3728      	adds	r7, #40	@ 0x28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad9e:	f3ef 8305 	mrs	r3, IPSR
 800ada2:	60bb      	str	r3, [r7, #8]
  return(result);
 800ada4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <osDelay+0x1c>
    stat = osErrorISR;
 800adaa:	f06f 0305 	mvn.w	r3, #5
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	e007      	b.n	800adc2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 fd4d 	bl	800c85c <vTaskDelay>
    }
  }

  return (stat);
 800adc2:	68fb      	ldr	r3, [r7, #12]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08a      	sub	sp, #40	@ 0x28
 800add0:	af02      	add	r7, sp, #8
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800add8:	2300      	movs	r3, #0
 800adda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800addc:	f3ef 8305 	mrs	r3, IPSR
 800ade0:	613b      	str	r3, [r7, #16]
  return(result);
 800ade2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d175      	bne.n	800aed4 <osSemaphoreNew+0x108>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d072      	beq.n	800aed4 <osSemaphoreNew+0x108>
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d86e      	bhi.n	800aed4 <osSemaphoreNew+0x108>
    mem = -1;
 800adf6:	f04f 33ff 	mov.w	r3, #4294967295
 800adfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d015      	beq.n	800ae2e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d006      	beq.n	800ae18 <osSemaphoreNew+0x4c>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	2b4f      	cmp	r3, #79	@ 0x4f
 800ae10:	d902      	bls.n	800ae18 <osSemaphoreNew+0x4c>
        mem = 1;
 800ae12:	2301      	movs	r3, #1
 800ae14:	61bb      	str	r3, [r7, #24]
 800ae16:	e00c      	b.n	800ae32 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d108      	bne.n	800ae32 <osSemaphoreNew+0x66>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d104      	bne.n	800ae32 <osSemaphoreNew+0x66>
          mem = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61bb      	str	r3, [r7, #24]
 800ae2c:	e001      	b.n	800ae32 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d04c      	beq.n	800aed4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d128      	bne.n	800ae92 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d10a      	bne.n	800ae5c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	9200      	str	r2, [sp, #0]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2100      	movs	r1, #0
 800ae52:	2001      	movs	r0, #1
 800ae54:	f000 fb82 	bl	800b55c <xQueueGenericCreateStatic>
 800ae58:	61f8      	str	r0, [r7, #28]
 800ae5a:	e005      	b.n	800ae68 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ae5c:	2203      	movs	r2, #3
 800ae5e:	2100      	movs	r1, #0
 800ae60:	2001      	movs	r0, #1
 800ae62:	f000 fbf8 	bl	800b656 <xQueueGenericCreate>
 800ae66:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d022      	beq.n	800aeb4 <osSemaphoreNew+0xe8>
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01f      	beq.n	800aeb4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ae74:	2300      	movs	r3, #0
 800ae76:	2200      	movs	r2, #0
 800ae78:	2100      	movs	r1, #0
 800ae7a:	69f8      	ldr	r0, [r7, #28]
 800ae7c:	f000 fcb8 	bl	800b7f0 <xQueueGenericSend>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d016      	beq.n	800aeb4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ae86:	69f8      	ldr	r0, [r7, #28]
 800ae88:	f001 f956 	bl	800c138 <vQueueDelete>
            hSemaphore = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61fb      	str	r3, [r7, #28]
 800ae90:	e010      	b.n	800aeb4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d108      	bne.n	800aeaa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	68b9      	ldr	r1, [r7, #8]
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 fc36 	bl	800b712 <xQueueCreateCountingSemaphoreStatic>
 800aea6:	61f8      	str	r0, [r7, #28]
 800aea8:	e004      	b.n	800aeb4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 fc69 	bl	800b784 <xQueueCreateCountingSemaphore>
 800aeb2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00c      	beq.n	800aed4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d003      	beq.n	800aec8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	617b      	str	r3, [r7, #20]
 800aec6:	e001      	b.n	800aecc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aecc:	6979      	ldr	r1, [r7, #20]
 800aece:	69f8      	ldr	r0, [r7, #28]
 800aed0:	f001 fa7e 	bl	800c3d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aed4:	69fb      	ldr	r3, [r7, #28]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3720      	adds	r7, #32
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d103      	bne.n	800af00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aef8:	f06f 0303 	mvn.w	r3, #3
 800aefc:	617b      	str	r3, [r7, #20]
 800aefe:	e039      	b.n	800af74 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af00:	f3ef 8305 	mrs	r3, IPSR
 800af04:	60fb      	str	r3, [r7, #12]
  return(result);
 800af06:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d022      	beq.n	800af52 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800af12:	f06f 0303 	mvn.w	r3, #3
 800af16:	617b      	str	r3, [r7, #20]
 800af18:	e02c      	b.n	800af74 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	461a      	mov	r2, r3
 800af24:	2100      	movs	r1, #0
 800af26:	6938      	ldr	r0, [r7, #16]
 800af28:	f001 f884 	bl	800c034 <xQueueReceiveFromISR>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d003      	beq.n	800af3a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800af32:	f06f 0302 	mvn.w	r3, #2
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e01c      	b.n	800af74 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d019      	beq.n	800af74 <osSemaphoreAcquire+0x94>
 800af40:	4b0f      	ldr	r3, [pc, #60]	@ (800af80 <osSemaphoreAcquire+0xa0>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	e010      	b.n	800af74 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6938      	ldr	r0, [r7, #16]
 800af56:	f000 ff5d 	bl	800be14 <xQueueSemaphoreTake>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d009      	beq.n	800af74 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800af66:	f06f 0301 	mvn.w	r3, #1
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	e002      	b.n	800af74 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800af6e:	f06f 0302 	mvn.w	r3, #2
 800af72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800af74:	697b      	ldr	r3, [r7, #20]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	e000ed04 	.word	0xe000ed04

0800af84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800af90:	2300      	movs	r3, #0
 800af92:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d103      	bne.n	800afa2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800af9a:	f06f 0303 	mvn.w	r3, #3
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	e02c      	b.n	800affc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afa2:	f3ef 8305 	mrs	r3, IPSR
 800afa6:	60fb      	str	r3, [r7, #12]
  return(result);
 800afa8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01a      	beq.n	800afe4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800afb2:	f107 0308 	add.w	r3, r7, #8
 800afb6:	4619      	mov	r1, r3
 800afb8:	6938      	ldr	r0, [r7, #16]
 800afba:	f000 fdb9 	bl	800bb30 <xQueueGiveFromISR>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d003      	beq.n	800afcc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800afc4:	f06f 0302 	mvn.w	r3, #2
 800afc8:	617b      	str	r3, [r7, #20]
 800afca:	e017      	b.n	800affc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d014      	beq.n	800affc <osSemaphoreRelease+0x78>
 800afd2:	4b0d      	ldr	r3, [pc, #52]	@ (800b008 <osSemaphoreRelease+0x84>)
 800afd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	e00b      	b.n	800affc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800afe4:	2300      	movs	r3, #0
 800afe6:	2200      	movs	r2, #0
 800afe8:	2100      	movs	r1, #0
 800afea:	6938      	ldr	r0, [r7, #16]
 800afec:	f000 fc00 	bl	800b7f0 <xQueueGenericSend>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d002      	beq.n	800affc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800aff6:	f06f 0302 	mvn.w	r3, #2
 800affa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800affc:	697b      	ldr	r3, [r7, #20]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	e000ed04 	.word	0xe000ed04

0800b00c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b018:	f3ef 8305 	mrs	r3, IPSR
 800b01c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b01e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b024:	f06f 0305 	mvn.w	r3, #5
 800b028:	617b      	str	r3, [r7, #20]
 800b02a:	e00e      	b.n	800b04a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d103      	bne.n	800b03a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b032:	f06f 0303 	mvn.w	r3, #3
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	e007      	b.n	800b04a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f001 f9f2 	bl	800c424 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b040:	2300      	movs	r3, #0
 800b042:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b044:	6938      	ldr	r0, [r7, #16]
 800b046:	f001 f877 	bl	800c138 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b04a:	697b      	ldr	r3, [r7, #20]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b054:	b580      	push	{r7, lr}
 800b056:	b08a      	sub	sp, #40	@ 0x28
 800b058:	af02      	add	r7, sp, #8
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b060:	2300      	movs	r3, #0
 800b062:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b064:	f3ef 8305 	mrs	r3, IPSR
 800b068:	613b      	str	r3, [r7, #16]
  return(result);
 800b06a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d15f      	bne.n	800b130 <osMessageQueueNew+0xdc>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d05c      	beq.n	800b130 <osMessageQueueNew+0xdc>
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d059      	beq.n	800b130 <osMessageQueueNew+0xdc>
    mem = -1;
 800b07c:	f04f 33ff 	mov.w	r3, #4294967295
 800b080:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d029      	beq.n	800b0dc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d012      	beq.n	800b0b6 <osMessageQueueNew+0x62>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	2b4f      	cmp	r3, #79	@ 0x4f
 800b096:	d90e      	bls.n	800b0b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00a      	beq.n	800b0b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	695a      	ldr	r2, [r3, #20]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	68b9      	ldr	r1, [r7, #8]
 800b0a8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d302      	bcc.n	800b0b6 <osMessageQueueNew+0x62>
        mem = 1;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	61bb      	str	r3, [r7, #24]
 800b0b4:	e014      	b.n	800b0e0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d110      	bne.n	800b0e0 <osMessageQueueNew+0x8c>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10c      	bne.n	800b0e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d108      	bne.n	800b0e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d104      	bne.n	800b0e0 <osMessageQueueNew+0x8c>
          mem = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61bb      	str	r3, [r7, #24]
 800b0da:	e001      	b.n	800b0e0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d10b      	bne.n	800b0fe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691a      	ldr	r2, [r3, #16]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	9100      	str	r1, [sp, #0]
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 fa31 	bl	800b55c <xQueueGenericCreateStatic>
 800b0fa:	61f8      	str	r0, [r7, #28]
 800b0fc:	e008      	b.n	800b110 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d105      	bne.n	800b110 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b104:	2200      	movs	r2, #0
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 faa4 	bl	800b656 <xQueueGenericCreate>
 800b10e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00c      	beq.n	800b130 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	e001      	b.n	800b128 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b128:	6979      	ldr	r1, [r7, #20]
 800b12a:	69f8      	ldr	r0, [r7, #28]
 800b12c:	f001 f950 	bl	800c3d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b130:	69fb      	ldr	r3, [r7, #28]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3720      	adds	r7, #32
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	603b      	str	r3, [r7, #0]
 800b148:	4613      	mov	r3, r2
 800b14a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b150:	2300      	movs	r3, #0
 800b152:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b154:	f3ef 8305 	mrs	r3, IPSR
 800b158:	617b      	str	r3, [r7, #20]
  return(result);
 800b15a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d028      	beq.n	800b1b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <osMessageQueuePut+0x36>
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <osMessageQueuePut+0x36>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b172:	f06f 0303 	mvn.w	r3, #3
 800b176:	61fb      	str	r3, [r7, #28]
 800b178:	e038      	b.n	800b1ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b17e:	f107 0210 	add.w	r2, r7, #16
 800b182:	2300      	movs	r3, #0
 800b184:	68b9      	ldr	r1, [r7, #8]
 800b186:	69b8      	ldr	r0, [r7, #24]
 800b188:	f000 fc34 	bl	800b9f4 <xQueueGenericSendFromISR>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d003      	beq.n	800b19a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b192:	f06f 0302 	mvn.w	r3, #2
 800b196:	61fb      	str	r3, [r7, #28]
 800b198:	e028      	b.n	800b1ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d025      	beq.n	800b1ec <osMessageQueuePut+0xb0>
 800b1a0:	4b15      	ldr	r3, [pc, #84]	@ (800b1f8 <osMessageQueuePut+0xbc>)
 800b1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	e01c      	b.n	800b1ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <osMessageQueuePut+0x82>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b1be:	f06f 0303 	mvn.w	r3, #3
 800b1c2:	61fb      	str	r3, [r7, #28]
 800b1c4:	e012      	b.n	800b1ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	69b8      	ldr	r0, [r7, #24]
 800b1ce:	f000 fb0f 	bl	800b7f0 <xQueueGenericSend>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d009      	beq.n	800b1ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b1de:	f06f 0301 	mvn.w	r3, #1
 800b1e2:	61fb      	str	r3, [r7, #28]
 800b1e4:	e002      	b.n	800b1ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b1e6:	f06f 0302 	mvn.w	r3, #2
 800b1ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b1ec:	69fb      	ldr	r3, [r7, #28]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3720      	adds	r7, #32
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	e000ed04 	.word	0xe000ed04

0800b1fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b088      	sub	sp, #32
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b20e:	2300      	movs	r3, #0
 800b210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b212:	f3ef 8305 	mrs	r3, IPSR
 800b216:	617b      	str	r3, [r7, #20]
  return(result);
 800b218:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d028      	beq.n	800b270 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <osMessageQueueGet+0x34>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <osMessageQueueGet+0x34>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b230:	f06f 0303 	mvn.w	r3, #3
 800b234:	61fb      	str	r3, [r7, #28]
 800b236:	e037      	b.n	800b2a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b238:	2300      	movs	r3, #0
 800b23a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b23c:	f107 0310 	add.w	r3, r7, #16
 800b240:	461a      	mov	r2, r3
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	69b8      	ldr	r0, [r7, #24]
 800b246:	f000 fef5 	bl	800c034 <xQueueReceiveFromISR>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d003      	beq.n	800b258 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b250:	f06f 0302 	mvn.w	r3, #2
 800b254:	61fb      	str	r3, [r7, #28]
 800b256:	e027      	b.n	800b2a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d024      	beq.n	800b2a8 <osMessageQueueGet+0xac>
 800b25e:	4b15      	ldr	r3, [pc, #84]	@ (800b2b4 <osMessageQueueGet+0xb8>)
 800b260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	e01b      	b.n	800b2a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <osMessageQueueGet+0x80>
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d103      	bne.n	800b284 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b27c:	f06f 0303 	mvn.w	r3, #3
 800b280:	61fb      	str	r3, [r7, #28]
 800b282:	e011      	b.n	800b2a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	68b9      	ldr	r1, [r7, #8]
 800b288:	69b8      	ldr	r0, [r7, #24]
 800b28a:	f000 fce1 	bl	800bc50 <xQueueReceive>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b01      	cmp	r3, #1
 800b292:	d009      	beq.n	800b2a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b29a:	f06f 0301 	mvn.w	r3, #1
 800b29e:	61fb      	str	r3, [r7, #28]
 800b2a0:	e002      	b.n	800b2a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b2a2:	f06f 0302 	mvn.w	r3, #2
 800b2a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	e000ed04 	.word	0xe000ed04

0800b2b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4a07      	ldr	r2, [pc, #28]	@ (800b2e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b2c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	4a06      	ldr	r2, [pc, #24]	@ (800b2e8 <vApplicationGetIdleTaskMemory+0x30>)
 800b2ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2280      	movs	r2, #128	@ 0x80
 800b2d4:	601a      	str	r2, [r3, #0]
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20000ff0 	.word	0x20000ff0
 800b2e8:	20001098 	.word	0x20001098

0800b2ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a07      	ldr	r2, [pc, #28]	@ (800b318 <vApplicationGetTimerTaskMemory+0x2c>)
 800b2fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	4a06      	ldr	r2, [pc, #24]	@ (800b31c <vApplicationGetTimerTaskMemory+0x30>)
 800b302:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b30a:	601a      	str	r2, [r3, #0]
}
 800b30c:	bf00      	nop
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	20001298 	.word	0x20001298
 800b31c:	20001340 	.word	0x20001340

0800b320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f103 0208 	add.w	r2, r3, #8
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f04f 32ff 	mov.w	r2, #4294967295
 800b338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f103 0208 	add.w	r2, r3, #8
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f103 0208 	add.w	r2, r3, #8
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b37a:	b480      	push	{r7}
 800b37c:	b085      	sub	sp, #20
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
}
 800b3b6:	bf00      	nop
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b085      	sub	sp, #20
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d8:	d103      	bne.n	800b3e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	e00c      	b.n	800b3fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	e002      	b.n	800b3f0 <vListInsert+0x2e>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d2f6      	bcs.n	800b3ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	1c5a      	adds	r2, r3, #1
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	601a      	str	r2, [r3, #0]
}
 800b428:	bf00      	nop
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	6892      	ldr	r2, [r2, #8]
 800b44a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	6852      	ldr	r2, [r2, #4]
 800b454:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d103      	bne.n	800b468 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689a      	ldr	r2, [r3, #8]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	1e5a      	subs	r2, r3, #1
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10b      	bne.n	800b4b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	e7fd      	b.n	800b4b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4b4:	f002 fce8 	bl	800de88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c0:	68f9      	ldr	r1, [r7, #12]
 800b4c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4c4:	fb01 f303 	mul.w	r3, r1, r3
 800b4c8:	441a      	add	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	68f9      	ldr	r1, [r7, #12]
 800b4e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4ea:	fb01 f303 	mul.w	r3, r1, r3
 800b4ee:	441a      	add	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	22ff      	movs	r2, #255	@ 0xff
 800b4f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	22ff      	movs	r2, #255	@ 0xff
 800b500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d114      	bne.n	800b534 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d01a      	beq.n	800b548 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3310      	adds	r3, #16
 800b516:	4618      	mov	r0, r3
 800b518:	f001 fc86 	bl	800ce28 <xTaskRemoveFromEventList>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d012      	beq.n	800b548 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b522:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <xQueueGenericReset+0xd0>)
 800b524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	e009      	b.n	800b548 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3310      	adds	r3, #16
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff fef1 	bl	800b320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3324      	adds	r3, #36	@ 0x24
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff feec 	bl	800b320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b548:	f002 fcd0 	bl	800deec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b54c:	2301      	movs	r3, #1
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	e000ed04 	.word	0xe000ed04

0800b55c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08e      	sub	sp, #56	@ 0x38
 800b560:	af02      	add	r7, sp, #8
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10b      	bne.n	800b588 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b582:	bf00      	nop
 800b584:	bf00      	nop
 800b586:	e7fd      	b.n	800b584 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10b      	bne.n	800b5a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <xQueueGenericCreateStatic+0x56>
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <xQueueGenericCreateStatic+0x5a>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e000      	b.n	800b5b8 <xQueueGenericCreateStatic+0x5c>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10b      	bne.n	800b5d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	623b      	str	r3, [r7, #32]
}
 800b5ce:	bf00      	nop
 800b5d0:	bf00      	nop
 800b5d2:	e7fd      	b.n	800b5d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d102      	bne.n	800b5e0 <xQueueGenericCreateStatic+0x84>
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <xQueueGenericCreateStatic+0x88>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e000      	b.n	800b5e6 <xQueueGenericCreateStatic+0x8a>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10b      	bne.n	800b602 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	61fb      	str	r3, [r7, #28]
}
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	e7fd      	b.n	800b5fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b602:	2350      	movs	r3, #80	@ 0x50
 800b604:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b50      	cmp	r3, #80	@ 0x50
 800b60a:	d00b      	beq.n	800b624 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	61bb      	str	r3, [r7, #24]
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	e7fd      	b.n	800b620 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b624:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00d      	beq.n	800b64c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b638:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	4613      	mov	r3, r2
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	68b9      	ldr	r1, [r7, #8]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 f840 	bl	800b6cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b64e:	4618      	mov	r0, r3
 800b650:	3730      	adds	r7, #48	@ 0x30
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b656:	b580      	push	{r7, lr}
 800b658:	b08a      	sub	sp, #40	@ 0x28
 800b65a:	af02      	add	r7, sp, #8
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	4613      	mov	r3, r2
 800b662:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10b      	bne.n	800b682 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	613b      	str	r3, [r7, #16]
}
 800b67c:	bf00      	nop
 800b67e:	bf00      	nop
 800b680:	e7fd      	b.n	800b67e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	fb02 f303 	mul.w	r3, r2, r3
 800b68a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	3350      	adds	r3, #80	@ 0x50
 800b690:	4618      	mov	r0, r3
 800b692:	f002 fd1b 	bl	800e0cc <pvPortMalloc>
 800b696:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d011      	beq.n	800b6c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	3350      	adds	r3, #80	@ 0x50
 800b6a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6b0:	79fa      	ldrb	r2, [r7, #7]
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	68b9      	ldr	r1, [r7, #8]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f805 	bl	800b6cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6c2:	69bb      	ldr	r3, [r7, #24]
	}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d103      	bne.n	800b6e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	e002      	b.n	800b6ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	69b8      	ldr	r0, [r7, #24]
 800b6fe:	f7ff fec3 	bl	800b488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b712:	b580      	push	{r7, lr}
 800b714:	b08a      	sub	sp, #40	@ 0x28
 800b716:	af02      	add	r7, sp, #8
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10b      	bne.n	800b73c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	61bb      	str	r3, [r7, #24]
}
 800b736:	bf00      	nop
 800b738:	bf00      	nop
 800b73a:	e7fd      	b.n	800b738 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	429a      	cmp	r2, r3
 800b742:	d90b      	bls.n	800b75c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	617b      	str	r3, [r7, #20]
}
 800b756:	bf00      	nop
 800b758:	bf00      	nop
 800b75a:	e7fd      	b.n	800b758 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b75c:	2302      	movs	r3, #2
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	2100      	movs	r1, #0
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fef8 	bl	800b55c <xQueueGenericCreateStatic>
 800b76c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b77a:	69fb      	ldr	r3, [r7, #28]
	}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3720      	adds	r7, #32
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10b      	bne.n	800b7ac <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	613b      	str	r3, [r7, #16]
}
 800b7a6:	bf00      	nop
 800b7a8:	bf00      	nop
 800b7aa:	e7fd      	b.n	800b7a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d90b      	bls.n	800b7cc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	60fb      	str	r3, [r7, #12]
}
 800b7c6:	bf00      	nop
 800b7c8:	bf00      	nop
 800b7ca:	e7fd      	b.n	800b7c8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7ff ff40 	bl	800b656 <xQueueGenericCreate>
 800b7d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b7e4:	697b      	ldr	r3, [r7, #20]
	}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08e      	sub	sp, #56	@ 0x38
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7fe:	2300      	movs	r3, #0
 800b800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <xQueueGenericSend+0x34>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b81e:	bf00      	nop
 800b820:	bf00      	nop
 800b822:	e7fd      	b.n	800b820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d103      	bne.n	800b832 <xQueueGenericSend+0x42>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d101      	bne.n	800b836 <xQueueGenericSend+0x46>
 800b832:	2301      	movs	r3, #1
 800b834:	e000      	b.n	800b838 <xQueueGenericSend+0x48>
 800b836:	2300      	movs	r3, #0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10b      	bne.n	800b854 <xQueueGenericSend+0x64>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b84e:	bf00      	nop
 800b850:	bf00      	nop
 800b852:	e7fd      	b.n	800b850 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b02      	cmp	r3, #2
 800b858:	d103      	bne.n	800b862 <xQueueGenericSend+0x72>
 800b85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d101      	bne.n	800b866 <xQueueGenericSend+0x76>
 800b862:	2301      	movs	r3, #1
 800b864:	e000      	b.n	800b868 <xQueueGenericSend+0x78>
 800b866:	2300      	movs	r3, #0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10b      	bne.n	800b884 <xQueueGenericSend+0x94>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	623b      	str	r3, [r7, #32]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b884:	f001 fc96 	bl	800d1b4 <xTaskGetSchedulerState>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d102      	bne.n	800b894 <xQueueGenericSend+0xa4>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <xQueueGenericSend+0xa8>
 800b894:	2301      	movs	r3, #1
 800b896:	e000      	b.n	800b89a <xQueueGenericSend+0xaa>
 800b898:	2300      	movs	r3, #0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10b      	bne.n	800b8b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	61fb      	str	r3, [r7, #28]
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	e7fd      	b.n	800b8b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8b6:	f002 fae7 	bl	800de88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d302      	bcc.n	800b8cc <xQueueGenericSend+0xdc>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d129      	bne.n	800b920 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	68b9      	ldr	r1, [r7, #8]
 800b8d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b8d2:	f000 fc6d 	bl	800c1b0 <prvCopyDataToQueue>
 800b8d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d010      	beq.n	800b902 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e2:	3324      	adds	r3, #36	@ 0x24
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f001 fa9f 	bl	800ce28 <xTaskRemoveFromEventList>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d013      	beq.n	800b918 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8f0:	4b3f      	ldr	r3, [pc, #252]	@ (800b9f0 <xQueueGenericSend+0x200>)
 800b8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	e00a      	b.n	800b918 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b904:	2b00      	cmp	r3, #0
 800b906:	d007      	beq.n	800b918 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b908:	4b39      	ldr	r3, [pc, #228]	@ (800b9f0 <xQueueGenericSend+0x200>)
 800b90a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b918:	f002 fae8 	bl	800deec <vPortExitCritical>
				return pdPASS;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e063      	b.n	800b9e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d103      	bne.n	800b92e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b926:	f002 fae1 	bl	800deec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	e05c      	b.n	800b9e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b934:	f107 0314 	add.w	r3, r7, #20
 800b938:	4618      	mov	r0, r3
 800b93a:	f001 fad9 	bl	800cef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b93e:	2301      	movs	r3, #1
 800b940:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b942:	f002 fad3 	bl	800deec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b946:	f001 f82f 	bl	800c9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b94a:	f002 fa9d 	bl	800de88 <vPortEnterCritical>
 800b94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b954:	b25b      	sxtb	r3, r3
 800b956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95a:	d103      	bne.n	800b964 <xQueueGenericSend+0x174>
 800b95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b96a:	b25b      	sxtb	r3, r3
 800b96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b970:	d103      	bne.n	800b97a <xQueueGenericSend+0x18a>
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b97a:	f002 fab7 	bl	800deec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b97e:	1d3a      	adds	r2, r7, #4
 800b980:	f107 0314 	add.w	r3, r7, #20
 800b984:	4611      	mov	r1, r2
 800b986:	4618      	mov	r0, r3
 800b988:	f001 fac8 	bl	800cf1c <xTaskCheckForTimeOut>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d124      	bne.n	800b9dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b994:	f000 fd04 	bl	800c3a0 <prvIsQueueFull>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d018      	beq.n	800b9d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a0:	3310      	adds	r3, #16
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f001 f9ec 	bl	800cd84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9ae:	f000 fc8f 	bl	800c2d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9b2:	f001 f807 	bl	800c9c4 <xTaskResumeAll>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f47f af7c 	bne.w	800b8b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b9be:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f0 <xQueueGenericSend+0x200>)
 800b9c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9c4:	601a      	str	r2, [r3, #0]
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	e772      	b.n	800b8b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b9d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9d2:	f000 fc7d 	bl	800c2d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9d6:	f000 fff5 	bl	800c9c4 <xTaskResumeAll>
 800b9da:	e76c      	b.n	800b8b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9de:	f000 fc77 	bl	800c2d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9e2:	f000 ffef 	bl	800c9c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3738      	adds	r7, #56	@ 0x38
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b090      	sub	sp, #64	@ 0x40
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ba06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10b      	bne.n	800ba24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ba1e:	bf00      	nop
 800ba20:	bf00      	nop
 800ba22:	e7fd      	b.n	800ba20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d103      	bne.n	800ba32 <xQueueGenericSendFromISR+0x3e>
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <xQueueGenericSendFromISR+0x42>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e000      	b.n	800ba38 <xQueueGenericSendFromISR+0x44>
 800ba36:	2300      	movs	r3, #0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10b      	bne.n	800ba54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba4e:	bf00      	nop
 800ba50:	bf00      	nop
 800ba52:	e7fd      	b.n	800ba50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d103      	bne.n	800ba62 <xQueueGenericSendFromISR+0x6e>
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d101      	bne.n	800ba66 <xQueueGenericSendFromISR+0x72>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e000      	b.n	800ba68 <xQueueGenericSendFromISR+0x74>
 800ba66:	2300      	movs	r3, #0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10b      	bne.n	800ba84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	623b      	str	r3, [r7, #32]
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	e7fd      	b.n	800ba80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba84:	f002 fae0 	bl	800e048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba88:	f3ef 8211 	mrs	r2, BASEPRI
 800ba8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	61fa      	str	r2, [r7, #28]
 800ba9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800baa0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800baa2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800baa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baac:	429a      	cmp	r2, r3
 800baae:	d302      	bcc.n	800bab6 <xQueueGenericSendFromISR+0xc2>
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d12f      	bne.n	800bb16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800babc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	68b9      	ldr	r1, [r7, #8]
 800baca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bacc:	f000 fb70 	bl	800c1b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bad0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad8:	d112      	bne.n	800bb00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d016      	beq.n	800bb10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae4:	3324      	adds	r3, #36	@ 0x24
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 f99e 	bl	800ce28 <xTaskRemoveFromEventList>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00e      	beq.n	800bb10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00b      	beq.n	800bb10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	e007      	b.n	800bb10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bb04:	3301      	adds	r3, #1
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	b25a      	sxtb	r2, r3
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bb10:	2301      	movs	r3, #1
 800bb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bb14:	e001      	b.n	800bb1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3740      	adds	r7, #64	@ 0x40
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08e      	sub	sp, #56	@ 0x38
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10b      	bne.n	800bb5c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	623b      	str	r3, [r7, #32]
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	e7fd      	b.n	800bb58 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00b      	beq.n	800bb7c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	61fb      	str	r3, [r7, #28]
}
 800bb76:	bf00      	nop
 800bb78:	bf00      	nop
 800bb7a:	e7fd      	b.n	800bb78 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d103      	bne.n	800bb8c <xQueueGiveFromISR+0x5c>
 800bb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <xQueueGiveFromISR+0x60>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e000      	b.n	800bb92 <xQueueGiveFromISR+0x62>
 800bb90:	2300      	movs	r3, #0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10b      	bne.n	800bbae <xQueueGiveFromISR+0x7e>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	61bb      	str	r3, [r7, #24]
}
 800bba8:	bf00      	nop
 800bbaa:	bf00      	nop
 800bbac:	e7fd      	b.n	800bbaa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbae:	f002 fa4b 	bl	800e048 <vPortValidateInterruptPriority>
	__asm volatile
 800bbb2:	f3ef 8211 	mrs	r2, BASEPRI
 800bbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	617a      	str	r2, [r7, #20]
 800bbc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bbca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d22b      	bcs.n	800bc36 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf8:	d112      	bne.n	800bc20 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d016      	beq.n	800bc30 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc04:	3324      	adds	r3, #36	@ 0x24
 800bc06:	4618      	mov	r0, r3
 800bc08:	f001 f90e 	bl	800ce28 <xTaskRemoveFromEventList>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00e      	beq.n	800bc30 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e007      	b.n	800bc30 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc24:	3301      	adds	r3, #1
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	b25a      	sxtb	r2, r3
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bc30:	2301      	movs	r3, #1
 800bc32:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc34:	e001      	b.n	800bc3a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f383 8811 	msr	BASEPRI, r3
}
 800bc44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3738      	adds	r7, #56	@ 0x38
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b08c      	sub	sp, #48	@ 0x30
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10b      	bne.n	800bc82 <xQueueReceive+0x32>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	623b      	str	r3, [r7, #32]
}
 800bc7c:	bf00      	nop
 800bc7e:	bf00      	nop
 800bc80:	e7fd      	b.n	800bc7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d103      	bne.n	800bc90 <xQueueReceive+0x40>
 800bc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <xQueueReceive+0x44>
 800bc90:	2301      	movs	r3, #1
 800bc92:	e000      	b.n	800bc96 <xQueueReceive+0x46>
 800bc94:	2300      	movs	r3, #0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10b      	bne.n	800bcb2 <xQueueReceive+0x62>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	61fb      	str	r3, [r7, #28]
}
 800bcac:	bf00      	nop
 800bcae:	bf00      	nop
 800bcb0:	e7fd      	b.n	800bcae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcb2:	f001 fa7f 	bl	800d1b4 <xTaskGetSchedulerState>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <xQueueReceive+0x72>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <xQueueReceive+0x76>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e000      	b.n	800bcc8 <xQueueReceive+0x78>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10b      	bne.n	800bce4 <xQueueReceive+0x94>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	61bb      	str	r3, [r7, #24]
}
 800bcde:	bf00      	nop
 800bce0:	bf00      	nop
 800bce2:	e7fd      	b.n	800bce0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bce4:	f002 f8d0 	bl	800de88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01f      	beq.n	800bd34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcf8:	f000 fac4 	bl	800c284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfe:	1e5a      	subs	r2, r3, #1
 800bd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00f      	beq.n	800bd2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0e:	3310      	adds	r3, #16
 800bd10:	4618      	mov	r0, r3
 800bd12:	f001 f889 	bl	800ce28 <xTaskRemoveFromEventList>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d007      	beq.n	800bd2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd1c:	4b3c      	ldr	r3, [pc, #240]	@ (800be10 <xQueueReceive+0x1c0>)
 800bd1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd2c:	f002 f8de 	bl	800deec <vPortExitCritical>
				return pdPASS;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e069      	b.n	800be08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d103      	bne.n	800bd42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd3a:	f002 f8d7 	bl	800deec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e062      	b.n	800be08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd48:	f107 0310 	add.w	r3, r7, #16
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f001 f8cf 	bl	800cef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd52:	2301      	movs	r3, #1
 800bd54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd56:	f002 f8c9 	bl	800deec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd5a:	f000 fe25 	bl	800c9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd5e:	f002 f893 	bl	800de88 <vPortEnterCritical>
 800bd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6e:	d103      	bne.n	800bd78 <xQueueReceive+0x128>
 800bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd7e:	b25b      	sxtb	r3, r3
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd84:	d103      	bne.n	800bd8e <xQueueReceive+0x13e>
 800bd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd8e:	f002 f8ad 	bl	800deec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd92:	1d3a      	adds	r2, r7, #4
 800bd94:	f107 0310 	add.w	r3, r7, #16
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f001 f8be 	bl	800cf1c <xTaskCheckForTimeOut>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d123      	bne.n	800bdee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bda6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bda8:	f000 fae4 	bl	800c374 <prvIsQueueEmpty>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d017      	beq.n	800bde2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb4:	3324      	adds	r3, #36	@ 0x24
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	4611      	mov	r1, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 ffe2 	bl	800cd84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdc2:	f000 fa85 	bl	800c2d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdc6:	f000 fdfd 	bl	800c9c4 <xTaskResumeAll>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d189      	bne.n	800bce4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bdd0:	4b0f      	ldr	r3, [pc, #60]	@ (800be10 <xQueueReceive+0x1c0>)
 800bdd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	e780      	b.n	800bce4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bde2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bde4:	f000 fa74 	bl	800c2d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bde8:	f000 fdec 	bl	800c9c4 <xTaskResumeAll>
 800bdec:	e77a      	b.n	800bce4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdf0:	f000 fa6e 	bl	800c2d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdf4:	f000 fde6 	bl	800c9c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdfa:	f000 fabb 	bl	800c374 <prvIsQueueEmpty>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	f43f af6f 	beq.w	800bce4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3730      	adds	r7, #48	@ 0x30
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	e000ed04 	.word	0xe000ed04

0800be14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08e      	sub	sp, #56	@ 0x38
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be1e:	2300      	movs	r3, #0
 800be20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be26:	2300      	movs	r3, #0
 800be28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10b      	bne.n	800be48 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	623b      	str	r3, [r7, #32]
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	e7fd      	b.n	800be44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	61fb      	str	r3, [r7, #28]
}
 800be62:	bf00      	nop
 800be64:	bf00      	nop
 800be66:	e7fd      	b.n	800be64 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be68:	f001 f9a4 	bl	800d1b4 <xTaskGetSchedulerState>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <xQueueSemaphoreTake+0x64>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <xQueueSemaphoreTake+0x68>
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <xQueueSemaphoreTake+0x6a>
 800be7c:	2300      	movs	r3, #0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10b      	bne.n	800be9a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	61bb      	str	r3, [r7, #24]
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop
 800be98:	e7fd      	b.n	800be96 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be9a:	f001 fff5 	bl	800de88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d024      	beq.n	800bef4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800beaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beac:	1e5a      	subs	r2, r3, #1
 800beae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d104      	bne.n	800bec4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800beba:	f001 faf5 	bl	800d4a8 <pvTaskIncrementMutexHeldCount>
 800bebe:	4602      	mov	r2, r0
 800bec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00f      	beq.n	800beec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800becc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bece:	3310      	adds	r3, #16
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 ffa9 	bl	800ce28 <xTaskRemoveFromEventList>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d007      	beq.n	800beec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bedc:	4b54      	ldr	r3, [pc, #336]	@ (800c030 <xQueueSemaphoreTake+0x21c>)
 800bede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beec:	f001 fffe 	bl	800deec <vPortExitCritical>
				return pdPASS;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e098      	b.n	800c026 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d112      	bne.n	800bf20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800befa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00b      	beq.n	800bf18 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	617b      	str	r3, [r7, #20]
}
 800bf12:	bf00      	nop
 800bf14:	bf00      	nop
 800bf16:	e7fd      	b.n	800bf14 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf18:	f001 ffe8 	bl	800deec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	e082      	b.n	800c026 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d106      	bne.n	800bf34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf26:	f107 030c 	add.w	r3, r7, #12
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 ffe0 	bl	800cef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf30:	2301      	movs	r3, #1
 800bf32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf34:	f001 ffda 	bl	800deec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf38:	f000 fd36 	bl	800c9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf3c:	f001 ffa4 	bl	800de88 <vPortEnterCritical>
 800bf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf46:	b25b      	sxtb	r3, r3
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d103      	bne.n	800bf56 <xQueueSemaphoreTake+0x142>
 800bf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf5c:	b25b      	sxtb	r3, r3
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d103      	bne.n	800bf6c <xQueueSemaphoreTake+0x158>
 800bf64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf66:	2200      	movs	r2, #0
 800bf68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf6c:	f001 ffbe 	bl	800deec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf70:	463a      	mov	r2, r7
 800bf72:	f107 030c 	add.w	r3, r7, #12
 800bf76:	4611      	mov	r1, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 ffcf 	bl	800cf1c <xTaskCheckForTimeOut>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d132      	bne.n	800bfea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf86:	f000 f9f5 	bl	800c374 <prvIsQueueEmpty>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d026      	beq.n	800bfde <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d109      	bne.n	800bfac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bf98:	f001 ff76 	bl	800de88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f001 f925 	bl	800d1f0 <xTaskPriorityInherit>
 800bfa6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bfa8:	f001 ffa0 	bl	800deec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfae:	3324      	adds	r3, #36	@ 0x24
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 fee5 	bl	800cd84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfbc:	f000 f988 	bl	800c2d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfc0:	f000 fd00 	bl	800c9c4 <xTaskResumeAll>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f47f af67 	bne.w	800be9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bfcc:	4b18      	ldr	r3, [pc, #96]	@ (800c030 <xQueueSemaphoreTake+0x21c>)
 800bfce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	e75d      	b.n	800be9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfe0:	f000 f976 	bl	800c2d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfe4:	f000 fcee 	bl	800c9c4 <xTaskResumeAll>
 800bfe8:	e757      	b.n	800be9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfec:	f000 f970 	bl	800c2d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bff0:	f000 fce8 	bl	800c9c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bff6:	f000 f9bd 	bl	800c374 <prvIsQueueEmpty>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f43f af4c 	beq.w	800be9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00d      	beq.n	800c024 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c008:	f001 ff3e 	bl	800de88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c00c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c00e:	f000 f8b7 	bl	800c180 <prvGetDisinheritPriorityAfterTimeout>
 800c012:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 f9c0 	bl	800d3a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c020:	f001 ff64 	bl	800deec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c024:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c026:	4618      	mov	r0, r3
 800c028:	3738      	adds	r7, #56	@ 0x38
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	e000ed04 	.word	0xe000ed04

0800c034 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08e      	sub	sp, #56	@ 0x38
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10b      	bne.n	800c062 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	623b      	str	r3, [r7, #32]
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	e7fd      	b.n	800c05e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <xQueueReceiveFromISR+0x3c>
 800c068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <xQueueReceiveFromISR+0x40>
 800c070:	2301      	movs	r3, #1
 800c072:	e000      	b.n	800c076 <xQueueReceiveFromISR+0x42>
 800c074:	2300      	movs	r3, #0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10b      	bne.n	800c092 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	61fb      	str	r3, [r7, #28]
}
 800c08c:	bf00      	nop
 800c08e:	bf00      	nop
 800c090:	e7fd      	b.n	800c08e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c092:	f001 ffd9 	bl	800e048 <vPortValidateInterruptPriority>
	__asm volatile
 800c096:	f3ef 8211 	mrs	r2, BASEPRI
 800c09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	61ba      	str	r2, [r7, #24]
 800c0ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c0ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d02f      	beq.n	800c11e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0c8:	68b9      	ldr	r1, [r7, #8]
 800c0ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0cc:	f000 f8da 	bl	800c284 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d2:	1e5a      	subs	r2, r3, #1
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c0d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e0:	d112      	bne.n	800c108 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d016      	beq.n	800c118 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ec:	3310      	adds	r3, #16
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fe9a 	bl	800ce28 <xTaskRemoveFromEventList>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00e      	beq.n	800c118 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	e007      	b.n	800c118 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c10c:	3301      	adds	r3, #1
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	b25a      	sxtb	r2, r3
 800c112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c118:	2301      	movs	r3, #1
 800c11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c11c:	e001      	b.n	800c122 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c11e:	2300      	movs	r3, #0
 800c120:	637b      	str	r3, [r7, #52]	@ 0x34
 800c122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c124:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f383 8811 	msr	BASEPRI, r3
}
 800c12c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c130:	4618      	mov	r0, r3
 800c132:	3738      	adds	r7, #56	@ 0x38
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10b      	bne.n	800c162 <vQueueDelete+0x2a>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	60bb      	str	r3, [r7, #8]
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	e7fd      	b.n	800c15e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f000 f95e 	bl	800c424 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d102      	bne.n	800c178 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f002 f878 	bl	800e268 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c178:	bf00      	nop
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d006      	beq.n	800c19e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	e001      	b.n	800c1a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
	}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10d      	bne.n	800c1ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d14d      	bne.n	800c272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 f870 	bl	800d2c0 <xTaskPriorityDisinherit>
 800c1e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	609a      	str	r2, [r3, #8]
 800c1e8:	e043      	b.n	800c272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d119      	bne.n	800c224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6858      	ldr	r0, [r3, #4]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	68b9      	ldr	r1, [r7, #8]
 800c1fc:	f002 fc47 	bl	800ea8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c208:	441a      	add	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	429a      	cmp	r2, r3
 800c218:	d32b      	bcc.n	800c272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	605a      	str	r2, [r3, #4]
 800c222:	e026      	b.n	800c272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68d8      	ldr	r0, [r3, #12]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c22c:	461a      	mov	r2, r3
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	f002 fc2d 	bl	800ea8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	68da      	ldr	r2, [r3, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c23c:	425b      	negs	r3, r3
 800c23e:	441a      	add	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	68da      	ldr	r2, [r3, #12]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d207      	bcs.n	800c260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	689a      	ldr	r2, [r3, #8]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c258:	425b      	negs	r3, r3
 800c25a:	441a      	add	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d105      	bne.n	800c272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	3b01      	subs	r3, #1
 800c270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	1c5a      	adds	r2, r3, #1
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c27a:	697b      	ldr	r3, [r7, #20]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c292:	2b00      	cmp	r3, #0
 800c294:	d018      	beq.n	800c2c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29e:	441a      	add	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	68da      	ldr	r2, [r3, #12]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d303      	bcc.n	800c2b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68d9      	ldr	r1, [r3, #12]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6838      	ldr	r0, [r7, #0]
 800c2c4:	f002 fbe3 	bl	800ea8e <memcpy>
	}
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2d8:	f001 fdd6 	bl	800de88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2e4:	e011      	b.n	800c30a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d012      	beq.n	800c314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3324      	adds	r3, #36	@ 0x24
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fd98 	bl	800ce28 <xTaskRemoveFromEventList>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2fe:	f000 fe71 	bl	800cfe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	3b01      	subs	r3, #1
 800c306:	b2db      	uxtb	r3, r3
 800c308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c30a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dce9      	bgt.n	800c2e6 <prvUnlockQueue+0x16>
 800c312:	e000      	b.n	800c316 <prvUnlockQueue+0x46>
					break;
 800c314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	22ff      	movs	r2, #255	@ 0xff
 800c31a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c31e:	f001 fde5 	bl	800deec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c322:	f001 fdb1 	bl	800de88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c32c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c32e:	e011      	b.n	800c354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d012      	beq.n	800c35e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	3310      	adds	r3, #16
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 fd73 	bl	800ce28 <xTaskRemoveFromEventList>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c348:	f000 fe4c 	bl	800cfe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	3b01      	subs	r3, #1
 800c350:	b2db      	uxtb	r3, r3
 800c352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dce9      	bgt.n	800c330 <prvUnlockQueue+0x60>
 800c35c:	e000      	b.n	800c360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c35e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	22ff      	movs	r2, #255	@ 0xff
 800c364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c368:	f001 fdc0 	bl	800deec <vPortExitCritical>
}
 800c36c:	bf00      	nop
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c37c:	f001 fd84 	bl	800de88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c384:	2b00      	cmp	r3, #0
 800c386:	d102      	bne.n	800c38e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c388:	2301      	movs	r3, #1
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	e001      	b.n	800c392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c38e:	2300      	movs	r3, #0
 800c390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c392:	f001 fdab 	bl	800deec <vPortExitCritical>

	return xReturn;
 800c396:	68fb      	ldr	r3, [r7, #12]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3a8:	f001 fd6e 	bl	800de88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d102      	bne.n	800c3be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	e001      	b.n	800c3c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3c2:	f001 fd93 	bl	800deec <vPortExitCritical>

	return xReturn;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	e014      	b.n	800c40a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3e0:	4a0f      	ldr	r2, [pc, #60]	@ (800c420 <vQueueAddToRegistry+0x50>)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10b      	bne.n	800c404 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3ec:	490c      	ldr	r1, [pc, #48]	@ (800c420 <vQueueAddToRegistry+0x50>)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3f6:	4a0a      	ldr	r2, [pc, #40]	@ (800c420 <vQueueAddToRegistry+0x50>)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	00db      	lsls	r3, r3, #3
 800c3fc:	4413      	add	r3, r2
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c402:	e006      	b.n	800c412 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3301      	adds	r3, #1
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2b07      	cmp	r3, #7
 800c40e:	d9e7      	bls.n	800c3e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c410:	bf00      	nop
 800c412:	bf00      	nop
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20001740 	.word	0x20001740

0800c424 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	e016      	b.n	800c460 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c432:	4a10      	ldr	r2, [pc, #64]	@ (800c474 <vQueueUnregisterQueue+0x50>)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	00db      	lsls	r3, r3, #3
 800c438:	4413      	add	r3, r2
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d10b      	bne.n	800c45a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c442:	4a0c      	ldr	r2, [pc, #48]	@ (800c474 <vQueueUnregisterQueue+0x50>)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2100      	movs	r1, #0
 800c448:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c44c:	4a09      	ldr	r2, [pc, #36]	@ (800c474 <vQueueUnregisterQueue+0x50>)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	4413      	add	r3, r2
 800c454:	2200      	movs	r2, #0
 800c456:	605a      	str	r2, [r3, #4]
				break;
 800c458:	e006      	b.n	800c468 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3301      	adds	r3, #1
 800c45e:	60fb      	str	r3, [r7, #12]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b07      	cmp	r3, #7
 800c464:	d9e5      	bls.n	800c432 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c466:	bf00      	nop
 800c468:	bf00      	nop
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	20001740 	.word	0x20001740

0800c478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c488:	f001 fcfe 	bl	800de88 <vPortEnterCritical>
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c492:	b25b      	sxtb	r3, r3
 800c494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c498:	d103      	bne.n	800c4a2 <vQueueWaitForMessageRestricted+0x2a>
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4a8:	b25b      	sxtb	r3, r3
 800c4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ae:	d103      	bne.n	800c4b8 <vQueueWaitForMessageRestricted+0x40>
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4b8:	f001 fd18 	bl	800deec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d106      	bne.n	800c4d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	3324      	adds	r3, #36	@ 0x24
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	68b9      	ldr	r1, [r7, #8]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 fc7f 	bl	800cdd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4d2:	6978      	ldr	r0, [r7, #20]
 800c4d4:	f7ff fefc 	bl	800c2d0 <prvUnlockQueue>
	}
 800c4d8:	bf00      	nop
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08e      	sub	sp, #56	@ 0x38
 800c4e4:	af04      	add	r7, sp, #16
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10b      	bne.n	800c50c <xTaskCreateStatic+0x2c>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	623b      	str	r3, [r7, #32]
}
 800c506:	bf00      	nop
 800c508:	bf00      	nop
 800c50a:	e7fd      	b.n	800c508 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10b      	bne.n	800c52a <xTaskCreateStatic+0x4a>
	__asm volatile
 800c512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	61fb      	str	r3, [r7, #28]
}
 800c524:	bf00      	nop
 800c526:	bf00      	nop
 800c528:	e7fd      	b.n	800c526 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c52a:	23a8      	movs	r3, #168	@ 0xa8
 800c52c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2ba8      	cmp	r3, #168	@ 0xa8
 800c532:	d00b      	beq.n	800c54c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	61bb      	str	r3, [r7, #24]
}
 800c546:	bf00      	nop
 800c548:	bf00      	nop
 800c54a:	e7fd      	b.n	800c548 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c54c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c550:	2b00      	cmp	r3, #0
 800c552:	d01e      	beq.n	800c592 <xTaskCreateStatic+0xb2>
 800c554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c556:	2b00      	cmp	r3, #0
 800c558:	d01b      	beq.n	800c592 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c562:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	2202      	movs	r2, #2
 800c568:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c56c:	2300      	movs	r3, #0
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c572:	9302      	str	r3, [sp, #8]
 800c574:	f107 0314 	add.w	r3, r7, #20
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	68b9      	ldr	r1, [r7, #8]
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 f851 	bl	800c62c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c58a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c58c:	f000 f8f6 	bl	800c77c <prvAddNewTaskToReadyList>
 800c590:	e001      	b.n	800c596 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c596:	697b      	ldr	r3, [r7, #20]
	}
 800c598:	4618      	mov	r0, r3
 800c59a:	3728      	adds	r7, #40	@ 0x28
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b08c      	sub	sp, #48	@ 0x30
 800c5a4:	af04      	add	r7, sp, #16
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5b0:	88fb      	ldrh	r3, [r7, #6]
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f001 fd89 	bl	800e0cc <pvPortMalloc>
 800c5ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00e      	beq.n	800c5e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5c2:	20a8      	movs	r0, #168	@ 0xa8
 800c5c4:	f001 fd82 	bl	800e0cc <pvPortMalloc>
 800c5c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d003      	beq.n	800c5d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5d6:	e005      	b.n	800c5e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5d8:	6978      	ldr	r0, [r7, #20]
 800c5da:	f001 fe45 	bl	800e268 <vPortFree>
 800c5de:	e001      	b.n	800c5e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d017      	beq.n	800c61a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5f2:	88fa      	ldrh	r2, [r7, #6]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9303      	str	r3, [sp, #12]
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	9302      	str	r3, [sp, #8]
 800c5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	68b9      	ldr	r1, [r7, #8]
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 f80f 	bl	800c62c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c60e:	69f8      	ldr	r0, [r7, #28]
 800c610:	f000 f8b4 	bl	800c77c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c614:	2301      	movs	r3, #1
 800c616:	61bb      	str	r3, [r7, #24]
 800c618:	e002      	b.n	800c620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c61a:	f04f 33ff 	mov.w	r3, #4294967295
 800c61e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c620:	69bb      	ldr	r3, [r7, #24]
	}
 800c622:	4618      	mov	r0, r3
 800c624:	3720      	adds	r7, #32
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
	...

0800c62c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
 800c638:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	461a      	mov	r2, r3
 800c644:	21a5      	movs	r1, #165	@ 0xa5
 800c646:	f002 f949 	bl	800e8dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c654:	3b01      	subs	r3, #1
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	f023 0307 	bic.w	r3, r3, #7
 800c662:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00b      	beq.n	800c686 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	617b      	str	r3, [r7, #20]
}
 800c680:	bf00      	nop
 800c682:	bf00      	nop
 800c684:	e7fd      	b.n	800c682 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01f      	beq.n	800c6cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c68c:	2300      	movs	r3, #0
 800c68e:	61fb      	str	r3, [r7, #28]
 800c690:	e012      	b.n	800c6b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	4413      	add	r3, r2
 800c698:	7819      	ldrb	r1, [r3, #0]
 800c69a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	4413      	add	r3, r2
 800c6a0:	3334      	adds	r3, #52	@ 0x34
 800c6a2:	460a      	mov	r2, r1
 800c6a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d006      	beq.n	800c6c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	61fb      	str	r3, [r7, #28]
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	2b0f      	cmp	r3, #15
 800c6bc:	d9e9      	bls.n	800c692 <prvInitialiseNewTask+0x66>
 800c6be:	e000      	b.n	800c6c2 <prvInitialiseNewTask+0x96>
			{
				break;
 800c6c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c6ca:	e003      	b.n	800c6d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d6:	2b37      	cmp	r3, #55	@ 0x37
 800c6d8:	d901      	bls.n	800c6de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6da:	2337      	movs	r3, #55	@ 0x37
 800c6dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe fe33 	bl	800b360 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fc:	3318      	adds	r3, #24
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fe2e 	bl	800b360 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c708:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c712:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c718:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71c:	2200      	movs	r2, #0
 800c71e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c724:	2200      	movs	r2, #0
 800c726:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	3354      	adds	r3, #84	@ 0x54
 800c72e:	224c      	movs	r2, #76	@ 0x4c
 800c730:	2100      	movs	r1, #0
 800c732:	4618      	mov	r0, r3
 800c734:	f002 f8d2 	bl	800e8dc <memset>
 800c738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73a:	4a0d      	ldr	r2, [pc, #52]	@ (800c770 <prvInitialiseNewTask+0x144>)
 800c73c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c740:	4a0c      	ldr	r2, [pc, #48]	@ (800c774 <prvInitialiseNewTask+0x148>)
 800c742:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c746:	4a0c      	ldr	r2, [pc, #48]	@ (800c778 <prvInitialiseNewTask+0x14c>)
 800c748:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	68f9      	ldr	r1, [r7, #12]
 800c74e:	69b8      	ldr	r0, [r7, #24]
 800c750:	f001 fa6c 	bl	800dc2c <pxPortInitialiseStack>
 800c754:	4602      	mov	r2, r0
 800c756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c766:	bf00      	nop
 800c768:	3720      	adds	r7, #32
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	200059d4 	.word	0x200059d4
 800c774:	20005a3c 	.word	0x20005a3c
 800c778:	20005aa4 	.word	0x20005aa4

0800c77c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c784:	f001 fb80 	bl	800de88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c788:	4b2d      	ldr	r3, [pc, #180]	@ (800c840 <prvAddNewTaskToReadyList+0xc4>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3301      	adds	r3, #1
 800c78e:	4a2c      	ldr	r2, [pc, #176]	@ (800c840 <prvAddNewTaskToReadyList+0xc4>)
 800c790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c792:	4b2c      	ldr	r3, [pc, #176]	@ (800c844 <prvAddNewTaskToReadyList+0xc8>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d109      	bne.n	800c7ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c79a:	4a2a      	ldr	r2, [pc, #168]	@ (800c844 <prvAddNewTaskToReadyList+0xc8>)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c7a0:	4b27      	ldr	r3, [pc, #156]	@ (800c840 <prvAddNewTaskToReadyList+0xc4>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d110      	bne.n	800c7ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c7a8:	f000 fc40 	bl	800d02c <prvInitialiseTaskLists>
 800c7ac:	e00d      	b.n	800c7ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c7ae:	4b26      	ldr	r3, [pc, #152]	@ (800c848 <prvAddNewTaskToReadyList+0xcc>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d109      	bne.n	800c7ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7b6:	4b23      	ldr	r3, [pc, #140]	@ (800c844 <prvAddNewTaskToReadyList+0xc8>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d802      	bhi.n	800c7ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c7c4:	4a1f      	ldr	r2, [pc, #124]	@ (800c844 <prvAddNewTaskToReadyList+0xc8>)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c7ca:	4b20      	ldr	r3, [pc, #128]	@ (800c84c <prvAddNewTaskToReadyList+0xd0>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c84c <prvAddNewTaskToReadyList+0xd0>)
 800c7d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c84c <prvAddNewTaskToReadyList+0xd0>)
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e0:	4b1b      	ldr	r3, [pc, #108]	@ (800c850 <prvAddNewTaskToReadyList+0xd4>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d903      	bls.n	800c7f0 <prvAddNewTaskToReadyList+0x74>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ec:	4a18      	ldr	r2, [pc, #96]	@ (800c850 <prvAddNewTaskToReadyList+0xd4>)
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4413      	add	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4a15      	ldr	r2, [pc, #84]	@ (800c854 <prvAddNewTaskToReadyList+0xd8>)
 800c7fe:	441a      	add	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3304      	adds	r3, #4
 800c804:	4619      	mov	r1, r3
 800c806:	4610      	mov	r0, r2
 800c808:	f7fe fdb7 	bl	800b37a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c80c:	f001 fb6e 	bl	800deec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c810:	4b0d      	ldr	r3, [pc, #52]	@ (800c848 <prvAddNewTaskToReadyList+0xcc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00e      	beq.n	800c836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c818:	4b0a      	ldr	r3, [pc, #40]	@ (800c844 <prvAddNewTaskToReadyList+0xc8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c822:	429a      	cmp	r2, r3
 800c824:	d207      	bcs.n	800c836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c826:	4b0c      	ldr	r3, [pc, #48]	@ (800c858 <prvAddNewTaskToReadyList+0xdc>)
 800c828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c836:	bf00      	nop
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20001c54 	.word	0x20001c54
 800c844:	20001780 	.word	0x20001780
 800c848:	20001c60 	.word	0x20001c60
 800c84c:	20001c70 	.word	0x20001c70
 800c850:	20001c5c 	.word	0x20001c5c
 800c854:	20001784 	.word	0x20001784
 800c858:	e000ed04 	.word	0xe000ed04

0800c85c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c864:	2300      	movs	r3, #0
 800c866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d018      	beq.n	800c8a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c86e:	4b14      	ldr	r3, [pc, #80]	@ (800c8c0 <vTaskDelay+0x64>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00b      	beq.n	800c88e <vTaskDelay+0x32>
	__asm volatile
 800c876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	60bb      	str	r3, [r7, #8]
}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	e7fd      	b.n	800c88a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c88e:	f000 f88b 	bl	800c9a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c892:	2100      	movs	r1, #0
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fe1b 	bl	800d4d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c89a:	f000 f893 	bl	800c9c4 <xTaskResumeAll>
 800c89e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d107      	bne.n	800c8b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c8a6:	4b07      	ldr	r3, [pc, #28]	@ (800c8c4 <vTaskDelay+0x68>)
 800c8a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20001c7c 	.word	0x20001c7c
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b08a      	sub	sp, #40	@ 0x28
 800c8cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c8d6:	463a      	mov	r2, r7
 800c8d8:	1d39      	adds	r1, r7, #4
 800c8da:	f107 0308 	add.w	r3, r7, #8
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fcea 	bl	800b2b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	9202      	str	r2, [sp, #8]
 800c8ec:	9301      	str	r3, [sp, #4]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	460a      	mov	r2, r1
 800c8f6:	4924      	ldr	r1, [pc, #144]	@ (800c988 <vTaskStartScheduler+0xc0>)
 800c8f8:	4824      	ldr	r0, [pc, #144]	@ (800c98c <vTaskStartScheduler+0xc4>)
 800c8fa:	f7ff fdf1 	bl	800c4e0 <xTaskCreateStatic>
 800c8fe:	4603      	mov	r3, r0
 800c900:	4a23      	ldr	r2, [pc, #140]	@ (800c990 <vTaskStartScheduler+0xc8>)
 800c902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c904:	4b22      	ldr	r3, [pc, #136]	@ (800c990 <vTaskStartScheduler+0xc8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c90c:	2301      	movs	r3, #1
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	e001      	b.n	800c916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c912:	2300      	movs	r3, #0
 800c914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d102      	bne.n	800c922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c91c:	f000 fe2c 	bl	800d578 <xTimerCreateTimerTask>
 800c920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d11b      	bne.n	800c960 <vTaskStartScheduler+0x98>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	613b      	str	r3, [r7, #16]
}
 800c93a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c93c:	4b15      	ldr	r3, [pc, #84]	@ (800c994 <vTaskStartScheduler+0xcc>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	3354      	adds	r3, #84	@ 0x54
 800c942:	4a15      	ldr	r2, [pc, #84]	@ (800c998 <vTaskStartScheduler+0xd0>)
 800c944:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c946:	4b15      	ldr	r3, [pc, #84]	@ (800c99c <vTaskStartScheduler+0xd4>)
 800c948:	f04f 32ff 	mov.w	r2, #4294967295
 800c94c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c94e:	4b14      	ldr	r3, [pc, #80]	@ (800c9a0 <vTaskStartScheduler+0xd8>)
 800c950:	2201      	movs	r2, #1
 800c952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c954:	4b13      	ldr	r3, [pc, #76]	@ (800c9a4 <vTaskStartScheduler+0xdc>)
 800c956:	2200      	movs	r2, #0
 800c958:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c95a:	f001 f9f1 	bl	800dd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c95e:	e00f      	b.n	800c980 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c966:	d10b      	bne.n	800c980 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96c:	f383 8811 	msr	BASEPRI, r3
 800c970:	f3bf 8f6f 	isb	sy
 800c974:	f3bf 8f4f 	dsb	sy
 800c978:	60fb      	str	r3, [r7, #12]
}
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	e7fd      	b.n	800c97c <vTaskStartScheduler+0xb4>
}
 800c980:	bf00      	nop
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	0800f954 	.word	0x0800f954
 800c98c:	0800cffd 	.word	0x0800cffd
 800c990:	20001c78 	.word	0x20001c78
 800c994:	20001780 	.word	0x20001780
 800c998:	20000024 	.word	0x20000024
 800c99c:	20001c74 	.word	0x20001c74
 800c9a0:	20001c60 	.word	0x20001c60
 800c9a4:	20001c58 	.word	0x20001c58

0800c9a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c9ac:	4b04      	ldr	r3, [pc, #16]	@ (800c9c0 <vTaskSuspendAll+0x18>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	4a03      	ldr	r2, [pc, #12]	@ (800c9c0 <vTaskSuspendAll+0x18>)
 800c9b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c9b6:	bf00      	nop
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	20001c7c 	.word	0x20001c7c

0800c9c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c9d2:	4b42      	ldr	r3, [pc, #264]	@ (800cadc <xTaskResumeAll+0x118>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10b      	bne.n	800c9f2 <xTaskResumeAll+0x2e>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	603b      	str	r3, [r7, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	bf00      	nop
 800c9f0:	e7fd      	b.n	800c9ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9f2:	f001 fa49 	bl	800de88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9f6:	4b39      	ldr	r3, [pc, #228]	@ (800cadc <xTaskResumeAll+0x118>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	4a37      	ldr	r2, [pc, #220]	@ (800cadc <xTaskResumeAll+0x118>)
 800c9fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca00:	4b36      	ldr	r3, [pc, #216]	@ (800cadc <xTaskResumeAll+0x118>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d162      	bne.n	800cace <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca08:	4b35      	ldr	r3, [pc, #212]	@ (800cae0 <xTaskResumeAll+0x11c>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d05e      	beq.n	800cace <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca10:	e02f      	b.n	800ca72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca12:	4b34      	ldr	r3, [pc, #208]	@ (800cae4 <xTaskResumeAll+0x120>)
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3318      	adds	r3, #24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fd08 	bl	800b434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	3304      	adds	r3, #4
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fd03 	bl	800b434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca32:	4b2d      	ldr	r3, [pc, #180]	@ (800cae8 <xTaskResumeAll+0x124>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d903      	bls.n	800ca42 <xTaskResumeAll+0x7e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3e:	4a2a      	ldr	r2, [pc, #168]	@ (800cae8 <xTaskResumeAll+0x124>)
 800ca40:	6013      	str	r3, [r2, #0]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca46:	4613      	mov	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4a27      	ldr	r2, [pc, #156]	@ (800caec <xTaskResumeAll+0x128>)
 800ca50:	441a      	add	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	3304      	adds	r3, #4
 800ca56:	4619      	mov	r1, r3
 800ca58:	4610      	mov	r0, r2
 800ca5a:	f7fe fc8e 	bl	800b37a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca62:	4b23      	ldr	r3, [pc, #140]	@ (800caf0 <xTaskResumeAll+0x12c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d302      	bcc.n	800ca72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ca6c:	4b21      	ldr	r3, [pc, #132]	@ (800caf4 <xTaskResumeAll+0x130>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca72:	4b1c      	ldr	r3, [pc, #112]	@ (800cae4 <xTaskResumeAll+0x120>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1cb      	bne.n	800ca12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca80:	f000 fb78 	bl	800d174 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca84:	4b1c      	ldr	r3, [pc, #112]	@ (800caf8 <xTaskResumeAll+0x134>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d010      	beq.n	800cab2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca90:	f000 f858 	bl	800cb44 <xTaskIncrementTick>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d002      	beq.n	800caa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ca9a:	4b16      	ldr	r3, [pc, #88]	@ (800caf4 <xTaskResumeAll+0x130>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	3b01      	subs	r3, #1
 800caa4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1f1      	bne.n	800ca90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800caac:	4b12      	ldr	r3, [pc, #72]	@ (800caf8 <xTaskResumeAll+0x134>)
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cab2:	4b10      	ldr	r3, [pc, #64]	@ (800caf4 <xTaskResumeAll+0x130>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d009      	beq.n	800cace <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800caba:	2301      	movs	r3, #1
 800cabc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cabe:	4b0f      	ldr	r3, [pc, #60]	@ (800cafc <xTaskResumeAll+0x138>)
 800cac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cac4:	601a      	str	r2, [r3, #0]
 800cac6:	f3bf 8f4f 	dsb	sy
 800caca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cace:	f001 fa0d 	bl	800deec <vPortExitCritical>

	return xAlreadyYielded;
 800cad2:	68bb      	ldr	r3, [r7, #8]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	20001c7c 	.word	0x20001c7c
 800cae0:	20001c54 	.word	0x20001c54
 800cae4:	20001c14 	.word	0x20001c14
 800cae8:	20001c5c 	.word	0x20001c5c
 800caec:	20001784 	.word	0x20001784
 800caf0:	20001780 	.word	0x20001780
 800caf4:	20001c68 	.word	0x20001c68
 800caf8:	20001c64 	.word	0x20001c64
 800cafc:	e000ed04 	.word	0xe000ed04

0800cb00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb06:	4b05      	ldr	r3, [pc, #20]	@ (800cb1c <xTaskGetTickCount+0x1c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb0c:	687b      	ldr	r3, [r7, #4]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	20001c58 	.word	0x20001c58

0800cb20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb26:	f001 fa8f 	bl	800e048 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cb2e:	4b04      	ldr	r3, [pc, #16]	@ (800cb40 <xTaskGetTickCountFromISR+0x20>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb34:	683b      	ldr	r3, [r7, #0]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20001c58 	.word	0x20001c58

0800cb44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb4e:	4b4f      	ldr	r3, [pc, #316]	@ (800cc8c <xTaskIncrementTick+0x148>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f040 8090 	bne.w	800cc78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb58:	4b4d      	ldr	r3, [pc, #308]	@ (800cc90 <xTaskIncrementTick+0x14c>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb60:	4a4b      	ldr	r2, [pc, #300]	@ (800cc90 <xTaskIncrementTick+0x14c>)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d121      	bne.n	800cbb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb6c:	4b49      	ldr	r3, [pc, #292]	@ (800cc94 <xTaskIncrementTick+0x150>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00b      	beq.n	800cb8e <xTaskIncrementTick+0x4a>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	603b      	str	r3, [r7, #0]
}
 800cb88:	bf00      	nop
 800cb8a:	bf00      	nop
 800cb8c:	e7fd      	b.n	800cb8a <xTaskIncrementTick+0x46>
 800cb8e:	4b41      	ldr	r3, [pc, #260]	@ (800cc94 <xTaskIncrementTick+0x150>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	4b40      	ldr	r3, [pc, #256]	@ (800cc98 <xTaskIncrementTick+0x154>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a3e      	ldr	r2, [pc, #248]	@ (800cc94 <xTaskIncrementTick+0x150>)
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	4a3e      	ldr	r2, [pc, #248]	@ (800cc98 <xTaskIncrementTick+0x154>)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6013      	str	r3, [r2, #0]
 800cba2:	4b3e      	ldr	r3, [pc, #248]	@ (800cc9c <xTaskIncrementTick+0x158>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3301      	adds	r3, #1
 800cba8:	4a3c      	ldr	r2, [pc, #240]	@ (800cc9c <xTaskIncrementTick+0x158>)
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	f000 fae2 	bl	800d174 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbb0:	4b3b      	ldr	r3, [pc, #236]	@ (800cca0 <xTaskIncrementTick+0x15c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d349      	bcc.n	800cc4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbba:	4b36      	ldr	r3, [pc, #216]	@ (800cc94 <xTaskIncrementTick+0x150>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d104      	bne.n	800cbce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc4:	4b36      	ldr	r3, [pc, #216]	@ (800cca0 <xTaskIncrementTick+0x15c>)
 800cbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbca:	601a      	str	r2, [r3, #0]
					break;
 800cbcc:	e03f      	b.n	800cc4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbce:	4b31      	ldr	r3, [pc, #196]	@ (800cc94 <xTaskIncrementTick+0x150>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbde:	693a      	ldr	r2, [r7, #16]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d203      	bcs.n	800cbee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbe6:	4a2e      	ldr	r2, [pc, #184]	@ (800cca0 <xTaskIncrementTick+0x15c>)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbec:	e02f      	b.n	800cc4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fe fc1e 	bl	800b434 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d004      	beq.n	800cc0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	3318      	adds	r3, #24
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fe fc15 	bl	800b434 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc0e:	4b25      	ldr	r3, [pc, #148]	@ (800cca4 <xTaskIncrementTick+0x160>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d903      	bls.n	800cc1e <xTaskIncrementTick+0xda>
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc1a:	4a22      	ldr	r2, [pc, #136]	@ (800cca4 <xTaskIncrementTick+0x160>)
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc22:	4613      	mov	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4a1f      	ldr	r2, [pc, #124]	@ (800cca8 <xTaskIncrementTick+0x164>)
 800cc2c:	441a      	add	r2, r3
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7fe fba0 	bl	800b37a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc3e:	4b1b      	ldr	r3, [pc, #108]	@ (800ccac <xTaskIncrementTick+0x168>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d3b8      	bcc.n	800cbba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc4c:	e7b5      	b.n	800cbba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc4e:	4b17      	ldr	r3, [pc, #92]	@ (800ccac <xTaskIncrementTick+0x168>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc54:	4914      	ldr	r1, [pc, #80]	@ (800cca8 <xTaskIncrementTick+0x164>)
 800cc56:	4613      	mov	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	440b      	add	r3, r1
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d901      	bls.n	800cc6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc6a:	4b11      	ldr	r3, [pc, #68]	@ (800ccb0 <xTaskIncrementTick+0x16c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d007      	beq.n	800cc82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cc72:	2301      	movs	r3, #1
 800cc74:	617b      	str	r3, [r7, #20]
 800cc76:	e004      	b.n	800cc82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc78:	4b0e      	ldr	r3, [pc, #56]	@ (800ccb4 <xTaskIncrementTick+0x170>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	4a0d      	ldr	r2, [pc, #52]	@ (800ccb4 <xTaskIncrementTick+0x170>)
 800cc80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc82:	697b      	ldr	r3, [r7, #20]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3718      	adds	r7, #24
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	20001c7c 	.word	0x20001c7c
 800cc90:	20001c58 	.word	0x20001c58
 800cc94:	20001c0c 	.word	0x20001c0c
 800cc98:	20001c10 	.word	0x20001c10
 800cc9c:	20001c6c 	.word	0x20001c6c
 800cca0:	20001c74 	.word	0x20001c74
 800cca4:	20001c5c 	.word	0x20001c5c
 800cca8:	20001784 	.word	0x20001784
 800ccac:	20001780 	.word	0x20001780
 800ccb0:	20001c68 	.word	0x20001c68
 800ccb4:	20001c64 	.word	0x20001c64

0800ccb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccbe:	4b2b      	ldr	r3, [pc, #172]	@ (800cd6c <vTaskSwitchContext+0xb4>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccc6:	4b2a      	ldr	r3, [pc, #168]	@ (800cd70 <vTaskSwitchContext+0xb8>)
 800ccc8:	2201      	movs	r2, #1
 800ccca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cccc:	e047      	b.n	800cd5e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ccce:	4b28      	ldr	r3, [pc, #160]	@ (800cd70 <vTaskSwitchContext+0xb8>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd4:	4b27      	ldr	r3, [pc, #156]	@ (800cd74 <vTaskSwitchContext+0xbc>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	e011      	b.n	800cd00 <vTaskSwitchContext+0x48>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10b      	bne.n	800ccfa <vTaskSwitchContext+0x42>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	607b      	str	r3, [r7, #4]
}
 800ccf4:	bf00      	nop
 800ccf6:	bf00      	nop
 800ccf8:	e7fd      	b.n	800ccf6 <vTaskSwitchContext+0x3e>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	491d      	ldr	r1, [pc, #116]	@ (800cd78 <vTaskSwitchContext+0xc0>)
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	4613      	mov	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	440b      	add	r3, r1
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d0e3      	beq.n	800ccdc <vTaskSwitchContext+0x24>
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	4613      	mov	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4a16      	ldr	r2, [pc, #88]	@ (800cd78 <vTaskSwitchContext+0xc0>)
 800cd20:	4413      	add	r3, r2
 800cd22:	60bb      	str	r3, [r7, #8]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	685a      	ldr	r2, [r3, #4]
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	605a      	str	r2, [r3, #4]
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	685a      	ldr	r2, [r3, #4]
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	3308      	adds	r3, #8
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d104      	bne.n	800cd44 <vTaskSwitchContext+0x8c>
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	685a      	ldr	r2, [r3, #4]
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	605a      	str	r2, [r3, #4]
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd7c <vTaskSwitchContext+0xc4>)
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	4a09      	ldr	r2, [pc, #36]	@ (800cd74 <vTaskSwitchContext+0xbc>)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd54:	4b09      	ldr	r3, [pc, #36]	@ (800cd7c <vTaskSwitchContext+0xc4>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3354      	adds	r3, #84	@ 0x54
 800cd5a:	4a09      	ldr	r2, [pc, #36]	@ (800cd80 <vTaskSwitchContext+0xc8>)
 800cd5c:	6013      	str	r3, [r2, #0]
}
 800cd5e:	bf00      	nop
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	20001c7c 	.word	0x20001c7c
 800cd70:	20001c68 	.word	0x20001c68
 800cd74:	20001c5c 	.word	0x20001c5c
 800cd78:	20001784 	.word	0x20001784
 800cd7c:	20001780 	.word	0x20001780
 800cd80:	20000024 	.word	0x20000024

0800cd84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10b      	bne.n	800cdac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	60fb      	str	r3, [r7, #12]
}
 800cda6:	bf00      	nop
 800cda8:	bf00      	nop
 800cdaa:	e7fd      	b.n	800cda8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdac:	4b07      	ldr	r3, [pc, #28]	@ (800cdcc <vTaskPlaceOnEventList+0x48>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3318      	adds	r3, #24
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7fe fb04 	bl	800b3c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdba:	2101      	movs	r1, #1
 800cdbc:	6838      	ldr	r0, [r7, #0]
 800cdbe:	f000 fb87 	bl	800d4d0 <prvAddCurrentTaskToDelayedList>
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	20001780 	.word	0x20001780

0800cdd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10b      	bne.n	800cdfa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	617b      	str	r3, [r7, #20]
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	e7fd      	b.n	800cdf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ce24 <vTaskPlaceOnEventListRestricted+0x54>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3318      	adds	r3, #24
 800ce00:	4619      	mov	r1, r3
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f7fe fab9 	bl	800b37a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ce0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce14:	6879      	ldr	r1, [r7, #4]
 800ce16:	68b8      	ldr	r0, [r7, #8]
 800ce18:	f000 fb5a 	bl	800d4d0 <prvAddCurrentTaskToDelayedList>
	}
 800ce1c:	bf00      	nop
 800ce1e:	3718      	adds	r7, #24
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	20001780 	.word	0x20001780

0800ce28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10b      	bne.n	800ce56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	60fb      	str	r3, [r7, #12]
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	e7fd      	b.n	800ce52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3318      	adds	r3, #24
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fe faea 	bl	800b434 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce60:	4b1d      	ldr	r3, [pc, #116]	@ (800ced8 <xTaskRemoveFromEventList+0xb0>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d11d      	bne.n	800cea4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe fae1 	bl	800b434 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce76:	4b19      	ldr	r3, [pc, #100]	@ (800cedc <xTaskRemoveFromEventList+0xb4>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d903      	bls.n	800ce86 <xTaskRemoveFromEventList+0x5e>
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce82:	4a16      	ldr	r2, [pc, #88]	@ (800cedc <xTaskRemoveFromEventList+0xb4>)
 800ce84:	6013      	str	r3, [r2, #0]
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4a13      	ldr	r2, [pc, #76]	@ (800cee0 <xTaskRemoveFromEventList+0xb8>)
 800ce94:	441a      	add	r2, r3
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f7fe fa6c 	bl	800b37a <vListInsertEnd>
 800cea2:	e005      	b.n	800ceb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	3318      	adds	r3, #24
 800cea8:	4619      	mov	r1, r3
 800ceaa:	480e      	ldr	r0, [pc, #56]	@ (800cee4 <xTaskRemoveFromEventList+0xbc>)
 800ceac:	f7fe fa65 	bl	800b37a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceb4:	4b0c      	ldr	r3, [pc, #48]	@ (800cee8 <xTaskRemoveFromEventList+0xc0>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d905      	bls.n	800ceca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cebe:	2301      	movs	r3, #1
 800cec0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cec2:	4b0a      	ldr	r3, [pc, #40]	@ (800ceec <xTaskRemoveFromEventList+0xc4>)
 800cec4:	2201      	movs	r2, #1
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	e001      	b.n	800cece <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ceca:	2300      	movs	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cece:	697b      	ldr	r3, [r7, #20]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	20001c7c 	.word	0x20001c7c
 800cedc:	20001c5c 	.word	0x20001c5c
 800cee0:	20001784 	.word	0x20001784
 800cee4:	20001c14 	.word	0x20001c14
 800cee8:	20001780 	.word	0x20001780
 800ceec:	20001c68 	.word	0x20001c68

0800cef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cef8:	4b06      	ldr	r3, [pc, #24]	@ (800cf14 <vTaskInternalSetTimeOutState+0x24>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf00:	4b05      	ldr	r3, [pc, #20]	@ (800cf18 <vTaskInternalSetTimeOutState+0x28>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	605a      	str	r2, [r3, #4]
}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	20001c6c 	.word	0x20001c6c
 800cf18:	20001c58 	.word	0x20001c58

0800cf1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10b      	bne.n	800cf44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	613b      	str	r3, [r7, #16]
}
 800cf3e:	bf00      	nop
 800cf40:	bf00      	nop
 800cf42:	e7fd      	b.n	800cf40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10b      	bne.n	800cf62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	60fb      	str	r3, [r7, #12]
}
 800cf5c:	bf00      	nop
 800cf5e:	bf00      	nop
 800cf60:	e7fd      	b.n	800cf5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cf62:	f000 ff91 	bl	800de88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf66:	4b1d      	ldr	r3, [pc, #116]	@ (800cfdc <xTaskCheckForTimeOut+0xc0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	69ba      	ldr	r2, [r7, #24]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d102      	bne.n	800cf86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf80:	2300      	movs	r3, #0
 800cf82:	61fb      	str	r3, [r7, #28]
 800cf84:	e023      	b.n	800cfce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	4b15      	ldr	r3, [pc, #84]	@ (800cfe0 <xTaskCheckForTimeOut+0xc4>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d007      	beq.n	800cfa2 <xTaskCheckForTimeOut+0x86>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	69ba      	ldr	r2, [r7, #24]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d302      	bcc.n	800cfa2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	61fb      	str	r3, [r7, #28]
 800cfa0:	e015      	b.n	800cfce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d20b      	bcs.n	800cfc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	1ad2      	subs	r2, r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7ff ff99 	bl	800cef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	61fb      	str	r3, [r7, #28]
 800cfc2:	e004      	b.n	800cfce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cfce:	f000 ff8d 	bl	800deec <vPortExitCritical>

	return xReturn;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	20001c58 	.word	0x20001c58
 800cfe0:	20001c6c 	.word	0x20001c6c

0800cfe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cfe8:	4b03      	ldr	r3, [pc, #12]	@ (800cff8 <vTaskMissedYield+0x14>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	601a      	str	r2, [r3, #0]
}
 800cfee:	bf00      	nop
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	20001c68 	.word	0x20001c68

0800cffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d004:	f000 f852 	bl	800d0ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d008:	4b06      	ldr	r3, [pc, #24]	@ (800d024 <prvIdleTask+0x28>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d9f9      	bls.n	800d004 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d010:	4b05      	ldr	r3, [pc, #20]	@ (800d028 <prvIdleTask+0x2c>)
 800d012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d020:	e7f0      	b.n	800d004 <prvIdleTask+0x8>
 800d022:	bf00      	nop
 800d024:	20001784 	.word	0x20001784
 800d028:	e000ed04 	.word	0xe000ed04

0800d02c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d032:	2300      	movs	r3, #0
 800d034:	607b      	str	r3, [r7, #4]
 800d036:	e00c      	b.n	800d052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	4613      	mov	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4a12      	ldr	r2, [pc, #72]	@ (800d08c <prvInitialiseTaskLists+0x60>)
 800d044:	4413      	add	r3, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe f96a 	bl	800b320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3301      	adds	r3, #1
 800d050:	607b      	str	r3, [r7, #4]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b37      	cmp	r3, #55	@ 0x37
 800d056:	d9ef      	bls.n	800d038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d058:	480d      	ldr	r0, [pc, #52]	@ (800d090 <prvInitialiseTaskLists+0x64>)
 800d05a:	f7fe f961 	bl	800b320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d05e:	480d      	ldr	r0, [pc, #52]	@ (800d094 <prvInitialiseTaskLists+0x68>)
 800d060:	f7fe f95e 	bl	800b320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d064:	480c      	ldr	r0, [pc, #48]	@ (800d098 <prvInitialiseTaskLists+0x6c>)
 800d066:	f7fe f95b 	bl	800b320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d06a:	480c      	ldr	r0, [pc, #48]	@ (800d09c <prvInitialiseTaskLists+0x70>)
 800d06c:	f7fe f958 	bl	800b320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d070:	480b      	ldr	r0, [pc, #44]	@ (800d0a0 <prvInitialiseTaskLists+0x74>)
 800d072:	f7fe f955 	bl	800b320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d076:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a4 <prvInitialiseTaskLists+0x78>)
 800d078:	4a05      	ldr	r2, [pc, #20]	@ (800d090 <prvInitialiseTaskLists+0x64>)
 800d07a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d07c:	4b0a      	ldr	r3, [pc, #40]	@ (800d0a8 <prvInitialiseTaskLists+0x7c>)
 800d07e:	4a05      	ldr	r2, [pc, #20]	@ (800d094 <prvInitialiseTaskLists+0x68>)
 800d080:	601a      	str	r2, [r3, #0]
}
 800d082:	bf00      	nop
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20001784 	.word	0x20001784
 800d090:	20001be4 	.word	0x20001be4
 800d094:	20001bf8 	.word	0x20001bf8
 800d098:	20001c14 	.word	0x20001c14
 800d09c:	20001c28 	.word	0x20001c28
 800d0a0:	20001c40 	.word	0x20001c40
 800d0a4:	20001c0c 	.word	0x20001c0c
 800d0a8:	20001c10 	.word	0x20001c10

0800d0ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0b2:	e019      	b.n	800d0e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0b4:	f000 fee8 	bl	800de88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0b8:	4b10      	ldr	r3, [pc, #64]	@ (800d0fc <prvCheckTasksWaitingTermination+0x50>)
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe f9b5 	bl	800b434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d100 <prvCheckTasksWaitingTermination+0x54>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	4a0b      	ldr	r2, [pc, #44]	@ (800d100 <prvCheckTasksWaitingTermination+0x54>)
 800d0d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d104 <prvCheckTasksWaitingTermination+0x58>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	4a0a      	ldr	r2, [pc, #40]	@ (800d104 <prvCheckTasksWaitingTermination+0x58>)
 800d0dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0de:	f000 ff05 	bl	800deec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f810 	bl	800d108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0e8:	4b06      	ldr	r3, [pc, #24]	@ (800d104 <prvCheckTasksWaitingTermination+0x58>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1e1      	bne.n	800d0b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20001c28 	.word	0x20001c28
 800d100:	20001c54 	.word	0x20001c54
 800d104:	20001c3c 	.word	0x20001c3c

0800d108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3354      	adds	r3, #84	@ 0x54
 800d114:	4618      	mov	r0, r3
 800d116:	f001 fbf9 	bl	800e90c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d120:	2b00      	cmp	r3, #0
 800d122:	d108      	bne.n	800d136 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d128:	4618      	mov	r0, r3
 800d12a:	f001 f89d 	bl	800e268 <vPortFree>
				vPortFree( pxTCB );
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f001 f89a 	bl	800e268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d134:	e019      	b.n	800d16a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d103      	bne.n	800d148 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f001 f891 	bl	800e268 <vPortFree>
	}
 800d146:	e010      	b.n	800d16a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d00b      	beq.n	800d16a <prvDeleteTCB+0x62>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	60fb      	str	r3, [r7, #12]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <prvDeleteTCB+0x5e>
	}
 800d16a:	bf00      	nop
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d17a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1ac <prvResetNextTaskUnblockTime+0x38>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d104      	bne.n	800d18e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d184:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800d186:	f04f 32ff 	mov.w	r2, #4294967295
 800d18a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d18c:	e008      	b.n	800d1a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d18e:	4b07      	ldr	r3, [pc, #28]	@ (800d1ac <prvResetNextTaskUnblockTime+0x38>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	4a04      	ldr	r2, [pc, #16]	@ (800d1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800d19e:	6013      	str	r3, [r2, #0]
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	20001c0c 	.word	0x20001c0c
 800d1b0:	20001c74 	.word	0x20001c74

0800d1b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d1e8 <xTaskGetSchedulerState+0x34>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d102      	bne.n	800d1c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	e008      	b.n	800d1da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1c8:	4b08      	ldr	r3, [pc, #32]	@ (800d1ec <xTaskGetSchedulerState+0x38>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d102      	bne.n	800d1d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1d0:	2302      	movs	r3, #2
 800d1d2:	607b      	str	r3, [r7, #4]
 800d1d4:	e001      	b.n	800d1da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1da:	687b      	ldr	r3, [r7, #4]
	}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	20001c60 	.word	0x20001c60
 800d1ec:	20001c7c 	.word	0x20001c7c

0800d1f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d051      	beq.n	800d2aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d20a:	4b2a      	ldr	r3, [pc, #168]	@ (800d2b4 <xTaskPriorityInherit+0xc4>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d210:	429a      	cmp	r2, r3
 800d212:	d241      	bcs.n	800d298 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	db06      	blt.n	800d22a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d21c:	4b25      	ldr	r3, [pc, #148]	@ (800d2b4 <xTaskPriorityInherit+0xc4>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d222:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	6959      	ldr	r1, [r3, #20]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d232:	4613      	mov	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	4413      	add	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4a1f      	ldr	r2, [pc, #124]	@ (800d2b8 <xTaskPriorityInherit+0xc8>)
 800d23c:	4413      	add	r3, r2
 800d23e:	4299      	cmp	r1, r3
 800d240:	d122      	bne.n	800d288 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	3304      	adds	r3, #4
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe f8f4 	bl	800b434 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d24c:	4b19      	ldr	r3, [pc, #100]	@ (800d2b4 <xTaskPriorityInherit+0xc4>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25a:	4b18      	ldr	r3, [pc, #96]	@ (800d2bc <xTaskPriorityInherit+0xcc>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d903      	bls.n	800d26a <xTaskPriorityInherit+0x7a>
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d266:	4a15      	ldr	r2, [pc, #84]	@ (800d2bc <xTaskPriorityInherit+0xcc>)
 800d268:	6013      	str	r3, [r2, #0]
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d26e:	4613      	mov	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4a10      	ldr	r2, [pc, #64]	@ (800d2b8 <xTaskPriorityInherit+0xc8>)
 800d278:	441a      	add	r2, r3
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4619      	mov	r1, r3
 800d280:	4610      	mov	r0, r2
 800d282:	f7fe f87a 	bl	800b37a <vListInsertEnd>
 800d286:	e004      	b.n	800d292 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d288:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b4 <xTaskPriorityInherit+0xc4>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d292:	2301      	movs	r3, #1
 800d294:	60fb      	str	r3, [r7, #12]
 800d296:	e008      	b.n	800d2aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d29c:	4b05      	ldr	r3, [pc, #20]	@ (800d2b4 <xTaskPriorityInherit+0xc4>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d201      	bcs.n	800d2aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
	}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	20001780 	.word	0x20001780
 800d2b8:	20001784 	.word	0x20001784
 800d2bc:	20001c5c 	.word	0x20001c5c

0800d2c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d058      	beq.n	800d388 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2d6:	4b2f      	ldr	r3, [pc, #188]	@ (800d394 <xTaskPriorityDisinherit+0xd4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d00b      	beq.n	800d2f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	60fb      	str	r3, [r7, #12]
}
 800d2f2:	bf00      	nop
 800d2f4:	bf00      	nop
 800d2f6:	e7fd      	b.n	800d2f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10b      	bne.n	800d318 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d304:	f383 8811 	msr	BASEPRI, r3
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	60bb      	str	r3, [r7, #8]
}
 800d312:	bf00      	nop
 800d314:	bf00      	nop
 800d316:	e7fd      	b.n	800d314 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d31c:	1e5a      	subs	r2, r3, #1
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d02c      	beq.n	800d388 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d332:	2b00      	cmp	r3, #0
 800d334:	d128      	bne.n	800d388 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	3304      	adds	r3, #4
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fe f87a 	bl	800b434 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d34c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d358:	4b0f      	ldr	r3, [pc, #60]	@ (800d398 <xTaskPriorityDisinherit+0xd8>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d903      	bls.n	800d368 <xTaskPriorityDisinherit+0xa8>
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d364:	4a0c      	ldr	r2, [pc, #48]	@ (800d398 <xTaskPriorityDisinherit+0xd8>)
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4a09      	ldr	r2, [pc, #36]	@ (800d39c <xTaskPriorityDisinherit+0xdc>)
 800d376:	441a      	add	r2, r3
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	3304      	adds	r3, #4
 800d37c:	4619      	mov	r1, r3
 800d37e:	4610      	mov	r0, r2
 800d380:	f7fd fffb 	bl	800b37a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d384:	2301      	movs	r3, #1
 800d386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d388:	697b      	ldr	r3, [r7, #20]
	}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3718      	adds	r7, #24
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	20001780 	.word	0x20001780
 800d398:	20001c5c 	.word	0x20001c5c
 800d39c:	20001784 	.word	0x20001784

0800d3a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d06c      	beq.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10b      	bne.n	800d3d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	60fb      	str	r3, [r7, #12]
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	e7fd      	b.n	800d3d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d902      	bls.n	800d3e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	61fb      	str	r3, [r7, #28]
 800d3e6:	e002      	b.n	800d3ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f2:	69fa      	ldr	r2, [r7, #28]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d04c      	beq.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3fc:	697a      	ldr	r2, [r7, #20]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d147      	bne.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d402:	4b26      	ldr	r3, [pc, #152]	@ (800d49c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	69ba      	ldr	r2, [r7, #24]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d10b      	bne.n	800d424 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	60bb      	str	r3, [r7, #8]
}
 800d41e:	bf00      	nop
 800d420:	bf00      	nop
 800d422:	e7fd      	b.n	800d420 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d428:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	69fa      	ldr	r2, [r7, #28]
 800d42e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	2b00      	cmp	r3, #0
 800d436:	db04      	blt.n	800d442 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	6959      	ldr	r1, [r3, #20]
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	4613      	mov	r3, r2
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	4413      	add	r3, r2
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4a13      	ldr	r2, [pc, #76]	@ (800d4a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d452:	4413      	add	r3, r2
 800d454:	4299      	cmp	r1, r3
 800d456:	d11c      	bne.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	3304      	adds	r3, #4
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fd ffe9 	bl	800b434 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d466:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d903      	bls.n	800d476 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d472:	4a0c      	ldr	r2, [pc, #48]	@ (800d4a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d47a:	4613      	mov	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4413      	add	r3, r2
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4a07      	ldr	r2, [pc, #28]	@ (800d4a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d484:	441a      	add	r2, r3
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	3304      	adds	r3, #4
 800d48a:	4619      	mov	r1, r3
 800d48c:	4610      	mov	r0, r2
 800d48e:	f7fd ff74 	bl	800b37a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d492:	bf00      	nop
 800d494:	3720      	adds	r7, #32
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20001780 	.word	0x20001780
 800d4a0:	20001784 	.word	0x20001784
 800d4a4:	20001c5c 	.word	0x20001c5c

0800d4a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d4a8:	b480      	push	{r7}
 800d4aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d4ac:	4b07      	ldr	r3, [pc, #28]	@ (800d4cc <pvTaskIncrementMutexHeldCount+0x24>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d004      	beq.n	800d4be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d4b4:	4b05      	ldr	r3, [pc, #20]	@ (800d4cc <pvTaskIncrementMutexHeldCount+0x24>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d4ba:	3201      	adds	r2, #1
 800d4bc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d4be:	4b03      	ldr	r3, [pc, #12]	@ (800d4cc <pvTaskIncrementMutexHeldCount+0x24>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
	}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	20001780 	.word	0x20001780

0800d4d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d4da:	4b21      	ldr	r3, [pc, #132]	@ (800d560 <prvAddCurrentTaskToDelayedList+0x90>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4e0:	4b20      	ldr	r3, [pc, #128]	@ (800d564 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fd ffa4 	bl	800b434 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d10a      	bne.n	800d50a <prvAddCurrentTaskToDelayedList+0x3a>
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d007      	beq.n	800d50a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4fa:	4b1a      	ldr	r3, [pc, #104]	@ (800d564 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3304      	adds	r3, #4
 800d500:	4619      	mov	r1, r3
 800d502:	4819      	ldr	r0, [pc, #100]	@ (800d568 <prvAddCurrentTaskToDelayedList+0x98>)
 800d504:	f7fd ff39 	bl	800b37a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d508:	e026      	b.n	800d558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4413      	add	r3, r2
 800d510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d512:	4b14      	ldr	r3, [pc, #80]	@ (800d564 <prvAddCurrentTaskToDelayedList+0x94>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d209      	bcs.n	800d536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d522:	4b12      	ldr	r3, [pc, #72]	@ (800d56c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	4b0f      	ldr	r3, [pc, #60]	@ (800d564 <prvAddCurrentTaskToDelayedList+0x94>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	3304      	adds	r3, #4
 800d52c:	4619      	mov	r1, r3
 800d52e:	4610      	mov	r0, r2
 800d530:	f7fd ff47 	bl	800b3c2 <vListInsert>
}
 800d534:	e010      	b.n	800d558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d536:	4b0e      	ldr	r3, [pc, #56]	@ (800d570 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	4b0a      	ldr	r3, [pc, #40]	@ (800d564 <prvAddCurrentTaskToDelayedList+0x94>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3304      	adds	r3, #4
 800d540:	4619      	mov	r1, r3
 800d542:	4610      	mov	r0, r2
 800d544:	f7fd ff3d 	bl	800b3c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d548:	4b0a      	ldr	r3, [pc, #40]	@ (800d574 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d202      	bcs.n	800d558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d552:	4a08      	ldr	r2, [pc, #32]	@ (800d574 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	6013      	str	r3, [r2, #0]
}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20001c58 	.word	0x20001c58
 800d564:	20001780 	.word	0x20001780
 800d568:	20001c40 	.word	0x20001c40
 800d56c:	20001c10 	.word	0x20001c10
 800d570:	20001c0c 	.word	0x20001c0c
 800d574:	20001c74 	.word	0x20001c74

0800d578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08a      	sub	sp, #40	@ 0x28
 800d57c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d582:	f000 fb13 	bl	800dbac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d586:	4b1d      	ldr	r3, [pc, #116]	@ (800d5fc <xTimerCreateTimerTask+0x84>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d021      	beq.n	800d5d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d58e:	2300      	movs	r3, #0
 800d590:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d592:	2300      	movs	r3, #0
 800d594:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d596:	1d3a      	adds	r2, r7, #4
 800d598:	f107 0108 	add.w	r1, r7, #8
 800d59c:	f107 030c 	add.w	r3, r7, #12
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fd fea3 	bl	800b2ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d5a6:	6879      	ldr	r1, [r7, #4]
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	9202      	str	r2, [sp, #8]
 800d5ae:	9301      	str	r3, [sp, #4]
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	9300      	str	r3, [sp, #0]
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	460a      	mov	r2, r1
 800d5b8:	4911      	ldr	r1, [pc, #68]	@ (800d600 <xTimerCreateTimerTask+0x88>)
 800d5ba:	4812      	ldr	r0, [pc, #72]	@ (800d604 <xTimerCreateTimerTask+0x8c>)
 800d5bc:	f7fe ff90 	bl	800c4e0 <xTaskCreateStatic>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	4a11      	ldr	r2, [pc, #68]	@ (800d608 <xTimerCreateTimerTask+0x90>)
 800d5c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d5c6:	4b10      	ldr	r3, [pc, #64]	@ (800d608 <xTimerCreateTimerTask+0x90>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10b      	bne.n	800d5f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	613b      	str	r3, [r7, #16]
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	e7fd      	b.n	800d5ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d5f0:	697b      	ldr	r3, [r7, #20]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3718      	adds	r7, #24
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20001cb0 	.word	0x20001cb0
 800d600:	0800f95c 	.word	0x0800f95c
 800d604:	0800d745 	.word	0x0800d745
 800d608:	20001cb4 	.word	0x20001cb4

0800d60c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b08a      	sub	sp, #40	@ 0x28
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d61a:	2300      	movs	r3, #0
 800d61c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10b      	bne.n	800d63c <xTimerGenericCommand+0x30>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	623b      	str	r3, [r7, #32]
}
 800d636:	bf00      	nop
 800d638:	bf00      	nop
 800d63a:	e7fd      	b.n	800d638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d63c:	4b19      	ldr	r3, [pc, #100]	@ (800d6a4 <xTimerGenericCommand+0x98>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d02a      	beq.n	800d69a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2b05      	cmp	r3, #5
 800d654:	dc18      	bgt.n	800d688 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d656:	f7ff fdad 	bl	800d1b4 <xTaskGetSchedulerState>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d109      	bne.n	800d674 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d660:	4b10      	ldr	r3, [pc, #64]	@ (800d6a4 <xTimerGenericCommand+0x98>)
 800d662:	6818      	ldr	r0, [r3, #0]
 800d664:	f107 0110 	add.w	r1, r7, #16
 800d668:	2300      	movs	r3, #0
 800d66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d66c:	f7fe f8c0 	bl	800b7f0 <xQueueGenericSend>
 800d670:	6278      	str	r0, [r7, #36]	@ 0x24
 800d672:	e012      	b.n	800d69a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d674:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a4 <xTimerGenericCommand+0x98>)
 800d676:	6818      	ldr	r0, [r3, #0]
 800d678:	f107 0110 	add.w	r1, r7, #16
 800d67c:	2300      	movs	r3, #0
 800d67e:	2200      	movs	r2, #0
 800d680:	f7fe f8b6 	bl	800b7f0 <xQueueGenericSend>
 800d684:	6278      	str	r0, [r7, #36]	@ 0x24
 800d686:	e008      	b.n	800d69a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d688:	4b06      	ldr	r3, [pc, #24]	@ (800d6a4 <xTimerGenericCommand+0x98>)
 800d68a:	6818      	ldr	r0, [r3, #0]
 800d68c:	f107 0110 	add.w	r1, r7, #16
 800d690:	2300      	movs	r3, #0
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	f7fe f9ae 	bl	800b9f4 <xQueueGenericSendFromISR>
 800d698:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3728      	adds	r7, #40	@ 0x28
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	20001cb0 	.word	0x20001cb0

0800d6a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af02      	add	r7, sp, #8
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b2:	4b23      	ldr	r3, [pc, #140]	@ (800d740 <prvProcessExpiredTimer+0x98>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	3304      	adds	r3, #4
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fd feb7 	bl	800b434 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6cc:	f003 0304 	and.w	r3, r3, #4
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d023      	beq.n	800d71c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	699a      	ldr	r2, [r3, #24]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	18d1      	adds	r1, r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	6978      	ldr	r0, [r7, #20]
 800d6e2:	f000 f8d5 	bl	800d890 <prvInsertTimerInActiveList>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d020      	beq.n	800d72e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	6978      	ldr	r0, [r7, #20]
 800d6f8:	f7ff ff88 	bl	800d60c <xTimerGenericCommand>
 800d6fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d114      	bne.n	800d72e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	60fb      	str	r3, [r7, #12]
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	e7fd      	b.n	800d718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d722:	f023 0301 	bic.w	r3, r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	6978      	ldr	r0, [r7, #20]
 800d734:	4798      	blx	r3
}
 800d736:	bf00      	nop
 800d738:	3718      	adds	r7, #24
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	20001ca8 	.word	0x20001ca8

0800d744 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d74c:	f107 0308 	add.w	r3, r7, #8
 800d750:	4618      	mov	r0, r3
 800d752:	f000 f859 	bl	800d808 <prvGetNextExpireTime>
 800d756:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	4619      	mov	r1, r3
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f000 f805 	bl	800d76c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d762:	f000 f8d7 	bl	800d914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d766:	bf00      	nop
 800d768:	e7f0      	b.n	800d74c <prvTimerTask+0x8>
	...

0800d76c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d776:	f7ff f917 	bl	800c9a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d77a:	f107 0308 	add.w	r3, r7, #8
 800d77e:	4618      	mov	r0, r3
 800d780:	f000 f866 	bl	800d850 <prvSampleTimeNow>
 800d784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d130      	bne.n	800d7ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10a      	bne.n	800d7a8 <prvProcessTimerOrBlockTask+0x3c>
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	429a      	cmp	r2, r3
 800d798:	d806      	bhi.n	800d7a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d79a:	f7ff f913 	bl	800c9c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d79e:	68f9      	ldr	r1, [r7, #12]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7ff ff81 	bl	800d6a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d7a6:	e024      	b.n	800d7f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d008      	beq.n	800d7c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d7ae:	4b13      	ldr	r3, [pc, #76]	@ (800d7fc <prvProcessTimerOrBlockTask+0x90>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <prvProcessTimerOrBlockTask+0x50>
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	e000      	b.n	800d7be <prvProcessTimerOrBlockTask+0x52>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d7c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d800 <prvProcessTimerOrBlockTask+0x94>)
 800d7c2:	6818      	ldr	r0, [r3, #0]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	683a      	ldr	r2, [r7, #0]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	f7fe fe53 	bl	800c478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d7d2:	f7ff f8f7 	bl	800c9c4 <xTaskResumeAll>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d10a      	bne.n	800d7f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d7dc:	4b09      	ldr	r3, [pc, #36]	@ (800d804 <prvProcessTimerOrBlockTask+0x98>)
 800d7de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7e2:	601a      	str	r2, [r3, #0]
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	f3bf 8f6f 	isb	sy
}
 800d7ec:	e001      	b.n	800d7f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d7ee:	f7ff f8e9 	bl	800c9c4 <xTaskResumeAll>
}
 800d7f2:	bf00      	nop
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20001cac 	.word	0x20001cac
 800d800:	20001cb0 	.word	0x20001cb0
 800d804:	e000ed04 	.word	0xe000ed04

0800d808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d810:	4b0e      	ldr	r3, [pc, #56]	@ (800d84c <prvGetNextExpireTime+0x44>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <prvGetNextExpireTime+0x16>
 800d81a:	2201      	movs	r2, #1
 800d81c:	e000      	b.n	800d820 <prvGetNextExpireTime+0x18>
 800d81e:	2200      	movs	r2, #0
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d105      	bne.n	800d838 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d82c:	4b07      	ldr	r3, [pc, #28]	@ (800d84c <prvGetNextExpireTime+0x44>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	e001      	b.n	800d83c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d838:	2300      	movs	r3, #0
 800d83a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d83c:	68fb      	ldr	r3, [r7, #12]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	20001ca8 	.word	0x20001ca8

0800d850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d858:	f7ff f952 	bl	800cb00 <xTaskGetTickCount>
 800d85c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d85e:	4b0b      	ldr	r3, [pc, #44]	@ (800d88c <prvSampleTimeNow+0x3c>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	429a      	cmp	r2, r3
 800d866:	d205      	bcs.n	800d874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d868:	f000 f93a 	bl	800dae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	e002      	b.n	800d87a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d87a:	4a04      	ldr	r2, [pc, #16]	@ (800d88c <prvSampleTimeNow+0x3c>)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d880:	68fb      	ldr	r3, [r7, #12]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20001cb8 	.word	0x20001cb8

0800d890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d812      	bhi.n	800d8dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	1ad2      	subs	r2, r2, r3
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d302      	bcc.n	800d8ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	617b      	str	r3, [r7, #20]
 800d8c8:	e01b      	b.n	800d902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d8ca:	4b10      	ldr	r3, [pc, #64]	@ (800d90c <prvInsertTimerInActiveList+0x7c>)
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	f7fd fd74 	bl	800b3c2 <vListInsert>
 800d8da:	e012      	b.n	800d902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d206      	bcs.n	800d8f2 <prvInsertTimerInActiveList+0x62>
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d302      	bcc.n	800d8f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	617b      	str	r3, [r7, #20]
 800d8f0:	e007      	b.n	800d902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8f2:	4b07      	ldr	r3, [pc, #28]	@ (800d910 <prvInsertTimerInActiveList+0x80>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	f7fd fd60 	bl	800b3c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d902:	697b      	ldr	r3, [r7, #20]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	20001cac 	.word	0x20001cac
 800d910:	20001ca8 	.word	0x20001ca8

0800d914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08e      	sub	sp, #56	@ 0x38
 800d918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d91a:	e0ce      	b.n	800daba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	da19      	bge.n	800d956 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d922:	1d3b      	adds	r3, r7, #4
 800d924:	3304      	adds	r3, #4
 800d926:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10b      	bne.n	800d946 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	61fb      	str	r3, [r7, #28]
}
 800d940:	bf00      	nop
 800d942:	bf00      	nop
 800d944:	e7fd      	b.n	800d942 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d94c:	6850      	ldr	r0, [r2, #4]
 800d94e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d950:	6892      	ldr	r2, [r2, #8]
 800d952:	4611      	mov	r1, r2
 800d954:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f2c0 80ae 	blt.w	800daba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d004      	beq.n	800d974 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96c:	3304      	adds	r3, #4
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fd fd60 	bl	800b434 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d974:	463b      	mov	r3, r7
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff ff6a 	bl	800d850 <prvSampleTimeNow>
 800d97c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2b09      	cmp	r3, #9
 800d982:	f200 8097 	bhi.w	800dab4 <prvProcessReceivedCommands+0x1a0>
 800d986:	a201      	add	r2, pc, #4	@ (adr r2, 800d98c <prvProcessReceivedCommands+0x78>)
 800d988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98c:	0800d9b5 	.word	0x0800d9b5
 800d990:	0800d9b5 	.word	0x0800d9b5
 800d994:	0800d9b5 	.word	0x0800d9b5
 800d998:	0800da2b 	.word	0x0800da2b
 800d99c:	0800da3f 	.word	0x0800da3f
 800d9a0:	0800da8b 	.word	0x0800da8b
 800d9a4:	0800d9b5 	.word	0x0800d9b5
 800d9a8:	0800d9b5 	.word	0x0800d9b5
 800d9ac:	0800da2b 	.word	0x0800da2b
 800d9b0:	0800da3f 	.word	0x0800da3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9ba:	f043 0301 	orr.w	r3, r3, #1
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ca:	699b      	ldr	r3, [r3, #24]
 800d9cc:	18d1      	adds	r1, r2, r3
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9d4:	f7ff ff5c 	bl	800d890 <prvInsertTimerInActiveList>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d06c      	beq.n	800dab8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e0:	6a1b      	ldr	r3, [r3, #32]
 800d9e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9ec:	f003 0304 	and.w	r3, r3, #4
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d061      	beq.n	800dab8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	441a      	add	r2, r3
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	2300      	movs	r3, #0
 800da02:	2100      	movs	r1, #0
 800da04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da06:	f7ff fe01 	bl	800d60c <xTimerGenericCommand>
 800da0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d152      	bne.n	800dab8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800da12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	61bb      	str	r3, [r7, #24]
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop
 800da28:	e7fd      	b.n	800da26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da30:	f023 0301 	bic.w	r3, r3, #1
 800da34:	b2da      	uxtb	r2, r3
 800da36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800da3c:	e03d      	b.n	800daba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da44:	f043 0301 	orr.w	r3, r3, #1
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da58:	699b      	ldr	r3, [r3, #24]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10b      	bne.n	800da76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800da5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	617b      	str	r3, [r7, #20]
}
 800da70:	bf00      	nop
 800da72:	bf00      	nop
 800da74:	e7fd      	b.n	800da72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800da76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da78:	699a      	ldr	r2, [r3, #24]
 800da7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7c:	18d1      	adds	r1, r2, r3
 800da7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da84:	f7ff ff04 	bl	800d890 <prvInsertTimerInActiveList>
					break;
 800da88:	e017      	b.n	800daba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800da8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da90:	f003 0302 	and.w	r3, r3, #2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d103      	bne.n	800daa0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800da98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da9a:	f000 fbe5 	bl	800e268 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da9e:	e00c      	b.n	800daba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800daa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800daa6:	f023 0301 	bic.w	r3, r3, #1
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dab2:	e002      	b.n	800daba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dab4:	bf00      	nop
 800dab6:	e000      	b.n	800daba <prvProcessReceivedCommands+0x1a6>
					break;
 800dab8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800daba:	4b08      	ldr	r3, [pc, #32]	@ (800dadc <prvProcessReceivedCommands+0x1c8>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	1d39      	adds	r1, r7, #4
 800dac0:	2200      	movs	r2, #0
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe f8c4 	bl	800bc50 <xQueueReceive>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f47f af26 	bne.w	800d91c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dad0:	bf00      	nop
 800dad2:	bf00      	nop
 800dad4:	3730      	adds	r7, #48	@ 0x30
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20001cb0 	.word	0x20001cb0

0800dae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dae6:	e049      	b.n	800db7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dae8:	4b2e      	ldr	r3, [pc, #184]	@ (800dba4 <prvSwitchTimerLists+0xc4>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daf2:	4b2c      	ldr	r3, [pc, #176]	@ (800dba4 <prvSwitchTimerLists+0xc4>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3304      	adds	r3, #4
 800db00:	4618      	mov	r0, r3
 800db02:	f7fd fc97 	bl	800b434 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d02f      	beq.n	800db7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	693a      	ldr	r2, [r7, #16]
 800db22:	4413      	add	r3, r2
 800db24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d90e      	bls.n	800db4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db3a:	4b1a      	ldr	r3, [pc, #104]	@ (800dba4 <prvSwitchTimerLists+0xc4>)
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	3304      	adds	r3, #4
 800db42:	4619      	mov	r1, r3
 800db44:	4610      	mov	r0, r2
 800db46:	f7fd fc3c 	bl	800b3c2 <vListInsert>
 800db4a:	e017      	b.n	800db7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db4c:	2300      	movs	r3, #0
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	2300      	movs	r3, #0
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	2100      	movs	r1, #0
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f7ff fd58 	bl	800d60c <xTimerGenericCommand>
 800db5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10b      	bne.n	800db7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	603b      	str	r3, [r7, #0]
}
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	e7fd      	b.n	800db78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db7c:	4b09      	ldr	r3, [pc, #36]	@ (800dba4 <prvSwitchTimerLists+0xc4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1b0      	bne.n	800dae8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800db86:	4b07      	ldr	r3, [pc, #28]	@ (800dba4 <prvSwitchTimerLists+0xc4>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800db8c:	4b06      	ldr	r3, [pc, #24]	@ (800dba8 <prvSwitchTimerLists+0xc8>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a04      	ldr	r2, [pc, #16]	@ (800dba4 <prvSwitchTimerLists+0xc4>)
 800db92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800db94:	4a04      	ldr	r2, [pc, #16]	@ (800dba8 <prvSwitchTimerLists+0xc8>)
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	6013      	str	r3, [r2, #0]
}
 800db9a:	bf00      	nop
 800db9c:	3718      	adds	r7, #24
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	20001ca8 	.word	0x20001ca8
 800dba8:	20001cac 	.word	0x20001cac

0800dbac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dbb2:	f000 f969 	bl	800de88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dbb6:	4b15      	ldr	r3, [pc, #84]	@ (800dc0c <prvCheckForValidListAndQueue+0x60>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d120      	bne.n	800dc00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dbbe:	4814      	ldr	r0, [pc, #80]	@ (800dc10 <prvCheckForValidListAndQueue+0x64>)
 800dbc0:	f7fd fbae 	bl	800b320 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dbc4:	4813      	ldr	r0, [pc, #76]	@ (800dc14 <prvCheckForValidListAndQueue+0x68>)
 800dbc6:	f7fd fbab 	bl	800b320 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dbca:	4b13      	ldr	r3, [pc, #76]	@ (800dc18 <prvCheckForValidListAndQueue+0x6c>)
 800dbcc:	4a10      	ldr	r2, [pc, #64]	@ (800dc10 <prvCheckForValidListAndQueue+0x64>)
 800dbce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dbd0:	4b12      	ldr	r3, [pc, #72]	@ (800dc1c <prvCheckForValidListAndQueue+0x70>)
 800dbd2:	4a10      	ldr	r2, [pc, #64]	@ (800dc14 <prvCheckForValidListAndQueue+0x68>)
 800dbd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	4b11      	ldr	r3, [pc, #68]	@ (800dc20 <prvCheckForValidListAndQueue+0x74>)
 800dbdc:	4a11      	ldr	r2, [pc, #68]	@ (800dc24 <prvCheckForValidListAndQueue+0x78>)
 800dbde:	2110      	movs	r1, #16
 800dbe0:	200a      	movs	r0, #10
 800dbe2:	f7fd fcbb 	bl	800b55c <xQueueGenericCreateStatic>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	4a08      	ldr	r2, [pc, #32]	@ (800dc0c <prvCheckForValidListAndQueue+0x60>)
 800dbea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dbec:	4b07      	ldr	r3, [pc, #28]	@ (800dc0c <prvCheckForValidListAndQueue+0x60>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d005      	beq.n	800dc00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dbf4:	4b05      	ldr	r3, [pc, #20]	@ (800dc0c <prvCheckForValidListAndQueue+0x60>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	490b      	ldr	r1, [pc, #44]	@ (800dc28 <prvCheckForValidListAndQueue+0x7c>)
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe fbe8 	bl	800c3d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc00:	f000 f974 	bl	800deec <vPortExitCritical>
}
 800dc04:	bf00      	nop
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	20001cb0 	.word	0x20001cb0
 800dc10:	20001c80 	.word	0x20001c80
 800dc14:	20001c94 	.word	0x20001c94
 800dc18:	20001ca8 	.word	0x20001ca8
 800dc1c:	20001cac 	.word	0x20001cac
 800dc20:	20001d5c 	.word	0x20001d5c
 800dc24:	20001cbc 	.word	0x20001cbc
 800dc28:	0800f964 	.word	0x0800f964

0800dc2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	3b04      	subs	r3, #4
 800dc3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dc44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3b04      	subs	r3, #4
 800dc4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	f023 0201 	bic.w	r2, r3, #1
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3b04      	subs	r3, #4
 800dc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc5c:	4a0c      	ldr	r2, [pc, #48]	@ (800dc90 <pxPortInitialiseStack+0x64>)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3b14      	subs	r3, #20
 800dc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3b04      	subs	r3, #4
 800dc72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f06f 0202 	mvn.w	r2, #2
 800dc7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	3b20      	subs	r3, #32
 800dc80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc82:	68fb      	ldr	r3, [r7, #12]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	0800dc95 	.word	0x0800dc95

0800dc94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc9e:	4b13      	ldr	r3, [pc, #76]	@ (800dcec <prvTaskExitError+0x58>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca6:	d00b      	beq.n	800dcc0 <prvTaskExitError+0x2c>
	__asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	60fb      	str	r3, [r7, #12]
}
 800dcba:	bf00      	nop
 800dcbc:	bf00      	nop
 800dcbe:	e7fd      	b.n	800dcbc <prvTaskExitError+0x28>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	60bb      	str	r3, [r7, #8]
}
 800dcd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcd4:	bf00      	nop
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d0fc      	beq.n	800dcd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcdc:	bf00      	nop
 800dcde:	bf00      	nop
 800dce0:	3714      	adds	r7, #20
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	20000014 	.word	0x20000014

0800dcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dcf0:	4b07      	ldr	r3, [pc, #28]	@ (800dd10 <pxCurrentTCBConst2>)
 800dcf2:	6819      	ldr	r1, [r3, #0]
 800dcf4:	6808      	ldr	r0, [r1, #0]
 800dcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfa:	f380 8809 	msr	PSP, r0
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f04f 0000 	mov.w	r0, #0
 800dd06:	f380 8811 	msr	BASEPRI, r0
 800dd0a:	4770      	bx	lr
 800dd0c:	f3af 8000 	nop.w

0800dd10 <pxCurrentTCBConst2>:
 800dd10:	20001780 	.word	0x20001780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop

0800dd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd18:	4808      	ldr	r0, [pc, #32]	@ (800dd3c <prvPortStartFirstTask+0x24>)
 800dd1a:	6800      	ldr	r0, [r0, #0]
 800dd1c:	6800      	ldr	r0, [r0, #0]
 800dd1e:	f380 8808 	msr	MSP, r0
 800dd22:	f04f 0000 	mov.w	r0, #0
 800dd26:	f380 8814 	msr	CONTROL, r0
 800dd2a:	b662      	cpsie	i
 800dd2c:	b661      	cpsie	f
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	df00      	svc	0
 800dd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd3a:	bf00      	nop
 800dd3c:	e000ed08 	.word	0xe000ed08

0800dd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd46:	4b47      	ldr	r3, [pc, #284]	@ (800de64 <xPortStartScheduler+0x124>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a47      	ldr	r2, [pc, #284]	@ (800de68 <xPortStartScheduler+0x128>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d10b      	bne.n	800dd68 <xPortStartScheduler+0x28>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	60fb      	str	r3, [r7, #12]
}
 800dd62:	bf00      	nop
 800dd64:	bf00      	nop
 800dd66:	e7fd      	b.n	800dd64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd68:	4b3e      	ldr	r3, [pc, #248]	@ (800de64 <xPortStartScheduler+0x124>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a3f      	ldr	r2, [pc, #252]	@ (800de6c <xPortStartScheduler+0x12c>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d10b      	bne.n	800dd8a <xPortStartScheduler+0x4a>
	__asm volatile
 800dd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	613b      	str	r3, [r7, #16]
}
 800dd84:	bf00      	nop
 800dd86:	bf00      	nop
 800dd88:	e7fd      	b.n	800dd86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd8a:	4b39      	ldr	r3, [pc, #228]	@ (800de70 <xPortStartScheduler+0x130>)
 800dd8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	22ff      	movs	r2, #255	@ 0xff
 800dd9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dda4:	78fb      	ldrb	r3, [r7, #3]
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	4b31      	ldr	r3, [pc, #196]	@ (800de74 <xPortStartScheduler+0x134>)
 800ddb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddb2:	4b31      	ldr	r3, [pc, #196]	@ (800de78 <xPortStartScheduler+0x138>)
 800ddb4:	2207      	movs	r2, #7
 800ddb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddb8:	e009      	b.n	800ddce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ddba:	4b2f      	ldr	r3, [pc, #188]	@ (800de78 <xPortStartScheduler+0x138>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	4a2d      	ldr	r2, [pc, #180]	@ (800de78 <xPortStartScheduler+0x138>)
 800ddc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ddc4:	78fb      	ldrb	r3, [r7, #3]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddd6:	2b80      	cmp	r3, #128	@ 0x80
 800ddd8:	d0ef      	beq.n	800ddba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddda:	4b27      	ldr	r3, [pc, #156]	@ (800de78 <xPortStartScheduler+0x138>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f1c3 0307 	rsb	r3, r3, #7
 800dde2:	2b04      	cmp	r3, #4
 800dde4:	d00b      	beq.n	800ddfe <xPortStartScheduler+0xbe>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	60bb      	str	r3, [r7, #8]
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	e7fd      	b.n	800ddfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ddfe:	4b1e      	ldr	r3, [pc, #120]	@ (800de78 <xPortStartScheduler+0x138>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	021b      	lsls	r3, r3, #8
 800de04:	4a1c      	ldr	r2, [pc, #112]	@ (800de78 <xPortStartScheduler+0x138>)
 800de06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de08:	4b1b      	ldr	r3, [pc, #108]	@ (800de78 <xPortStartScheduler+0x138>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800de10:	4a19      	ldr	r2, [pc, #100]	@ (800de78 <xPortStartScheduler+0x138>)
 800de12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	b2da      	uxtb	r2, r3
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de1c:	4b17      	ldr	r3, [pc, #92]	@ (800de7c <xPortStartScheduler+0x13c>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a16      	ldr	r2, [pc, #88]	@ (800de7c <xPortStartScheduler+0x13c>)
 800de22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800de26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de28:	4b14      	ldr	r3, [pc, #80]	@ (800de7c <xPortStartScheduler+0x13c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a13      	ldr	r2, [pc, #76]	@ (800de7c <xPortStartScheduler+0x13c>)
 800de2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800de32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de34:	f000 f8da 	bl	800dfec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de38:	4b11      	ldr	r3, [pc, #68]	@ (800de80 <xPortStartScheduler+0x140>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de3e:	f000 f8f9 	bl	800e034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de42:	4b10      	ldr	r3, [pc, #64]	@ (800de84 <xPortStartScheduler+0x144>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a0f      	ldr	r2, [pc, #60]	@ (800de84 <xPortStartScheduler+0x144>)
 800de48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800de4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de4e:	f7ff ff63 	bl	800dd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de52:	f7fe ff31 	bl	800ccb8 <vTaskSwitchContext>
	prvTaskExitError();
 800de56:	f7ff ff1d 	bl	800dc94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	e000ed00 	.word	0xe000ed00
 800de68:	410fc271 	.word	0x410fc271
 800de6c:	410fc270 	.word	0x410fc270
 800de70:	e000e400 	.word	0xe000e400
 800de74:	20001dac 	.word	0x20001dac
 800de78:	20001db0 	.word	0x20001db0
 800de7c:	e000ed20 	.word	0xe000ed20
 800de80:	20000014 	.word	0x20000014
 800de84:	e000ef34 	.word	0xe000ef34

0800de88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
	__asm volatile
 800de8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de92:	f383 8811 	msr	BASEPRI, r3
 800de96:	f3bf 8f6f 	isb	sy
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	607b      	str	r3, [r7, #4]
}
 800dea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dea2:	4b10      	ldr	r3, [pc, #64]	@ (800dee4 <vPortEnterCritical+0x5c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3301      	adds	r3, #1
 800dea8:	4a0e      	ldr	r2, [pc, #56]	@ (800dee4 <vPortEnterCritical+0x5c>)
 800deaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800deac:	4b0d      	ldr	r3, [pc, #52]	@ (800dee4 <vPortEnterCritical+0x5c>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d110      	bne.n	800ded6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800deb4:	4b0c      	ldr	r3, [pc, #48]	@ (800dee8 <vPortEnterCritical+0x60>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00b      	beq.n	800ded6 <vPortEnterCritical+0x4e>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	603b      	str	r3, [r7, #0]
}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	e7fd      	b.n	800ded2 <vPortEnterCritical+0x4a>
	}
}
 800ded6:	bf00      	nop
 800ded8:	370c      	adds	r7, #12
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	20000014 	.word	0x20000014
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800def2:	4b12      	ldr	r3, [pc, #72]	@ (800df3c <vPortExitCritical+0x50>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10b      	bne.n	800df12 <vPortExitCritical+0x26>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	607b      	str	r3, [r7, #4]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df12:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <vPortExitCritical+0x50>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3b01      	subs	r3, #1
 800df18:	4a08      	ldr	r2, [pc, #32]	@ (800df3c <vPortExitCritical+0x50>)
 800df1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df1c:	4b07      	ldr	r3, [pc, #28]	@ (800df3c <vPortExitCritical+0x50>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d105      	bne.n	800df30 <vPortExitCritical+0x44>
 800df24:	2300      	movs	r3, #0
 800df26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	f383 8811 	msr	BASEPRI, r3
}
 800df2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	20000014 	.word	0x20000014

0800df40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df40:	f3ef 8009 	mrs	r0, PSP
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	4b15      	ldr	r3, [pc, #84]	@ (800dfa0 <pxCurrentTCBConst>)
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	f01e 0f10 	tst.w	lr, #16
 800df50:	bf08      	it	eq
 800df52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5a:	6010      	str	r0, [r2, #0]
 800df5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800df64:	f380 8811 	msr	BASEPRI, r0
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f7fe fea2 	bl	800ccb8 <vTaskSwitchContext>
 800df74:	f04f 0000 	mov.w	r0, #0
 800df78:	f380 8811 	msr	BASEPRI, r0
 800df7c:	bc09      	pop	{r0, r3}
 800df7e:	6819      	ldr	r1, [r3, #0]
 800df80:	6808      	ldr	r0, [r1, #0]
 800df82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df86:	f01e 0f10 	tst.w	lr, #16
 800df8a:	bf08      	it	eq
 800df8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df90:	f380 8809 	msr	PSP, r0
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	f3af 8000 	nop.w

0800dfa0 <pxCurrentTCBConst>:
 800dfa0:	20001780 	.word	0x20001780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop

0800dfa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
	__asm volatile
 800dfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb2:	f383 8811 	msr	BASEPRI, r3
 800dfb6:	f3bf 8f6f 	isb	sy
 800dfba:	f3bf 8f4f 	dsb	sy
 800dfbe:	607b      	str	r3, [r7, #4]
}
 800dfc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfc2:	f7fe fdbf 	bl	800cb44 <xTaskIncrementTick>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d003      	beq.n	800dfd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfcc:	4b06      	ldr	r3, [pc, #24]	@ (800dfe8 <xPortSysTickHandler+0x40>)
 800dfce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfd2:	601a      	str	r2, [r3, #0]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	f383 8811 	msr	BASEPRI, r3
}
 800dfde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	e000ed04 	.word	0xe000ed04

0800dfec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dfec:	b480      	push	{r7}
 800dfee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dff0:	4b0b      	ldr	r3, [pc, #44]	@ (800e020 <vPortSetupTimerInterrupt+0x34>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dff6:	4b0b      	ldr	r3, [pc, #44]	@ (800e024 <vPortSetupTimerInterrupt+0x38>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dffc:	4b0a      	ldr	r3, [pc, #40]	@ (800e028 <vPortSetupTimerInterrupt+0x3c>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a0a      	ldr	r2, [pc, #40]	@ (800e02c <vPortSetupTimerInterrupt+0x40>)
 800e002:	fba2 2303 	umull	r2, r3, r2, r3
 800e006:	099b      	lsrs	r3, r3, #6
 800e008:	4a09      	ldr	r2, [pc, #36]	@ (800e030 <vPortSetupTimerInterrupt+0x44>)
 800e00a:	3b01      	subs	r3, #1
 800e00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e00e:	4b04      	ldr	r3, [pc, #16]	@ (800e020 <vPortSetupTimerInterrupt+0x34>)
 800e010:	2207      	movs	r2, #7
 800e012:	601a      	str	r2, [r3, #0]
}
 800e014:	bf00      	nop
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	e000e010 	.word	0xe000e010
 800e024:	e000e018 	.word	0xe000e018
 800e028:	20000000 	.word	0x20000000
 800e02c:	10624dd3 	.word	0x10624dd3
 800e030:	e000e014 	.word	0xe000e014

0800e034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e044 <vPortEnableVFP+0x10>
 800e038:	6801      	ldr	r1, [r0, #0]
 800e03a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e03e:	6001      	str	r1, [r0, #0]
 800e040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e042:	bf00      	nop
 800e044:	e000ed88 	.word	0xe000ed88

0800e048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e04e:	f3ef 8305 	mrs	r3, IPSR
 800e052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b0f      	cmp	r3, #15
 800e058:	d915      	bls.n	800e086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e05a:	4a18      	ldr	r2, [pc, #96]	@ (800e0bc <vPortValidateInterruptPriority+0x74>)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	4413      	add	r3, r2
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e064:	4b16      	ldr	r3, [pc, #88]	@ (800e0c0 <vPortValidateInterruptPriority+0x78>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	7afa      	ldrb	r2, [r7, #11]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d20b      	bcs.n	800e086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e072:	f383 8811 	msr	BASEPRI, r3
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	607b      	str	r3, [r7, #4]
}
 800e080:	bf00      	nop
 800e082:	bf00      	nop
 800e084:	e7fd      	b.n	800e082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e086:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c4 <vPortValidateInterruptPriority+0x7c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e08e:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c8 <vPortValidateInterruptPriority+0x80>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	d90b      	bls.n	800e0ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	603b      	str	r3, [r7, #0]
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	e7fd      	b.n	800e0aa <vPortValidateInterruptPriority+0x62>
	}
 800e0ae:	bf00      	nop
 800e0b0:	3714      	adds	r7, #20
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop
 800e0bc:	e000e3f0 	.word	0xe000e3f0
 800e0c0:	20001dac 	.word	0x20001dac
 800e0c4:	e000ed0c 	.word	0xe000ed0c
 800e0c8:	20001db0 	.word	0x20001db0

0800e0cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b08a      	sub	sp, #40	@ 0x28
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0d8:	f7fe fc66 	bl	800c9a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0dc:	4b5c      	ldr	r3, [pc, #368]	@ (800e250 <pvPortMalloc+0x184>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d101      	bne.n	800e0e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e0e4:	f000 f924 	bl	800e330 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e0e8:	4b5a      	ldr	r3, [pc, #360]	@ (800e254 <pvPortMalloc+0x188>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4013      	ands	r3, r2
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f040 8095 	bne.w	800e220 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d01e      	beq.n	800e13a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e0fc:	2208      	movs	r2, #8
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4413      	add	r3, r2
 800e102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f003 0307 	and.w	r3, r3, #7
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d015      	beq.n	800e13a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f023 0307 	bic.w	r3, r3, #7
 800e114:	3308      	adds	r3, #8
 800e116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f003 0307 	and.w	r3, r3, #7
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00b      	beq.n	800e13a <pvPortMalloc+0x6e>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	617b      	str	r3, [r7, #20]
}
 800e134:	bf00      	nop
 800e136:	bf00      	nop
 800e138:	e7fd      	b.n	800e136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d06f      	beq.n	800e220 <pvPortMalloc+0x154>
 800e140:	4b45      	ldr	r3, [pc, #276]	@ (800e258 <pvPortMalloc+0x18c>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	429a      	cmp	r2, r3
 800e148:	d86a      	bhi.n	800e220 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e14a:	4b44      	ldr	r3, [pc, #272]	@ (800e25c <pvPortMalloc+0x190>)
 800e14c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e14e:	4b43      	ldr	r3, [pc, #268]	@ (800e25c <pvPortMalloc+0x190>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e154:	e004      	b.n	800e160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	429a      	cmp	r2, r3
 800e168:	d903      	bls.n	800e172 <pvPortMalloc+0xa6>
 800e16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1f1      	bne.n	800e156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e172:	4b37      	ldr	r3, [pc, #220]	@ (800e250 <pvPortMalloc+0x184>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e178:	429a      	cmp	r2, r3
 800e17a:	d051      	beq.n	800e220 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2208      	movs	r2, #8
 800e182:	4413      	add	r3, r2
 800e184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	6a3b      	ldr	r3, [r7, #32]
 800e18c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	1ad2      	subs	r2, r2, r3
 800e196:	2308      	movs	r3, #8
 800e198:	005b      	lsls	r3, r3, #1
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d920      	bls.n	800e1e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e19e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	f003 0307 	and.w	r3, r3, #7
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00b      	beq.n	800e1c8 <pvPortMalloc+0xfc>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	613b      	str	r3, [r7, #16]
}
 800e1c2:	bf00      	nop
 800e1c4:	bf00      	nop
 800e1c6:	e7fd      	b.n	800e1c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	1ad2      	subs	r2, r2, r3
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1da:	69b8      	ldr	r0, [r7, #24]
 800e1dc:	f000 f90a 	bl	800e3f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e258 <pvPortMalloc+0x18c>)
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e258 <pvPortMalloc+0x18c>)
 800e1ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e1ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e258 <pvPortMalloc+0x18c>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800e260 <pvPortMalloc+0x194>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d203      	bcs.n	800e202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e1fa:	4b17      	ldr	r3, [pc, #92]	@ (800e258 <pvPortMalloc+0x18c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a18      	ldr	r2, [pc, #96]	@ (800e260 <pvPortMalloc+0x194>)
 800e200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e204:	685a      	ldr	r2, [r3, #4]
 800e206:	4b13      	ldr	r3, [pc, #76]	@ (800e254 <pvPortMalloc+0x188>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	431a      	orrs	r2, r3
 800e20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e216:	4b13      	ldr	r3, [pc, #76]	@ (800e264 <pvPortMalloc+0x198>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	3301      	adds	r3, #1
 800e21c:	4a11      	ldr	r2, [pc, #68]	@ (800e264 <pvPortMalloc+0x198>)
 800e21e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e220:	f7fe fbd0 	bl	800c9c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	f003 0307 	and.w	r3, r3, #7
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00b      	beq.n	800e246 <pvPortMalloc+0x17a>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	60fb      	str	r3, [r7, #12]
}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	e7fd      	b.n	800e242 <pvPortMalloc+0x176>
	return pvReturn;
 800e246:	69fb      	ldr	r3, [r7, #28]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3728      	adds	r7, #40	@ 0x28
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	200059bc 	.word	0x200059bc
 800e254:	200059d0 	.word	0x200059d0
 800e258:	200059c0 	.word	0x200059c0
 800e25c:	200059b4 	.word	0x200059b4
 800e260:	200059c4 	.word	0x200059c4
 800e264:	200059c8 	.word	0x200059c8

0800e268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d04f      	beq.n	800e31a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e27a:	2308      	movs	r3, #8
 800e27c:	425b      	negs	r3, r3
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	4413      	add	r3, r2
 800e282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	685a      	ldr	r2, [r3, #4]
 800e28c:	4b25      	ldr	r3, [pc, #148]	@ (800e324 <vPortFree+0xbc>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4013      	ands	r3, r2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10b      	bne.n	800e2ae <vPortFree+0x46>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	60fb      	str	r3, [r7, #12]
}
 800e2a8:	bf00      	nop
 800e2aa:	bf00      	nop
 800e2ac:	e7fd      	b.n	800e2aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00b      	beq.n	800e2ce <vPortFree+0x66>
	__asm volatile
 800e2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	60bb      	str	r3, [r7, #8]
}
 800e2c8:	bf00      	nop
 800e2ca:	bf00      	nop
 800e2cc:	e7fd      	b.n	800e2ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	4b14      	ldr	r3, [pc, #80]	@ (800e324 <vPortFree+0xbc>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4013      	ands	r3, r2
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d01e      	beq.n	800e31a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d11a      	bne.n	800e31a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e324 <vPortFree+0xbc>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	43db      	mvns	r3, r3
 800e2ee:	401a      	ands	r2, r3
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e2f4:	f7fe fb58 	bl	800c9a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e328 <vPortFree+0xc0>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4413      	add	r3, r2
 800e302:	4a09      	ldr	r2, [pc, #36]	@ (800e328 <vPortFree+0xc0>)
 800e304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e306:	6938      	ldr	r0, [r7, #16]
 800e308:	f000 f874 	bl	800e3f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e30c:	4b07      	ldr	r3, [pc, #28]	@ (800e32c <vPortFree+0xc4>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3301      	adds	r3, #1
 800e312:	4a06      	ldr	r2, [pc, #24]	@ (800e32c <vPortFree+0xc4>)
 800e314:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e316:	f7fe fb55 	bl	800c9c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e31a:	bf00      	nop
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	200059d0 	.word	0x200059d0
 800e328:	200059c0 	.word	0x200059c0
 800e32c:	200059cc 	.word	0x200059cc

0800e330 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e336:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e33a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e33c:	4b27      	ldr	r3, [pc, #156]	@ (800e3dc <prvHeapInit+0xac>)
 800e33e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f003 0307 	and.w	r3, r3, #7
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00c      	beq.n	800e364 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	3307      	adds	r3, #7
 800e34e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f023 0307 	bic.w	r3, r3, #7
 800e356:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	4a1f      	ldr	r2, [pc, #124]	@ (800e3dc <prvHeapInit+0xac>)
 800e360:	4413      	add	r3, r2
 800e362:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e368:	4a1d      	ldr	r2, [pc, #116]	@ (800e3e0 <prvHeapInit+0xb0>)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e36e:	4b1c      	ldr	r3, [pc, #112]	@ (800e3e0 <prvHeapInit+0xb0>)
 800e370:	2200      	movs	r2, #0
 800e372:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	4413      	add	r3, r2
 800e37a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e37c:	2208      	movs	r2, #8
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	1a9b      	subs	r3, r3, r2
 800e382:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f023 0307 	bic.w	r3, r3, #7
 800e38a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	4a15      	ldr	r2, [pc, #84]	@ (800e3e4 <prvHeapInit+0xb4>)
 800e390:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e392:	4b14      	ldr	r3, [pc, #80]	@ (800e3e4 <prvHeapInit+0xb4>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2200      	movs	r2, #0
 800e398:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e39a:	4b12      	ldr	r3, [pc, #72]	@ (800e3e4 <prvHeapInit+0xb4>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	1ad2      	subs	r2, r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e3e4 <prvHeapInit+0xb4>)
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e3e8 <prvHeapInit+0xb8>)
 800e3be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	4a09      	ldr	r2, [pc, #36]	@ (800e3ec <prvHeapInit+0xbc>)
 800e3c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3c8:	4b09      	ldr	r3, [pc, #36]	@ (800e3f0 <prvHeapInit+0xc0>)
 800e3ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e3ce:	601a      	str	r2, [r3, #0]
}
 800e3d0:	bf00      	nop
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr
 800e3dc:	20001db4 	.word	0x20001db4
 800e3e0:	200059b4 	.word	0x200059b4
 800e3e4:	200059bc 	.word	0x200059bc
 800e3e8:	200059c4 	.word	0x200059c4
 800e3ec:	200059c0 	.word	0x200059c0
 800e3f0:	200059d0 	.word	0x200059d0

0800e3f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3fc:	4b28      	ldr	r3, [pc, #160]	@ (800e4a0 <prvInsertBlockIntoFreeList+0xac>)
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	e002      	b.n	800e408 <prvInsertBlockIntoFreeList+0x14>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d8f7      	bhi.n	800e402 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	4413      	add	r3, r2
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	429a      	cmp	r2, r3
 800e422:	d108      	bne.n	800e436 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	441a      	add	r2, r3
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	441a      	add	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	429a      	cmp	r2, r3
 800e448:	d118      	bne.n	800e47c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	4b15      	ldr	r3, [pc, #84]	@ (800e4a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	429a      	cmp	r2, r3
 800e454:	d00d      	beq.n	800e472 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685a      	ldr	r2, [r3, #4]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	441a      	add	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	601a      	str	r2, [r3, #0]
 800e470:	e008      	b.n	800e484 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e472:	4b0c      	ldr	r3, [pc, #48]	@ (800e4a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	601a      	str	r2, [r3, #0]
 800e47a:	e003      	b.n	800e484 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d002      	beq.n	800e492 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e492:	bf00      	nop
 800e494:	3714      	adds	r7, #20
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	200059b4 	.word	0x200059b4
 800e4a4:	200059bc 	.word	0x200059bc

0800e4a8 <std>:
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	b510      	push	{r4, lr}
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e4b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4b6:	6083      	str	r3, [r0, #8]
 800e4b8:	8181      	strh	r1, [r0, #12]
 800e4ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800e4bc:	81c2      	strh	r2, [r0, #14]
 800e4be:	6183      	str	r3, [r0, #24]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	2208      	movs	r2, #8
 800e4c4:	305c      	adds	r0, #92	@ 0x5c
 800e4c6:	f000 fa09 	bl	800e8dc <memset>
 800e4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e500 <std+0x58>)
 800e4cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e504 <std+0x5c>)
 800e4d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <std+0x60>)
 800e4d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e50c <std+0x64>)
 800e4d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e4da:	4b0d      	ldr	r3, [pc, #52]	@ (800e510 <std+0x68>)
 800e4dc:	6224      	str	r4, [r4, #32]
 800e4de:	429c      	cmp	r4, r3
 800e4e0:	d006      	beq.n	800e4f0 <std+0x48>
 800e4e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e4e6:	4294      	cmp	r4, r2
 800e4e8:	d002      	beq.n	800e4f0 <std+0x48>
 800e4ea:	33d0      	adds	r3, #208	@ 0xd0
 800e4ec:	429c      	cmp	r4, r3
 800e4ee:	d105      	bne.n	800e4fc <std+0x54>
 800e4f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4f8:	f000 bac6 	b.w	800ea88 <__retarget_lock_init_recursive>
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	bf00      	nop
 800e500:	0800e70d 	.word	0x0800e70d
 800e504:	0800e72f 	.word	0x0800e72f
 800e508:	0800e767 	.word	0x0800e767
 800e50c:	0800e78b 	.word	0x0800e78b
 800e510:	200059d4 	.word	0x200059d4

0800e514 <stdio_exit_handler>:
 800e514:	4a02      	ldr	r2, [pc, #8]	@ (800e520 <stdio_exit_handler+0xc>)
 800e516:	4903      	ldr	r1, [pc, #12]	@ (800e524 <stdio_exit_handler+0x10>)
 800e518:	4803      	ldr	r0, [pc, #12]	@ (800e528 <stdio_exit_handler+0x14>)
 800e51a:	f000 b869 	b.w	800e5f0 <_fwalk_sglue>
 800e51e:	bf00      	nop
 800e520:	20000018 	.word	0x20000018
 800e524:	0800f341 	.word	0x0800f341
 800e528:	20000028 	.word	0x20000028

0800e52c <cleanup_stdio>:
 800e52c:	6841      	ldr	r1, [r0, #4]
 800e52e:	4b0c      	ldr	r3, [pc, #48]	@ (800e560 <cleanup_stdio+0x34>)
 800e530:	4299      	cmp	r1, r3
 800e532:	b510      	push	{r4, lr}
 800e534:	4604      	mov	r4, r0
 800e536:	d001      	beq.n	800e53c <cleanup_stdio+0x10>
 800e538:	f000 ff02 	bl	800f340 <_fflush_r>
 800e53c:	68a1      	ldr	r1, [r4, #8]
 800e53e:	4b09      	ldr	r3, [pc, #36]	@ (800e564 <cleanup_stdio+0x38>)
 800e540:	4299      	cmp	r1, r3
 800e542:	d002      	beq.n	800e54a <cleanup_stdio+0x1e>
 800e544:	4620      	mov	r0, r4
 800e546:	f000 fefb 	bl	800f340 <_fflush_r>
 800e54a:	68e1      	ldr	r1, [r4, #12]
 800e54c:	4b06      	ldr	r3, [pc, #24]	@ (800e568 <cleanup_stdio+0x3c>)
 800e54e:	4299      	cmp	r1, r3
 800e550:	d004      	beq.n	800e55c <cleanup_stdio+0x30>
 800e552:	4620      	mov	r0, r4
 800e554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e558:	f000 bef2 	b.w	800f340 <_fflush_r>
 800e55c:	bd10      	pop	{r4, pc}
 800e55e:	bf00      	nop
 800e560:	200059d4 	.word	0x200059d4
 800e564:	20005a3c 	.word	0x20005a3c
 800e568:	20005aa4 	.word	0x20005aa4

0800e56c <global_stdio_init.part.0>:
 800e56c:	b510      	push	{r4, lr}
 800e56e:	4b0b      	ldr	r3, [pc, #44]	@ (800e59c <global_stdio_init.part.0+0x30>)
 800e570:	4c0b      	ldr	r4, [pc, #44]	@ (800e5a0 <global_stdio_init.part.0+0x34>)
 800e572:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a4 <global_stdio_init.part.0+0x38>)
 800e574:	601a      	str	r2, [r3, #0]
 800e576:	4620      	mov	r0, r4
 800e578:	2200      	movs	r2, #0
 800e57a:	2104      	movs	r1, #4
 800e57c:	f7ff ff94 	bl	800e4a8 <std>
 800e580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e584:	2201      	movs	r2, #1
 800e586:	2109      	movs	r1, #9
 800e588:	f7ff ff8e 	bl	800e4a8 <std>
 800e58c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e590:	2202      	movs	r2, #2
 800e592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e596:	2112      	movs	r1, #18
 800e598:	f7ff bf86 	b.w	800e4a8 <std>
 800e59c:	20005b0c 	.word	0x20005b0c
 800e5a0:	200059d4 	.word	0x200059d4
 800e5a4:	0800e515 	.word	0x0800e515

0800e5a8 <__sfp_lock_acquire>:
 800e5a8:	4801      	ldr	r0, [pc, #4]	@ (800e5b0 <__sfp_lock_acquire+0x8>)
 800e5aa:	f000 ba6e 	b.w	800ea8a <__retarget_lock_acquire_recursive>
 800e5ae:	bf00      	nop
 800e5b0:	20005b15 	.word	0x20005b15

0800e5b4 <__sfp_lock_release>:
 800e5b4:	4801      	ldr	r0, [pc, #4]	@ (800e5bc <__sfp_lock_release+0x8>)
 800e5b6:	f000 ba69 	b.w	800ea8c <__retarget_lock_release_recursive>
 800e5ba:	bf00      	nop
 800e5bc:	20005b15 	.word	0x20005b15

0800e5c0 <__sinit>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	f7ff fff0 	bl	800e5a8 <__sfp_lock_acquire>
 800e5c8:	6a23      	ldr	r3, [r4, #32]
 800e5ca:	b11b      	cbz	r3, 800e5d4 <__sinit+0x14>
 800e5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5d0:	f7ff bff0 	b.w	800e5b4 <__sfp_lock_release>
 800e5d4:	4b04      	ldr	r3, [pc, #16]	@ (800e5e8 <__sinit+0x28>)
 800e5d6:	6223      	str	r3, [r4, #32]
 800e5d8:	4b04      	ldr	r3, [pc, #16]	@ (800e5ec <__sinit+0x2c>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1f5      	bne.n	800e5cc <__sinit+0xc>
 800e5e0:	f7ff ffc4 	bl	800e56c <global_stdio_init.part.0>
 800e5e4:	e7f2      	b.n	800e5cc <__sinit+0xc>
 800e5e6:	bf00      	nop
 800e5e8:	0800e52d 	.word	0x0800e52d
 800e5ec:	20005b0c 	.word	0x20005b0c

0800e5f0 <_fwalk_sglue>:
 800e5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f4:	4607      	mov	r7, r0
 800e5f6:	4688      	mov	r8, r1
 800e5f8:	4614      	mov	r4, r2
 800e5fa:	2600      	movs	r6, #0
 800e5fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e600:	f1b9 0901 	subs.w	r9, r9, #1
 800e604:	d505      	bpl.n	800e612 <_fwalk_sglue+0x22>
 800e606:	6824      	ldr	r4, [r4, #0]
 800e608:	2c00      	cmp	r4, #0
 800e60a:	d1f7      	bne.n	800e5fc <_fwalk_sglue+0xc>
 800e60c:	4630      	mov	r0, r6
 800e60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e612:	89ab      	ldrh	r3, [r5, #12]
 800e614:	2b01      	cmp	r3, #1
 800e616:	d907      	bls.n	800e628 <_fwalk_sglue+0x38>
 800e618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e61c:	3301      	adds	r3, #1
 800e61e:	d003      	beq.n	800e628 <_fwalk_sglue+0x38>
 800e620:	4629      	mov	r1, r5
 800e622:	4638      	mov	r0, r7
 800e624:	47c0      	blx	r8
 800e626:	4306      	orrs	r6, r0
 800e628:	3568      	adds	r5, #104	@ 0x68
 800e62a:	e7e9      	b.n	800e600 <_fwalk_sglue+0x10>

0800e62c <iprintf>:
 800e62c:	b40f      	push	{r0, r1, r2, r3}
 800e62e:	b507      	push	{r0, r1, r2, lr}
 800e630:	4906      	ldr	r1, [pc, #24]	@ (800e64c <iprintf+0x20>)
 800e632:	ab04      	add	r3, sp, #16
 800e634:	6808      	ldr	r0, [r1, #0]
 800e636:	f853 2b04 	ldr.w	r2, [r3], #4
 800e63a:	6881      	ldr	r1, [r0, #8]
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	f000 fb57 	bl	800ecf0 <_vfiprintf_r>
 800e642:	b003      	add	sp, #12
 800e644:	f85d eb04 	ldr.w	lr, [sp], #4
 800e648:	b004      	add	sp, #16
 800e64a:	4770      	bx	lr
 800e64c:	20000024 	.word	0x20000024

0800e650 <_puts_r>:
 800e650:	6a03      	ldr	r3, [r0, #32]
 800e652:	b570      	push	{r4, r5, r6, lr}
 800e654:	6884      	ldr	r4, [r0, #8]
 800e656:	4605      	mov	r5, r0
 800e658:	460e      	mov	r6, r1
 800e65a:	b90b      	cbnz	r3, 800e660 <_puts_r+0x10>
 800e65c:	f7ff ffb0 	bl	800e5c0 <__sinit>
 800e660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e662:	07db      	lsls	r3, r3, #31
 800e664:	d405      	bmi.n	800e672 <_puts_r+0x22>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	0598      	lsls	r0, r3, #22
 800e66a:	d402      	bmi.n	800e672 <_puts_r+0x22>
 800e66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e66e:	f000 fa0c 	bl	800ea8a <__retarget_lock_acquire_recursive>
 800e672:	89a3      	ldrh	r3, [r4, #12]
 800e674:	0719      	lsls	r1, r3, #28
 800e676:	d502      	bpl.n	800e67e <_puts_r+0x2e>
 800e678:	6923      	ldr	r3, [r4, #16]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d135      	bne.n	800e6ea <_puts_r+0x9a>
 800e67e:	4621      	mov	r1, r4
 800e680:	4628      	mov	r0, r5
 800e682:	f000 f8c5 	bl	800e810 <__swsetup_r>
 800e686:	b380      	cbz	r0, 800e6ea <_puts_r+0x9a>
 800e688:	f04f 35ff 	mov.w	r5, #4294967295
 800e68c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e68e:	07da      	lsls	r2, r3, #31
 800e690:	d405      	bmi.n	800e69e <_puts_r+0x4e>
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	059b      	lsls	r3, r3, #22
 800e696:	d402      	bmi.n	800e69e <_puts_r+0x4e>
 800e698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e69a:	f000 f9f7 	bl	800ea8c <__retarget_lock_release_recursive>
 800e69e:	4628      	mov	r0, r5
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	da04      	bge.n	800e6b0 <_puts_r+0x60>
 800e6a6:	69a2      	ldr	r2, [r4, #24]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	dc17      	bgt.n	800e6dc <_puts_r+0x8c>
 800e6ac:	290a      	cmp	r1, #10
 800e6ae:	d015      	beq.n	800e6dc <_puts_r+0x8c>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	6022      	str	r2, [r4, #0]
 800e6b6:	7019      	strb	r1, [r3, #0]
 800e6b8:	68a3      	ldr	r3, [r4, #8]
 800e6ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	60a3      	str	r3, [r4, #8]
 800e6c2:	2900      	cmp	r1, #0
 800e6c4:	d1ed      	bne.n	800e6a2 <_puts_r+0x52>
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	da11      	bge.n	800e6ee <_puts_r+0x9e>
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	210a      	movs	r1, #10
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	f000 f85f 	bl	800e792 <__swbuf_r>
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	d0d7      	beq.n	800e688 <_puts_r+0x38>
 800e6d8:	250a      	movs	r5, #10
 800e6da:	e7d7      	b.n	800e68c <_puts_r+0x3c>
 800e6dc:	4622      	mov	r2, r4
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f000 f857 	bl	800e792 <__swbuf_r>
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d1e7      	bne.n	800e6b8 <_puts_r+0x68>
 800e6e8:	e7ce      	b.n	800e688 <_puts_r+0x38>
 800e6ea:	3e01      	subs	r6, #1
 800e6ec:	e7e4      	b.n	800e6b8 <_puts_r+0x68>
 800e6ee:	6823      	ldr	r3, [r4, #0]
 800e6f0:	1c5a      	adds	r2, r3, #1
 800e6f2:	6022      	str	r2, [r4, #0]
 800e6f4:	220a      	movs	r2, #10
 800e6f6:	701a      	strb	r2, [r3, #0]
 800e6f8:	e7ee      	b.n	800e6d8 <_puts_r+0x88>
	...

0800e6fc <puts>:
 800e6fc:	4b02      	ldr	r3, [pc, #8]	@ (800e708 <puts+0xc>)
 800e6fe:	4601      	mov	r1, r0
 800e700:	6818      	ldr	r0, [r3, #0]
 800e702:	f7ff bfa5 	b.w	800e650 <_puts_r>
 800e706:	bf00      	nop
 800e708:	20000024 	.word	0x20000024

0800e70c <__sread>:
 800e70c:	b510      	push	{r4, lr}
 800e70e:	460c      	mov	r4, r1
 800e710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e714:	f000 f96a 	bl	800e9ec <_read_r>
 800e718:	2800      	cmp	r0, #0
 800e71a:	bfab      	itete	ge
 800e71c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e71e:	89a3      	ldrhlt	r3, [r4, #12]
 800e720:	181b      	addge	r3, r3, r0
 800e722:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e726:	bfac      	ite	ge
 800e728:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e72a:	81a3      	strhlt	r3, [r4, #12]
 800e72c:	bd10      	pop	{r4, pc}

0800e72e <__swrite>:
 800e72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e732:	461f      	mov	r7, r3
 800e734:	898b      	ldrh	r3, [r1, #12]
 800e736:	05db      	lsls	r3, r3, #23
 800e738:	4605      	mov	r5, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	4616      	mov	r6, r2
 800e73e:	d505      	bpl.n	800e74c <__swrite+0x1e>
 800e740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e744:	2302      	movs	r3, #2
 800e746:	2200      	movs	r2, #0
 800e748:	f000 f93e 	bl	800e9c8 <_lseek_r>
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e752:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e756:	81a3      	strh	r3, [r4, #12]
 800e758:	4632      	mov	r2, r6
 800e75a:	463b      	mov	r3, r7
 800e75c:	4628      	mov	r0, r5
 800e75e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e762:	f000 b955 	b.w	800ea10 <_write_r>

0800e766 <__sseek>:
 800e766:	b510      	push	{r4, lr}
 800e768:	460c      	mov	r4, r1
 800e76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e76e:	f000 f92b 	bl	800e9c8 <_lseek_r>
 800e772:	1c43      	adds	r3, r0, #1
 800e774:	89a3      	ldrh	r3, [r4, #12]
 800e776:	bf15      	itete	ne
 800e778:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e77a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e77e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e782:	81a3      	strheq	r3, [r4, #12]
 800e784:	bf18      	it	ne
 800e786:	81a3      	strhne	r3, [r4, #12]
 800e788:	bd10      	pop	{r4, pc}

0800e78a <__sclose>:
 800e78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78e:	f000 b8ad 	b.w	800e8ec <_close_r>

0800e792 <__swbuf_r>:
 800e792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e794:	460e      	mov	r6, r1
 800e796:	4614      	mov	r4, r2
 800e798:	4605      	mov	r5, r0
 800e79a:	b118      	cbz	r0, 800e7a4 <__swbuf_r+0x12>
 800e79c:	6a03      	ldr	r3, [r0, #32]
 800e79e:	b90b      	cbnz	r3, 800e7a4 <__swbuf_r+0x12>
 800e7a0:	f7ff ff0e 	bl	800e5c0 <__sinit>
 800e7a4:	69a3      	ldr	r3, [r4, #24]
 800e7a6:	60a3      	str	r3, [r4, #8]
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	071a      	lsls	r2, r3, #28
 800e7ac:	d501      	bpl.n	800e7b2 <__swbuf_r+0x20>
 800e7ae:	6923      	ldr	r3, [r4, #16]
 800e7b0:	b943      	cbnz	r3, 800e7c4 <__swbuf_r+0x32>
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	f000 f82b 	bl	800e810 <__swsetup_r>
 800e7ba:	b118      	cbz	r0, 800e7c4 <__swbuf_r+0x32>
 800e7bc:	f04f 37ff 	mov.w	r7, #4294967295
 800e7c0:	4638      	mov	r0, r7
 800e7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c4:	6823      	ldr	r3, [r4, #0]
 800e7c6:	6922      	ldr	r2, [r4, #16]
 800e7c8:	1a98      	subs	r0, r3, r2
 800e7ca:	6963      	ldr	r3, [r4, #20]
 800e7cc:	b2f6      	uxtb	r6, r6
 800e7ce:	4283      	cmp	r3, r0
 800e7d0:	4637      	mov	r7, r6
 800e7d2:	dc05      	bgt.n	800e7e0 <__swbuf_r+0x4e>
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	f000 fdb2 	bl	800f340 <_fflush_r>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d1ed      	bne.n	800e7bc <__swbuf_r+0x2a>
 800e7e0:	68a3      	ldr	r3, [r4, #8]
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	60a3      	str	r3, [r4, #8]
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	1c5a      	adds	r2, r3, #1
 800e7ea:	6022      	str	r2, [r4, #0]
 800e7ec:	701e      	strb	r6, [r3, #0]
 800e7ee:	6962      	ldr	r2, [r4, #20]
 800e7f0:	1c43      	adds	r3, r0, #1
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d004      	beq.n	800e800 <__swbuf_r+0x6e>
 800e7f6:	89a3      	ldrh	r3, [r4, #12]
 800e7f8:	07db      	lsls	r3, r3, #31
 800e7fa:	d5e1      	bpl.n	800e7c0 <__swbuf_r+0x2e>
 800e7fc:	2e0a      	cmp	r6, #10
 800e7fe:	d1df      	bne.n	800e7c0 <__swbuf_r+0x2e>
 800e800:	4621      	mov	r1, r4
 800e802:	4628      	mov	r0, r5
 800e804:	f000 fd9c 	bl	800f340 <_fflush_r>
 800e808:	2800      	cmp	r0, #0
 800e80a:	d0d9      	beq.n	800e7c0 <__swbuf_r+0x2e>
 800e80c:	e7d6      	b.n	800e7bc <__swbuf_r+0x2a>
	...

0800e810 <__swsetup_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4b29      	ldr	r3, [pc, #164]	@ (800e8b8 <__swsetup_r+0xa8>)
 800e814:	4605      	mov	r5, r0
 800e816:	6818      	ldr	r0, [r3, #0]
 800e818:	460c      	mov	r4, r1
 800e81a:	b118      	cbz	r0, 800e824 <__swsetup_r+0x14>
 800e81c:	6a03      	ldr	r3, [r0, #32]
 800e81e:	b90b      	cbnz	r3, 800e824 <__swsetup_r+0x14>
 800e820:	f7ff fece 	bl	800e5c0 <__sinit>
 800e824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e828:	0719      	lsls	r1, r3, #28
 800e82a:	d422      	bmi.n	800e872 <__swsetup_r+0x62>
 800e82c:	06da      	lsls	r2, r3, #27
 800e82e:	d407      	bmi.n	800e840 <__swsetup_r+0x30>
 800e830:	2209      	movs	r2, #9
 800e832:	602a      	str	r2, [r5, #0]
 800e834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e838:	81a3      	strh	r3, [r4, #12]
 800e83a:	f04f 30ff 	mov.w	r0, #4294967295
 800e83e:	e033      	b.n	800e8a8 <__swsetup_r+0x98>
 800e840:	0758      	lsls	r0, r3, #29
 800e842:	d512      	bpl.n	800e86a <__swsetup_r+0x5a>
 800e844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e846:	b141      	cbz	r1, 800e85a <__swsetup_r+0x4a>
 800e848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e84c:	4299      	cmp	r1, r3
 800e84e:	d002      	beq.n	800e856 <__swsetup_r+0x46>
 800e850:	4628      	mov	r0, r5
 800e852:	f000 f92b 	bl	800eaac <_free_r>
 800e856:	2300      	movs	r3, #0
 800e858:	6363      	str	r3, [r4, #52]	@ 0x34
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e860:	81a3      	strh	r3, [r4, #12]
 800e862:	2300      	movs	r3, #0
 800e864:	6063      	str	r3, [r4, #4]
 800e866:	6923      	ldr	r3, [r4, #16]
 800e868:	6023      	str	r3, [r4, #0]
 800e86a:	89a3      	ldrh	r3, [r4, #12]
 800e86c:	f043 0308 	orr.w	r3, r3, #8
 800e870:	81a3      	strh	r3, [r4, #12]
 800e872:	6923      	ldr	r3, [r4, #16]
 800e874:	b94b      	cbnz	r3, 800e88a <__swsetup_r+0x7a>
 800e876:	89a3      	ldrh	r3, [r4, #12]
 800e878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e87c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e880:	d003      	beq.n	800e88a <__swsetup_r+0x7a>
 800e882:	4621      	mov	r1, r4
 800e884:	4628      	mov	r0, r5
 800e886:	f000 fda9 	bl	800f3dc <__smakebuf_r>
 800e88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e88e:	f013 0201 	ands.w	r2, r3, #1
 800e892:	d00a      	beq.n	800e8aa <__swsetup_r+0x9a>
 800e894:	2200      	movs	r2, #0
 800e896:	60a2      	str	r2, [r4, #8]
 800e898:	6962      	ldr	r2, [r4, #20]
 800e89a:	4252      	negs	r2, r2
 800e89c:	61a2      	str	r2, [r4, #24]
 800e89e:	6922      	ldr	r2, [r4, #16]
 800e8a0:	b942      	cbnz	r2, 800e8b4 <__swsetup_r+0xa4>
 800e8a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e8a6:	d1c5      	bne.n	800e834 <__swsetup_r+0x24>
 800e8a8:	bd38      	pop	{r3, r4, r5, pc}
 800e8aa:	0799      	lsls	r1, r3, #30
 800e8ac:	bf58      	it	pl
 800e8ae:	6962      	ldrpl	r2, [r4, #20]
 800e8b0:	60a2      	str	r2, [r4, #8]
 800e8b2:	e7f4      	b.n	800e89e <__swsetup_r+0x8e>
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	e7f7      	b.n	800e8a8 <__swsetup_r+0x98>
 800e8b8:	20000024 	.word	0x20000024

0800e8bc <memcmp>:
 800e8bc:	b510      	push	{r4, lr}
 800e8be:	3901      	subs	r1, #1
 800e8c0:	4402      	add	r2, r0
 800e8c2:	4290      	cmp	r0, r2
 800e8c4:	d101      	bne.n	800e8ca <memcmp+0xe>
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	e005      	b.n	800e8d6 <memcmp+0x1a>
 800e8ca:	7803      	ldrb	r3, [r0, #0]
 800e8cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e8d0:	42a3      	cmp	r3, r4
 800e8d2:	d001      	beq.n	800e8d8 <memcmp+0x1c>
 800e8d4:	1b18      	subs	r0, r3, r4
 800e8d6:	bd10      	pop	{r4, pc}
 800e8d8:	3001      	adds	r0, #1
 800e8da:	e7f2      	b.n	800e8c2 <memcmp+0x6>

0800e8dc <memset>:
 800e8dc:	4402      	add	r2, r0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d100      	bne.n	800e8e6 <memset+0xa>
 800e8e4:	4770      	bx	lr
 800e8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800e8ea:	e7f9      	b.n	800e8e0 <memset+0x4>

0800e8ec <_close_r>:
 800e8ec:	b538      	push	{r3, r4, r5, lr}
 800e8ee:	4d06      	ldr	r5, [pc, #24]	@ (800e908 <_close_r+0x1c>)
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	4608      	mov	r0, r1
 800e8f6:	602b      	str	r3, [r5, #0]
 800e8f8:	f7f2 fc25 	bl	8001146 <_close>
 800e8fc:	1c43      	adds	r3, r0, #1
 800e8fe:	d102      	bne.n	800e906 <_close_r+0x1a>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	b103      	cbz	r3, 800e906 <_close_r+0x1a>
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	20005b10 	.word	0x20005b10

0800e90c <_reclaim_reent>:
 800e90c:	4b2d      	ldr	r3, [pc, #180]	@ (800e9c4 <_reclaim_reent+0xb8>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4283      	cmp	r3, r0
 800e912:	b570      	push	{r4, r5, r6, lr}
 800e914:	4604      	mov	r4, r0
 800e916:	d053      	beq.n	800e9c0 <_reclaim_reent+0xb4>
 800e918:	69c3      	ldr	r3, [r0, #28]
 800e91a:	b31b      	cbz	r3, 800e964 <_reclaim_reent+0x58>
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	b163      	cbz	r3, 800e93a <_reclaim_reent+0x2e>
 800e920:	2500      	movs	r5, #0
 800e922:	69e3      	ldr	r3, [r4, #28]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	5959      	ldr	r1, [r3, r5]
 800e928:	b9b1      	cbnz	r1, 800e958 <_reclaim_reent+0x4c>
 800e92a:	3504      	adds	r5, #4
 800e92c:	2d80      	cmp	r5, #128	@ 0x80
 800e92e:	d1f8      	bne.n	800e922 <_reclaim_reent+0x16>
 800e930:	69e3      	ldr	r3, [r4, #28]
 800e932:	4620      	mov	r0, r4
 800e934:	68d9      	ldr	r1, [r3, #12]
 800e936:	f000 f8b9 	bl	800eaac <_free_r>
 800e93a:	69e3      	ldr	r3, [r4, #28]
 800e93c:	6819      	ldr	r1, [r3, #0]
 800e93e:	b111      	cbz	r1, 800e946 <_reclaim_reent+0x3a>
 800e940:	4620      	mov	r0, r4
 800e942:	f000 f8b3 	bl	800eaac <_free_r>
 800e946:	69e3      	ldr	r3, [r4, #28]
 800e948:	689d      	ldr	r5, [r3, #8]
 800e94a:	b15d      	cbz	r5, 800e964 <_reclaim_reent+0x58>
 800e94c:	4629      	mov	r1, r5
 800e94e:	4620      	mov	r0, r4
 800e950:	682d      	ldr	r5, [r5, #0]
 800e952:	f000 f8ab 	bl	800eaac <_free_r>
 800e956:	e7f8      	b.n	800e94a <_reclaim_reent+0x3e>
 800e958:	680e      	ldr	r6, [r1, #0]
 800e95a:	4620      	mov	r0, r4
 800e95c:	f000 f8a6 	bl	800eaac <_free_r>
 800e960:	4631      	mov	r1, r6
 800e962:	e7e1      	b.n	800e928 <_reclaim_reent+0x1c>
 800e964:	6961      	ldr	r1, [r4, #20]
 800e966:	b111      	cbz	r1, 800e96e <_reclaim_reent+0x62>
 800e968:	4620      	mov	r0, r4
 800e96a:	f000 f89f 	bl	800eaac <_free_r>
 800e96e:	69e1      	ldr	r1, [r4, #28]
 800e970:	b111      	cbz	r1, 800e978 <_reclaim_reent+0x6c>
 800e972:	4620      	mov	r0, r4
 800e974:	f000 f89a 	bl	800eaac <_free_r>
 800e978:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e97a:	b111      	cbz	r1, 800e982 <_reclaim_reent+0x76>
 800e97c:	4620      	mov	r0, r4
 800e97e:	f000 f895 	bl	800eaac <_free_r>
 800e982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e984:	b111      	cbz	r1, 800e98c <_reclaim_reent+0x80>
 800e986:	4620      	mov	r0, r4
 800e988:	f000 f890 	bl	800eaac <_free_r>
 800e98c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e98e:	b111      	cbz	r1, 800e996 <_reclaim_reent+0x8a>
 800e990:	4620      	mov	r0, r4
 800e992:	f000 f88b 	bl	800eaac <_free_r>
 800e996:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e998:	b111      	cbz	r1, 800e9a0 <_reclaim_reent+0x94>
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 f886 	bl	800eaac <_free_r>
 800e9a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e9a2:	b111      	cbz	r1, 800e9aa <_reclaim_reent+0x9e>
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 f881 	bl	800eaac <_free_r>
 800e9aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e9ac:	b111      	cbz	r1, 800e9b4 <_reclaim_reent+0xa8>
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 f87c 	bl	800eaac <_free_r>
 800e9b4:	6a23      	ldr	r3, [r4, #32]
 800e9b6:	b11b      	cbz	r3, 800e9c0 <_reclaim_reent+0xb4>
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9be:	4718      	bx	r3
 800e9c0:	bd70      	pop	{r4, r5, r6, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20000024 	.word	0x20000024

0800e9c8 <_lseek_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4d07      	ldr	r5, [pc, #28]	@ (800e9e8 <_lseek_r+0x20>)
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	4608      	mov	r0, r1
 800e9d0:	4611      	mov	r1, r2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	602a      	str	r2, [r5, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	f7f2 fbdc 	bl	8001194 <_lseek>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_lseek_r+0x1e>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_lseek_r+0x1e>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	20005b10 	.word	0x20005b10

0800e9ec <_read_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4d07      	ldr	r5, [pc, #28]	@ (800ea0c <_read_r+0x20>)
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	4608      	mov	r0, r1
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	602a      	str	r2, [r5, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	f7f2 fb6a 	bl	80010d4 <_read>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	d102      	bne.n	800ea0a <_read_r+0x1e>
 800ea04:	682b      	ldr	r3, [r5, #0]
 800ea06:	b103      	cbz	r3, 800ea0a <_read_r+0x1e>
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	20005b10 	.word	0x20005b10

0800ea10 <_write_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d07      	ldr	r5, [pc, #28]	@ (800ea30 <_write_r+0x20>)
 800ea14:	4604      	mov	r4, r0
 800ea16:	4608      	mov	r0, r1
 800ea18:	4611      	mov	r1, r2
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	602a      	str	r2, [r5, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	f7f2 fb75 	bl	800110e <_write>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_write_r+0x1e>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_write_r+0x1e>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	20005b10 	.word	0x20005b10

0800ea34 <__errno>:
 800ea34:	4b01      	ldr	r3, [pc, #4]	@ (800ea3c <__errno+0x8>)
 800ea36:	6818      	ldr	r0, [r3, #0]
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	20000024 	.word	0x20000024

0800ea40 <__libc_init_array>:
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	4d0d      	ldr	r5, [pc, #52]	@ (800ea78 <__libc_init_array+0x38>)
 800ea44:	4c0d      	ldr	r4, [pc, #52]	@ (800ea7c <__libc_init_array+0x3c>)
 800ea46:	1b64      	subs	r4, r4, r5
 800ea48:	10a4      	asrs	r4, r4, #2
 800ea4a:	2600      	movs	r6, #0
 800ea4c:	42a6      	cmp	r6, r4
 800ea4e:	d109      	bne.n	800ea64 <__libc_init_array+0x24>
 800ea50:	4d0b      	ldr	r5, [pc, #44]	@ (800ea80 <__libc_init_array+0x40>)
 800ea52:	4c0c      	ldr	r4, [pc, #48]	@ (800ea84 <__libc_init_array+0x44>)
 800ea54:	f000 fd30 	bl	800f4b8 <_init>
 800ea58:	1b64      	subs	r4, r4, r5
 800ea5a:	10a4      	asrs	r4, r4, #2
 800ea5c:	2600      	movs	r6, #0
 800ea5e:	42a6      	cmp	r6, r4
 800ea60:	d105      	bne.n	800ea6e <__libc_init_array+0x2e>
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea68:	4798      	blx	r3
 800ea6a:	3601      	adds	r6, #1
 800ea6c:	e7ee      	b.n	800ea4c <__libc_init_array+0xc>
 800ea6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea72:	4798      	blx	r3
 800ea74:	3601      	adds	r6, #1
 800ea76:	e7f2      	b.n	800ea5e <__libc_init_array+0x1e>
 800ea78:	0803a5c8 	.word	0x0803a5c8
 800ea7c:	0803a5c8 	.word	0x0803a5c8
 800ea80:	0803a5c8 	.word	0x0803a5c8
 800ea84:	0803a5cc 	.word	0x0803a5cc

0800ea88 <__retarget_lock_init_recursive>:
 800ea88:	4770      	bx	lr

0800ea8a <__retarget_lock_acquire_recursive>:
 800ea8a:	4770      	bx	lr

0800ea8c <__retarget_lock_release_recursive>:
 800ea8c:	4770      	bx	lr

0800ea8e <memcpy>:
 800ea8e:	440a      	add	r2, r1
 800ea90:	4291      	cmp	r1, r2
 800ea92:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea96:	d100      	bne.n	800ea9a <memcpy+0xc>
 800ea98:	4770      	bx	lr
 800ea9a:	b510      	push	{r4, lr}
 800ea9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaa4:	4291      	cmp	r1, r2
 800eaa6:	d1f9      	bne.n	800ea9c <memcpy+0xe>
 800eaa8:	bd10      	pop	{r4, pc}
	...

0800eaac <_free_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4605      	mov	r5, r0
 800eab0:	2900      	cmp	r1, #0
 800eab2:	d041      	beq.n	800eb38 <_free_r+0x8c>
 800eab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eab8:	1f0c      	subs	r4, r1, #4
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	bfb8      	it	lt
 800eabe:	18e4      	addlt	r4, r4, r3
 800eac0:	f000 f8e0 	bl	800ec84 <__malloc_lock>
 800eac4:	4a1d      	ldr	r2, [pc, #116]	@ (800eb3c <_free_r+0x90>)
 800eac6:	6813      	ldr	r3, [r2, #0]
 800eac8:	b933      	cbnz	r3, 800ead8 <_free_r+0x2c>
 800eaca:	6063      	str	r3, [r4, #4]
 800eacc:	6014      	str	r4, [r2, #0]
 800eace:	4628      	mov	r0, r5
 800ead0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ead4:	f000 b8dc 	b.w	800ec90 <__malloc_unlock>
 800ead8:	42a3      	cmp	r3, r4
 800eada:	d908      	bls.n	800eaee <_free_r+0x42>
 800eadc:	6820      	ldr	r0, [r4, #0]
 800eade:	1821      	adds	r1, r4, r0
 800eae0:	428b      	cmp	r3, r1
 800eae2:	bf01      	itttt	eq
 800eae4:	6819      	ldreq	r1, [r3, #0]
 800eae6:	685b      	ldreq	r3, [r3, #4]
 800eae8:	1809      	addeq	r1, r1, r0
 800eaea:	6021      	streq	r1, [r4, #0]
 800eaec:	e7ed      	b.n	800eaca <_free_r+0x1e>
 800eaee:	461a      	mov	r2, r3
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	b10b      	cbz	r3, 800eaf8 <_free_r+0x4c>
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	d9fa      	bls.n	800eaee <_free_r+0x42>
 800eaf8:	6811      	ldr	r1, [r2, #0]
 800eafa:	1850      	adds	r0, r2, r1
 800eafc:	42a0      	cmp	r0, r4
 800eafe:	d10b      	bne.n	800eb18 <_free_r+0x6c>
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	4401      	add	r1, r0
 800eb04:	1850      	adds	r0, r2, r1
 800eb06:	4283      	cmp	r3, r0
 800eb08:	6011      	str	r1, [r2, #0]
 800eb0a:	d1e0      	bne.n	800eace <_free_r+0x22>
 800eb0c:	6818      	ldr	r0, [r3, #0]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	6053      	str	r3, [r2, #4]
 800eb12:	4408      	add	r0, r1
 800eb14:	6010      	str	r0, [r2, #0]
 800eb16:	e7da      	b.n	800eace <_free_r+0x22>
 800eb18:	d902      	bls.n	800eb20 <_free_r+0x74>
 800eb1a:	230c      	movs	r3, #12
 800eb1c:	602b      	str	r3, [r5, #0]
 800eb1e:	e7d6      	b.n	800eace <_free_r+0x22>
 800eb20:	6820      	ldr	r0, [r4, #0]
 800eb22:	1821      	adds	r1, r4, r0
 800eb24:	428b      	cmp	r3, r1
 800eb26:	bf04      	itt	eq
 800eb28:	6819      	ldreq	r1, [r3, #0]
 800eb2a:	685b      	ldreq	r3, [r3, #4]
 800eb2c:	6063      	str	r3, [r4, #4]
 800eb2e:	bf04      	itt	eq
 800eb30:	1809      	addeq	r1, r1, r0
 800eb32:	6021      	streq	r1, [r4, #0]
 800eb34:	6054      	str	r4, [r2, #4]
 800eb36:	e7ca      	b.n	800eace <_free_r+0x22>
 800eb38:	bd38      	pop	{r3, r4, r5, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20005b1c 	.word	0x20005b1c

0800eb40 <sbrk_aligned>:
 800eb40:	b570      	push	{r4, r5, r6, lr}
 800eb42:	4e0f      	ldr	r6, [pc, #60]	@ (800eb80 <sbrk_aligned+0x40>)
 800eb44:	460c      	mov	r4, r1
 800eb46:	6831      	ldr	r1, [r6, #0]
 800eb48:	4605      	mov	r5, r0
 800eb4a:	b911      	cbnz	r1, 800eb52 <sbrk_aligned+0x12>
 800eb4c:	f000 fca4 	bl	800f498 <_sbrk_r>
 800eb50:	6030      	str	r0, [r6, #0]
 800eb52:	4621      	mov	r1, r4
 800eb54:	4628      	mov	r0, r5
 800eb56:	f000 fc9f 	bl	800f498 <_sbrk_r>
 800eb5a:	1c43      	adds	r3, r0, #1
 800eb5c:	d103      	bne.n	800eb66 <sbrk_aligned+0x26>
 800eb5e:	f04f 34ff 	mov.w	r4, #4294967295
 800eb62:	4620      	mov	r0, r4
 800eb64:	bd70      	pop	{r4, r5, r6, pc}
 800eb66:	1cc4      	adds	r4, r0, #3
 800eb68:	f024 0403 	bic.w	r4, r4, #3
 800eb6c:	42a0      	cmp	r0, r4
 800eb6e:	d0f8      	beq.n	800eb62 <sbrk_aligned+0x22>
 800eb70:	1a21      	subs	r1, r4, r0
 800eb72:	4628      	mov	r0, r5
 800eb74:	f000 fc90 	bl	800f498 <_sbrk_r>
 800eb78:	3001      	adds	r0, #1
 800eb7a:	d1f2      	bne.n	800eb62 <sbrk_aligned+0x22>
 800eb7c:	e7ef      	b.n	800eb5e <sbrk_aligned+0x1e>
 800eb7e:	bf00      	nop
 800eb80:	20005b18 	.word	0x20005b18

0800eb84 <_malloc_r>:
 800eb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb88:	1ccd      	adds	r5, r1, #3
 800eb8a:	f025 0503 	bic.w	r5, r5, #3
 800eb8e:	3508      	adds	r5, #8
 800eb90:	2d0c      	cmp	r5, #12
 800eb92:	bf38      	it	cc
 800eb94:	250c      	movcc	r5, #12
 800eb96:	2d00      	cmp	r5, #0
 800eb98:	4606      	mov	r6, r0
 800eb9a:	db01      	blt.n	800eba0 <_malloc_r+0x1c>
 800eb9c:	42a9      	cmp	r1, r5
 800eb9e:	d904      	bls.n	800ebaa <_malloc_r+0x26>
 800eba0:	230c      	movs	r3, #12
 800eba2:	6033      	str	r3, [r6, #0]
 800eba4:	2000      	movs	r0, #0
 800eba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec80 <_malloc_r+0xfc>
 800ebae:	f000 f869 	bl	800ec84 <__malloc_lock>
 800ebb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebb6:	461c      	mov	r4, r3
 800ebb8:	bb44      	cbnz	r4, 800ec0c <_malloc_r+0x88>
 800ebba:	4629      	mov	r1, r5
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	f7ff ffbf 	bl	800eb40 <sbrk_aligned>
 800ebc2:	1c43      	adds	r3, r0, #1
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	d158      	bne.n	800ec7a <_malloc_r+0xf6>
 800ebc8:	f8d8 4000 	ldr.w	r4, [r8]
 800ebcc:	4627      	mov	r7, r4
 800ebce:	2f00      	cmp	r7, #0
 800ebd0:	d143      	bne.n	800ec5a <_malloc_r+0xd6>
 800ebd2:	2c00      	cmp	r4, #0
 800ebd4:	d04b      	beq.n	800ec6e <_malloc_r+0xea>
 800ebd6:	6823      	ldr	r3, [r4, #0]
 800ebd8:	4639      	mov	r1, r7
 800ebda:	4630      	mov	r0, r6
 800ebdc:	eb04 0903 	add.w	r9, r4, r3
 800ebe0:	f000 fc5a 	bl	800f498 <_sbrk_r>
 800ebe4:	4581      	cmp	r9, r0
 800ebe6:	d142      	bne.n	800ec6e <_malloc_r+0xea>
 800ebe8:	6821      	ldr	r1, [r4, #0]
 800ebea:	1a6d      	subs	r5, r5, r1
 800ebec:	4629      	mov	r1, r5
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f7ff ffa6 	bl	800eb40 <sbrk_aligned>
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	d03a      	beq.n	800ec6e <_malloc_r+0xea>
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	442b      	add	r3, r5
 800ebfc:	6023      	str	r3, [r4, #0]
 800ebfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	bb62      	cbnz	r2, 800ec60 <_malloc_r+0xdc>
 800ec06:	f8c8 7000 	str.w	r7, [r8]
 800ec0a:	e00f      	b.n	800ec2c <_malloc_r+0xa8>
 800ec0c:	6822      	ldr	r2, [r4, #0]
 800ec0e:	1b52      	subs	r2, r2, r5
 800ec10:	d420      	bmi.n	800ec54 <_malloc_r+0xd0>
 800ec12:	2a0b      	cmp	r2, #11
 800ec14:	d917      	bls.n	800ec46 <_malloc_r+0xc2>
 800ec16:	1961      	adds	r1, r4, r5
 800ec18:	42a3      	cmp	r3, r4
 800ec1a:	6025      	str	r5, [r4, #0]
 800ec1c:	bf18      	it	ne
 800ec1e:	6059      	strne	r1, [r3, #4]
 800ec20:	6863      	ldr	r3, [r4, #4]
 800ec22:	bf08      	it	eq
 800ec24:	f8c8 1000 	streq.w	r1, [r8]
 800ec28:	5162      	str	r2, [r4, r5]
 800ec2a:	604b      	str	r3, [r1, #4]
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f000 f82f 	bl	800ec90 <__malloc_unlock>
 800ec32:	f104 000b 	add.w	r0, r4, #11
 800ec36:	1d23      	adds	r3, r4, #4
 800ec38:	f020 0007 	bic.w	r0, r0, #7
 800ec3c:	1ac2      	subs	r2, r0, r3
 800ec3e:	bf1c      	itt	ne
 800ec40:	1a1b      	subne	r3, r3, r0
 800ec42:	50a3      	strne	r3, [r4, r2]
 800ec44:	e7af      	b.n	800eba6 <_malloc_r+0x22>
 800ec46:	6862      	ldr	r2, [r4, #4]
 800ec48:	42a3      	cmp	r3, r4
 800ec4a:	bf0c      	ite	eq
 800ec4c:	f8c8 2000 	streq.w	r2, [r8]
 800ec50:	605a      	strne	r2, [r3, #4]
 800ec52:	e7eb      	b.n	800ec2c <_malloc_r+0xa8>
 800ec54:	4623      	mov	r3, r4
 800ec56:	6864      	ldr	r4, [r4, #4]
 800ec58:	e7ae      	b.n	800ebb8 <_malloc_r+0x34>
 800ec5a:	463c      	mov	r4, r7
 800ec5c:	687f      	ldr	r7, [r7, #4]
 800ec5e:	e7b6      	b.n	800ebce <_malloc_r+0x4a>
 800ec60:	461a      	mov	r2, r3
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	42a3      	cmp	r3, r4
 800ec66:	d1fb      	bne.n	800ec60 <_malloc_r+0xdc>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	6053      	str	r3, [r2, #4]
 800ec6c:	e7de      	b.n	800ec2c <_malloc_r+0xa8>
 800ec6e:	230c      	movs	r3, #12
 800ec70:	6033      	str	r3, [r6, #0]
 800ec72:	4630      	mov	r0, r6
 800ec74:	f000 f80c 	bl	800ec90 <__malloc_unlock>
 800ec78:	e794      	b.n	800eba4 <_malloc_r+0x20>
 800ec7a:	6005      	str	r5, [r0, #0]
 800ec7c:	e7d6      	b.n	800ec2c <_malloc_r+0xa8>
 800ec7e:	bf00      	nop
 800ec80:	20005b1c 	.word	0x20005b1c

0800ec84 <__malloc_lock>:
 800ec84:	4801      	ldr	r0, [pc, #4]	@ (800ec8c <__malloc_lock+0x8>)
 800ec86:	f7ff bf00 	b.w	800ea8a <__retarget_lock_acquire_recursive>
 800ec8a:	bf00      	nop
 800ec8c:	20005b14 	.word	0x20005b14

0800ec90 <__malloc_unlock>:
 800ec90:	4801      	ldr	r0, [pc, #4]	@ (800ec98 <__malloc_unlock+0x8>)
 800ec92:	f7ff befb 	b.w	800ea8c <__retarget_lock_release_recursive>
 800ec96:	bf00      	nop
 800ec98:	20005b14 	.word	0x20005b14

0800ec9c <__sfputc_r>:
 800ec9c:	6893      	ldr	r3, [r2, #8]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	b410      	push	{r4}
 800eca4:	6093      	str	r3, [r2, #8]
 800eca6:	da08      	bge.n	800ecba <__sfputc_r+0x1e>
 800eca8:	6994      	ldr	r4, [r2, #24]
 800ecaa:	42a3      	cmp	r3, r4
 800ecac:	db01      	blt.n	800ecb2 <__sfputc_r+0x16>
 800ecae:	290a      	cmp	r1, #10
 800ecb0:	d103      	bne.n	800ecba <__sfputc_r+0x1e>
 800ecb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecb6:	f7ff bd6c 	b.w	800e792 <__swbuf_r>
 800ecba:	6813      	ldr	r3, [r2, #0]
 800ecbc:	1c58      	adds	r0, r3, #1
 800ecbe:	6010      	str	r0, [r2, #0]
 800ecc0:	7019      	strb	r1, [r3, #0]
 800ecc2:	4608      	mov	r0, r1
 800ecc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecc8:	4770      	bx	lr

0800ecca <__sfputs_r>:
 800ecca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eccc:	4606      	mov	r6, r0
 800ecce:	460f      	mov	r7, r1
 800ecd0:	4614      	mov	r4, r2
 800ecd2:	18d5      	adds	r5, r2, r3
 800ecd4:	42ac      	cmp	r4, r5
 800ecd6:	d101      	bne.n	800ecdc <__sfputs_r+0x12>
 800ecd8:	2000      	movs	r0, #0
 800ecda:	e007      	b.n	800ecec <__sfputs_r+0x22>
 800ecdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece0:	463a      	mov	r2, r7
 800ece2:	4630      	mov	r0, r6
 800ece4:	f7ff ffda 	bl	800ec9c <__sfputc_r>
 800ece8:	1c43      	adds	r3, r0, #1
 800ecea:	d1f3      	bne.n	800ecd4 <__sfputs_r+0xa>
 800ecec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ecf0 <_vfiprintf_r>:
 800ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf4:	460d      	mov	r5, r1
 800ecf6:	b09d      	sub	sp, #116	@ 0x74
 800ecf8:	4614      	mov	r4, r2
 800ecfa:	4698      	mov	r8, r3
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	b118      	cbz	r0, 800ed08 <_vfiprintf_r+0x18>
 800ed00:	6a03      	ldr	r3, [r0, #32]
 800ed02:	b90b      	cbnz	r3, 800ed08 <_vfiprintf_r+0x18>
 800ed04:	f7ff fc5c 	bl	800e5c0 <__sinit>
 800ed08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed0a:	07d9      	lsls	r1, r3, #31
 800ed0c:	d405      	bmi.n	800ed1a <_vfiprintf_r+0x2a>
 800ed0e:	89ab      	ldrh	r3, [r5, #12]
 800ed10:	059a      	lsls	r2, r3, #22
 800ed12:	d402      	bmi.n	800ed1a <_vfiprintf_r+0x2a>
 800ed14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed16:	f7ff feb8 	bl	800ea8a <__retarget_lock_acquire_recursive>
 800ed1a:	89ab      	ldrh	r3, [r5, #12]
 800ed1c:	071b      	lsls	r3, r3, #28
 800ed1e:	d501      	bpl.n	800ed24 <_vfiprintf_r+0x34>
 800ed20:	692b      	ldr	r3, [r5, #16]
 800ed22:	b99b      	cbnz	r3, 800ed4c <_vfiprintf_r+0x5c>
 800ed24:	4629      	mov	r1, r5
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7ff fd72 	bl	800e810 <__swsetup_r>
 800ed2c:	b170      	cbz	r0, 800ed4c <_vfiprintf_r+0x5c>
 800ed2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed30:	07dc      	lsls	r4, r3, #31
 800ed32:	d504      	bpl.n	800ed3e <_vfiprintf_r+0x4e>
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295
 800ed38:	b01d      	add	sp, #116	@ 0x74
 800ed3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3e:	89ab      	ldrh	r3, [r5, #12]
 800ed40:	0598      	lsls	r0, r3, #22
 800ed42:	d4f7      	bmi.n	800ed34 <_vfiprintf_r+0x44>
 800ed44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed46:	f7ff fea1 	bl	800ea8c <__retarget_lock_release_recursive>
 800ed4a:	e7f3      	b.n	800ed34 <_vfiprintf_r+0x44>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed50:	2320      	movs	r3, #32
 800ed52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed5a:	2330      	movs	r3, #48	@ 0x30
 800ed5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef0c <_vfiprintf_r+0x21c>
 800ed60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed64:	f04f 0901 	mov.w	r9, #1
 800ed68:	4623      	mov	r3, r4
 800ed6a:	469a      	mov	sl, r3
 800ed6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed70:	b10a      	cbz	r2, 800ed76 <_vfiprintf_r+0x86>
 800ed72:	2a25      	cmp	r2, #37	@ 0x25
 800ed74:	d1f9      	bne.n	800ed6a <_vfiprintf_r+0x7a>
 800ed76:	ebba 0b04 	subs.w	fp, sl, r4
 800ed7a:	d00b      	beq.n	800ed94 <_vfiprintf_r+0xa4>
 800ed7c:	465b      	mov	r3, fp
 800ed7e:	4622      	mov	r2, r4
 800ed80:	4629      	mov	r1, r5
 800ed82:	4630      	mov	r0, r6
 800ed84:	f7ff ffa1 	bl	800ecca <__sfputs_r>
 800ed88:	3001      	adds	r0, #1
 800ed8a:	f000 80a7 	beq.w	800eedc <_vfiprintf_r+0x1ec>
 800ed8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed90:	445a      	add	r2, fp
 800ed92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed94:	f89a 3000 	ldrb.w	r3, [sl]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 809f 	beq.w	800eedc <_vfiprintf_r+0x1ec>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	f04f 32ff 	mov.w	r2, #4294967295
 800eda4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eda8:	f10a 0a01 	add.w	sl, sl, #1
 800edac:	9304      	str	r3, [sp, #16]
 800edae:	9307      	str	r3, [sp, #28]
 800edb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800edb6:	4654      	mov	r4, sl
 800edb8:	2205      	movs	r2, #5
 800edba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edbe:	4853      	ldr	r0, [pc, #332]	@ (800ef0c <_vfiprintf_r+0x21c>)
 800edc0:	f7f1 fa06 	bl	80001d0 <memchr>
 800edc4:	9a04      	ldr	r2, [sp, #16]
 800edc6:	b9d8      	cbnz	r0, 800ee00 <_vfiprintf_r+0x110>
 800edc8:	06d1      	lsls	r1, r2, #27
 800edca:	bf44      	itt	mi
 800edcc:	2320      	movmi	r3, #32
 800edce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edd2:	0713      	lsls	r3, r2, #28
 800edd4:	bf44      	itt	mi
 800edd6:	232b      	movmi	r3, #43	@ 0x2b
 800edd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eddc:	f89a 3000 	ldrb.w	r3, [sl]
 800ede0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ede2:	d015      	beq.n	800ee10 <_vfiprintf_r+0x120>
 800ede4:	9a07      	ldr	r2, [sp, #28]
 800ede6:	4654      	mov	r4, sl
 800ede8:	2000      	movs	r0, #0
 800edea:	f04f 0c0a 	mov.w	ip, #10
 800edee:	4621      	mov	r1, r4
 800edf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edf4:	3b30      	subs	r3, #48	@ 0x30
 800edf6:	2b09      	cmp	r3, #9
 800edf8:	d94b      	bls.n	800ee92 <_vfiprintf_r+0x1a2>
 800edfa:	b1b0      	cbz	r0, 800ee2a <_vfiprintf_r+0x13a>
 800edfc:	9207      	str	r2, [sp, #28]
 800edfe:	e014      	b.n	800ee2a <_vfiprintf_r+0x13a>
 800ee00:	eba0 0308 	sub.w	r3, r0, r8
 800ee04:	fa09 f303 	lsl.w	r3, r9, r3
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	9304      	str	r3, [sp, #16]
 800ee0c:	46a2      	mov	sl, r4
 800ee0e:	e7d2      	b.n	800edb6 <_vfiprintf_r+0xc6>
 800ee10:	9b03      	ldr	r3, [sp, #12]
 800ee12:	1d19      	adds	r1, r3, #4
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	9103      	str	r1, [sp, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	bfbb      	ittet	lt
 800ee1c:	425b      	neglt	r3, r3
 800ee1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee22:	9307      	strge	r3, [sp, #28]
 800ee24:	9307      	strlt	r3, [sp, #28]
 800ee26:	bfb8      	it	lt
 800ee28:	9204      	strlt	r2, [sp, #16]
 800ee2a:	7823      	ldrb	r3, [r4, #0]
 800ee2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee2e:	d10a      	bne.n	800ee46 <_vfiprintf_r+0x156>
 800ee30:	7863      	ldrb	r3, [r4, #1]
 800ee32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee34:	d132      	bne.n	800ee9c <_vfiprintf_r+0x1ac>
 800ee36:	9b03      	ldr	r3, [sp, #12]
 800ee38:	1d1a      	adds	r2, r3, #4
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	9203      	str	r2, [sp, #12]
 800ee3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee42:	3402      	adds	r4, #2
 800ee44:	9305      	str	r3, [sp, #20]
 800ee46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef1c <_vfiprintf_r+0x22c>
 800ee4a:	7821      	ldrb	r1, [r4, #0]
 800ee4c:	2203      	movs	r2, #3
 800ee4e:	4650      	mov	r0, sl
 800ee50:	f7f1 f9be 	bl	80001d0 <memchr>
 800ee54:	b138      	cbz	r0, 800ee66 <_vfiprintf_r+0x176>
 800ee56:	9b04      	ldr	r3, [sp, #16]
 800ee58:	eba0 000a 	sub.w	r0, r0, sl
 800ee5c:	2240      	movs	r2, #64	@ 0x40
 800ee5e:	4082      	lsls	r2, r0
 800ee60:	4313      	orrs	r3, r2
 800ee62:	3401      	adds	r4, #1
 800ee64:	9304      	str	r3, [sp, #16]
 800ee66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee6a:	4829      	ldr	r0, [pc, #164]	@ (800ef10 <_vfiprintf_r+0x220>)
 800ee6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee70:	2206      	movs	r2, #6
 800ee72:	f7f1 f9ad 	bl	80001d0 <memchr>
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d03f      	beq.n	800eefa <_vfiprintf_r+0x20a>
 800ee7a:	4b26      	ldr	r3, [pc, #152]	@ (800ef14 <_vfiprintf_r+0x224>)
 800ee7c:	bb1b      	cbnz	r3, 800eec6 <_vfiprintf_r+0x1d6>
 800ee7e:	9b03      	ldr	r3, [sp, #12]
 800ee80:	3307      	adds	r3, #7
 800ee82:	f023 0307 	bic.w	r3, r3, #7
 800ee86:	3308      	adds	r3, #8
 800ee88:	9303      	str	r3, [sp, #12]
 800ee8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee8c:	443b      	add	r3, r7
 800ee8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee90:	e76a      	b.n	800ed68 <_vfiprintf_r+0x78>
 800ee92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee96:	460c      	mov	r4, r1
 800ee98:	2001      	movs	r0, #1
 800ee9a:	e7a8      	b.n	800edee <_vfiprintf_r+0xfe>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	3401      	adds	r4, #1
 800eea0:	9305      	str	r3, [sp, #20]
 800eea2:	4619      	mov	r1, r3
 800eea4:	f04f 0c0a 	mov.w	ip, #10
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeae:	3a30      	subs	r2, #48	@ 0x30
 800eeb0:	2a09      	cmp	r2, #9
 800eeb2:	d903      	bls.n	800eebc <_vfiprintf_r+0x1cc>
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d0c6      	beq.n	800ee46 <_vfiprintf_r+0x156>
 800eeb8:	9105      	str	r1, [sp, #20]
 800eeba:	e7c4      	b.n	800ee46 <_vfiprintf_r+0x156>
 800eebc:	fb0c 2101 	mla	r1, ip, r1, r2
 800eec0:	4604      	mov	r4, r0
 800eec2:	2301      	movs	r3, #1
 800eec4:	e7f0      	b.n	800eea8 <_vfiprintf_r+0x1b8>
 800eec6:	ab03      	add	r3, sp, #12
 800eec8:	9300      	str	r3, [sp, #0]
 800eeca:	462a      	mov	r2, r5
 800eecc:	4b12      	ldr	r3, [pc, #72]	@ (800ef18 <_vfiprintf_r+0x228>)
 800eece:	a904      	add	r1, sp, #16
 800eed0:	4630      	mov	r0, r6
 800eed2:	f3af 8000 	nop.w
 800eed6:	4607      	mov	r7, r0
 800eed8:	1c78      	adds	r0, r7, #1
 800eeda:	d1d6      	bne.n	800ee8a <_vfiprintf_r+0x19a>
 800eedc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eede:	07d9      	lsls	r1, r3, #31
 800eee0:	d405      	bmi.n	800eeee <_vfiprintf_r+0x1fe>
 800eee2:	89ab      	ldrh	r3, [r5, #12]
 800eee4:	059a      	lsls	r2, r3, #22
 800eee6:	d402      	bmi.n	800eeee <_vfiprintf_r+0x1fe>
 800eee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eeea:	f7ff fdcf 	bl	800ea8c <__retarget_lock_release_recursive>
 800eeee:	89ab      	ldrh	r3, [r5, #12]
 800eef0:	065b      	lsls	r3, r3, #25
 800eef2:	f53f af1f 	bmi.w	800ed34 <_vfiprintf_r+0x44>
 800eef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eef8:	e71e      	b.n	800ed38 <_vfiprintf_r+0x48>
 800eefa:	ab03      	add	r3, sp, #12
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	462a      	mov	r2, r5
 800ef00:	4b05      	ldr	r3, [pc, #20]	@ (800ef18 <_vfiprintf_r+0x228>)
 800ef02:	a904      	add	r1, sp, #16
 800ef04:	4630      	mov	r0, r6
 800ef06:	f000 f879 	bl	800effc <_printf_i>
 800ef0a:	e7e4      	b.n	800eed6 <_vfiprintf_r+0x1e6>
 800ef0c:	0803a58c 	.word	0x0803a58c
 800ef10:	0803a596 	.word	0x0803a596
 800ef14:	00000000 	.word	0x00000000
 800ef18:	0800eccb 	.word	0x0800eccb
 800ef1c:	0803a592 	.word	0x0803a592

0800ef20 <_printf_common>:
 800ef20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef24:	4616      	mov	r6, r2
 800ef26:	4698      	mov	r8, r3
 800ef28:	688a      	ldr	r2, [r1, #8]
 800ef2a:	690b      	ldr	r3, [r1, #16]
 800ef2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef30:	4293      	cmp	r3, r2
 800ef32:	bfb8      	it	lt
 800ef34:	4613      	movlt	r3, r2
 800ef36:	6033      	str	r3, [r6, #0]
 800ef38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	460c      	mov	r4, r1
 800ef40:	b10a      	cbz	r2, 800ef46 <_printf_common+0x26>
 800ef42:	3301      	adds	r3, #1
 800ef44:	6033      	str	r3, [r6, #0]
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	0699      	lsls	r1, r3, #26
 800ef4a:	bf42      	ittt	mi
 800ef4c:	6833      	ldrmi	r3, [r6, #0]
 800ef4e:	3302      	addmi	r3, #2
 800ef50:	6033      	strmi	r3, [r6, #0]
 800ef52:	6825      	ldr	r5, [r4, #0]
 800ef54:	f015 0506 	ands.w	r5, r5, #6
 800ef58:	d106      	bne.n	800ef68 <_printf_common+0x48>
 800ef5a:	f104 0a19 	add.w	sl, r4, #25
 800ef5e:	68e3      	ldr	r3, [r4, #12]
 800ef60:	6832      	ldr	r2, [r6, #0]
 800ef62:	1a9b      	subs	r3, r3, r2
 800ef64:	42ab      	cmp	r3, r5
 800ef66:	dc26      	bgt.n	800efb6 <_printf_common+0x96>
 800ef68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ef6c:	6822      	ldr	r2, [r4, #0]
 800ef6e:	3b00      	subs	r3, #0
 800ef70:	bf18      	it	ne
 800ef72:	2301      	movne	r3, #1
 800ef74:	0692      	lsls	r2, r2, #26
 800ef76:	d42b      	bmi.n	800efd0 <_printf_common+0xb0>
 800ef78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef7c:	4641      	mov	r1, r8
 800ef7e:	4638      	mov	r0, r7
 800ef80:	47c8      	blx	r9
 800ef82:	3001      	adds	r0, #1
 800ef84:	d01e      	beq.n	800efc4 <_printf_common+0xa4>
 800ef86:	6823      	ldr	r3, [r4, #0]
 800ef88:	6922      	ldr	r2, [r4, #16]
 800ef8a:	f003 0306 	and.w	r3, r3, #6
 800ef8e:	2b04      	cmp	r3, #4
 800ef90:	bf02      	ittt	eq
 800ef92:	68e5      	ldreq	r5, [r4, #12]
 800ef94:	6833      	ldreq	r3, [r6, #0]
 800ef96:	1aed      	subeq	r5, r5, r3
 800ef98:	68a3      	ldr	r3, [r4, #8]
 800ef9a:	bf0c      	ite	eq
 800ef9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efa0:	2500      	movne	r5, #0
 800efa2:	4293      	cmp	r3, r2
 800efa4:	bfc4      	itt	gt
 800efa6:	1a9b      	subgt	r3, r3, r2
 800efa8:	18ed      	addgt	r5, r5, r3
 800efaa:	2600      	movs	r6, #0
 800efac:	341a      	adds	r4, #26
 800efae:	42b5      	cmp	r5, r6
 800efb0:	d11a      	bne.n	800efe8 <_printf_common+0xc8>
 800efb2:	2000      	movs	r0, #0
 800efb4:	e008      	b.n	800efc8 <_printf_common+0xa8>
 800efb6:	2301      	movs	r3, #1
 800efb8:	4652      	mov	r2, sl
 800efba:	4641      	mov	r1, r8
 800efbc:	4638      	mov	r0, r7
 800efbe:	47c8      	blx	r9
 800efc0:	3001      	adds	r0, #1
 800efc2:	d103      	bne.n	800efcc <_printf_common+0xac>
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295
 800efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efcc:	3501      	adds	r5, #1
 800efce:	e7c6      	b.n	800ef5e <_printf_common+0x3e>
 800efd0:	18e1      	adds	r1, r4, r3
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	2030      	movs	r0, #48	@ 0x30
 800efd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800efda:	4422      	add	r2, r4
 800efdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800efe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800efe4:	3302      	adds	r3, #2
 800efe6:	e7c7      	b.n	800ef78 <_printf_common+0x58>
 800efe8:	2301      	movs	r3, #1
 800efea:	4622      	mov	r2, r4
 800efec:	4641      	mov	r1, r8
 800efee:	4638      	mov	r0, r7
 800eff0:	47c8      	blx	r9
 800eff2:	3001      	adds	r0, #1
 800eff4:	d0e6      	beq.n	800efc4 <_printf_common+0xa4>
 800eff6:	3601      	adds	r6, #1
 800eff8:	e7d9      	b.n	800efae <_printf_common+0x8e>
	...

0800effc <_printf_i>:
 800effc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	7e0f      	ldrb	r7, [r1, #24]
 800f002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f004:	2f78      	cmp	r7, #120	@ 0x78
 800f006:	4691      	mov	r9, r2
 800f008:	4680      	mov	r8, r0
 800f00a:	460c      	mov	r4, r1
 800f00c:	469a      	mov	sl, r3
 800f00e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f012:	d807      	bhi.n	800f024 <_printf_i+0x28>
 800f014:	2f62      	cmp	r7, #98	@ 0x62
 800f016:	d80a      	bhi.n	800f02e <_printf_i+0x32>
 800f018:	2f00      	cmp	r7, #0
 800f01a:	f000 80d1 	beq.w	800f1c0 <_printf_i+0x1c4>
 800f01e:	2f58      	cmp	r7, #88	@ 0x58
 800f020:	f000 80b8 	beq.w	800f194 <_printf_i+0x198>
 800f024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f02c:	e03a      	b.n	800f0a4 <_printf_i+0xa8>
 800f02e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f032:	2b15      	cmp	r3, #21
 800f034:	d8f6      	bhi.n	800f024 <_printf_i+0x28>
 800f036:	a101      	add	r1, pc, #4	@ (adr r1, 800f03c <_printf_i+0x40>)
 800f038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f03c:	0800f095 	.word	0x0800f095
 800f040:	0800f0a9 	.word	0x0800f0a9
 800f044:	0800f025 	.word	0x0800f025
 800f048:	0800f025 	.word	0x0800f025
 800f04c:	0800f025 	.word	0x0800f025
 800f050:	0800f025 	.word	0x0800f025
 800f054:	0800f0a9 	.word	0x0800f0a9
 800f058:	0800f025 	.word	0x0800f025
 800f05c:	0800f025 	.word	0x0800f025
 800f060:	0800f025 	.word	0x0800f025
 800f064:	0800f025 	.word	0x0800f025
 800f068:	0800f1a7 	.word	0x0800f1a7
 800f06c:	0800f0d3 	.word	0x0800f0d3
 800f070:	0800f161 	.word	0x0800f161
 800f074:	0800f025 	.word	0x0800f025
 800f078:	0800f025 	.word	0x0800f025
 800f07c:	0800f1c9 	.word	0x0800f1c9
 800f080:	0800f025 	.word	0x0800f025
 800f084:	0800f0d3 	.word	0x0800f0d3
 800f088:	0800f025 	.word	0x0800f025
 800f08c:	0800f025 	.word	0x0800f025
 800f090:	0800f169 	.word	0x0800f169
 800f094:	6833      	ldr	r3, [r6, #0]
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	6032      	str	r2, [r6, #0]
 800f09c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e09c      	b.n	800f1e2 <_printf_i+0x1e6>
 800f0a8:	6833      	ldr	r3, [r6, #0]
 800f0aa:	6820      	ldr	r0, [r4, #0]
 800f0ac:	1d19      	adds	r1, r3, #4
 800f0ae:	6031      	str	r1, [r6, #0]
 800f0b0:	0606      	lsls	r6, r0, #24
 800f0b2:	d501      	bpl.n	800f0b8 <_printf_i+0xbc>
 800f0b4:	681d      	ldr	r5, [r3, #0]
 800f0b6:	e003      	b.n	800f0c0 <_printf_i+0xc4>
 800f0b8:	0645      	lsls	r5, r0, #25
 800f0ba:	d5fb      	bpl.n	800f0b4 <_printf_i+0xb8>
 800f0bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f0c0:	2d00      	cmp	r5, #0
 800f0c2:	da03      	bge.n	800f0cc <_printf_i+0xd0>
 800f0c4:	232d      	movs	r3, #45	@ 0x2d
 800f0c6:	426d      	negs	r5, r5
 800f0c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0cc:	4858      	ldr	r0, [pc, #352]	@ (800f230 <_printf_i+0x234>)
 800f0ce:	230a      	movs	r3, #10
 800f0d0:	e011      	b.n	800f0f6 <_printf_i+0xfa>
 800f0d2:	6821      	ldr	r1, [r4, #0]
 800f0d4:	6833      	ldr	r3, [r6, #0]
 800f0d6:	0608      	lsls	r0, r1, #24
 800f0d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f0dc:	d402      	bmi.n	800f0e4 <_printf_i+0xe8>
 800f0de:	0649      	lsls	r1, r1, #25
 800f0e0:	bf48      	it	mi
 800f0e2:	b2ad      	uxthmi	r5, r5
 800f0e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0e6:	4852      	ldr	r0, [pc, #328]	@ (800f230 <_printf_i+0x234>)
 800f0e8:	6033      	str	r3, [r6, #0]
 800f0ea:	bf14      	ite	ne
 800f0ec:	230a      	movne	r3, #10
 800f0ee:	2308      	moveq	r3, #8
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f0f6:	6866      	ldr	r6, [r4, #4]
 800f0f8:	60a6      	str	r6, [r4, #8]
 800f0fa:	2e00      	cmp	r6, #0
 800f0fc:	db05      	blt.n	800f10a <_printf_i+0x10e>
 800f0fe:	6821      	ldr	r1, [r4, #0]
 800f100:	432e      	orrs	r6, r5
 800f102:	f021 0104 	bic.w	r1, r1, #4
 800f106:	6021      	str	r1, [r4, #0]
 800f108:	d04b      	beq.n	800f1a2 <_printf_i+0x1a6>
 800f10a:	4616      	mov	r6, r2
 800f10c:	fbb5 f1f3 	udiv	r1, r5, r3
 800f110:	fb03 5711 	mls	r7, r3, r1, r5
 800f114:	5dc7      	ldrb	r7, [r0, r7]
 800f116:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f11a:	462f      	mov	r7, r5
 800f11c:	42bb      	cmp	r3, r7
 800f11e:	460d      	mov	r5, r1
 800f120:	d9f4      	bls.n	800f10c <_printf_i+0x110>
 800f122:	2b08      	cmp	r3, #8
 800f124:	d10b      	bne.n	800f13e <_printf_i+0x142>
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	07df      	lsls	r7, r3, #31
 800f12a:	d508      	bpl.n	800f13e <_printf_i+0x142>
 800f12c:	6923      	ldr	r3, [r4, #16]
 800f12e:	6861      	ldr	r1, [r4, #4]
 800f130:	4299      	cmp	r1, r3
 800f132:	bfde      	ittt	le
 800f134:	2330      	movle	r3, #48	@ 0x30
 800f136:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f13a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f13e:	1b92      	subs	r2, r2, r6
 800f140:	6122      	str	r2, [r4, #16]
 800f142:	f8cd a000 	str.w	sl, [sp]
 800f146:	464b      	mov	r3, r9
 800f148:	aa03      	add	r2, sp, #12
 800f14a:	4621      	mov	r1, r4
 800f14c:	4640      	mov	r0, r8
 800f14e:	f7ff fee7 	bl	800ef20 <_printf_common>
 800f152:	3001      	adds	r0, #1
 800f154:	d14a      	bne.n	800f1ec <_printf_i+0x1f0>
 800f156:	f04f 30ff 	mov.w	r0, #4294967295
 800f15a:	b004      	add	sp, #16
 800f15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	f043 0320 	orr.w	r3, r3, #32
 800f166:	6023      	str	r3, [r4, #0]
 800f168:	4832      	ldr	r0, [pc, #200]	@ (800f234 <_printf_i+0x238>)
 800f16a:	2778      	movs	r7, #120	@ 0x78
 800f16c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f170:	6823      	ldr	r3, [r4, #0]
 800f172:	6831      	ldr	r1, [r6, #0]
 800f174:	061f      	lsls	r7, r3, #24
 800f176:	f851 5b04 	ldr.w	r5, [r1], #4
 800f17a:	d402      	bmi.n	800f182 <_printf_i+0x186>
 800f17c:	065f      	lsls	r7, r3, #25
 800f17e:	bf48      	it	mi
 800f180:	b2ad      	uxthmi	r5, r5
 800f182:	6031      	str	r1, [r6, #0]
 800f184:	07d9      	lsls	r1, r3, #31
 800f186:	bf44      	itt	mi
 800f188:	f043 0320 	orrmi.w	r3, r3, #32
 800f18c:	6023      	strmi	r3, [r4, #0]
 800f18e:	b11d      	cbz	r5, 800f198 <_printf_i+0x19c>
 800f190:	2310      	movs	r3, #16
 800f192:	e7ad      	b.n	800f0f0 <_printf_i+0xf4>
 800f194:	4826      	ldr	r0, [pc, #152]	@ (800f230 <_printf_i+0x234>)
 800f196:	e7e9      	b.n	800f16c <_printf_i+0x170>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	f023 0320 	bic.w	r3, r3, #32
 800f19e:	6023      	str	r3, [r4, #0]
 800f1a0:	e7f6      	b.n	800f190 <_printf_i+0x194>
 800f1a2:	4616      	mov	r6, r2
 800f1a4:	e7bd      	b.n	800f122 <_printf_i+0x126>
 800f1a6:	6833      	ldr	r3, [r6, #0]
 800f1a8:	6825      	ldr	r5, [r4, #0]
 800f1aa:	6961      	ldr	r1, [r4, #20]
 800f1ac:	1d18      	adds	r0, r3, #4
 800f1ae:	6030      	str	r0, [r6, #0]
 800f1b0:	062e      	lsls	r6, r5, #24
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	d501      	bpl.n	800f1ba <_printf_i+0x1be>
 800f1b6:	6019      	str	r1, [r3, #0]
 800f1b8:	e002      	b.n	800f1c0 <_printf_i+0x1c4>
 800f1ba:	0668      	lsls	r0, r5, #25
 800f1bc:	d5fb      	bpl.n	800f1b6 <_printf_i+0x1ba>
 800f1be:	8019      	strh	r1, [r3, #0]
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	6123      	str	r3, [r4, #16]
 800f1c4:	4616      	mov	r6, r2
 800f1c6:	e7bc      	b.n	800f142 <_printf_i+0x146>
 800f1c8:	6833      	ldr	r3, [r6, #0]
 800f1ca:	1d1a      	adds	r2, r3, #4
 800f1cc:	6032      	str	r2, [r6, #0]
 800f1ce:	681e      	ldr	r6, [r3, #0]
 800f1d0:	6862      	ldr	r2, [r4, #4]
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	f7f0 fffb 	bl	80001d0 <memchr>
 800f1da:	b108      	cbz	r0, 800f1e0 <_printf_i+0x1e4>
 800f1dc:	1b80      	subs	r0, r0, r6
 800f1de:	6060      	str	r0, [r4, #4]
 800f1e0:	6863      	ldr	r3, [r4, #4]
 800f1e2:	6123      	str	r3, [r4, #16]
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1ea:	e7aa      	b.n	800f142 <_printf_i+0x146>
 800f1ec:	6923      	ldr	r3, [r4, #16]
 800f1ee:	4632      	mov	r2, r6
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	47d0      	blx	sl
 800f1f6:	3001      	adds	r0, #1
 800f1f8:	d0ad      	beq.n	800f156 <_printf_i+0x15a>
 800f1fa:	6823      	ldr	r3, [r4, #0]
 800f1fc:	079b      	lsls	r3, r3, #30
 800f1fe:	d413      	bmi.n	800f228 <_printf_i+0x22c>
 800f200:	68e0      	ldr	r0, [r4, #12]
 800f202:	9b03      	ldr	r3, [sp, #12]
 800f204:	4298      	cmp	r0, r3
 800f206:	bfb8      	it	lt
 800f208:	4618      	movlt	r0, r3
 800f20a:	e7a6      	b.n	800f15a <_printf_i+0x15e>
 800f20c:	2301      	movs	r3, #1
 800f20e:	4632      	mov	r2, r6
 800f210:	4649      	mov	r1, r9
 800f212:	4640      	mov	r0, r8
 800f214:	47d0      	blx	sl
 800f216:	3001      	adds	r0, #1
 800f218:	d09d      	beq.n	800f156 <_printf_i+0x15a>
 800f21a:	3501      	adds	r5, #1
 800f21c:	68e3      	ldr	r3, [r4, #12]
 800f21e:	9903      	ldr	r1, [sp, #12]
 800f220:	1a5b      	subs	r3, r3, r1
 800f222:	42ab      	cmp	r3, r5
 800f224:	dcf2      	bgt.n	800f20c <_printf_i+0x210>
 800f226:	e7eb      	b.n	800f200 <_printf_i+0x204>
 800f228:	2500      	movs	r5, #0
 800f22a:	f104 0619 	add.w	r6, r4, #25
 800f22e:	e7f5      	b.n	800f21c <_printf_i+0x220>
 800f230:	0803a59d 	.word	0x0803a59d
 800f234:	0803a5ae 	.word	0x0803a5ae

0800f238 <__sflush_r>:
 800f238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f240:	0716      	lsls	r6, r2, #28
 800f242:	4605      	mov	r5, r0
 800f244:	460c      	mov	r4, r1
 800f246:	d454      	bmi.n	800f2f2 <__sflush_r+0xba>
 800f248:	684b      	ldr	r3, [r1, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	dc02      	bgt.n	800f254 <__sflush_r+0x1c>
 800f24e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f250:	2b00      	cmp	r3, #0
 800f252:	dd48      	ble.n	800f2e6 <__sflush_r+0xae>
 800f254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f256:	2e00      	cmp	r6, #0
 800f258:	d045      	beq.n	800f2e6 <__sflush_r+0xae>
 800f25a:	2300      	movs	r3, #0
 800f25c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f260:	682f      	ldr	r7, [r5, #0]
 800f262:	6a21      	ldr	r1, [r4, #32]
 800f264:	602b      	str	r3, [r5, #0]
 800f266:	d030      	beq.n	800f2ca <__sflush_r+0x92>
 800f268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	0759      	lsls	r1, r3, #29
 800f26e:	d505      	bpl.n	800f27c <__sflush_r+0x44>
 800f270:	6863      	ldr	r3, [r4, #4]
 800f272:	1ad2      	subs	r2, r2, r3
 800f274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f276:	b10b      	cbz	r3, 800f27c <__sflush_r+0x44>
 800f278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f27a:	1ad2      	subs	r2, r2, r3
 800f27c:	2300      	movs	r3, #0
 800f27e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f280:	6a21      	ldr	r1, [r4, #32]
 800f282:	4628      	mov	r0, r5
 800f284:	47b0      	blx	r6
 800f286:	1c43      	adds	r3, r0, #1
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	d106      	bne.n	800f29a <__sflush_r+0x62>
 800f28c:	6829      	ldr	r1, [r5, #0]
 800f28e:	291d      	cmp	r1, #29
 800f290:	d82b      	bhi.n	800f2ea <__sflush_r+0xb2>
 800f292:	4a2a      	ldr	r2, [pc, #168]	@ (800f33c <__sflush_r+0x104>)
 800f294:	40ca      	lsrs	r2, r1
 800f296:	07d6      	lsls	r6, r2, #31
 800f298:	d527      	bpl.n	800f2ea <__sflush_r+0xb2>
 800f29a:	2200      	movs	r2, #0
 800f29c:	6062      	str	r2, [r4, #4]
 800f29e:	04d9      	lsls	r1, r3, #19
 800f2a0:	6922      	ldr	r2, [r4, #16]
 800f2a2:	6022      	str	r2, [r4, #0]
 800f2a4:	d504      	bpl.n	800f2b0 <__sflush_r+0x78>
 800f2a6:	1c42      	adds	r2, r0, #1
 800f2a8:	d101      	bne.n	800f2ae <__sflush_r+0x76>
 800f2aa:	682b      	ldr	r3, [r5, #0]
 800f2ac:	b903      	cbnz	r3, 800f2b0 <__sflush_r+0x78>
 800f2ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2b2:	602f      	str	r7, [r5, #0]
 800f2b4:	b1b9      	cbz	r1, 800f2e6 <__sflush_r+0xae>
 800f2b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2ba:	4299      	cmp	r1, r3
 800f2bc:	d002      	beq.n	800f2c4 <__sflush_r+0x8c>
 800f2be:	4628      	mov	r0, r5
 800f2c0:	f7ff fbf4 	bl	800eaac <_free_r>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2c8:	e00d      	b.n	800f2e6 <__sflush_r+0xae>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	47b0      	blx	r6
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	1c50      	adds	r0, r2, #1
 800f2d4:	d1c9      	bne.n	800f26a <__sflush_r+0x32>
 800f2d6:	682b      	ldr	r3, [r5, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d0c6      	beq.n	800f26a <__sflush_r+0x32>
 800f2dc:	2b1d      	cmp	r3, #29
 800f2de:	d001      	beq.n	800f2e4 <__sflush_r+0xac>
 800f2e0:	2b16      	cmp	r3, #22
 800f2e2:	d11e      	bne.n	800f322 <__sflush_r+0xea>
 800f2e4:	602f      	str	r7, [r5, #0]
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	e022      	b.n	800f330 <__sflush_r+0xf8>
 800f2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2ee:	b21b      	sxth	r3, r3
 800f2f0:	e01b      	b.n	800f32a <__sflush_r+0xf2>
 800f2f2:	690f      	ldr	r7, [r1, #16]
 800f2f4:	2f00      	cmp	r7, #0
 800f2f6:	d0f6      	beq.n	800f2e6 <__sflush_r+0xae>
 800f2f8:	0793      	lsls	r3, r2, #30
 800f2fa:	680e      	ldr	r6, [r1, #0]
 800f2fc:	bf08      	it	eq
 800f2fe:	694b      	ldreq	r3, [r1, #20]
 800f300:	600f      	str	r7, [r1, #0]
 800f302:	bf18      	it	ne
 800f304:	2300      	movne	r3, #0
 800f306:	eba6 0807 	sub.w	r8, r6, r7
 800f30a:	608b      	str	r3, [r1, #8]
 800f30c:	f1b8 0f00 	cmp.w	r8, #0
 800f310:	dde9      	ble.n	800f2e6 <__sflush_r+0xae>
 800f312:	6a21      	ldr	r1, [r4, #32]
 800f314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f316:	4643      	mov	r3, r8
 800f318:	463a      	mov	r2, r7
 800f31a:	4628      	mov	r0, r5
 800f31c:	47b0      	blx	r6
 800f31e:	2800      	cmp	r0, #0
 800f320:	dc08      	bgt.n	800f334 <__sflush_r+0xfc>
 800f322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f32a:	81a3      	strh	r3, [r4, #12]
 800f32c:	f04f 30ff 	mov.w	r0, #4294967295
 800f330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f334:	4407      	add	r7, r0
 800f336:	eba8 0800 	sub.w	r8, r8, r0
 800f33a:	e7e7      	b.n	800f30c <__sflush_r+0xd4>
 800f33c:	20400001 	.word	0x20400001

0800f340 <_fflush_r>:
 800f340:	b538      	push	{r3, r4, r5, lr}
 800f342:	690b      	ldr	r3, [r1, #16]
 800f344:	4605      	mov	r5, r0
 800f346:	460c      	mov	r4, r1
 800f348:	b913      	cbnz	r3, 800f350 <_fflush_r+0x10>
 800f34a:	2500      	movs	r5, #0
 800f34c:	4628      	mov	r0, r5
 800f34e:	bd38      	pop	{r3, r4, r5, pc}
 800f350:	b118      	cbz	r0, 800f35a <_fflush_r+0x1a>
 800f352:	6a03      	ldr	r3, [r0, #32]
 800f354:	b90b      	cbnz	r3, 800f35a <_fflush_r+0x1a>
 800f356:	f7ff f933 	bl	800e5c0 <__sinit>
 800f35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d0f3      	beq.n	800f34a <_fflush_r+0xa>
 800f362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f364:	07d0      	lsls	r0, r2, #31
 800f366:	d404      	bmi.n	800f372 <_fflush_r+0x32>
 800f368:	0599      	lsls	r1, r3, #22
 800f36a:	d402      	bmi.n	800f372 <_fflush_r+0x32>
 800f36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f36e:	f7ff fb8c 	bl	800ea8a <__retarget_lock_acquire_recursive>
 800f372:	4628      	mov	r0, r5
 800f374:	4621      	mov	r1, r4
 800f376:	f7ff ff5f 	bl	800f238 <__sflush_r>
 800f37a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f37c:	07da      	lsls	r2, r3, #31
 800f37e:	4605      	mov	r5, r0
 800f380:	d4e4      	bmi.n	800f34c <_fflush_r+0xc>
 800f382:	89a3      	ldrh	r3, [r4, #12]
 800f384:	059b      	lsls	r3, r3, #22
 800f386:	d4e1      	bmi.n	800f34c <_fflush_r+0xc>
 800f388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f38a:	f7ff fb7f 	bl	800ea8c <__retarget_lock_release_recursive>
 800f38e:	e7dd      	b.n	800f34c <_fflush_r+0xc>

0800f390 <__swhatbuf_r>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	460c      	mov	r4, r1
 800f394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f398:	2900      	cmp	r1, #0
 800f39a:	b096      	sub	sp, #88	@ 0x58
 800f39c:	4615      	mov	r5, r2
 800f39e:	461e      	mov	r6, r3
 800f3a0:	da0d      	bge.n	800f3be <__swhatbuf_r+0x2e>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3a8:	f04f 0100 	mov.w	r1, #0
 800f3ac:	bf14      	ite	ne
 800f3ae:	2340      	movne	r3, #64	@ 0x40
 800f3b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	6031      	str	r1, [r6, #0]
 800f3b8:	602b      	str	r3, [r5, #0]
 800f3ba:	b016      	add	sp, #88	@ 0x58
 800f3bc:	bd70      	pop	{r4, r5, r6, pc}
 800f3be:	466a      	mov	r2, sp
 800f3c0:	f000 f848 	bl	800f454 <_fstat_r>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	dbec      	blt.n	800f3a2 <__swhatbuf_r+0x12>
 800f3c8:	9901      	ldr	r1, [sp, #4]
 800f3ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f3ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3d2:	4259      	negs	r1, r3
 800f3d4:	4159      	adcs	r1, r3
 800f3d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3da:	e7eb      	b.n	800f3b4 <__swhatbuf_r+0x24>

0800f3dc <__smakebuf_r>:
 800f3dc:	898b      	ldrh	r3, [r1, #12]
 800f3de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3e0:	079d      	lsls	r5, r3, #30
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	460c      	mov	r4, r1
 800f3e6:	d507      	bpl.n	800f3f8 <__smakebuf_r+0x1c>
 800f3e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	6123      	str	r3, [r4, #16]
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	6163      	str	r3, [r4, #20]
 800f3f4:	b003      	add	sp, #12
 800f3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f8:	ab01      	add	r3, sp, #4
 800f3fa:	466a      	mov	r2, sp
 800f3fc:	f7ff ffc8 	bl	800f390 <__swhatbuf_r>
 800f400:	9f00      	ldr	r7, [sp, #0]
 800f402:	4605      	mov	r5, r0
 800f404:	4639      	mov	r1, r7
 800f406:	4630      	mov	r0, r6
 800f408:	f7ff fbbc 	bl	800eb84 <_malloc_r>
 800f40c:	b948      	cbnz	r0, 800f422 <__smakebuf_r+0x46>
 800f40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f412:	059a      	lsls	r2, r3, #22
 800f414:	d4ee      	bmi.n	800f3f4 <__smakebuf_r+0x18>
 800f416:	f023 0303 	bic.w	r3, r3, #3
 800f41a:	f043 0302 	orr.w	r3, r3, #2
 800f41e:	81a3      	strh	r3, [r4, #12]
 800f420:	e7e2      	b.n	800f3e8 <__smakebuf_r+0xc>
 800f422:	89a3      	ldrh	r3, [r4, #12]
 800f424:	6020      	str	r0, [r4, #0]
 800f426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f42a:	81a3      	strh	r3, [r4, #12]
 800f42c:	9b01      	ldr	r3, [sp, #4]
 800f42e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f432:	b15b      	cbz	r3, 800f44c <__smakebuf_r+0x70>
 800f434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f438:	4630      	mov	r0, r6
 800f43a:	f000 f81d 	bl	800f478 <_isatty_r>
 800f43e:	b128      	cbz	r0, 800f44c <__smakebuf_r+0x70>
 800f440:	89a3      	ldrh	r3, [r4, #12]
 800f442:	f023 0303 	bic.w	r3, r3, #3
 800f446:	f043 0301 	orr.w	r3, r3, #1
 800f44a:	81a3      	strh	r3, [r4, #12]
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	431d      	orrs	r5, r3
 800f450:	81a5      	strh	r5, [r4, #12]
 800f452:	e7cf      	b.n	800f3f4 <__smakebuf_r+0x18>

0800f454 <_fstat_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	4d07      	ldr	r5, [pc, #28]	@ (800f474 <_fstat_r+0x20>)
 800f458:	2300      	movs	r3, #0
 800f45a:	4604      	mov	r4, r0
 800f45c:	4608      	mov	r0, r1
 800f45e:	4611      	mov	r1, r2
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	f7f1 fe7c 	bl	800115e <_fstat>
 800f466:	1c43      	adds	r3, r0, #1
 800f468:	d102      	bne.n	800f470 <_fstat_r+0x1c>
 800f46a:	682b      	ldr	r3, [r5, #0]
 800f46c:	b103      	cbz	r3, 800f470 <_fstat_r+0x1c>
 800f46e:	6023      	str	r3, [r4, #0]
 800f470:	bd38      	pop	{r3, r4, r5, pc}
 800f472:	bf00      	nop
 800f474:	20005b10 	.word	0x20005b10

0800f478 <_isatty_r>:
 800f478:	b538      	push	{r3, r4, r5, lr}
 800f47a:	4d06      	ldr	r5, [pc, #24]	@ (800f494 <_isatty_r+0x1c>)
 800f47c:	2300      	movs	r3, #0
 800f47e:	4604      	mov	r4, r0
 800f480:	4608      	mov	r0, r1
 800f482:	602b      	str	r3, [r5, #0]
 800f484:	f7f1 fe7b 	bl	800117e <_isatty>
 800f488:	1c43      	adds	r3, r0, #1
 800f48a:	d102      	bne.n	800f492 <_isatty_r+0x1a>
 800f48c:	682b      	ldr	r3, [r5, #0]
 800f48e:	b103      	cbz	r3, 800f492 <_isatty_r+0x1a>
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	bd38      	pop	{r3, r4, r5, pc}
 800f494:	20005b10 	.word	0x20005b10

0800f498 <_sbrk_r>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4d06      	ldr	r5, [pc, #24]	@ (800f4b4 <_sbrk_r+0x1c>)
 800f49c:	2300      	movs	r3, #0
 800f49e:	4604      	mov	r4, r0
 800f4a0:	4608      	mov	r0, r1
 800f4a2:	602b      	str	r3, [r5, #0]
 800f4a4:	f7f1 fe84 	bl	80011b0 <_sbrk>
 800f4a8:	1c43      	adds	r3, r0, #1
 800f4aa:	d102      	bne.n	800f4b2 <_sbrk_r+0x1a>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	b103      	cbz	r3, 800f4b2 <_sbrk_r+0x1a>
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	bd38      	pop	{r3, r4, r5, pc}
 800f4b4:	20005b10 	.word	0x20005b10

0800f4b8 <_init>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	bf00      	nop
 800f4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4be:	bc08      	pop	{r3}
 800f4c0:	469e      	mov	lr, r3
 800f4c2:	4770      	bx	lr

0800f4c4 <_fini>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	bf00      	nop
 800f4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ca:	bc08      	pop	{r3}
 800f4cc:	469e      	mov	lr, r3
 800f4ce:	4770      	bx	lr
